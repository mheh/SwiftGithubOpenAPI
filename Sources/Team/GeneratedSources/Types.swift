// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Team add
    ///
    /// - Remark: HTTP `POST /team-add`.
    /// - Remark: Generated from `#/paths//team-add/post(team-add)`.
    func teamAdd(_ input: Operations.TeamAdd.Input) async throws -> Operations.TeamAdd.Output
    /// Team added to repository
    ///
    /// - Remark: HTTP `POST /team-added-to-repository`.
    /// - Remark: Generated from `#/paths//team-added-to-repository/post(team/added-to-repository)`.
    func teamAddedToRepository(_ input: Operations.TeamAddedToRepository.Input) async throws -> Operations.TeamAddedToRepository.Output
    /// Team created
    ///
    /// - Remark: HTTP `POST /team-created`.
    /// - Remark: Generated from `#/paths//team-created/post(team/created)`.
    func teamCreated(_ input: Operations.TeamCreated.Input) async throws -> Operations.TeamCreated.Output
    /// Team deleted
    ///
    /// - Remark: HTTP `POST /team-deleted`.
    /// - Remark: Generated from `#/paths//team-deleted/post(team/deleted)`.
    func teamDeleted(_ input: Operations.TeamDeleted.Input) async throws -> Operations.TeamDeleted.Output
    /// Team edited
    ///
    /// - Remark: HTTP `POST /team-edited`.
    /// - Remark: Generated from `#/paths//team-edited/post(team/edited)`.
    func teamEdited(_ input: Operations.TeamEdited.Input) async throws -> Operations.TeamEdited.Output
    /// Team removed from repository
    ///
    /// - Remark: HTTP `POST /team-removed-from-repository`.
    /// - Remark: Generated from `#/paths//team-removed-from-repository/post(team/removed-from-repository)`.
    func teamRemovedFromRepository(_ input: Operations.TeamRemovedFromRepository.Input) async throws -> Operations.TeamRemovedFromRepository.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Team add
    ///
    /// - Remark: HTTP `POST /team-add`.
    /// - Remark: Generated from `#/paths//team-add/post(team-add)`.
    public func teamAdd(
        headers: Operations.TeamAdd.Input.Headers = .init(),
        body: Operations.TeamAdd.Input.Body
    ) async throws -> Operations.TeamAdd.Output {
        try await teamAdd(Operations.TeamAdd.Input(
            headers: headers,
            body: body
        ))
    }
    /// Team added to repository
    ///
    /// - Remark: HTTP `POST /team-added-to-repository`.
    /// - Remark: Generated from `#/paths//team-added-to-repository/post(team/added-to-repository)`.
    public func teamAddedToRepository(
        headers: Operations.TeamAddedToRepository.Input.Headers = .init(),
        body: Operations.TeamAddedToRepository.Input.Body
    ) async throws -> Operations.TeamAddedToRepository.Output {
        try await teamAddedToRepository(Operations.TeamAddedToRepository.Input(
            headers: headers,
            body: body
        ))
    }
    /// Team created
    ///
    /// - Remark: HTTP `POST /team-created`.
    /// - Remark: Generated from `#/paths//team-created/post(team/created)`.
    public func teamCreated(
        headers: Operations.TeamCreated.Input.Headers = .init(),
        body: Operations.TeamCreated.Input.Body
    ) async throws -> Operations.TeamCreated.Output {
        try await teamCreated(Operations.TeamCreated.Input(
            headers: headers,
            body: body
        ))
    }
    /// Team deleted
    ///
    /// - Remark: HTTP `POST /team-deleted`.
    /// - Remark: Generated from `#/paths//team-deleted/post(team/deleted)`.
    public func teamDeleted(
        headers: Operations.TeamDeleted.Input.Headers = .init(),
        body: Operations.TeamDeleted.Input.Body
    ) async throws -> Operations.TeamDeleted.Output {
        try await teamDeleted(Operations.TeamDeleted.Input(
            headers: headers,
            body: body
        ))
    }
    /// Team edited
    ///
    /// - Remark: HTTP `POST /team-edited`.
    /// - Remark: Generated from `#/paths//team-edited/post(team/edited)`.
    public func teamEdited(
        headers: Operations.TeamEdited.Input.Headers = .init(),
        body: Operations.TeamEdited.Input.Body
    ) async throws -> Operations.TeamEdited.Output {
        try await teamEdited(Operations.TeamEdited.Input(
            headers: headers,
            body: body
        ))
    }
    /// Team removed from repository
    ///
    /// - Remark: HTTP `POST /team-removed-from-repository`.
    /// - Remark: Generated from `#/paths//team-removed-from-repository/post(team/removed-from-repository)`.
    public func teamRemovedFromRepository(
        headers: Operations.TeamRemovedFromRepository.Input.Headers = .init(),
        body: Operations.TeamRemovedFromRepository.Input.Body
    ) async throws -> Operations.TeamRemovedFromRepository.Output {
        try await teamRemovedFromRepository(Operations.TeamRemovedFromRepository.Input(
            headers: headers,
            body: body
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public enum Server1 {
        public static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://api.github.com",
                variables: []
            )
        }
    }
    @available(*, deprecated, renamed: "Servers.Server1.url")
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.github.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// Simple User
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-simple-user`.
        public struct NullableSimpleUser: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/node_id`.
            public var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/avatar_url`.
            public var avatarUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gravatar_id`.
            public var gravatarId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/html_url`.
            public var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/followers_url`.
            public var followersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/following_url`.
            public var followingUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gists_url`.
            public var gistsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_url`.
            public var starredUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/subscriptions_url`.
            public var subscriptionsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/organizations_url`.
            public var organizationsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/repos_url`.
            public var reposUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/events_url`.
            public var eventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/received_events_url`.
            public var receivedEventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/site_admin`.
            public var siteAdmin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_at`.
            public var starredAt: Swift.String?
            /// Creates a new `NullableSimpleUser`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - nodeId:
            ///   - avatarUrl:
            ///   - gravatarId:
            ///   - url:
            ///   - htmlUrl:
            ///   - followersUrl:
            ///   - followingUrl:
            ///   - gistsUrl:
            ///   - starredUrl:
            ///   - subscriptionsUrl:
            ///   - organizationsUrl:
            ///   - reposUrl:
            ///   - eventsUrl:
            ///   - receivedEventsUrl:
            ///   - _type:
            ///   - siteAdmin:
            ///   - starredAt:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int,
                nodeId: Swift.String,
                avatarUrl: Swift.String,
                gravatarId: Swift.String? = nil,
                url: Swift.String,
                htmlUrl: Swift.String,
                followersUrl: Swift.String,
                followingUrl: Swift.String,
                gistsUrl: Swift.String,
                starredUrl: Swift.String,
                subscriptionsUrl: Swift.String,
                organizationsUrl: Swift.String,
                reposUrl: Swift.String,
                eventsUrl: Swift.String,
                receivedEventsUrl: Swift.String,
                _type: Swift.String,
                siteAdmin: Swift.Bool,
                starredAt: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.nodeId = nodeId
                self.avatarUrl = avatarUrl
                self.gravatarId = gravatarId
                self.url = url
                self.htmlUrl = htmlUrl
                self.followersUrl = followersUrl
                self.followingUrl = followingUrl
                self.gistsUrl = gistsUrl
                self.starredUrl = starredUrl
                self.subscriptionsUrl = subscriptionsUrl
                self.organizationsUrl = organizationsUrl
                self.reposUrl = reposUrl
                self.eventsUrl = eventsUrl
                self.receivedEventsUrl = receivedEventsUrl
                self._type = _type
                self.siteAdmin = siteAdmin
                self.starredAt = starredAt
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case nodeId = "node_id"
                case avatarUrl = "avatar_url"
                case gravatarId = "gravatar_id"
                case url
                case htmlUrl = "html_url"
                case followersUrl = "followers_url"
                case followingUrl = "following_url"
                case gistsUrl = "gists_url"
                case starredUrl = "starred_url"
                case subscriptionsUrl = "subscriptions_url"
                case organizationsUrl = "organizations_url"
                case reposUrl = "repos_url"
                case eventsUrl = "events_url"
                case receivedEventsUrl = "received_events_url"
                case _type = "type"
                case siteAdmin = "site_admin"
                case starredAt = "starred_at"
            }
        }
        /// Simple User
        ///
        /// - Remark: Generated from `#/components/schemas/simple-user`.
        public struct SimpleUser: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/simple-user/node_id`.
            public var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/avatar_url`.
            public var avatarUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gravatar_id`.
            public var gravatarId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/html_url`.
            public var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/followers_url`.
            public var followersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/following_url`.
            public var followingUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gists_url`.
            public var gistsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_url`.
            public var starredUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/subscriptions_url`.
            public var subscriptionsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/organizations_url`.
            public var organizationsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/repos_url`.
            public var reposUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/events_url`.
            public var eventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/received_events_url`.
            public var receivedEventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/site_admin`.
            public var siteAdmin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_at`.
            public var starredAt: Swift.String?
            /// Creates a new `SimpleUser`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - nodeId:
            ///   - avatarUrl:
            ///   - gravatarId:
            ///   - url:
            ///   - htmlUrl:
            ///   - followersUrl:
            ///   - followingUrl:
            ///   - gistsUrl:
            ///   - starredUrl:
            ///   - subscriptionsUrl:
            ///   - organizationsUrl:
            ///   - reposUrl:
            ///   - eventsUrl:
            ///   - receivedEventsUrl:
            ///   - _type:
            ///   - siteAdmin:
            ///   - starredAt:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int,
                nodeId: Swift.String,
                avatarUrl: Swift.String,
                gravatarId: Swift.String? = nil,
                url: Swift.String,
                htmlUrl: Swift.String,
                followersUrl: Swift.String,
                followingUrl: Swift.String,
                gistsUrl: Swift.String,
                starredUrl: Swift.String,
                subscriptionsUrl: Swift.String,
                organizationsUrl: Swift.String,
                reposUrl: Swift.String,
                eventsUrl: Swift.String,
                receivedEventsUrl: Swift.String,
                _type: Swift.String,
                siteAdmin: Swift.Bool,
                starredAt: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.nodeId = nodeId
                self.avatarUrl = avatarUrl
                self.gravatarId = gravatarId
                self.url = url
                self.htmlUrl = htmlUrl
                self.followersUrl = followersUrl
                self.followingUrl = followingUrl
                self.gistsUrl = gistsUrl
                self.starredUrl = starredUrl
                self.subscriptionsUrl = subscriptionsUrl
                self.organizationsUrl = organizationsUrl
                self.reposUrl = reposUrl
                self.eventsUrl = eventsUrl
                self.receivedEventsUrl = receivedEventsUrl
                self._type = _type
                self.siteAdmin = siteAdmin
                self.starredAt = starredAt
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case nodeId = "node_id"
                case avatarUrl = "avatar_url"
                case gravatarId = "gravatar_id"
                case url
                case htmlUrl = "html_url"
                case followersUrl = "followers_url"
                case followingUrl = "following_url"
                case gistsUrl = "gists_url"
                case starredUrl = "starred_url"
                case subscriptionsUrl = "subscriptions_url"
                case organizationsUrl = "organizations_url"
                case reposUrl = "repos_url"
                case eventsUrl = "events_url"
                case receivedEventsUrl = "received_events_url"
                case _type = "type"
                case siteAdmin = "site_admin"
                case starredAt = "starred_at"
            }
        }
        /// An enterprise account
        ///
        /// - Remark: Generated from `#/components/schemas/enterprise`.
        public struct Enterprise: Codable, Hashable, Sendable {
            /// A short description of the enterprise.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/enterprise/html_url`.
            public var htmlUrl: Swift.String
            /// The enterprise's website URL.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/website_url`.
            public var websiteUrl: Swift.String?
            /// Unique identifier of the enterprise
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/enterprise/node_id`.
            public var nodeId: Swift.String
            /// The name of the enterprise.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/name`.
            public var name: Swift.String
            /// The slug url identifier for the enterprise.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/slug`.
            public var slug: Swift.String
            /// - Remark: Generated from `#/components/schemas/enterprise/created_at`.
            public var createdAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/enterprise/updated_at`.
            public var updatedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/enterprise/avatar_url`.
            public var avatarUrl: Swift.String
            /// Creates a new `Enterprise`.
            ///
            /// - Parameters:
            ///   - description: A short description of the enterprise.
            ///   - htmlUrl:
            ///   - websiteUrl: The enterprise's website URL.
            ///   - id: Unique identifier of the enterprise
            ///   - nodeId:
            ///   - name: The name of the enterprise.
            ///   - slug: The slug url identifier for the enterprise.
            ///   - createdAt:
            ///   - updatedAt:
            ///   - avatarUrl:
            public init(
                description: Swift.String? = nil,
                htmlUrl: Swift.String,
                websiteUrl: Swift.String? = nil,
                id: Swift.Int,
                nodeId: Swift.String,
                name: Swift.String,
                slug: Swift.String,
                createdAt: Foundation.Date? = nil,
                updatedAt: Foundation.Date? = nil,
                avatarUrl: Swift.String
            ) {
                self.description = description
                self.htmlUrl = htmlUrl
                self.websiteUrl = websiteUrl
                self.id = id
                self.nodeId = nodeId
                self.name = name
                self.slug = slug
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.avatarUrl = avatarUrl
            }
            public enum CodingKeys: String, CodingKey {
                case description
                case htmlUrl = "html_url"
                case websiteUrl = "website_url"
                case id
                case nodeId = "node_id"
                case name
                case slug
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case avatarUrl = "avatar_url"
            }
        }
        /// License Simple
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-license-simple`.
        public struct NullableLicenseSimple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/spdx_id`.
            public var spdxId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/node_id`.
            public var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/html_url`.
            public var htmlUrl: Swift.String?
            /// Creates a new `NullableLicenseSimple`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - url:
            ///   - spdxId:
            ///   - nodeId:
            ///   - htmlUrl:
            public init(
                key: Swift.String,
                name: Swift.String,
                url: Swift.String? = nil,
                spdxId: Swift.String? = nil,
                nodeId: Swift.String,
                htmlUrl: Swift.String? = nil
            ) {
                self.key = key
                self.name = name
                self.url = url
                self.spdxId = spdxId
                self.nodeId = nodeId
                self.htmlUrl = htmlUrl
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case url
                case spdxId = "spdx_id"
                case nodeId = "node_id"
                case htmlUrl = "html_url"
            }
        }
        /// A git repository
        ///
        /// - Remark: Generated from `#/components/schemas/repository`.
        public struct Repository: Codable, Hashable, Sendable {
            /// Unique identifier of the repository
            ///
            /// - Remark: Generated from `#/components/schemas/repository/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/node_id`.
            public var nodeId: Swift.String
            /// The name of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/full_name`.
            public var fullName: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/license`.
            public var license: Components.Schemas.NullableLicenseSimple?
            /// - Remark: Generated from `#/components/schemas/repository/organization`.
            public var organization: Components.Schemas.NullableSimpleUser?
            /// - Remark: Generated from `#/components/schemas/repository/forks`.
            public var forks: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/permissions`.
            public struct PermissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository/permissions/admin`.
                public var admin: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/pull`.
                public var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// Creates a new `PermissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                public init(
                    admin: Swift.Bool,
                    pull: Swift.Bool,
                    triage: Swift.Bool? = nil,
                    push: Swift.Bool,
                    maintain: Swift.Bool? = nil
                ) {
                    self.admin = admin
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                }
                public enum CodingKeys: String, CodingKey {
                    case admin
                    case pull
                    case triage
                    case push
                    case maintain
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository/permissions`.
            public var permissions: Components.Schemas.Repository.PermissionsPayload?
            /// - Remark: Generated from `#/components/schemas/repository/owner`.
            public var owner: Components.Schemas.SimpleUser
            /// Whether the repository is private or public.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/private`.
            public var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/html_url`.
            public var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/fork`.
            public var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/archive_url`.
            public var archiveUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/assignees_url`.
            public var assigneesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/blobs_url`.
            public var blobsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/branches_url`.
            public var branchesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/collaborators_url`.
            public var collaboratorsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/comments_url`.
            public var commentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/commits_url`.
            public var commitsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/compare_url`.
            public var compareUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/contents_url`.
            public var contentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/contributors_url`.
            public var contributorsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/deployments_url`.
            public var deploymentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/downloads_url`.
            public var downloadsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/events_url`.
            public var eventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/forks_url`.
            public var forksUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_commits_url`.
            public var gitCommitsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_refs_url`.
            public var gitRefsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_tags_url`.
            public var gitTagsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_url`.
            public var gitUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issue_comment_url`.
            public var issueCommentUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issue_events_url`.
            public var issueEventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issues_url`.
            public var issuesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/keys_url`.
            public var keysUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/labels_url`.
            public var labelsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/languages_url`.
            public var languagesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/merges_url`.
            public var mergesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/milestones_url`.
            public var milestonesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/notifications_url`.
            public var notificationsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/pulls_url`.
            public var pullsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/releases_url`.
            public var releasesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/ssh_url`.
            public var sshUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/stargazers_url`.
            public var stargazersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/statuses_url`.
            public var statusesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/subscribers_url`.
            public var subscribersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/subscription_url`.
            public var subscriptionUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/tags_url`.
            public var tagsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/teams_url`.
            public var teamsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/trees_url`.
            public var treesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/clone_url`.
            public var cloneUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/mirror_url`.
            public var mirrorUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/hooks_url`.
            public var hooksUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/svn_url`.
            public var svnUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/homepage`.
            public var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/language`.
            public var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/forks_count`.
            public var forksCount: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/stargazers_count`.
            public var stargazersCount: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/watchers_count`.
            public var watchersCount: Swift.Int
            /// The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/size`.
            public var size: Swift.Int
            /// The default branch of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/default_branch`.
            public var defaultBranch: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/open_issues_count`.
            public var openIssuesCount: Swift.Int
            /// Whether this repository acts as a template that can be used to generate new repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/is_template`.
            public var isTemplate: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/topics`.
            public var topics: [Swift.String]?
            /// Whether issues are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_issues`.
            public var hasIssues: Swift.Bool
            /// Whether projects are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_projects`.
            public var hasProjects: Swift.Bool
            /// Whether the wiki is enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_wiki`.
            public var hasWiki: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/has_pages`.
            public var hasPages: Swift.Bool
            /// Whether downloads are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_downloads`.
            public var hasDownloads: Swift.Bool
            /// Whether the repository is archived.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/archived`.
            public var archived: Swift.Bool
            /// Returns whether or not this repository disabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/disabled`.
            public var disabled: Swift.Bool
            /// The repository visibility: public, private, or internal.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/visibility`.
            public var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/pushed_at`.
            public var pushedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/repository/created_at`.
            public var createdAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/repository/updated_at`.
            public var updatedAt: Foundation.Date?
            /// Whether to allow rebase merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_rebase_merge`.
            public var allowRebaseMerge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/template_repository`.
            public struct TemplateRepositoryPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/id`.
                public var id: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/node_id`.
                public var nodeId: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/full_name`.
                public var fullName: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner`.
                public struct OwnerPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/login`.
                    public var login: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/id`.
                    public var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/url`.
                    public var url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/type`.
                    public var _type: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// Creates a new `OwnerPayload`.
                    ///
                    /// - Parameters:
                    ///   - login:
                    ///   - id:
                    ///   - nodeId:
                    ///   - avatarUrl:
                    ///   - gravatarId:
                    ///   - url:
                    ///   - htmlUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - organizationsUrl:
                    ///   - reposUrl:
                    ///   - eventsUrl:
                    ///   - receivedEventsUrl:
                    ///   - _type:
                    ///   - siteAdmin:
                    public init(
                        login: Swift.String? = nil,
                        id: Swift.Int? = nil,
                        nodeId: Swift.String? = nil,
                        avatarUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        url: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        _type: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil
                    ) {
                        self.login = login
                        self.id = id
                        self.nodeId = nodeId
                        self.avatarUrl = avatarUrl
                        self.gravatarId = gravatarId
                        self.url = url
                        self.htmlUrl = htmlUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self.organizationsUrl = organizationsUrl
                        self.reposUrl = reposUrl
                        self.eventsUrl = eventsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self._type = _type
                        self.siteAdmin = siteAdmin
                    }
                    public enum CodingKeys: String, CodingKey {
                        case login
                        case id
                        case nodeId = "node_id"
                        case avatarUrl = "avatar_url"
                        case gravatarId = "gravatar_id"
                        case url
                        case htmlUrl = "html_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case organizationsUrl = "organizations_url"
                        case reposUrl = "repos_url"
                        case eventsUrl = "events_url"
                        case receivedEventsUrl = "received_events_url"
                        case _type = "type"
                        case siteAdmin = "site_admin"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner`.
                public var owner: Components.Schemas.Repository.TemplateRepositoryPayload.OwnerPayload?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/private`.
                public var _private: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/html_url`.
                public var htmlUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/description`.
                public var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/fork`.
                public var fork: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/url`.
                public var url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/archive_url`.
                public var archiveUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/assignees_url`.
                public var assigneesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/blobs_url`.
                public var blobsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/branches_url`.
                public var branchesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/collaborators_url`.
                public var collaboratorsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/comments_url`.
                public var commentsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/commits_url`.
                public var commitsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/compare_url`.
                public var compareUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/contents_url`.
                public var contentsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/contributors_url`.
                public var contributorsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/deployments_url`.
                public var deploymentsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/downloads_url`.
                public var downloadsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/events_url`.
                public var eventsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/forks_url`.
                public var forksUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/git_commits_url`.
                public var gitCommitsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/git_refs_url`.
                public var gitRefsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/git_tags_url`.
                public var gitTagsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/git_url`.
                public var gitUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/issue_comment_url`.
                public var issueCommentUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/issue_events_url`.
                public var issueEventsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/issues_url`.
                public var issuesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/keys_url`.
                public var keysUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/labels_url`.
                public var labelsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/languages_url`.
                public var languagesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merges_url`.
                public var mergesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/milestones_url`.
                public var milestonesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/notifications_url`.
                public var notificationsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/pulls_url`.
                public var pullsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/releases_url`.
                public var releasesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/ssh_url`.
                public var sshUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/stargazers_url`.
                public var stargazersUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/statuses_url`.
                public var statusesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/subscribers_url`.
                public var subscribersUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/subscription_url`.
                public var subscriptionUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/tags_url`.
                public var tagsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/teams_url`.
                public var teamsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/trees_url`.
                public var treesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/clone_url`.
                public var cloneUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/mirror_url`.
                public var mirrorUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/hooks_url`.
                public var hooksUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/svn_url`.
                public var svnUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/homepage`.
                public var homepage: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/language`.
                public var language: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/forks_count`.
                public var forksCount: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/stargazers_count`.
                public var stargazersCount: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/watchers_count`.
                public var watchersCount: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/size`.
                public var size: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/default_branch`.
                public var defaultBranch: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/open_issues_count`.
                public var openIssuesCount: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/is_template`.
                public var isTemplate: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/topics`.
                public var topics: [Swift.String]?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_issues`.
                public var hasIssues: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_projects`.
                public var hasProjects: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_wiki`.
                public var hasWiki: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_pages`.
                public var hasPages: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_downloads`.
                public var hasDownloads: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/archived`.
                public var archived: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/disabled`.
                public var disabled: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/visibility`.
                public var visibility: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/pushed_at`.
                public var pushedAt: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/created_at`.
                public var createdAt: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/updated_at`.
                public var updatedAt: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions`.
                public struct PermissionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/admin`.
                    public var admin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/maintain`.
                    public var maintain: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/push`.
                    public var push: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/triage`.
                    public var triage: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/pull`.
                    public var pull: Swift.Bool?
                    /// Creates a new `PermissionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - admin:
                    ///   - maintain:
                    ///   - push:
                    ///   - triage:
                    ///   - pull:
                    public init(
                        admin: Swift.Bool? = nil,
                        maintain: Swift.Bool? = nil,
                        push: Swift.Bool? = nil,
                        triage: Swift.Bool? = nil,
                        pull: Swift.Bool? = nil
                    ) {
                        self.admin = admin
                        self.maintain = maintain
                        self.push = push
                        self.triage = triage
                        self.pull = pull
                    }
                    public enum CodingKeys: String, CodingKey {
                        case admin
                        case maintain
                        case push
                        case triage
                        case pull
                    }
                }
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions`.
                public var permissions: Components.Schemas.Repository.TemplateRepositoryPayload.PermissionsPayload?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_rebase_merge`.
                public var allowRebaseMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/temp_clone_token`.
                public var tempCloneToken: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_squash_merge`.
                public var allowSquashMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_auto_merge`.
                public var allowAutoMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/delete_branch_on_merge`.
                public var deleteBranchOnMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_update_branch`.
                public var allowUpdateBranch: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/use_squash_pr_title_as_default`.
                public var useSquashPrTitleAsDefault: Swift.Bool?
                /// The default value for a squash merge commit title:
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/squash_merge_commit_title`.
                @frozen public enum SquashMergeCommitTitlePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case prTitle = "PR_TITLE"
                    case commitOrPrTitle = "COMMIT_OR_PR_TITLE"
                }
                /// The default value for a squash merge commit title:
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/squash_merge_commit_title`.
                public var squashMergeCommitTitle: Components.Schemas.Repository.TemplateRepositoryPayload.SquashMergeCommitTitlePayload?
                /// The default value for a squash merge commit message:
                ///
                /// - `PR_BODY` - default to the pull request's body.
                /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/squash_merge_commit_message`.
                @frozen public enum SquashMergeCommitMessagePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case prBody = "PR_BODY"
                    case commitMessages = "COMMIT_MESSAGES"
                    case blank = "BLANK"
                }
                /// The default value for a squash merge commit message:
                ///
                /// - `PR_BODY` - default to the pull request's body.
                /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/squash_merge_commit_message`.
                public var squashMergeCommitMessage: Components.Schemas.Repository.TemplateRepositoryPayload.SquashMergeCommitMessagePayload?
                /// The default value for a merge commit title.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merge_commit_title`.
                @frozen public enum MergeCommitTitlePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case prTitle = "PR_TITLE"
                    case mergeMessage = "MERGE_MESSAGE"
                }
                /// The default value for a merge commit title.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merge_commit_title`.
                public var mergeCommitTitle: Components.Schemas.Repository.TemplateRepositoryPayload.MergeCommitTitlePayload?
                /// The default value for a merge commit message.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `PR_BODY` - default to the pull request's body.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merge_commit_message`.
                @frozen public enum MergeCommitMessagePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case prBody = "PR_BODY"
                    case prTitle = "PR_TITLE"
                    case blank = "BLANK"
                }
                /// The default value for a merge commit message.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `PR_BODY` - default to the pull request's body.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merge_commit_message`.
                public var mergeCommitMessage: Components.Schemas.Repository.TemplateRepositoryPayload.MergeCommitMessagePayload?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_merge_commit`.
                public var allowMergeCommit: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/subscribers_count`.
                public var subscribersCount: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/network_count`.
                public var networkCount: Swift.Int?
                /// Creates a new `TemplateRepositoryPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - nodeId:
                ///   - name:
                ///   - fullName:
                ///   - owner:
                ///   - _private:
                ///   - htmlUrl:
                ///   - description:
                ///   - fork:
                ///   - url:
                ///   - archiveUrl:
                ///   - assigneesUrl:
                ///   - blobsUrl:
                ///   - branchesUrl:
                ///   - collaboratorsUrl:
                ///   - commentsUrl:
                ///   - commitsUrl:
                ///   - compareUrl:
                ///   - contentsUrl:
                ///   - contributorsUrl:
                ///   - deploymentsUrl:
                ///   - downloadsUrl:
                ///   - eventsUrl:
                ///   - forksUrl:
                ///   - gitCommitsUrl:
                ///   - gitRefsUrl:
                ///   - gitTagsUrl:
                ///   - gitUrl:
                ///   - issueCommentUrl:
                ///   - issueEventsUrl:
                ///   - issuesUrl:
                ///   - keysUrl:
                ///   - labelsUrl:
                ///   - languagesUrl:
                ///   - mergesUrl:
                ///   - milestonesUrl:
                ///   - notificationsUrl:
                ///   - pullsUrl:
                ///   - releasesUrl:
                ///   - sshUrl:
                ///   - stargazersUrl:
                ///   - statusesUrl:
                ///   - subscribersUrl:
                ///   - subscriptionUrl:
                ///   - tagsUrl:
                ///   - teamsUrl:
                ///   - treesUrl:
                ///   - cloneUrl:
                ///   - mirrorUrl:
                ///   - hooksUrl:
                ///   - svnUrl:
                ///   - homepage:
                ///   - language:
                ///   - forksCount:
                ///   - stargazersCount:
                ///   - watchersCount:
                ///   - size:
                ///   - defaultBranch:
                ///   - openIssuesCount:
                ///   - isTemplate:
                ///   - topics:
                ///   - hasIssues:
                ///   - hasProjects:
                ///   - hasWiki:
                ///   - hasPages:
                ///   - hasDownloads:
                ///   - archived:
                ///   - disabled:
                ///   - visibility:
                ///   - pushedAt:
                ///   - createdAt:
                ///   - updatedAt:
                ///   - permissions:
                ///   - allowRebaseMerge:
                ///   - tempCloneToken:
                ///   - allowSquashMerge:
                ///   - allowAutoMerge:
                ///   - deleteBranchOnMerge:
                ///   - allowUpdateBranch:
                ///   - useSquashPrTitleAsDefault:
                ///   - squashMergeCommitTitle: The default value for a squash merge commit title:
                ///   - squashMergeCommitMessage: The default value for a squash merge commit message:
                ///   - mergeCommitTitle: The default value for a merge commit title.
                ///   - mergeCommitMessage: The default value for a merge commit message.
                ///   - allowMergeCommit:
                ///   - subscribersCount:
                ///   - networkCount:
                public init(
                    id: Swift.Int? = nil,
                    nodeId: Swift.String? = nil,
                    name: Swift.String? = nil,
                    fullName: Swift.String? = nil,
                    owner: Components.Schemas.Repository.TemplateRepositoryPayload.OwnerPayload? = nil,
                    _private: Swift.Bool? = nil,
                    htmlUrl: Swift.String? = nil,
                    description: Swift.String? = nil,
                    fork: Swift.Bool? = nil,
                    url: Swift.String? = nil,
                    archiveUrl: Swift.String? = nil,
                    assigneesUrl: Swift.String? = nil,
                    blobsUrl: Swift.String? = nil,
                    branchesUrl: Swift.String? = nil,
                    collaboratorsUrl: Swift.String? = nil,
                    commentsUrl: Swift.String? = nil,
                    commitsUrl: Swift.String? = nil,
                    compareUrl: Swift.String? = nil,
                    contentsUrl: Swift.String? = nil,
                    contributorsUrl: Swift.String? = nil,
                    deploymentsUrl: Swift.String? = nil,
                    downloadsUrl: Swift.String? = nil,
                    eventsUrl: Swift.String? = nil,
                    forksUrl: Swift.String? = nil,
                    gitCommitsUrl: Swift.String? = nil,
                    gitRefsUrl: Swift.String? = nil,
                    gitTagsUrl: Swift.String? = nil,
                    gitUrl: Swift.String? = nil,
                    issueCommentUrl: Swift.String? = nil,
                    issueEventsUrl: Swift.String? = nil,
                    issuesUrl: Swift.String? = nil,
                    keysUrl: Swift.String? = nil,
                    labelsUrl: Swift.String? = nil,
                    languagesUrl: Swift.String? = nil,
                    mergesUrl: Swift.String? = nil,
                    milestonesUrl: Swift.String? = nil,
                    notificationsUrl: Swift.String? = nil,
                    pullsUrl: Swift.String? = nil,
                    releasesUrl: Swift.String? = nil,
                    sshUrl: Swift.String? = nil,
                    stargazersUrl: Swift.String? = nil,
                    statusesUrl: Swift.String? = nil,
                    subscribersUrl: Swift.String? = nil,
                    subscriptionUrl: Swift.String? = nil,
                    tagsUrl: Swift.String? = nil,
                    teamsUrl: Swift.String? = nil,
                    treesUrl: Swift.String? = nil,
                    cloneUrl: Swift.String? = nil,
                    mirrorUrl: Swift.String? = nil,
                    hooksUrl: Swift.String? = nil,
                    svnUrl: Swift.String? = nil,
                    homepage: Swift.String? = nil,
                    language: Swift.String? = nil,
                    forksCount: Swift.Int? = nil,
                    stargazersCount: Swift.Int? = nil,
                    watchersCount: Swift.Int? = nil,
                    size: Swift.Int? = nil,
                    defaultBranch: Swift.String? = nil,
                    openIssuesCount: Swift.Int? = nil,
                    isTemplate: Swift.Bool? = nil,
                    topics: [Swift.String]? = nil,
                    hasIssues: Swift.Bool? = nil,
                    hasProjects: Swift.Bool? = nil,
                    hasWiki: Swift.Bool? = nil,
                    hasPages: Swift.Bool? = nil,
                    hasDownloads: Swift.Bool? = nil,
                    archived: Swift.Bool? = nil,
                    disabled: Swift.Bool? = nil,
                    visibility: Swift.String? = nil,
                    pushedAt: Swift.String? = nil,
                    createdAt: Swift.String? = nil,
                    updatedAt: Swift.String? = nil,
                    permissions: Components.Schemas.Repository.TemplateRepositoryPayload.PermissionsPayload? = nil,
                    allowRebaseMerge: Swift.Bool? = nil,
                    tempCloneToken: Swift.String? = nil,
                    allowSquashMerge: Swift.Bool? = nil,
                    allowAutoMerge: Swift.Bool? = nil,
                    deleteBranchOnMerge: Swift.Bool? = nil,
                    allowUpdateBranch: Swift.Bool? = nil,
                    useSquashPrTitleAsDefault: Swift.Bool? = nil,
                    squashMergeCommitTitle: Components.Schemas.Repository.TemplateRepositoryPayload.SquashMergeCommitTitlePayload? = nil,
                    squashMergeCommitMessage: Components.Schemas.Repository.TemplateRepositoryPayload.SquashMergeCommitMessagePayload? = nil,
                    mergeCommitTitle: Components.Schemas.Repository.TemplateRepositoryPayload.MergeCommitTitlePayload? = nil,
                    mergeCommitMessage: Components.Schemas.Repository.TemplateRepositoryPayload.MergeCommitMessagePayload? = nil,
                    allowMergeCommit: Swift.Bool? = nil,
                    subscribersCount: Swift.Int? = nil,
                    networkCount: Swift.Int? = nil
                ) {
                    self.id = id
                    self.nodeId = nodeId
                    self.name = name
                    self.fullName = fullName
                    self.owner = owner
                    self._private = _private
                    self.htmlUrl = htmlUrl
                    self.description = description
                    self.fork = fork
                    self.url = url
                    self.archiveUrl = archiveUrl
                    self.assigneesUrl = assigneesUrl
                    self.blobsUrl = blobsUrl
                    self.branchesUrl = branchesUrl
                    self.collaboratorsUrl = collaboratorsUrl
                    self.commentsUrl = commentsUrl
                    self.commitsUrl = commitsUrl
                    self.compareUrl = compareUrl
                    self.contentsUrl = contentsUrl
                    self.contributorsUrl = contributorsUrl
                    self.deploymentsUrl = deploymentsUrl
                    self.downloadsUrl = downloadsUrl
                    self.eventsUrl = eventsUrl
                    self.forksUrl = forksUrl
                    self.gitCommitsUrl = gitCommitsUrl
                    self.gitRefsUrl = gitRefsUrl
                    self.gitTagsUrl = gitTagsUrl
                    self.gitUrl = gitUrl
                    self.issueCommentUrl = issueCommentUrl
                    self.issueEventsUrl = issueEventsUrl
                    self.issuesUrl = issuesUrl
                    self.keysUrl = keysUrl
                    self.labelsUrl = labelsUrl
                    self.languagesUrl = languagesUrl
                    self.mergesUrl = mergesUrl
                    self.milestonesUrl = milestonesUrl
                    self.notificationsUrl = notificationsUrl
                    self.pullsUrl = pullsUrl
                    self.releasesUrl = releasesUrl
                    self.sshUrl = sshUrl
                    self.stargazersUrl = stargazersUrl
                    self.statusesUrl = statusesUrl
                    self.subscribersUrl = subscribersUrl
                    self.subscriptionUrl = subscriptionUrl
                    self.tagsUrl = tagsUrl
                    self.teamsUrl = teamsUrl
                    self.treesUrl = treesUrl
                    self.cloneUrl = cloneUrl
                    self.mirrorUrl = mirrorUrl
                    self.hooksUrl = hooksUrl
                    self.svnUrl = svnUrl
                    self.homepage = homepage
                    self.language = language
                    self.forksCount = forksCount
                    self.stargazersCount = stargazersCount
                    self.watchersCount = watchersCount
                    self.size = size
                    self.defaultBranch = defaultBranch
                    self.openIssuesCount = openIssuesCount
                    self.isTemplate = isTemplate
                    self.topics = topics
                    self.hasIssues = hasIssues
                    self.hasProjects = hasProjects
                    self.hasWiki = hasWiki
                    self.hasPages = hasPages
                    self.hasDownloads = hasDownloads
                    self.archived = archived
                    self.disabled = disabled
                    self.visibility = visibility
                    self.pushedAt = pushedAt
                    self.createdAt = createdAt
                    self.updatedAt = updatedAt
                    self.permissions = permissions
                    self.allowRebaseMerge = allowRebaseMerge
                    self.tempCloneToken = tempCloneToken
                    self.allowSquashMerge = allowSquashMerge
                    self.allowAutoMerge = allowAutoMerge
                    self.deleteBranchOnMerge = deleteBranchOnMerge
                    self.allowUpdateBranch = allowUpdateBranch
                    self.useSquashPrTitleAsDefault = useSquashPrTitleAsDefault
                    self.squashMergeCommitTitle = squashMergeCommitTitle
                    self.squashMergeCommitMessage = squashMergeCommitMessage
                    self.mergeCommitTitle = mergeCommitTitle
                    self.mergeCommitMessage = mergeCommitMessage
                    self.allowMergeCommit = allowMergeCommit
                    self.subscribersCount = subscribersCount
                    self.networkCount = networkCount
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case nodeId = "node_id"
                    case name
                    case fullName = "full_name"
                    case owner
                    case _private = "private"
                    case htmlUrl = "html_url"
                    case description
                    case fork
                    case url
                    case archiveUrl = "archive_url"
                    case assigneesUrl = "assignees_url"
                    case blobsUrl = "blobs_url"
                    case branchesUrl = "branches_url"
                    case collaboratorsUrl = "collaborators_url"
                    case commentsUrl = "comments_url"
                    case commitsUrl = "commits_url"
                    case compareUrl = "compare_url"
                    case contentsUrl = "contents_url"
                    case contributorsUrl = "contributors_url"
                    case deploymentsUrl = "deployments_url"
                    case downloadsUrl = "downloads_url"
                    case eventsUrl = "events_url"
                    case forksUrl = "forks_url"
                    case gitCommitsUrl = "git_commits_url"
                    case gitRefsUrl = "git_refs_url"
                    case gitTagsUrl = "git_tags_url"
                    case gitUrl = "git_url"
                    case issueCommentUrl = "issue_comment_url"
                    case issueEventsUrl = "issue_events_url"
                    case issuesUrl = "issues_url"
                    case keysUrl = "keys_url"
                    case labelsUrl = "labels_url"
                    case languagesUrl = "languages_url"
                    case mergesUrl = "merges_url"
                    case milestonesUrl = "milestones_url"
                    case notificationsUrl = "notifications_url"
                    case pullsUrl = "pulls_url"
                    case releasesUrl = "releases_url"
                    case sshUrl = "ssh_url"
                    case stargazersUrl = "stargazers_url"
                    case statusesUrl = "statuses_url"
                    case subscribersUrl = "subscribers_url"
                    case subscriptionUrl = "subscription_url"
                    case tagsUrl = "tags_url"
                    case teamsUrl = "teams_url"
                    case treesUrl = "trees_url"
                    case cloneUrl = "clone_url"
                    case mirrorUrl = "mirror_url"
                    case hooksUrl = "hooks_url"
                    case svnUrl = "svn_url"
                    case homepage
                    case language
                    case forksCount = "forks_count"
                    case stargazersCount = "stargazers_count"
                    case watchersCount = "watchers_count"
                    case size
                    case defaultBranch = "default_branch"
                    case openIssuesCount = "open_issues_count"
                    case isTemplate = "is_template"
                    case topics
                    case hasIssues = "has_issues"
                    case hasProjects = "has_projects"
                    case hasWiki = "has_wiki"
                    case hasPages = "has_pages"
                    case hasDownloads = "has_downloads"
                    case archived
                    case disabled
                    case visibility
                    case pushedAt = "pushed_at"
                    case createdAt = "created_at"
                    case updatedAt = "updated_at"
                    case permissions
                    case allowRebaseMerge = "allow_rebase_merge"
                    case tempCloneToken = "temp_clone_token"
                    case allowSquashMerge = "allow_squash_merge"
                    case allowAutoMerge = "allow_auto_merge"
                    case deleteBranchOnMerge = "delete_branch_on_merge"
                    case allowUpdateBranch = "allow_update_branch"
                    case useSquashPrTitleAsDefault = "use_squash_pr_title_as_default"
                    case squashMergeCommitTitle = "squash_merge_commit_title"
                    case squashMergeCommitMessage = "squash_merge_commit_message"
                    case mergeCommitTitle = "merge_commit_title"
                    case mergeCommitMessage = "merge_commit_message"
                    case allowMergeCommit = "allow_merge_commit"
                    case subscribersCount = "subscribers_count"
                    case networkCount = "network_count"
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository/template_repository`.
            public var templateRepository: Components.Schemas.Repository.TemplateRepositoryPayload?
            /// - Remark: Generated from `#/components/schemas/repository/temp_clone_token`.
            public var tempCloneToken: Swift.String?
            /// Whether to allow squash merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_squash_merge`.
            public var allowSquashMerge: Swift.Bool?
            /// Whether to allow Auto-merge to be used on pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_auto_merge`.
            public var allowAutoMerge: Swift.Bool?
            /// Whether to delete head branches when pull requests are merged
            ///
            /// - Remark: Generated from `#/components/schemas/repository/delete_branch_on_merge`.
            public var deleteBranchOnMerge: Swift.Bool?
            /// Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_update_branch`.
            public var allowUpdateBranch: Swift.Bool?
            /// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/use_squash_pr_title_as_default`.
            @available(*, deprecated)
            public var useSquashPrTitleAsDefault: Swift.Bool?
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_title`.
            @frozen public enum SquashMergeCommitTitlePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case prTitle = "PR_TITLE"
                case commitOrPrTitle = "COMMIT_OR_PR_TITLE"
            }
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_title`.
            public var squashMergeCommitTitle: Components.Schemas.Repository.SquashMergeCommitTitlePayload?
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_message`.
            @frozen public enum SquashMergeCommitMessagePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case prBody = "PR_BODY"
                case commitMessages = "COMMIT_MESSAGES"
                case blank = "BLANK"
            }
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_message`.
            public var squashMergeCommitMessage: Components.Schemas.Repository.SquashMergeCommitMessagePayload?
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_title`.
            @frozen public enum MergeCommitTitlePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case prTitle = "PR_TITLE"
                case mergeMessage = "MERGE_MESSAGE"
            }
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_title`.
            public var mergeCommitTitle: Components.Schemas.Repository.MergeCommitTitlePayload?
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_message`.
            @frozen public enum MergeCommitMessagePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case prBody = "PR_BODY"
                case prTitle = "PR_TITLE"
                case blank = "BLANK"
            }
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_message`.
            public var mergeCommitMessage: Components.Schemas.Repository.MergeCommitMessagePayload?
            /// Whether to allow merge commits for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_merge_commit`.
            public var allowMergeCommit: Swift.Bool?
            /// Whether to allow forking this repo
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_forking`.
            public var allowForking: Swift.Bool?
            /// Whether to require contributors to sign off on web-based commits
            ///
            /// - Remark: Generated from `#/components/schemas/repository/web_commit_signoff_required`.
            public var webCommitSignoffRequired: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/subscribers_count`.
            public var subscribersCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/repository/network_count`.
            public var networkCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/repository/open_issues`.
            public var openIssues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/watchers`.
            public var watchers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/master_branch`.
            public var masterBranch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/starred_at`.
            public var starredAt: Swift.String?
            /// Whether anonymous git access is enabled for this repository
            ///
            /// - Remark: Generated from `#/components/schemas/repository/anonymous_access_enabled`.
            public var anonymousAccessEnabled: Swift.Bool?
            /// Creates a new `Repository`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the repository
            ///   - nodeId:
            ///   - name: The name of the repository.
            ///   - fullName:
            ///   - license:
            ///   - organization:
            ///   - forks:
            ///   - permissions:
            ///   - owner:
            ///   - _private: Whether the repository is private or public.
            ///   - htmlUrl:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archiveUrl:
            ///   - assigneesUrl:
            ///   - blobsUrl:
            ///   - branchesUrl:
            ///   - collaboratorsUrl:
            ///   - commentsUrl:
            ///   - commitsUrl:
            ///   - compareUrl:
            ///   - contentsUrl:
            ///   - contributorsUrl:
            ///   - deploymentsUrl:
            ///   - downloadsUrl:
            ///   - eventsUrl:
            ///   - forksUrl:
            ///   - gitCommitsUrl:
            ///   - gitRefsUrl:
            ///   - gitTagsUrl:
            ///   - gitUrl:
            ///   - issueCommentUrl:
            ///   - issueEventsUrl:
            ///   - issuesUrl:
            ///   - keysUrl:
            ///   - labelsUrl:
            ///   - languagesUrl:
            ///   - mergesUrl:
            ///   - milestonesUrl:
            ///   - notificationsUrl:
            ///   - pullsUrl:
            ///   - releasesUrl:
            ///   - sshUrl:
            ///   - stargazersUrl:
            ///   - statusesUrl:
            ///   - subscribersUrl:
            ///   - subscriptionUrl:
            ///   - tagsUrl:
            ///   - teamsUrl:
            ///   - treesUrl:
            ///   - cloneUrl:
            ///   - mirrorUrl:
            ///   - hooksUrl:
            ///   - svnUrl:
            ///   - homepage:
            ///   - language:
            ///   - forksCount:
            ///   - stargazersCount:
            ///   - watchersCount:
            ///   - size: The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - defaultBranch: The default branch of the repository.
            ///   - openIssuesCount:
            ///   - isTemplate: Whether this repository acts as a template that can be used to generate new repositories.
            ///   - topics:
            ///   - hasIssues: Whether issues are enabled.
            ///   - hasProjects: Whether projects are enabled.
            ///   - hasWiki: Whether the wiki is enabled.
            ///   - hasPages:
            ///   - hasDownloads: Whether downloads are enabled.
            ///   - archived: Whether the repository is archived.
            ///   - disabled: Returns whether or not this repository disabled.
            ///   - visibility: The repository visibility: public, private, or internal.
            ///   - pushedAt:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - allowRebaseMerge: Whether to allow rebase merges for pull requests.
            ///   - templateRepository:
            ///   - tempCloneToken:
            ///   - allowSquashMerge: Whether to allow squash merges for pull requests.
            ///   - allowAutoMerge: Whether to allow Auto-merge to be used on pull requests.
            ///   - deleteBranchOnMerge: Whether to delete head branches when pull requests are merged
            ///   - allowUpdateBranch: Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///   - useSquashPrTitleAsDefault: Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///   - squashMergeCommitTitle: The default value for a squash merge commit title:
            ///   - squashMergeCommitMessage: The default value for a squash merge commit message:
            ///   - mergeCommitTitle: The default value for a merge commit title.
            ///   - mergeCommitMessage: The default value for a merge commit message.
            ///   - allowMergeCommit: Whether to allow merge commits for pull requests.
            ///   - allowForking: Whether to allow forking this repo
            ///   - webCommitSignoffRequired: Whether to require contributors to sign off on web-based commits
            ///   - subscribersCount:
            ///   - networkCount:
            ///   - openIssues:
            ///   - watchers:
            ///   - masterBranch:
            ///   - starredAt:
            ///   - anonymousAccessEnabled: Whether anonymous git access is enabled for this repository
            public init(
                id: Swift.Int,
                nodeId: Swift.String,
                name: Swift.String,
                fullName: Swift.String,
                license: Components.Schemas.NullableLicenseSimple? = nil,
                organization: Components.Schemas.NullableSimpleUser? = nil,
                forks: Swift.Int,
                permissions: Components.Schemas.Repository.PermissionsPayload? = nil,
                owner: Components.Schemas.SimpleUser,
                _private: Swift.Bool,
                htmlUrl: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archiveUrl: Swift.String,
                assigneesUrl: Swift.String,
                blobsUrl: Swift.String,
                branchesUrl: Swift.String,
                collaboratorsUrl: Swift.String,
                commentsUrl: Swift.String,
                commitsUrl: Swift.String,
                compareUrl: Swift.String,
                contentsUrl: Swift.String,
                contributorsUrl: Swift.String,
                deploymentsUrl: Swift.String,
                downloadsUrl: Swift.String,
                eventsUrl: Swift.String,
                forksUrl: Swift.String,
                gitCommitsUrl: Swift.String,
                gitRefsUrl: Swift.String,
                gitTagsUrl: Swift.String,
                gitUrl: Swift.String,
                issueCommentUrl: Swift.String,
                issueEventsUrl: Swift.String,
                issuesUrl: Swift.String,
                keysUrl: Swift.String,
                labelsUrl: Swift.String,
                languagesUrl: Swift.String,
                mergesUrl: Swift.String,
                milestonesUrl: Swift.String,
                notificationsUrl: Swift.String,
                pullsUrl: Swift.String,
                releasesUrl: Swift.String,
                sshUrl: Swift.String,
                stargazersUrl: Swift.String,
                statusesUrl: Swift.String,
                subscribersUrl: Swift.String,
                subscriptionUrl: Swift.String,
                tagsUrl: Swift.String,
                teamsUrl: Swift.String,
                treesUrl: Swift.String,
                cloneUrl: Swift.String,
                mirrorUrl: Swift.String? = nil,
                hooksUrl: Swift.String,
                svnUrl: Swift.String,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forksCount: Swift.Int,
                stargazersCount: Swift.Int,
                watchersCount: Swift.Int,
                size: Swift.Int,
                defaultBranch: Swift.String,
                openIssuesCount: Swift.Int,
                isTemplate: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                hasIssues: Swift.Bool,
                hasProjects: Swift.Bool,
                hasWiki: Swift.Bool,
                hasPages: Swift.Bool,
                hasDownloads: Swift.Bool,
                archived: Swift.Bool,
                disabled: Swift.Bool,
                visibility: Swift.String? = nil,
                pushedAt: Foundation.Date? = nil,
                createdAt: Foundation.Date? = nil,
                updatedAt: Foundation.Date? = nil,
                allowRebaseMerge: Swift.Bool? = nil,
                templateRepository: Components.Schemas.Repository.TemplateRepositoryPayload? = nil,
                tempCloneToken: Swift.String? = nil,
                allowSquashMerge: Swift.Bool? = nil,
                allowAutoMerge: Swift.Bool? = nil,
                deleteBranchOnMerge: Swift.Bool? = nil,
                allowUpdateBranch: Swift.Bool? = nil,
                useSquashPrTitleAsDefault: Swift.Bool? = nil,
                squashMergeCommitTitle: Components.Schemas.Repository.SquashMergeCommitTitlePayload? = nil,
                squashMergeCommitMessage: Components.Schemas.Repository.SquashMergeCommitMessagePayload? = nil,
                mergeCommitTitle: Components.Schemas.Repository.MergeCommitTitlePayload? = nil,
                mergeCommitMessage: Components.Schemas.Repository.MergeCommitMessagePayload? = nil,
                allowMergeCommit: Swift.Bool? = nil,
                allowForking: Swift.Bool? = nil,
                webCommitSignoffRequired: Swift.Bool? = nil,
                subscribersCount: Swift.Int? = nil,
                networkCount: Swift.Int? = nil,
                openIssues: Swift.Int,
                watchers: Swift.Int,
                masterBranch: Swift.String? = nil,
                starredAt: Swift.String? = nil,
                anonymousAccessEnabled: Swift.Bool? = nil
            ) {
                self.id = id
                self.nodeId = nodeId
                self.name = name
                self.fullName = fullName
                self.license = license
                self.organization = organization
                self.forks = forks
                self.permissions = permissions
                self.owner = owner
                self._private = _private
                self.htmlUrl = htmlUrl
                self.description = description
                self.fork = fork
                self.url = url
                self.archiveUrl = archiveUrl
                self.assigneesUrl = assigneesUrl
                self.blobsUrl = blobsUrl
                self.branchesUrl = branchesUrl
                self.collaboratorsUrl = collaboratorsUrl
                self.commentsUrl = commentsUrl
                self.commitsUrl = commitsUrl
                self.compareUrl = compareUrl
                self.contentsUrl = contentsUrl
                self.contributorsUrl = contributorsUrl
                self.deploymentsUrl = deploymentsUrl
                self.downloadsUrl = downloadsUrl
                self.eventsUrl = eventsUrl
                self.forksUrl = forksUrl
                self.gitCommitsUrl = gitCommitsUrl
                self.gitRefsUrl = gitRefsUrl
                self.gitTagsUrl = gitTagsUrl
                self.gitUrl = gitUrl
                self.issueCommentUrl = issueCommentUrl
                self.issueEventsUrl = issueEventsUrl
                self.issuesUrl = issuesUrl
                self.keysUrl = keysUrl
                self.labelsUrl = labelsUrl
                self.languagesUrl = languagesUrl
                self.mergesUrl = mergesUrl
                self.milestonesUrl = milestonesUrl
                self.notificationsUrl = notificationsUrl
                self.pullsUrl = pullsUrl
                self.releasesUrl = releasesUrl
                self.sshUrl = sshUrl
                self.stargazersUrl = stargazersUrl
                self.statusesUrl = statusesUrl
                self.subscribersUrl = subscribersUrl
                self.subscriptionUrl = subscriptionUrl
                self.tagsUrl = tagsUrl
                self.teamsUrl = teamsUrl
                self.treesUrl = treesUrl
                self.cloneUrl = cloneUrl
                self.mirrorUrl = mirrorUrl
                self.hooksUrl = hooksUrl
                self.svnUrl = svnUrl
                self.homepage = homepage
                self.language = language
                self.forksCount = forksCount
                self.stargazersCount = stargazersCount
                self.watchersCount = watchersCount
                self.size = size
                self.defaultBranch = defaultBranch
                self.openIssuesCount = openIssuesCount
                self.isTemplate = isTemplate
                self.topics = topics
                self.hasIssues = hasIssues
                self.hasProjects = hasProjects
                self.hasWiki = hasWiki
                self.hasPages = hasPages
                self.hasDownloads = hasDownloads
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushedAt = pushedAt
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.allowRebaseMerge = allowRebaseMerge
                self.templateRepository = templateRepository
                self.tempCloneToken = tempCloneToken
                self.allowSquashMerge = allowSquashMerge
                self.allowAutoMerge = allowAutoMerge
                self.deleteBranchOnMerge = deleteBranchOnMerge
                self.allowUpdateBranch = allowUpdateBranch
                self.useSquashPrTitleAsDefault = useSquashPrTitleAsDefault
                self.squashMergeCommitTitle = squashMergeCommitTitle
                self.squashMergeCommitMessage = squashMergeCommitMessage
                self.mergeCommitTitle = mergeCommitTitle
                self.mergeCommitMessage = mergeCommitMessage
                self.allowMergeCommit = allowMergeCommit
                self.allowForking = allowForking
                self.webCommitSignoffRequired = webCommitSignoffRequired
                self.subscribersCount = subscribersCount
                self.networkCount = networkCount
                self.openIssues = openIssues
                self.watchers = watchers
                self.masterBranch = masterBranch
                self.starredAt = starredAt
                self.anonymousAccessEnabled = anonymousAccessEnabled
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case name
                case fullName = "full_name"
                case license
                case organization
                case forks
                case permissions
                case owner
                case _private = "private"
                case htmlUrl = "html_url"
                case description
                case fork
                case url
                case archiveUrl = "archive_url"
                case assigneesUrl = "assignees_url"
                case blobsUrl = "blobs_url"
                case branchesUrl = "branches_url"
                case collaboratorsUrl = "collaborators_url"
                case commentsUrl = "comments_url"
                case commitsUrl = "commits_url"
                case compareUrl = "compare_url"
                case contentsUrl = "contents_url"
                case contributorsUrl = "contributors_url"
                case deploymentsUrl = "deployments_url"
                case downloadsUrl = "downloads_url"
                case eventsUrl = "events_url"
                case forksUrl = "forks_url"
                case gitCommitsUrl = "git_commits_url"
                case gitRefsUrl = "git_refs_url"
                case gitTagsUrl = "git_tags_url"
                case gitUrl = "git_url"
                case issueCommentUrl = "issue_comment_url"
                case issueEventsUrl = "issue_events_url"
                case issuesUrl = "issues_url"
                case keysUrl = "keys_url"
                case labelsUrl = "labels_url"
                case languagesUrl = "languages_url"
                case mergesUrl = "merges_url"
                case milestonesUrl = "milestones_url"
                case notificationsUrl = "notifications_url"
                case pullsUrl = "pulls_url"
                case releasesUrl = "releases_url"
                case sshUrl = "ssh_url"
                case stargazersUrl = "stargazers_url"
                case statusesUrl = "statuses_url"
                case subscribersUrl = "subscribers_url"
                case subscriptionUrl = "subscription_url"
                case tagsUrl = "tags_url"
                case teamsUrl = "teams_url"
                case treesUrl = "trees_url"
                case cloneUrl = "clone_url"
                case mirrorUrl = "mirror_url"
                case hooksUrl = "hooks_url"
                case svnUrl = "svn_url"
                case homepage
                case language
                case forksCount = "forks_count"
                case stargazersCount = "stargazers_count"
                case watchersCount = "watchers_count"
                case size
                case defaultBranch = "default_branch"
                case openIssuesCount = "open_issues_count"
                case isTemplate = "is_template"
                case topics
                case hasIssues = "has_issues"
                case hasProjects = "has_projects"
                case hasWiki = "has_wiki"
                case hasPages = "has_pages"
                case hasDownloads = "has_downloads"
                case archived
                case disabled
                case visibility
                case pushedAt = "pushed_at"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case allowRebaseMerge = "allow_rebase_merge"
                case templateRepository = "template_repository"
                case tempCloneToken = "temp_clone_token"
                case allowSquashMerge = "allow_squash_merge"
                case allowAutoMerge = "allow_auto_merge"
                case deleteBranchOnMerge = "delete_branch_on_merge"
                case allowUpdateBranch = "allow_update_branch"
                case useSquashPrTitleAsDefault = "use_squash_pr_title_as_default"
                case squashMergeCommitTitle = "squash_merge_commit_title"
                case squashMergeCommitMessage = "squash_merge_commit_message"
                case mergeCommitTitle = "merge_commit_title"
                case mergeCommitMessage = "merge_commit_message"
                case allowMergeCommit = "allow_merge_commit"
                case allowForking = "allow_forking"
                case webCommitSignoffRequired = "web_commit_signoff_required"
                case subscribersCount = "subscribers_count"
                case networkCount = "network_count"
                case openIssues = "open_issues"
                case watchers
                case masterBranch = "master_branch"
                case starredAt = "starred_at"
                case anonymousAccessEnabled = "anonymous_access_enabled"
            }
        }
        /// Organization Simple
        ///
        /// - Remark: Generated from `#/components/schemas/organization-simple`.
        public struct OrganizationSimple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/organization-simple/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization-simple/node_id`.
            public var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/repos_url`.
            public var reposUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/events_url`.
            public var eventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/hooks_url`.
            public var hooksUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/issues_url`.
            public var issuesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/members_url`.
            public var membersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/public_members_url`.
            public var publicMembersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/avatar_url`.
            public var avatarUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/description`.
            public var description: Swift.String?
            /// Creates a new `OrganizationSimple`.
            ///
            /// - Parameters:
            ///   - login:
            ///   - id:
            ///   - nodeId:
            ///   - url:
            ///   - reposUrl:
            ///   - eventsUrl:
            ///   - hooksUrl:
            ///   - issuesUrl:
            ///   - membersUrl:
            ///   - publicMembersUrl:
            ///   - avatarUrl:
            ///   - description:
            public init(
                login: Swift.String,
                id: Swift.Int,
                nodeId: Swift.String,
                url: Swift.String,
                reposUrl: Swift.String,
                eventsUrl: Swift.String,
                hooksUrl: Swift.String,
                issuesUrl: Swift.String,
                membersUrl: Swift.String,
                publicMembersUrl: Swift.String,
                avatarUrl: Swift.String,
                description: Swift.String? = nil
            ) {
                self.login = login
                self.id = id
                self.nodeId = nodeId
                self.url = url
                self.reposUrl = reposUrl
                self.eventsUrl = eventsUrl
                self.hooksUrl = hooksUrl
                self.issuesUrl = issuesUrl
                self.membersUrl = membersUrl
                self.publicMembersUrl = publicMembersUrl
                self.avatarUrl = avatarUrl
                self.description = description
            }
            public enum CodingKeys: String, CodingKey {
                case login
                case id
                case nodeId = "node_id"
                case url
                case reposUrl = "repos_url"
                case eventsUrl = "events_url"
                case hooksUrl = "hooks_url"
                case issuesUrl = "issues_url"
                case membersUrl = "members_url"
                case publicMembersUrl = "public_members_url"
                case avatarUrl = "avatar_url"
                case description
            }
        }
        /// Simple Installation
        ///
        /// - Remark: Generated from `#/components/schemas/simple-installation`.
        public struct SimpleInstallation: Codable, Hashable, Sendable {
            /// The ID of the installation.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-installation/id`.
            public var id: Swift.Int
            /// The global node ID of the installation.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-installation/node_id`.
            public var nodeId: Swift.String
            /// Creates a new `SimpleInstallation`.
            ///
            /// - Parameters:
            ///   - id: The ID of the installation.
            ///   - nodeId: The global node ID of the installation.
            public init(
                id: Swift.Int,
                nodeId: Swift.String
            ) {
                self.id = id
                self.nodeId = nodeId
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-team-add`.
        public struct WebhookTeamAdd: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-team-add/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-team-add/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-team-add/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-team-add/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-team-add/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Groups of organization members that gives permissions on specified repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-team-add/team`.
            public struct TeamPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-team-add/team/deleted`.
                public var deleted: Swift.Bool?
                /// Description of the team
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-add/team/description`.
                public var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-add/team/html_url`.
                public var htmlUrl: Swift.String?
                /// Unique identifier of the team
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-add/team/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-add/team/members_url`.
                public var membersUrl: Swift.String?
                /// Name of the team
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-add/team/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-add/team/node_id`.
                public var nodeId: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-add/team/parent`.
                public struct ParentPayload: Codable, Hashable, Sendable {
                    /// Description of the team
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-team-add/team/parent/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-add/team/parent/html_url`.
                    public var htmlUrl: Swift.String
                    /// Unique identifier of the team
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-team-add/team/parent/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-team-add/team/parent/members_url`.
                    public var membersUrl: Swift.String
                    /// Name of the team
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-team-add/team/parent/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-add/team/parent/node_id`.
                    public var nodeId: Swift.String
                    /// Permission that the team will have for its repositories
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-team-add/team/parent/permission`.
                    public var permission: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-add/team/parent/privacy`.
                    @frozen public enum PrivacyPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case closed = "closed"
                        case secret = "secret"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-team-add/team/parent/privacy`.
                    public var privacy: Components.Schemas.WebhookTeamAdd.TeamPayload.ParentPayload.PrivacyPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-team-add/team/parent/repositories_url`.
                    public var repositoriesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-add/team/parent/slug`.
                    public var slug: Swift.String
                    /// URL for the team
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-team-add/team/parent/url`.
                    public var url: Swift.String
                    /// Creates a new `ParentPayload`.
                    ///
                    /// - Parameters:
                    ///   - description: Description of the team
                    ///   - htmlUrl:
                    ///   - id: Unique identifier of the team
                    ///   - membersUrl:
                    ///   - name: Name of the team
                    ///   - nodeId:
                    ///   - permission: Permission that the team will have for its repositories
                    ///   - privacy:
                    ///   - repositoriesUrl:
                    ///   - slug:
                    ///   - url: URL for the team
                    public init(
                        description: Swift.String? = nil,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        membersUrl: Swift.String,
                        name: Swift.String,
                        nodeId: Swift.String,
                        permission: Swift.String,
                        privacy: Components.Schemas.WebhookTeamAdd.TeamPayload.ParentPayload.PrivacyPayload,
                        repositoriesUrl: Swift.String,
                        slug: Swift.String,
                        url: Swift.String
                    ) {
                        self.description = description
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.membersUrl = membersUrl
                        self.name = name
                        self.nodeId = nodeId
                        self.permission = permission
                        self.privacy = privacy
                        self.repositoriesUrl = repositoriesUrl
                        self.slug = slug
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case description
                        case htmlUrl = "html_url"
                        case id
                        case membersUrl = "members_url"
                        case name
                        case nodeId = "node_id"
                        case permission
                        case privacy
                        case repositoriesUrl = "repositories_url"
                        case slug
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-add/team/parent`.
                public var parent: Components.Schemas.WebhookTeamAdd.TeamPayload.ParentPayload?
                /// Permission that the team will have for its repositories
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-add/team/permission`.
                public var permission: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-add/team/privacy`.
                @frozen public enum PrivacyPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case open = "open"
                    case closed = "closed"
                    case secret = "secret"
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-add/team/privacy`.
                public var privacy: Components.Schemas.WebhookTeamAdd.TeamPayload.PrivacyPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-team-add/team/repositories_url`.
                public var repositoriesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-add/team/slug`.
                public var slug: Swift.String?
                /// URL for the team
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-add/team/url`.
                public var url: Swift.String?
                /// Creates a new `TeamPayload`.
                ///
                /// - Parameters:
                ///   - deleted:
                ///   - description: Description of the team
                ///   - htmlUrl:
                ///   - id: Unique identifier of the team
                ///   - membersUrl:
                ///   - name: Name of the team
                ///   - nodeId:
                ///   - parent:
                ///   - permission: Permission that the team will have for its repositories
                ///   - privacy:
                ///   - repositoriesUrl:
                ///   - slug:
                ///   - url: URL for the team
                public init(
                    deleted: Swift.Bool? = nil,
                    description: Swift.String? = nil,
                    htmlUrl: Swift.String? = nil,
                    id: Swift.Int,
                    membersUrl: Swift.String? = nil,
                    name: Swift.String,
                    nodeId: Swift.String? = nil,
                    parent: Components.Schemas.WebhookTeamAdd.TeamPayload.ParentPayload? = nil,
                    permission: Swift.String? = nil,
                    privacy: Components.Schemas.WebhookTeamAdd.TeamPayload.PrivacyPayload? = nil,
                    repositoriesUrl: Swift.String? = nil,
                    slug: Swift.String? = nil,
                    url: Swift.String? = nil
                ) {
                    self.deleted = deleted
                    self.description = description
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.membersUrl = membersUrl
                    self.name = name
                    self.nodeId = nodeId
                    self.parent = parent
                    self.permission = permission
                    self.privacy = privacy
                    self.repositoriesUrl = repositoriesUrl
                    self.slug = slug
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case deleted
                    case description
                    case htmlUrl = "html_url"
                    case id
                    case membersUrl = "members_url"
                    case name
                    case nodeId = "node_id"
                    case parent
                    case permission
                    case privacy
                    case repositoriesUrl = "repositories_url"
                    case slug
                    case url
                }
            }
            /// Groups of organization members that gives permissions on specified repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-team-add/team`.
            public var team: Components.Schemas.WebhookTeamAdd.TeamPayload
            /// Creates a new `WebhookTeamAdd`.
            ///
            /// - Parameters:
            ///   - enterprise:
            ///   - installation:
            ///   - organization:
            ///   - repository:
            ///   - sender:
            ///   - team: Groups of organization members that gives permissions on specified repositories.
            public init(
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser,
                team: Components.Schemas.WebhookTeamAdd.TeamPayload
            ) {
                self.enterprise = enterprise
                self.installation = installation
                self.organization = organization
                self.repository = repository
                self.sender = sender
                self.team = team
            }
            public enum CodingKeys: String, CodingKey {
                case enterprise
                case installation
                case organization
                case repository
                case sender
                case team
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository`.
        public struct WebhookTeamAddedToRepository: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case addedToRepository = "added_to_repository"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/action`.
            public var action: Components.Schemas.WebhookTeamAddedToRepository.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/organization`.
            public var organization: Components.Schemas.OrganizationSimple
            /// A git repository
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository`.
            public struct RepositoryPayload: Codable, Hashable, Sendable {
                /// Whether to allow auto-merge for pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/allow_auto_merge`.
                public var allowAutoMerge: Swift.Bool?
                /// Whether to allow private forks
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/allow_forking`.
                public var allowForking: Swift.Bool?
                /// Whether to allow merge commits for pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/allow_merge_commit`.
                public var allowMergeCommit: Swift.Bool?
                /// Whether to allow rebase merges for pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/allow_rebase_merge`.
                public var allowRebaseMerge: Swift.Bool?
                /// Whether to allow squash merges for pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/allow_squash_merge`.
                public var allowSquashMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/allow_update_branch`.
                public var allowUpdateBranch: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/archive_url`.
                public var archiveUrl: Swift.String
                /// Whether the repository is archived.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/archived`.
                public var archived: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/assignees_url`.
                public var assigneesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/blobs_url`.
                public var blobsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/branches_url`.
                public var branchesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/clone_url`.
                public var cloneUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/collaborators_url`.
                public var collaboratorsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/comments_url`.
                public var commentsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/commits_url`.
                public var commitsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/compare_url`.
                public var compareUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/contents_url`.
                public var contentsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/contributors_url`.
                public var contributorsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/created_at`.
                @frozen public enum CreatedAtPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/created_at/case1`.
                    case case1(Swift.Int)
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/created_at/case2`.
                    case case2(Foundation.Date)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/created_at`.
                public var createdAt: Components.Schemas.WebhookTeamAddedToRepository.RepositoryPayload.CreatedAtPayload
                /// The default branch of the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/default_branch`.
                public var defaultBranch: Swift.String
                /// Whether to delete head branches when pull requests are merged
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/delete_branch_on_merge`.
                public var deleteBranchOnMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/deployments_url`.
                public var deploymentsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/description`.
                public var description: Swift.String?
                /// Returns whether or not this repository is disabled.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/disabled`.
                public var disabled: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/downloads_url`.
                public var downloadsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/events_url`.
                public var eventsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/fork`.
                public var fork: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/forks`.
                public var forks: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/forks_count`.
                public var forksCount: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/forks_url`.
                public var forksUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/full_name`.
                public var fullName: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/git_commits_url`.
                public var gitCommitsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/git_refs_url`.
                public var gitRefsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/git_tags_url`.
                public var gitTagsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/git_url`.
                public var gitUrl: Swift.String
                /// Whether downloads are enabled.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/has_downloads`.
                public var hasDownloads: Swift.Bool
                /// Whether issues are enabled.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/has_issues`.
                public var hasIssues: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/has_pages`.
                public var hasPages: Swift.Bool
                /// Whether projects are enabled.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/has_projects`.
                public var hasProjects: Swift.Bool
                /// Whether the wiki is enabled.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/has_wiki`.
                public var hasWiki: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/homepage`.
                public var homepage: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/hooks_url`.
                public var hooksUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/html_url`.
                public var htmlUrl: Swift.String
                /// Unique identifier of the repository
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/is_template`.
                public var isTemplate: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/issue_comment_url`.
                public var issueCommentUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/issue_events_url`.
                public var issueEventsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/issues_url`.
                public var issuesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/keys_url`.
                public var keysUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/labels_url`.
                public var labelsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/language`.
                public var language: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/languages_url`.
                public var languagesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/license`.
                public struct LicensePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/license/key`.
                    public var key: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/license/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/license/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/license/spdx_id`.
                    public var spdxId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/license/url`.
                    public var url: Swift.String?
                    /// Creates a new `LicensePayload`.
                    ///
                    /// - Parameters:
                    ///   - key:
                    ///   - name:
                    ///   - nodeId:
                    ///   - spdxId:
                    ///   - url:
                    public init(
                        key: Swift.String,
                        name: Swift.String,
                        nodeId: Swift.String,
                        spdxId: Swift.String,
                        url: Swift.String? = nil
                    ) {
                        self.key = key
                        self.name = name
                        self.nodeId = nodeId
                        self.spdxId = spdxId
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case key
                        case name
                        case nodeId = "node_id"
                        case spdxId = "spdx_id"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/license`.
                public var license: Components.Schemas.WebhookTeamAddedToRepository.RepositoryPayload.LicensePayload?
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/master_branch`.
                public var masterBranch: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/merges_url`.
                public var mergesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/milestones_url`.
                public var milestonesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/mirror_url`.
                public var mirrorUrl: Swift.String?
                /// The name of the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/notifications_url`.
                public var notificationsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/open_issues`.
                public var openIssues: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/open_issues_count`.
                public var openIssuesCount: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/organization`.
                public var organization: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/owner`.
                public struct OwnerPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/owner/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/owner/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/owner/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/owner/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/owner/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/owner/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/owner/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/owner/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/owner/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/owner/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/owner/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/owner/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/owner/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/owner/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/owner/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/owner/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/owner/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/owner/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/owner/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/owner/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/owner/type`.
                    public var _type: Components.Schemas.WebhookTeamAddedToRepository.RepositoryPayload.OwnerPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/owner/url`.
                    public var url: Swift.String?
                    /// Creates a new `OwnerPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookTeamAddedToRepository.RepositoryPayload.OwnerPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/owner`.
                public var owner: Components.Schemas.WebhookTeamAddedToRepository.RepositoryPayload.OwnerPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/permissions`.
                public struct PermissionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/permissions/admin`.
                    public var admin: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/permissions/maintain`.
                    public var maintain: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/permissions/pull`.
                    public var pull: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/permissions/push`.
                    public var push: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/permissions/triage`.
                    public var triage: Swift.Bool?
                    /// Creates a new `PermissionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - admin:
                    ///   - maintain:
                    ///   - pull:
                    ///   - push:
                    ///   - triage:
                    public init(
                        admin: Swift.Bool,
                        maintain: Swift.Bool? = nil,
                        pull: Swift.Bool,
                        push: Swift.Bool,
                        triage: Swift.Bool? = nil
                    ) {
                        self.admin = admin
                        self.maintain = maintain
                        self.pull = pull
                        self.push = push
                        self.triage = triage
                    }
                    public enum CodingKeys: String, CodingKey {
                        case admin
                        case maintain
                        case pull
                        case push
                        case triage
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/permissions`.
                public var permissions: Components.Schemas.WebhookTeamAddedToRepository.RepositoryPayload.PermissionsPayload?
                /// Whether the repository is private or public.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/private`.
                public var _private: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/public`.
                public var _public: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/pulls_url`.
                public var pullsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/pushed_at`.
                @frozen public enum PushedAtPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/pushed_at/case1`.
                    case case1(Swift.Int)
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/pushed_at/case2`.
                    case case2(Foundation.Date)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/pushed_at`.
                public var pushedAt: Components.Schemas.WebhookTeamAddedToRepository.RepositoryPayload.PushedAtPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/releases_url`.
                public var releasesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/role_name`.
                public var roleName: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/size`.
                public var size: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/ssh_url`.
                public var sshUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/stargazers`.
                public var stargazers: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/stargazers_count`.
                public var stargazersCount: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/stargazers_url`.
                public var stargazersUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/statuses_url`.
                public var statusesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/subscribers_url`.
                public var subscribersUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/subscription_url`.
                public var subscriptionUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/svn_url`.
                public var svnUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/tags_url`.
                public var tagsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/teams_url`.
                public var teamsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/topics`.
                public var topics: [Swift.String]
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/trees_url`.
                public var treesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/updated_at`.
                public var updatedAt: Foundation.Date
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/visibility`.
                @frozen public enum VisibilityPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case _public = "public"
                    case _private = "private"
                    case _internal = "internal"
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/visibility`.
                public var visibility: Components.Schemas.WebhookTeamAddedToRepository.RepositoryPayload.VisibilityPayload
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/watchers`.
                public var watchers: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository/watchers_count`.
                public var watchersCount: Swift.Int
                /// Creates a new `RepositoryPayload`.
                ///
                /// - Parameters:
                ///   - allowAutoMerge: Whether to allow auto-merge for pull requests.
                ///   - allowForking: Whether to allow private forks
                ///   - allowMergeCommit: Whether to allow merge commits for pull requests.
                ///   - allowRebaseMerge: Whether to allow rebase merges for pull requests.
                ///   - allowSquashMerge: Whether to allow squash merges for pull requests.
                ///   - allowUpdateBranch:
                ///   - archiveUrl:
                ///   - archived: Whether the repository is archived.
                ///   - assigneesUrl:
                ///   - blobsUrl:
                ///   - branchesUrl:
                ///   - cloneUrl:
                ///   - collaboratorsUrl:
                ///   - commentsUrl:
                ///   - commitsUrl:
                ///   - compareUrl:
                ///   - contentsUrl:
                ///   - contributorsUrl:
                ///   - createdAt:
                ///   - defaultBranch: The default branch of the repository.
                ///   - deleteBranchOnMerge: Whether to delete head branches when pull requests are merged
                ///   - deploymentsUrl:
                ///   - description:
                ///   - disabled: Returns whether or not this repository is disabled.
                ///   - downloadsUrl:
                ///   - eventsUrl:
                ///   - fork:
                ///   - forks:
                ///   - forksCount:
                ///   - forksUrl:
                ///   - fullName:
                ///   - gitCommitsUrl:
                ///   - gitRefsUrl:
                ///   - gitTagsUrl:
                ///   - gitUrl:
                ///   - hasDownloads: Whether downloads are enabled.
                ///   - hasIssues: Whether issues are enabled.
                ///   - hasPages:
                ///   - hasProjects: Whether projects are enabled.
                ///   - hasWiki: Whether the wiki is enabled.
                ///   - homepage:
                ///   - hooksUrl:
                ///   - htmlUrl:
                ///   - id: Unique identifier of the repository
                ///   - isTemplate:
                ///   - issueCommentUrl:
                ///   - issueEventsUrl:
                ///   - issuesUrl:
                ///   - keysUrl:
                ///   - labelsUrl:
                ///   - language:
                ///   - languagesUrl:
                ///   - license:
                ///   - masterBranch:
                ///   - mergesUrl:
                ///   - milestonesUrl:
                ///   - mirrorUrl:
                ///   - name: The name of the repository.
                ///   - nodeId:
                ///   - notificationsUrl:
                ///   - openIssues:
                ///   - openIssuesCount:
                ///   - organization:
                ///   - owner:
                ///   - permissions:
                ///   - _private: Whether the repository is private or public.
                ///   - _public:
                ///   - pullsUrl:
                ///   - pushedAt:
                ///   - releasesUrl:
                ///   - roleName:
                ///   - size:
                ///   - sshUrl:
                ///   - stargazers:
                ///   - stargazersCount:
                ///   - stargazersUrl:
                ///   - statusesUrl:
                ///   - subscribersUrl:
                ///   - subscriptionUrl:
                ///   - svnUrl:
                ///   - tagsUrl:
                ///   - teamsUrl:
                ///   - topics:
                ///   - treesUrl:
                ///   - updatedAt:
                ///   - url:
                ///   - visibility:
                ///   - watchers:
                ///   - watchersCount:
                public init(
                    allowAutoMerge: Swift.Bool? = nil,
                    allowForking: Swift.Bool? = nil,
                    allowMergeCommit: Swift.Bool? = nil,
                    allowRebaseMerge: Swift.Bool? = nil,
                    allowSquashMerge: Swift.Bool? = nil,
                    allowUpdateBranch: Swift.Bool? = nil,
                    archiveUrl: Swift.String,
                    archived: Swift.Bool,
                    assigneesUrl: Swift.String,
                    blobsUrl: Swift.String,
                    branchesUrl: Swift.String,
                    cloneUrl: Swift.String,
                    collaboratorsUrl: Swift.String,
                    commentsUrl: Swift.String,
                    commitsUrl: Swift.String,
                    compareUrl: Swift.String,
                    contentsUrl: Swift.String,
                    contributorsUrl: Swift.String,
                    createdAt: Components.Schemas.WebhookTeamAddedToRepository.RepositoryPayload.CreatedAtPayload,
                    defaultBranch: Swift.String,
                    deleteBranchOnMerge: Swift.Bool? = nil,
                    deploymentsUrl: Swift.String,
                    description: Swift.String? = nil,
                    disabled: Swift.Bool? = nil,
                    downloadsUrl: Swift.String,
                    eventsUrl: Swift.String,
                    fork: Swift.Bool,
                    forks: Swift.Int,
                    forksCount: Swift.Int,
                    forksUrl: Swift.String,
                    fullName: Swift.String,
                    gitCommitsUrl: Swift.String,
                    gitRefsUrl: Swift.String,
                    gitTagsUrl: Swift.String,
                    gitUrl: Swift.String,
                    hasDownloads: Swift.Bool,
                    hasIssues: Swift.Bool,
                    hasPages: Swift.Bool,
                    hasProjects: Swift.Bool,
                    hasWiki: Swift.Bool,
                    homepage: Swift.String? = nil,
                    hooksUrl: Swift.String,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    isTemplate: Swift.Bool? = nil,
                    issueCommentUrl: Swift.String,
                    issueEventsUrl: Swift.String,
                    issuesUrl: Swift.String,
                    keysUrl: Swift.String,
                    labelsUrl: Swift.String,
                    language: Swift.String? = nil,
                    languagesUrl: Swift.String,
                    license: Components.Schemas.WebhookTeamAddedToRepository.RepositoryPayload.LicensePayload? = nil,
                    masterBranch: Swift.String? = nil,
                    mergesUrl: Swift.String,
                    milestonesUrl: Swift.String,
                    mirrorUrl: Swift.String? = nil,
                    name: Swift.String,
                    nodeId: Swift.String,
                    notificationsUrl: Swift.String,
                    openIssues: Swift.Int,
                    openIssuesCount: Swift.Int,
                    organization: Swift.String? = nil,
                    owner: Components.Schemas.WebhookTeamAddedToRepository.RepositoryPayload.OwnerPayload? = nil,
                    permissions: Components.Schemas.WebhookTeamAddedToRepository.RepositoryPayload.PermissionsPayload? = nil,
                    _private: Swift.Bool,
                    _public: Swift.Bool? = nil,
                    pullsUrl: Swift.String,
                    pushedAt: Components.Schemas.WebhookTeamAddedToRepository.RepositoryPayload.PushedAtPayload? = nil,
                    releasesUrl: Swift.String,
                    roleName: Swift.String? = nil,
                    size: Swift.Int,
                    sshUrl: Swift.String,
                    stargazers: Swift.Int? = nil,
                    stargazersCount: Swift.Int,
                    stargazersUrl: Swift.String,
                    statusesUrl: Swift.String,
                    subscribersUrl: Swift.String,
                    subscriptionUrl: Swift.String,
                    svnUrl: Swift.String,
                    tagsUrl: Swift.String,
                    teamsUrl: Swift.String,
                    topics: [Swift.String],
                    treesUrl: Swift.String,
                    updatedAt: Foundation.Date,
                    url: Swift.String,
                    visibility: Components.Schemas.WebhookTeamAddedToRepository.RepositoryPayload.VisibilityPayload,
                    watchers: Swift.Int,
                    watchersCount: Swift.Int
                ) {
                    self.allowAutoMerge = allowAutoMerge
                    self.allowForking = allowForking
                    self.allowMergeCommit = allowMergeCommit
                    self.allowRebaseMerge = allowRebaseMerge
                    self.allowSquashMerge = allowSquashMerge
                    self.allowUpdateBranch = allowUpdateBranch
                    self.archiveUrl = archiveUrl
                    self.archived = archived
                    self.assigneesUrl = assigneesUrl
                    self.blobsUrl = blobsUrl
                    self.branchesUrl = branchesUrl
                    self.cloneUrl = cloneUrl
                    self.collaboratorsUrl = collaboratorsUrl
                    self.commentsUrl = commentsUrl
                    self.commitsUrl = commitsUrl
                    self.compareUrl = compareUrl
                    self.contentsUrl = contentsUrl
                    self.contributorsUrl = contributorsUrl
                    self.createdAt = createdAt
                    self.defaultBranch = defaultBranch
                    self.deleteBranchOnMerge = deleteBranchOnMerge
                    self.deploymentsUrl = deploymentsUrl
                    self.description = description
                    self.disabled = disabled
                    self.downloadsUrl = downloadsUrl
                    self.eventsUrl = eventsUrl
                    self.fork = fork
                    self.forks = forks
                    self.forksCount = forksCount
                    self.forksUrl = forksUrl
                    self.fullName = fullName
                    self.gitCommitsUrl = gitCommitsUrl
                    self.gitRefsUrl = gitRefsUrl
                    self.gitTagsUrl = gitTagsUrl
                    self.gitUrl = gitUrl
                    self.hasDownloads = hasDownloads
                    self.hasIssues = hasIssues
                    self.hasPages = hasPages
                    self.hasProjects = hasProjects
                    self.hasWiki = hasWiki
                    self.homepage = homepage
                    self.hooksUrl = hooksUrl
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.isTemplate = isTemplate
                    self.issueCommentUrl = issueCommentUrl
                    self.issueEventsUrl = issueEventsUrl
                    self.issuesUrl = issuesUrl
                    self.keysUrl = keysUrl
                    self.labelsUrl = labelsUrl
                    self.language = language
                    self.languagesUrl = languagesUrl
                    self.license = license
                    self.masterBranch = masterBranch
                    self.mergesUrl = mergesUrl
                    self.milestonesUrl = milestonesUrl
                    self.mirrorUrl = mirrorUrl
                    self.name = name
                    self.nodeId = nodeId
                    self.notificationsUrl = notificationsUrl
                    self.openIssues = openIssues
                    self.openIssuesCount = openIssuesCount
                    self.organization = organization
                    self.owner = owner
                    self.permissions = permissions
                    self._private = _private
                    self._public = _public
                    self.pullsUrl = pullsUrl
                    self.pushedAt = pushedAt
                    self.releasesUrl = releasesUrl
                    self.roleName = roleName
                    self.size = size
                    self.sshUrl = sshUrl
                    self.stargazers = stargazers
                    self.stargazersCount = stargazersCount
                    self.stargazersUrl = stargazersUrl
                    self.statusesUrl = statusesUrl
                    self.subscribersUrl = subscribersUrl
                    self.subscriptionUrl = subscriptionUrl
                    self.svnUrl = svnUrl
                    self.tagsUrl = tagsUrl
                    self.teamsUrl = teamsUrl
                    self.topics = topics
                    self.treesUrl = treesUrl
                    self.updatedAt = updatedAt
                    self.url = url
                    self.visibility = visibility
                    self.watchers = watchers
                    self.watchersCount = watchersCount
                }
                public enum CodingKeys: String, CodingKey {
                    case allowAutoMerge = "allow_auto_merge"
                    case allowForking = "allow_forking"
                    case allowMergeCommit = "allow_merge_commit"
                    case allowRebaseMerge = "allow_rebase_merge"
                    case allowSquashMerge = "allow_squash_merge"
                    case allowUpdateBranch = "allow_update_branch"
                    case archiveUrl = "archive_url"
                    case archived
                    case assigneesUrl = "assignees_url"
                    case blobsUrl = "blobs_url"
                    case branchesUrl = "branches_url"
                    case cloneUrl = "clone_url"
                    case collaboratorsUrl = "collaborators_url"
                    case commentsUrl = "comments_url"
                    case commitsUrl = "commits_url"
                    case compareUrl = "compare_url"
                    case contentsUrl = "contents_url"
                    case contributorsUrl = "contributors_url"
                    case createdAt = "created_at"
                    case defaultBranch = "default_branch"
                    case deleteBranchOnMerge = "delete_branch_on_merge"
                    case deploymentsUrl = "deployments_url"
                    case description
                    case disabled
                    case downloadsUrl = "downloads_url"
                    case eventsUrl = "events_url"
                    case fork
                    case forks
                    case forksCount = "forks_count"
                    case forksUrl = "forks_url"
                    case fullName = "full_name"
                    case gitCommitsUrl = "git_commits_url"
                    case gitRefsUrl = "git_refs_url"
                    case gitTagsUrl = "git_tags_url"
                    case gitUrl = "git_url"
                    case hasDownloads = "has_downloads"
                    case hasIssues = "has_issues"
                    case hasPages = "has_pages"
                    case hasProjects = "has_projects"
                    case hasWiki = "has_wiki"
                    case homepage
                    case hooksUrl = "hooks_url"
                    case htmlUrl = "html_url"
                    case id
                    case isTemplate = "is_template"
                    case issueCommentUrl = "issue_comment_url"
                    case issueEventsUrl = "issue_events_url"
                    case issuesUrl = "issues_url"
                    case keysUrl = "keys_url"
                    case labelsUrl = "labels_url"
                    case language
                    case languagesUrl = "languages_url"
                    case license
                    case masterBranch = "master_branch"
                    case mergesUrl = "merges_url"
                    case milestonesUrl = "milestones_url"
                    case mirrorUrl = "mirror_url"
                    case name
                    case nodeId = "node_id"
                    case notificationsUrl = "notifications_url"
                    case openIssues = "open_issues"
                    case openIssuesCount = "open_issues_count"
                    case organization
                    case owner
                    case permissions
                    case _private = "private"
                    case _public = "public"
                    case pullsUrl = "pulls_url"
                    case pushedAt = "pushed_at"
                    case releasesUrl = "releases_url"
                    case roleName = "role_name"
                    case size
                    case sshUrl = "ssh_url"
                    case stargazers
                    case stargazersCount = "stargazers_count"
                    case stargazersUrl = "stargazers_url"
                    case statusesUrl = "statuses_url"
                    case subscribersUrl = "subscribers_url"
                    case subscriptionUrl = "subscription_url"
                    case svnUrl = "svn_url"
                    case tagsUrl = "tags_url"
                    case teamsUrl = "teams_url"
                    case topics
                    case treesUrl = "trees_url"
                    case updatedAt = "updated_at"
                    case url
                    case visibility
                    case watchers
                    case watchersCount = "watchers_count"
                }
            }
            /// A git repository
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/repository`.
            public var repository: Components.Schemas.WebhookTeamAddedToRepository.RepositoryPayload?
            /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/sender`.
            public var sender: Components.Schemas.SimpleUser?
            /// Groups of organization members that gives permissions on specified repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/team`.
            public struct TeamPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/team/deleted`.
                public var deleted: Swift.Bool?
                /// Description of the team
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/team/description`.
                public var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/team/html_url`.
                public var htmlUrl: Swift.String?
                /// Unique identifier of the team
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/team/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/team/members_url`.
                public var membersUrl: Swift.String?
                /// Name of the team
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/team/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/team/node_id`.
                public var nodeId: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/team/parent`.
                public struct ParentPayload: Codable, Hashable, Sendable {
                    /// Description of the team
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/team/parent/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/team/parent/html_url`.
                    public var htmlUrl: Swift.String
                    /// Unique identifier of the team
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/team/parent/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/team/parent/members_url`.
                    public var membersUrl: Swift.String
                    /// Name of the team
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/team/parent/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/team/parent/node_id`.
                    public var nodeId: Swift.String
                    /// Permission that the team will have for its repositories
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/team/parent/permission`.
                    public var permission: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/team/parent/privacy`.
                    @frozen public enum PrivacyPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case closed = "closed"
                        case secret = "secret"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/team/parent/privacy`.
                    public var privacy: Components.Schemas.WebhookTeamAddedToRepository.TeamPayload.ParentPayload.PrivacyPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/team/parent/repositories_url`.
                    public var repositoriesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/team/parent/slug`.
                    public var slug: Swift.String
                    /// URL for the team
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/team/parent/url`.
                    public var url: Swift.String
                    /// Creates a new `ParentPayload`.
                    ///
                    /// - Parameters:
                    ///   - description: Description of the team
                    ///   - htmlUrl:
                    ///   - id: Unique identifier of the team
                    ///   - membersUrl:
                    ///   - name: Name of the team
                    ///   - nodeId:
                    ///   - permission: Permission that the team will have for its repositories
                    ///   - privacy:
                    ///   - repositoriesUrl:
                    ///   - slug:
                    ///   - url: URL for the team
                    public init(
                        description: Swift.String? = nil,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        membersUrl: Swift.String,
                        name: Swift.String,
                        nodeId: Swift.String,
                        permission: Swift.String,
                        privacy: Components.Schemas.WebhookTeamAddedToRepository.TeamPayload.ParentPayload.PrivacyPayload,
                        repositoriesUrl: Swift.String,
                        slug: Swift.String,
                        url: Swift.String
                    ) {
                        self.description = description
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.membersUrl = membersUrl
                        self.name = name
                        self.nodeId = nodeId
                        self.permission = permission
                        self.privacy = privacy
                        self.repositoriesUrl = repositoriesUrl
                        self.slug = slug
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case description
                        case htmlUrl = "html_url"
                        case id
                        case membersUrl = "members_url"
                        case name
                        case nodeId = "node_id"
                        case permission
                        case privacy
                        case repositoriesUrl = "repositories_url"
                        case slug
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/team/parent`.
                public var parent: Components.Schemas.WebhookTeamAddedToRepository.TeamPayload.ParentPayload?
                /// Permission that the team will have for its repositories
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/team/permission`.
                public var permission: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/team/privacy`.
                @frozen public enum PrivacyPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case open = "open"
                    case closed = "closed"
                    case secret = "secret"
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/team/privacy`.
                public var privacy: Components.Schemas.WebhookTeamAddedToRepository.TeamPayload.PrivacyPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/team/repositories_url`.
                public var repositoriesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/team/slug`.
                public var slug: Swift.String?
                /// URL for the team
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/team/url`.
                public var url: Swift.String?
                /// Creates a new `TeamPayload`.
                ///
                /// - Parameters:
                ///   - deleted:
                ///   - description: Description of the team
                ///   - htmlUrl:
                ///   - id: Unique identifier of the team
                ///   - membersUrl:
                ///   - name: Name of the team
                ///   - nodeId:
                ///   - parent:
                ///   - permission: Permission that the team will have for its repositories
                ///   - privacy:
                ///   - repositoriesUrl:
                ///   - slug:
                ///   - url: URL for the team
                public init(
                    deleted: Swift.Bool? = nil,
                    description: Swift.String? = nil,
                    htmlUrl: Swift.String? = nil,
                    id: Swift.Int,
                    membersUrl: Swift.String? = nil,
                    name: Swift.String,
                    nodeId: Swift.String? = nil,
                    parent: Components.Schemas.WebhookTeamAddedToRepository.TeamPayload.ParentPayload? = nil,
                    permission: Swift.String? = nil,
                    privacy: Components.Schemas.WebhookTeamAddedToRepository.TeamPayload.PrivacyPayload? = nil,
                    repositoriesUrl: Swift.String? = nil,
                    slug: Swift.String? = nil,
                    url: Swift.String? = nil
                ) {
                    self.deleted = deleted
                    self.description = description
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.membersUrl = membersUrl
                    self.name = name
                    self.nodeId = nodeId
                    self.parent = parent
                    self.permission = permission
                    self.privacy = privacy
                    self.repositoriesUrl = repositoriesUrl
                    self.slug = slug
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case deleted
                    case description
                    case htmlUrl = "html_url"
                    case id
                    case membersUrl = "members_url"
                    case name
                    case nodeId = "node_id"
                    case parent
                    case permission
                    case privacy
                    case repositoriesUrl = "repositories_url"
                    case slug
                    case url
                }
            }
            /// Groups of organization members that gives permissions on specified repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-team-added-to-repository/team`.
            public var team: Components.Schemas.WebhookTeamAddedToRepository.TeamPayload
            /// Creates a new `WebhookTeamAddedToRepository`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - enterprise:
            ///   - installation:
            ///   - organization:
            ///   - repository: A git repository
            ///   - sender:
            ///   - team: Groups of organization members that gives permissions on specified repositories.
            public init(
                action: Components.Schemas.WebhookTeamAddedToRepository.ActionPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                organization: Components.Schemas.OrganizationSimple,
                repository: Components.Schemas.WebhookTeamAddedToRepository.RepositoryPayload? = nil,
                sender: Components.Schemas.SimpleUser? = nil,
                team: Components.Schemas.WebhookTeamAddedToRepository.TeamPayload
            ) {
                self.action = action
                self.enterprise = enterprise
                self.installation = installation
                self.organization = organization
                self.repository = repository
                self.sender = sender
                self.team = team
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case enterprise
                case installation
                case organization
                case repository
                case sender
                case team
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-team-created`.
        public struct WebhookTeamCreated: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-team-created/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case created = "created"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-team-created/action`.
            public var action: Components.Schemas.WebhookTeamCreated.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-team-created/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-team-created/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-team-created/organization`.
            public var organization: Components.Schemas.OrganizationSimple
            /// A git repository
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository`.
            public struct RepositoryPayload: Codable, Hashable, Sendable {
                /// Whether to allow auto-merge for pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/allow_auto_merge`.
                public var allowAutoMerge: Swift.Bool?
                /// Whether to allow private forks
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/allow_forking`.
                public var allowForking: Swift.Bool?
                /// Whether to allow merge commits for pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/allow_merge_commit`.
                public var allowMergeCommit: Swift.Bool?
                /// Whether to allow rebase merges for pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/allow_rebase_merge`.
                public var allowRebaseMerge: Swift.Bool?
                /// Whether to allow squash merges for pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/allow_squash_merge`.
                public var allowSquashMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/allow_update_branch`.
                public var allowUpdateBranch: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/archive_url`.
                public var archiveUrl: Swift.String
                /// Whether the repository is archived.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/archived`.
                public var archived: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/assignees_url`.
                public var assigneesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/blobs_url`.
                public var blobsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/branches_url`.
                public var branchesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/clone_url`.
                public var cloneUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/collaborators_url`.
                public var collaboratorsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/comments_url`.
                public var commentsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/commits_url`.
                public var commitsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/compare_url`.
                public var compareUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/contents_url`.
                public var contentsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/contributors_url`.
                public var contributorsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/created_at`.
                @frozen public enum CreatedAtPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/created_at/case1`.
                    case case1(Swift.Int)
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/created_at/case2`.
                    case case2(Foundation.Date)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/created_at`.
                public var createdAt: Components.Schemas.WebhookTeamCreated.RepositoryPayload.CreatedAtPayload
                /// The default branch of the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/default_branch`.
                public var defaultBranch: Swift.String
                /// Whether to delete head branches when pull requests are merged
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/delete_branch_on_merge`.
                public var deleteBranchOnMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/deployments_url`.
                public var deploymentsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/description`.
                public var description: Swift.String?
                /// Returns whether or not this repository is disabled.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/disabled`.
                public var disabled: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/downloads_url`.
                public var downloadsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/events_url`.
                public var eventsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/fork`.
                public var fork: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/forks`.
                public var forks: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/forks_count`.
                public var forksCount: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/forks_url`.
                public var forksUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/full_name`.
                public var fullName: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/git_commits_url`.
                public var gitCommitsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/git_refs_url`.
                public var gitRefsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/git_tags_url`.
                public var gitTagsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/git_url`.
                public var gitUrl: Swift.String
                /// Whether downloads are enabled.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/has_downloads`.
                public var hasDownloads: Swift.Bool
                /// Whether issues are enabled.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/has_issues`.
                public var hasIssues: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/has_pages`.
                public var hasPages: Swift.Bool
                /// Whether projects are enabled.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/has_projects`.
                public var hasProjects: Swift.Bool
                /// Whether the wiki is enabled.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/has_wiki`.
                public var hasWiki: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/homepage`.
                public var homepage: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/hooks_url`.
                public var hooksUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/html_url`.
                public var htmlUrl: Swift.String
                /// Unique identifier of the repository
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/is_template`.
                public var isTemplate: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/issue_comment_url`.
                public var issueCommentUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/issue_events_url`.
                public var issueEventsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/issues_url`.
                public var issuesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/keys_url`.
                public var keysUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/labels_url`.
                public var labelsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/language`.
                public var language: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/languages_url`.
                public var languagesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/license`.
                public struct LicensePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/license/key`.
                    public var key: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/license/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/license/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/license/spdx_id`.
                    public var spdxId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/license/url`.
                    public var url: Swift.String?
                    /// Creates a new `LicensePayload`.
                    ///
                    /// - Parameters:
                    ///   - key:
                    ///   - name:
                    ///   - nodeId:
                    ///   - spdxId:
                    ///   - url:
                    public init(
                        key: Swift.String,
                        name: Swift.String,
                        nodeId: Swift.String,
                        spdxId: Swift.String,
                        url: Swift.String? = nil
                    ) {
                        self.key = key
                        self.name = name
                        self.nodeId = nodeId
                        self.spdxId = spdxId
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case key
                        case name
                        case nodeId = "node_id"
                        case spdxId = "spdx_id"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/license`.
                public var license: Components.Schemas.WebhookTeamCreated.RepositoryPayload.LicensePayload?
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/master_branch`.
                public var masterBranch: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/merges_url`.
                public var mergesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/milestones_url`.
                public var milestonesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/mirror_url`.
                public var mirrorUrl: Swift.String?
                /// The name of the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/notifications_url`.
                public var notificationsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/open_issues`.
                public var openIssues: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/open_issues_count`.
                public var openIssuesCount: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/organization`.
                public var organization: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/owner`.
                public struct OwnerPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/owner/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/owner/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/owner/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/owner/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/owner/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/owner/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/owner/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/owner/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/owner/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/owner/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/owner/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/owner/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/owner/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/owner/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/owner/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/owner/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/owner/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/owner/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/owner/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/owner/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/owner/type`.
                    public var _type: Components.Schemas.WebhookTeamCreated.RepositoryPayload.OwnerPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/owner/url`.
                    public var url: Swift.String?
                    /// Creates a new `OwnerPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookTeamCreated.RepositoryPayload.OwnerPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/owner`.
                public var owner: Components.Schemas.WebhookTeamCreated.RepositoryPayload.OwnerPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/permissions`.
                public struct PermissionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/permissions/admin`.
                    public var admin: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/permissions/maintain`.
                    public var maintain: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/permissions/pull`.
                    public var pull: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/permissions/push`.
                    public var push: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/permissions/triage`.
                    public var triage: Swift.Bool?
                    /// Creates a new `PermissionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - admin:
                    ///   - maintain:
                    ///   - pull:
                    ///   - push:
                    ///   - triage:
                    public init(
                        admin: Swift.Bool,
                        maintain: Swift.Bool? = nil,
                        pull: Swift.Bool,
                        push: Swift.Bool,
                        triage: Swift.Bool? = nil
                    ) {
                        self.admin = admin
                        self.maintain = maintain
                        self.pull = pull
                        self.push = push
                        self.triage = triage
                    }
                    public enum CodingKeys: String, CodingKey {
                        case admin
                        case maintain
                        case pull
                        case push
                        case triage
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/permissions`.
                public var permissions: Components.Schemas.WebhookTeamCreated.RepositoryPayload.PermissionsPayload?
                /// Whether the repository is private or public.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/private`.
                public var _private: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/public`.
                public var _public: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/pulls_url`.
                public var pullsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/pushed_at`.
                @frozen public enum PushedAtPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/pushed_at/case1`.
                    case case1(Swift.Int)
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/pushed_at/case2`.
                    case case2(Foundation.Date)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/pushed_at`.
                public var pushedAt: Components.Schemas.WebhookTeamCreated.RepositoryPayload.PushedAtPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/releases_url`.
                public var releasesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/role_name`.
                public var roleName: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/size`.
                public var size: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/ssh_url`.
                public var sshUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/stargazers`.
                public var stargazers: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/stargazers_count`.
                public var stargazersCount: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/stargazers_url`.
                public var stargazersUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/statuses_url`.
                public var statusesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/subscribers_url`.
                public var subscribersUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/subscription_url`.
                public var subscriptionUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/svn_url`.
                public var svnUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/tags_url`.
                public var tagsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/teams_url`.
                public var teamsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/topics`.
                public var topics: [Swift.String]
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/trees_url`.
                public var treesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/updated_at`.
                public var updatedAt: Foundation.Date
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/visibility`.
                @frozen public enum VisibilityPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case _public = "public"
                    case _private = "private"
                    case _internal = "internal"
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/visibility`.
                public var visibility: Components.Schemas.WebhookTeamCreated.RepositoryPayload.VisibilityPayload
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/watchers`.
                public var watchers: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository/watchers_count`.
                public var watchersCount: Swift.Int
                /// Creates a new `RepositoryPayload`.
                ///
                /// - Parameters:
                ///   - allowAutoMerge: Whether to allow auto-merge for pull requests.
                ///   - allowForking: Whether to allow private forks
                ///   - allowMergeCommit: Whether to allow merge commits for pull requests.
                ///   - allowRebaseMerge: Whether to allow rebase merges for pull requests.
                ///   - allowSquashMerge: Whether to allow squash merges for pull requests.
                ///   - allowUpdateBranch:
                ///   - archiveUrl:
                ///   - archived: Whether the repository is archived.
                ///   - assigneesUrl:
                ///   - blobsUrl:
                ///   - branchesUrl:
                ///   - cloneUrl:
                ///   - collaboratorsUrl:
                ///   - commentsUrl:
                ///   - commitsUrl:
                ///   - compareUrl:
                ///   - contentsUrl:
                ///   - contributorsUrl:
                ///   - createdAt:
                ///   - defaultBranch: The default branch of the repository.
                ///   - deleteBranchOnMerge: Whether to delete head branches when pull requests are merged
                ///   - deploymentsUrl:
                ///   - description:
                ///   - disabled: Returns whether or not this repository is disabled.
                ///   - downloadsUrl:
                ///   - eventsUrl:
                ///   - fork:
                ///   - forks:
                ///   - forksCount:
                ///   - forksUrl:
                ///   - fullName:
                ///   - gitCommitsUrl:
                ///   - gitRefsUrl:
                ///   - gitTagsUrl:
                ///   - gitUrl:
                ///   - hasDownloads: Whether downloads are enabled.
                ///   - hasIssues: Whether issues are enabled.
                ///   - hasPages:
                ///   - hasProjects: Whether projects are enabled.
                ///   - hasWiki: Whether the wiki is enabled.
                ///   - homepage:
                ///   - hooksUrl:
                ///   - htmlUrl:
                ///   - id: Unique identifier of the repository
                ///   - isTemplate:
                ///   - issueCommentUrl:
                ///   - issueEventsUrl:
                ///   - issuesUrl:
                ///   - keysUrl:
                ///   - labelsUrl:
                ///   - language:
                ///   - languagesUrl:
                ///   - license:
                ///   - masterBranch:
                ///   - mergesUrl:
                ///   - milestonesUrl:
                ///   - mirrorUrl:
                ///   - name: The name of the repository.
                ///   - nodeId:
                ///   - notificationsUrl:
                ///   - openIssues:
                ///   - openIssuesCount:
                ///   - organization:
                ///   - owner:
                ///   - permissions:
                ///   - _private: Whether the repository is private or public.
                ///   - _public:
                ///   - pullsUrl:
                ///   - pushedAt:
                ///   - releasesUrl:
                ///   - roleName:
                ///   - size:
                ///   - sshUrl:
                ///   - stargazers:
                ///   - stargazersCount:
                ///   - stargazersUrl:
                ///   - statusesUrl:
                ///   - subscribersUrl:
                ///   - subscriptionUrl:
                ///   - svnUrl:
                ///   - tagsUrl:
                ///   - teamsUrl:
                ///   - topics:
                ///   - treesUrl:
                ///   - updatedAt:
                ///   - url:
                ///   - visibility:
                ///   - watchers:
                ///   - watchersCount:
                public init(
                    allowAutoMerge: Swift.Bool? = nil,
                    allowForking: Swift.Bool? = nil,
                    allowMergeCommit: Swift.Bool? = nil,
                    allowRebaseMerge: Swift.Bool? = nil,
                    allowSquashMerge: Swift.Bool? = nil,
                    allowUpdateBranch: Swift.Bool? = nil,
                    archiveUrl: Swift.String,
                    archived: Swift.Bool,
                    assigneesUrl: Swift.String,
                    blobsUrl: Swift.String,
                    branchesUrl: Swift.String,
                    cloneUrl: Swift.String,
                    collaboratorsUrl: Swift.String,
                    commentsUrl: Swift.String,
                    commitsUrl: Swift.String,
                    compareUrl: Swift.String,
                    contentsUrl: Swift.String,
                    contributorsUrl: Swift.String,
                    createdAt: Components.Schemas.WebhookTeamCreated.RepositoryPayload.CreatedAtPayload,
                    defaultBranch: Swift.String,
                    deleteBranchOnMerge: Swift.Bool? = nil,
                    deploymentsUrl: Swift.String,
                    description: Swift.String? = nil,
                    disabled: Swift.Bool? = nil,
                    downloadsUrl: Swift.String,
                    eventsUrl: Swift.String,
                    fork: Swift.Bool,
                    forks: Swift.Int,
                    forksCount: Swift.Int,
                    forksUrl: Swift.String,
                    fullName: Swift.String,
                    gitCommitsUrl: Swift.String,
                    gitRefsUrl: Swift.String,
                    gitTagsUrl: Swift.String,
                    gitUrl: Swift.String,
                    hasDownloads: Swift.Bool,
                    hasIssues: Swift.Bool,
                    hasPages: Swift.Bool,
                    hasProjects: Swift.Bool,
                    hasWiki: Swift.Bool,
                    homepage: Swift.String? = nil,
                    hooksUrl: Swift.String,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    isTemplate: Swift.Bool? = nil,
                    issueCommentUrl: Swift.String,
                    issueEventsUrl: Swift.String,
                    issuesUrl: Swift.String,
                    keysUrl: Swift.String,
                    labelsUrl: Swift.String,
                    language: Swift.String? = nil,
                    languagesUrl: Swift.String,
                    license: Components.Schemas.WebhookTeamCreated.RepositoryPayload.LicensePayload? = nil,
                    masterBranch: Swift.String? = nil,
                    mergesUrl: Swift.String,
                    milestonesUrl: Swift.String,
                    mirrorUrl: Swift.String? = nil,
                    name: Swift.String,
                    nodeId: Swift.String,
                    notificationsUrl: Swift.String,
                    openIssues: Swift.Int,
                    openIssuesCount: Swift.Int,
                    organization: Swift.String? = nil,
                    owner: Components.Schemas.WebhookTeamCreated.RepositoryPayload.OwnerPayload? = nil,
                    permissions: Components.Schemas.WebhookTeamCreated.RepositoryPayload.PermissionsPayload? = nil,
                    _private: Swift.Bool,
                    _public: Swift.Bool? = nil,
                    pullsUrl: Swift.String,
                    pushedAt: Components.Schemas.WebhookTeamCreated.RepositoryPayload.PushedAtPayload? = nil,
                    releasesUrl: Swift.String,
                    roleName: Swift.String? = nil,
                    size: Swift.Int,
                    sshUrl: Swift.String,
                    stargazers: Swift.Int? = nil,
                    stargazersCount: Swift.Int,
                    stargazersUrl: Swift.String,
                    statusesUrl: Swift.String,
                    subscribersUrl: Swift.String,
                    subscriptionUrl: Swift.String,
                    svnUrl: Swift.String,
                    tagsUrl: Swift.String,
                    teamsUrl: Swift.String,
                    topics: [Swift.String],
                    treesUrl: Swift.String,
                    updatedAt: Foundation.Date,
                    url: Swift.String,
                    visibility: Components.Schemas.WebhookTeamCreated.RepositoryPayload.VisibilityPayload,
                    watchers: Swift.Int,
                    watchersCount: Swift.Int
                ) {
                    self.allowAutoMerge = allowAutoMerge
                    self.allowForking = allowForking
                    self.allowMergeCommit = allowMergeCommit
                    self.allowRebaseMerge = allowRebaseMerge
                    self.allowSquashMerge = allowSquashMerge
                    self.allowUpdateBranch = allowUpdateBranch
                    self.archiveUrl = archiveUrl
                    self.archived = archived
                    self.assigneesUrl = assigneesUrl
                    self.blobsUrl = blobsUrl
                    self.branchesUrl = branchesUrl
                    self.cloneUrl = cloneUrl
                    self.collaboratorsUrl = collaboratorsUrl
                    self.commentsUrl = commentsUrl
                    self.commitsUrl = commitsUrl
                    self.compareUrl = compareUrl
                    self.contentsUrl = contentsUrl
                    self.contributorsUrl = contributorsUrl
                    self.createdAt = createdAt
                    self.defaultBranch = defaultBranch
                    self.deleteBranchOnMerge = deleteBranchOnMerge
                    self.deploymentsUrl = deploymentsUrl
                    self.description = description
                    self.disabled = disabled
                    self.downloadsUrl = downloadsUrl
                    self.eventsUrl = eventsUrl
                    self.fork = fork
                    self.forks = forks
                    self.forksCount = forksCount
                    self.forksUrl = forksUrl
                    self.fullName = fullName
                    self.gitCommitsUrl = gitCommitsUrl
                    self.gitRefsUrl = gitRefsUrl
                    self.gitTagsUrl = gitTagsUrl
                    self.gitUrl = gitUrl
                    self.hasDownloads = hasDownloads
                    self.hasIssues = hasIssues
                    self.hasPages = hasPages
                    self.hasProjects = hasProjects
                    self.hasWiki = hasWiki
                    self.homepage = homepage
                    self.hooksUrl = hooksUrl
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.isTemplate = isTemplate
                    self.issueCommentUrl = issueCommentUrl
                    self.issueEventsUrl = issueEventsUrl
                    self.issuesUrl = issuesUrl
                    self.keysUrl = keysUrl
                    self.labelsUrl = labelsUrl
                    self.language = language
                    self.languagesUrl = languagesUrl
                    self.license = license
                    self.masterBranch = masterBranch
                    self.mergesUrl = mergesUrl
                    self.milestonesUrl = milestonesUrl
                    self.mirrorUrl = mirrorUrl
                    self.name = name
                    self.nodeId = nodeId
                    self.notificationsUrl = notificationsUrl
                    self.openIssues = openIssues
                    self.openIssuesCount = openIssuesCount
                    self.organization = organization
                    self.owner = owner
                    self.permissions = permissions
                    self._private = _private
                    self._public = _public
                    self.pullsUrl = pullsUrl
                    self.pushedAt = pushedAt
                    self.releasesUrl = releasesUrl
                    self.roleName = roleName
                    self.size = size
                    self.sshUrl = sshUrl
                    self.stargazers = stargazers
                    self.stargazersCount = stargazersCount
                    self.stargazersUrl = stargazersUrl
                    self.statusesUrl = statusesUrl
                    self.subscribersUrl = subscribersUrl
                    self.subscriptionUrl = subscriptionUrl
                    self.svnUrl = svnUrl
                    self.tagsUrl = tagsUrl
                    self.teamsUrl = teamsUrl
                    self.topics = topics
                    self.treesUrl = treesUrl
                    self.updatedAt = updatedAt
                    self.url = url
                    self.visibility = visibility
                    self.watchers = watchers
                    self.watchersCount = watchersCount
                }
                public enum CodingKeys: String, CodingKey {
                    case allowAutoMerge = "allow_auto_merge"
                    case allowForking = "allow_forking"
                    case allowMergeCommit = "allow_merge_commit"
                    case allowRebaseMerge = "allow_rebase_merge"
                    case allowSquashMerge = "allow_squash_merge"
                    case allowUpdateBranch = "allow_update_branch"
                    case archiveUrl = "archive_url"
                    case archived
                    case assigneesUrl = "assignees_url"
                    case blobsUrl = "blobs_url"
                    case branchesUrl = "branches_url"
                    case cloneUrl = "clone_url"
                    case collaboratorsUrl = "collaborators_url"
                    case commentsUrl = "comments_url"
                    case commitsUrl = "commits_url"
                    case compareUrl = "compare_url"
                    case contentsUrl = "contents_url"
                    case contributorsUrl = "contributors_url"
                    case createdAt = "created_at"
                    case defaultBranch = "default_branch"
                    case deleteBranchOnMerge = "delete_branch_on_merge"
                    case deploymentsUrl = "deployments_url"
                    case description
                    case disabled
                    case downloadsUrl = "downloads_url"
                    case eventsUrl = "events_url"
                    case fork
                    case forks
                    case forksCount = "forks_count"
                    case forksUrl = "forks_url"
                    case fullName = "full_name"
                    case gitCommitsUrl = "git_commits_url"
                    case gitRefsUrl = "git_refs_url"
                    case gitTagsUrl = "git_tags_url"
                    case gitUrl = "git_url"
                    case hasDownloads = "has_downloads"
                    case hasIssues = "has_issues"
                    case hasPages = "has_pages"
                    case hasProjects = "has_projects"
                    case hasWiki = "has_wiki"
                    case homepage
                    case hooksUrl = "hooks_url"
                    case htmlUrl = "html_url"
                    case id
                    case isTemplate = "is_template"
                    case issueCommentUrl = "issue_comment_url"
                    case issueEventsUrl = "issue_events_url"
                    case issuesUrl = "issues_url"
                    case keysUrl = "keys_url"
                    case labelsUrl = "labels_url"
                    case language
                    case languagesUrl = "languages_url"
                    case license
                    case masterBranch = "master_branch"
                    case mergesUrl = "merges_url"
                    case milestonesUrl = "milestones_url"
                    case mirrorUrl = "mirror_url"
                    case name
                    case nodeId = "node_id"
                    case notificationsUrl = "notifications_url"
                    case openIssues = "open_issues"
                    case openIssuesCount = "open_issues_count"
                    case organization
                    case owner
                    case permissions
                    case _private = "private"
                    case _public = "public"
                    case pullsUrl = "pulls_url"
                    case pushedAt = "pushed_at"
                    case releasesUrl = "releases_url"
                    case roleName = "role_name"
                    case size
                    case sshUrl = "ssh_url"
                    case stargazers
                    case stargazersCount = "stargazers_count"
                    case stargazersUrl = "stargazers_url"
                    case statusesUrl = "statuses_url"
                    case subscribersUrl = "subscribers_url"
                    case subscriptionUrl = "subscription_url"
                    case svnUrl = "svn_url"
                    case tagsUrl = "tags_url"
                    case teamsUrl = "teams_url"
                    case topics
                    case treesUrl = "trees_url"
                    case updatedAt = "updated_at"
                    case url
                    case visibility
                    case watchers
                    case watchersCount = "watchers_count"
                }
            }
            /// A git repository
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-team-created/repository`.
            public var repository: Components.Schemas.WebhookTeamCreated.RepositoryPayload?
            /// - Remark: Generated from `#/components/schemas/webhook-team-created/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Groups of organization members that gives permissions on specified repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-team-created/team`.
            public struct TeamPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/team/deleted`.
                public var deleted: Swift.Bool?
                /// Description of the team
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/team/description`.
                public var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/team/html_url`.
                public var htmlUrl: Swift.String?
                /// Unique identifier of the team
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/team/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/team/members_url`.
                public var membersUrl: Swift.String?
                /// Name of the team
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/team/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/team/node_id`.
                public var nodeId: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/team/parent`.
                public struct ParentPayload: Codable, Hashable, Sendable {
                    /// Description of the team
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/team/parent/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/team/parent/html_url`.
                    public var htmlUrl: Swift.String
                    /// Unique identifier of the team
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/team/parent/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/team/parent/members_url`.
                    public var membersUrl: Swift.String
                    /// Name of the team
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/team/parent/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/team/parent/node_id`.
                    public var nodeId: Swift.String
                    /// Permission that the team will have for its repositories
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/team/parent/permission`.
                    public var permission: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/team/parent/privacy`.
                    @frozen public enum PrivacyPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case closed = "closed"
                        case secret = "secret"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/team/parent/privacy`.
                    public var privacy: Components.Schemas.WebhookTeamCreated.TeamPayload.ParentPayload.PrivacyPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/team/parent/repositories_url`.
                    public var repositoriesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/team/parent/slug`.
                    public var slug: Swift.String
                    /// URL for the team
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-team-created/team/parent/url`.
                    public var url: Swift.String
                    /// Creates a new `ParentPayload`.
                    ///
                    /// - Parameters:
                    ///   - description: Description of the team
                    ///   - htmlUrl:
                    ///   - id: Unique identifier of the team
                    ///   - membersUrl:
                    ///   - name: Name of the team
                    ///   - nodeId:
                    ///   - permission: Permission that the team will have for its repositories
                    ///   - privacy:
                    ///   - repositoriesUrl:
                    ///   - slug:
                    ///   - url: URL for the team
                    public init(
                        description: Swift.String? = nil,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        membersUrl: Swift.String,
                        name: Swift.String,
                        nodeId: Swift.String,
                        permission: Swift.String,
                        privacy: Components.Schemas.WebhookTeamCreated.TeamPayload.ParentPayload.PrivacyPayload,
                        repositoriesUrl: Swift.String,
                        slug: Swift.String,
                        url: Swift.String
                    ) {
                        self.description = description
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.membersUrl = membersUrl
                        self.name = name
                        self.nodeId = nodeId
                        self.permission = permission
                        self.privacy = privacy
                        self.repositoriesUrl = repositoriesUrl
                        self.slug = slug
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case description
                        case htmlUrl = "html_url"
                        case id
                        case membersUrl = "members_url"
                        case name
                        case nodeId = "node_id"
                        case permission
                        case privacy
                        case repositoriesUrl = "repositories_url"
                        case slug
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/team/parent`.
                public var parent: Components.Schemas.WebhookTeamCreated.TeamPayload.ParentPayload?
                /// Permission that the team will have for its repositories
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/team/permission`.
                public var permission: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/team/privacy`.
                @frozen public enum PrivacyPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case open = "open"
                    case closed = "closed"
                    case secret = "secret"
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/team/privacy`.
                public var privacy: Components.Schemas.WebhookTeamCreated.TeamPayload.PrivacyPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/team/repositories_url`.
                public var repositoriesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/team/slug`.
                public var slug: Swift.String?
                /// URL for the team
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-created/team/url`.
                public var url: Swift.String?
                /// Creates a new `TeamPayload`.
                ///
                /// - Parameters:
                ///   - deleted:
                ///   - description: Description of the team
                ///   - htmlUrl:
                ///   - id: Unique identifier of the team
                ///   - membersUrl:
                ///   - name: Name of the team
                ///   - nodeId:
                ///   - parent:
                ///   - permission: Permission that the team will have for its repositories
                ///   - privacy:
                ///   - repositoriesUrl:
                ///   - slug:
                ///   - url: URL for the team
                public init(
                    deleted: Swift.Bool? = nil,
                    description: Swift.String? = nil,
                    htmlUrl: Swift.String? = nil,
                    id: Swift.Int,
                    membersUrl: Swift.String? = nil,
                    name: Swift.String,
                    nodeId: Swift.String? = nil,
                    parent: Components.Schemas.WebhookTeamCreated.TeamPayload.ParentPayload? = nil,
                    permission: Swift.String? = nil,
                    privacy: Components.Schemas.WebhookTeamCreated.TeamPayload.PrivacyPayload? = nil,
                    repositoriesUrl: Swift.String? = nil,
                    slug: Swift.String? = nil,
                    url: Swift.String? = nil
                ) {
                    self.deleted = deleted
                    self.description = description
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.membersUrl = membersUrl
                    self.name = name
                    self.nodeId = nodeId
                    self.parent = parent
                    self.permission = permission
                    self.privacy = privacy
                    self.repositoriesUrl = repositoriesUrl
                    self.slug = slug
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case deleted
                    case description
                    case htmlUrl = "html_url"
                    case id
                    case membersUrl = "members_url"
                    case name
                    case nodeId = "node_id"
                    case parent
                    case permission
                    case privacy
                    case repositoriesUrl = "repositories_url"
                    case slug
                    case url
                }
            }
            /// Groups of organization members that gives permissions on specified repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-team-created/team`.
            public var team: Components.Schemas.WebhookTeamCreated.TeamPayload
            /// Creates a new `WebhookTeamCreated`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - enterprise:
            ///   - installation:
            ///   - organization:
            ///   - repository: A git repository
            ///   - sender:
            ///   - team: Groups of organization members that gives permissions on specified repositories.
            public init(
                action: Components.Schemas.WebhookTeamCreated.ActionPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                organization: Components.Schemas.OrganizationSimple,
                repository: Components.Schemas.WebhookTeamCreated.RepositoryPayload? = nil,
                sender: Components.Schemas.SimpleUser,
                team: Components.Schemas.WebhookTeamCreated.TeamPayload
            ) {
                self.action = action
                self.enterprise = enterprise
                self.installation = installation
                self.organization = organization
                self.repository = repository
                self.sender = sender
                self.team = team
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case enterprise
                case installation
                case organization
                case repository
                case sender
                case team
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-team-deleted`.
        public struct WebhookTeamDeleted: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case deleted = "deleted"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/action`.
            public var action: Components.Schemas.WebhookTeamDeleted.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/organization`.
            public var organization: Components.Schemas.OrganizationSimple
            /// A git repository
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository`.
            public struct RepositoryPayload: Codable, Hashable, Sendable {
                /// Whether to allow auto-merge for pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/allow_auto_merge`.
                public var allowAutoMerge: Swift.Bool?
                /// Whether to allow private forks
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/allow_forking`.
                public var allowForking: Swift.Bool?
                /// Whether to allow merge commits for pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/allow_merge_commit`.
                public var allowMergeCommit: Swift.Bool?
                /// Whether to allow rebase merges for pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/allow_rebase_merge`.
                public var allowRebaseMerge: Swift.Bool?
                /// Whether to allow squash merges for pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/allow_squash_merge`.
                public var allowSquashMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/allow_update_branch`.
                public var allowUpdateBranch: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/archive_url`.
                public var archiveUrl: Swift.String
                /// Whether the repository is archived.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/archived`.
                public var archived: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/assignees_url`.
                public var assigneesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/blobs_url`.
                public var blobsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/branches_url`.
                public var branchesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/clone_url`.
                public var cloneUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/collaborators_url`.
                public var collaboratorsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/comments_url`.
                public var commentsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/commits_url`.
                public var commitsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/compare_url`.
                public var compareUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/contents_url`.
                public var contentsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/contributors_url`.
                public var contributorsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/created_at`.
                @frozen public enum CreatedAtPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/created_at/case1`.
                    case case1(Swift.Int)
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/created_at/case2`.
                    case case2(Foundation.Date)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/created_at`.
                public var createdAt: Components.Schemas.WebhookTeamDeleted.RepositoryPayload.CreatedAtPayload
                /// The default branch of the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/default_branch`.
                public var defaultBranch: Swift.String
                /// Whether to delete head branches when pull requests are merged
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/delete_branch_on_merge`.
                public var deleteBranchOnMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/deployments_url`.
                public var deploymentsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/description`.
                public var description: Swift.String?
                /// Returns whether or not this repository is disabled.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/disabled`.
                public var disabled: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/downloads_url`.
                public var downloadsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/events_url`.
                public var eventsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/fork`.
                public var fork: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/forks`.
                public var forks: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/forks_count`.
                public var forksCount: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/forks_url`.
                public var forksUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/full_name`.
                public var fullName: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/git_commits_url`.
                public var gitCommitsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/git_refs_url`.
                public var gitRefsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/git_tags_url`.
                public var gitTagsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/git_url`.
                public var gitUrl: Swift.String
                /// Whether downloads are enabled.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/has_downloads`.
                public var hasDownloads: Swift.Bool
                /// Whether issues are enabled.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/has_issues`.
                public var hasIssues: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/has_pages`.
                public var hasPages: Swift.Bool
                /// Whether projects are enabled.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/has_projects`.
                public var hasProjects: Swift.Bool
                /// Whether the wiki is enabled.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/has_wiki`.
                public var hasWiki: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/homepage`.
                public var homepage: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/hooks_url`.
                public var hooksUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/html_url`.
                public var htmlUrl: Swift.String
                /// Unique identifier of the repository
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/is_template`.
                public var isTemplate: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/issue_comment_url`.
                public var issueCommentUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/issue_events_url`.
                public var issueEventsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/issues_url`.
                public var issuesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/keys_url`.
                public var keysUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/labels_url`.
                public var labelsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/language`.
                public var language: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/languages_url`.
                public var languagesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/license`.
                public struct LicensePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/license/key`.
                    public var key: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/license/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/license/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/license/spdx_id`.
                    public var spdxId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/license/url`.
                    public var url: Swift.String?
                    /// Creates a new `LicensePayload`.
                    ///
                    /// - Parameters:
                    ///   - key:
                    ///   - name:
                    ///   - nodeId:
                    ///   - spdxId:
                    ///   - url:
                    public init(
                        key: Swift.String,
                        name: Swift.String,
                        nodeId: Swift.String,
                        spdxId: Swift.String,
                        url: Swift.String? = nil
                    ) {
                        self.key = key
                        self.name = name
                        self.nodeId = nodeId
                        self.spdxId = spdxId
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case key
                        case name
                        case nodeId = "node_id"
                        case spdxId = "spdx_id"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/license`.
                public var license: Components.Schemas.WebhookTeamDeleted.RepositoryPayload.LicensePayload?
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/master_branch`.
                public var masterBranch: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/merges_url`.
                public var mergesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/milestones_url`.
                public var milestonesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/mirror_url`.
                public var mirrorUrl: Swift.String?
                /// The name of the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/notifications_url`.
                public var notificationsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/open_issues`.
                public var openIssues: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/open_issues_count`.
                public var openIssuesCount: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/organization`.
                public var organization: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/owner`.
                public struct OwnerPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/owner/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/owner/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/owner/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/owner/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/owner/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/owner/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/owner/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/owner/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/owner/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/owner/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/owner/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/owner/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/owner/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/owner/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/owner/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/owner/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/owner/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/owner/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/owner/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/owner/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/owner/type`.
                    public var _type: Components.Schemas.WebhookTeamDeleted.RepositoryPayload.OwnerPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/owner/url`.
                    public var url: Swift.String?
                    /// Creates a new `OwnerPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookTeamDeleted.RepositoryPayload.OwnerPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/owner`.
                public var owner: Components.Schemas.WebhookTeamDeleted.RepositoryPayload.OwnerPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/permissions`.
                public struct PermissionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/permissions/admin`.
                    public var admin: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/permissions/maintain`.
                    public var maintain: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/permissions/pull`.
                    public var pull: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/permissions/push`.
                    public var push: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/permissions/triage`.
                    public var triage: Swift.Bool?
                    /// Creates a new `PermissionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - admin:
                    ///   - maintain:
                    ///   - pull:
                    ///   - push:
                    ///   - triage:
                    public init(
                        admin: Swift.Bool,
                        maintain: Swift.Bool? = nil,
                        pull: Swift.Bool,
                        push: Swift.Bool,
                        triage: Swift.Bool? = nil
                    ) {
                        self.admin = admin
                        self.maintain = maintain
                        self.pull = pull
                        self.push = push
                        self.triage = triage
                    }
                    public enum CodingKeys: String, CodingKey {
                        case admin
                        case maintain
                        case pull
                        case push
                        case triage
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/permissions`.
                public var permissions: Components.Schemas.WebhookTeamDeleted.RepositoryPayload.PermissionsPayload?
                /// Whether the repository is private or public.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/private`.
                public var _private: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/public`.
                public var _public: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/pulls_url`.
                public var pullsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/pushed_at`.
                @frozen public enum PushedAtPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/pushed_at/case1`.
                    case case1(Swift.Int)
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/pushed_at/case2`.
                    case case2(Foundation.Date)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/pushed_at`.
                public var pushedAt: Components.Schemas.WebhookTeamDeleted.RepositoryPayload.PushedAtPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/releases_url`.
                public var releasesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/role_name`.
                public var roleName: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/size`.
                public var size: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/ssh_url`.
                public var sshUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/stargazers`.
                public var stargazers: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/stargazers_count`.
                public var stargazersCount: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/stargazers_url`.
                public var stargazersUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/statuses_url`.
                public var statusesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/subscribers_url`.
                public var subscribersUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/subscription_url`.
                public var subscriptionUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/svn_url`.
                public var svnUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/tags_url`.
                public var tagsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/teams_url`.
                public var teamsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/topics`.
                public var topics: [Swift.String]
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/trees_url`.
                public var treesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/updated_at`.
                public var updatedAt: Foundation.Date
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/visibility`.
                @frozen public enum VisibilityPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case _public = "public"
                    case _private = "private"
                    case _internal = "internal"
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/visibility`.
                public var visibility: Components.Schemas.WebhookTeamDeleted.RepositoryPayload.VisibilityPayload
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/watchers`.
                public var watchers: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository/watchers_count`.
                public var watchersCount: Swift.Int
                /// Creates a new `RepositoryPayload`.
                ///
                /// - Parameters:
                ///   - allowAutoMerge: Whether to allow auto-merge for pull requests.
                ///   - allowForking: Whether to allow private forks
                ///   - allowMergeCommit: Whether to allow merge commits for pull requests.
                ///   - allowRebaseMerge: Whether to allow rebase merges for pull requests.
                ///   - allowSquashMerge: Whether to allow squash merges for pull requests.
                ///   - allowUpdateBranch:
                ///   - archiveUrl:
                ///   - archived: Whether the repository is archived.
                ///   - assigneesUrl:
                ///   - blobsUrl:
                ///   - branchesUrl:
                ///   - cloneUrl:
                ///   - collaboratorsUrl:
                ///   - commentsUrl:
                ///   - commitsUrl:
                ///   - compareUrl:
                ///   - contentsUrl:
                ///   - contributorsUrl:
                ///   - createdAt:
                ///   - defaultBranch: The default branch of the repository.
                ///   - deleteBranchOnMerge: Whether to delete head branches when pull requests are merged
                ///   - deploymentsUrl:
                ///   - description:
                ///   - disabled: Returns whether or not this repository is disabled.
                ///   - downloadsUrl:
                ///   - eventsUrl:
                ///   - fork:
                ///   - forks:
                ///   - forksCount:
                ///   - forksUrl:
                ///   - fullName:
                ///   - gitCommitsUrl:
                ///   - gitRefsUrl:
                ///   - gitTagsUrl:
                ///   - gitUrl:
                ///   - hasDownloads: Whether downloads are enabled.
                ///   - hasIssues: Whether issues are enabled.
                ///   - hasPages:
                ///   - hasProjects: Whether projects are enabled.
                ///   - hasWiki: Whether the wiki is enabled.
                ///   - homepage:
                ///   - hooksUrl:
                ///   - htmlUrl:
                ///   - id: Unique identifier of the repository
                ///   - isTemplate:
                ///   - issueCommentUrl:
                ///   - issueEventsUrl:
                ///   - issuesUrl:
                ///   - keysUrl:
                ///   - labelsUrl:
                ///   - language:
                ///   - languagesUrl:
                ///   - license:
                ///   - masterBranch:
                ///   - mergesUrl:
                ///   - milestonesUrl:
                ///   - mirrorUrl:
                ///   - name: The name of the repository.
                ///   - nodeId:
                ///   - notificationsUrl:
                ///   - openIssues:
                ///   - openIssuesCount:
                ///   - organization:
                ///   - owner:
                ///   - permissions:
                ///   - _private: Whether the repository is private or public.
                ///   - _public:
                ///   - pullsUrl:
                ///   - pushedAt:
                ///   - releasesUrl:
                ///   - roleName:
                ///   - size:
                ///   - sshUrl:
                ///   - stargazers:
                ///   - stargazersCount:
                ///   - stargazersUrl:
                ///   - statusesUrl:
                ///   - subscribersUrl:
                ///   - subscriptionUrl:
                ///   - svnUrl:
                ///   - tagsUrl:
                ///   - teamsUrl:
                ///   - topics:
                ///   - treesUrl:
                ///   - updatedAt:
                ///   - url:
                ///   - visibility:
                ///   - watchers:
                ///   - watchersCount:
                public init(
                    allowAutoMerge: Swift.Bool? = nil,
                    allowForking: Swift.Bool? = nil,
                    allowMergeCommit: Swift.Bool? = nil,
                    allowRebaseMerge: Swift.Bool? = nil,
                    allowSquashMerge: Swift.Bool? = nil,
                    allowUpdateBranch: Swift.Bool? = nil,
                    archiveUrl: Swift.String,
                    archived: Swift.Bool,
                    assigneesUrl: Swift.String,
                    blobsUrl: Swift.String,
                    branchesUrl: Swift.String,
                    cloneUrl: Swift.String,
                    collaboratorsUrl: Swift.String,
                    commentsUrl: Swift.String,
                    commitsUrl: Swift.String,
                    compareUrl: Swift.String,
                    contentsUrl: Swift.String,
                    contributorsUrl: Swift.String,
                    createdAt: Components.Schemas.WebhookTeamDeleted.RepositoryPayload.CreatedAtPayload,
                    defaultBranch: Swift.String,
                    deleteBranchOnMerge: Swift.Bool? = nil,
                    deploymentsUrl: Swift.String,
                    description: Swift.String? = nil,
                    disabled: Swift.Bool? = nil,
                    downloadsUrl: Swift.String,
                    eventsUrl: Swift.String,
                    fork: Swift.Bool,
                    forks: Swift.Int,
                    forksCount: Swift.Int,
                    forksUrl: Swift.String,
                    fullName: Swift.String,
                    gitCommitsUrl: Swift.String,
                    gitRefsUrl: Swift.String,
                    gitTagsUrl: Swift.String,
                    gitUrl: Swift.String,
                    hasDownloads: Swift.Bool,
                    hasIssues: Swift.Bool,
                    hasPages: Swift.Bool,
                    hasProjects: Swift.Bool,
                    hasWiki: Swift.Bool,
                    homepage: Swift.String? = nil,
                    hooksUrl: Swift.String,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    isTemplate: Swift.Bool? = nil,
                    issueCommentUrl: Swift.String,
                    issueEventsUrl: Swift.String,
                    issuesUrl: Swift.String,
                    keysUrl: Swift.String,
                    labelsUrl: Swift.String,
                    language: Swift.String? = nil,
                    languagesUrl: Swift.String,
                    license: Components.Schemas.WebhookTeamDeleted.RepositoryPayload.LicensePayload? = nil,
                    masterBranch: Swift.String? = nil,
                    mergesUrl: Swift.String,
                    milestonesUrl: Swift.String,
                    mirrorUrl: Swift.String? = nil,
                    name: Swift.String,
                    nodeId: Swift.String,
                    notificationsUrl: Swift.String,
                    openIssues: Swift.Int,
                    openIssuesCount: Swift.Int,
                    organization: Swift.String? = nil,
                    owner: Components.Schemas.WebhookTeamDeleted.RepositoryPayload.OwnerPayload? = nil,
                    permissions: Components.Schemas.WebhookTeamDeleted.RepositoryPayload.PermissionsPayload? = nil,
                    _private: Swift.Bool,
                    _public: Swift.Bool? = nil,
                    pullsUrl: Swift.String,
                    pushedAt: Components.Schemas.WebhookTeamDeleted.RepositoryPayload.PushedAtPayload? = nil,
                    releasesUrl: Swift.String,
                    roleName: Swift.String? = nil,
                    size: Swift.Int,
                    sshUrl: Swift.String,
                    stargazers: Swift.Int? = nil,
                    stargazersCount: Swift.Int,
                    stargazersUrl: Swift.String,
                    statusesUrl: Swift.String,
                    subscribersUrl: Swift.String,
                    subscriptionUrl: Swift.String,
                    svnUrl: Swift.String,
                    tagsUrl: Swift.String,
                    teamsUrl: Swift.String,
                    topics: [Swift.String],
                    treesUrl: Swift.String,
                    updatedAt: Foundation.Date,
                    url: Swift.String,
                    visibility: Components.Schemas.WebhookTeamDeleted.RepositoryPayload.VisibilityPayload,
                    watchers: Swift.Int,
                    watchersCount: Swift.Int
                ) {
                    self.allowAutoMerge = allowAutoMerge
                    self.allowForking = allowForking
                    self.allowMergeCommit = allowMergeCommit
                    self.allowRebaseMerge = allowRebaseMerge
                    self.allowSquashMerge = allowSquashMerge
                    self.allowUpdateBranch = allowUpdateBranch
                    self.archiveUrl = archiveUrl
                    self.archived = archived
                    self.assigneesUrl = assigneesUrl
                    self.blobsUrl = blobsUrl
                    self.branchesUrl = branchesUrl
                    self.cloneUrl = cloneUrl
                    self.collaboratorsUrl = collaboratorsUrl
                    self.commentsUrl = commentsUrl
                    self.commitsUrl = commitsUrl
                    self.compareUrl = compareUrl
                    self.contentsUrl = contentsUrl
                    self.contributorsUrl = contributorsUrl
                    self.createdAt = createdAt
                    self.defaultBranch = defaultBranch
                    self.deleteBranchOnMerge = deleteBranchOnMerge
                    self.deploymentsUrl = deploymentsUrl
                    self.description = description
                    self.disabled = disabled
                    self.downloadsUrl = downloadsUrl
                    self.eventsUrl = eventsUrl
                    self.fork = fork
                    self.forks = forks
                    self.forksCount = forksCount
                    self.forksUrl = forksUrl
                    self.fullName = fullName
                    self.gitCommitsUrl = gitCommitsUrl
                    self.gitRefsUrl = gitRefsUrl
                    self.gitTagsUrl = gitTagsUrl
                    self.gitUrl = gitUrl
                    self.hasDownloads = hasDownloads
                    self.hasIssues = hasIssues
                    self.hasPages = hasPages
                    self.hasProjects = hasProjects
                    self.hasWiki = hasWiki
                    self.homepage = homepage
                    self.hooksUrl = hooksUrl
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.isTemplate = isTemplate
                    self.issueCommentUrl = issueCommentUrl
                    self.issueEventsUrl = issueEventsUrl
                    self.issuesUrl = issuesUrl
                    self.keysUrl = keysUrl
                    self.labelsUrl = labelsUrl
                    self.language = language
                    self.languagesUrl = languagesUrl
                    self.license = license
                    self.masterBranch = masterBranch
                    self.mergesUrl = mergesUrl
                    self.milestonesUrl = milestonesUrl
                    self.mirrorUrl = mirrorUrl
                    self.name = name
                    self.nodeId = nodeId
                    self.notificationsUrl = notificationsUrl
                    self.openIssues = openIssues
                    self.openIssuesCount = openIssuesCount
                    self.organization = organization
                    self.owner = owner
                    self.permissions = permissions
                    self._private = _private
                    self._public = _public
                    self.pullsUrl = pullsUrl
                    self.pushedAt = pushedAt
                    self.releasesUrl = releasesUrl
                    self.roleName = roleName
                    self.size = size
                    self.sshUrl = sshUrl
                    self.stargazers = stargazers
                    self.stargazersCount = stargazersCount
                    self.stargazersUrl = stargazersUrl
                    self.statusesUrl = statusesUrl
                    self.subscribersUrl = subscribersUrl
                    self.subscriptionUrl = subscriptionUrl
                    self.svnUrl = svnUrl
                    self.tagsUrl = tagsUrl
                    self.teamsUrl = teamsUrl
                    self.topics = topics
                    self.treesUrl = treesUrl
                    self.updatedAt = updatedAt
                    self.url = url
                    self.visibility = visibility
                    self.watchers = watchers
                    self.watchersCount = watchersCount
                }
                public enum CodingKeys: String, CodingKey {
                    case allowAutoMerge = "allow_auto_merge"
                    case allowForking = "allow_forking"
                    case allowMergeCommit = "allow_merge_commit"
                    case allowRebaseMerge = "allow_rebase_merge"
                    case allowSquashMerge = "allow_squash_merge"
                    case allowUpdateBranch = "allow_update_branch"
                    case archiveUrl = "archive_url"
                    case archived
                    case assigneesUrl = "assignees_url"
                    case blobsUrl = "blobs_url"
                    case branchesUrl = "branches_url"
                    case cloneUrl = "clone_url"
                    case collaboratorsUrl = "collaborators_url"
                    case commentsUrl = "comments_url"
                    case commitsUrl = "commits_url"
                    case compareUrl = "compare_url"
                    case contentsUrl = "contents_url"
                    case contributorsUrl = "contributors_url"
                    case createdAt = "created_at"
                    case defaultBranch = "default_branch"
                    case deleteBranchOnMerge = "delete_branch_on_merge"
                    case deploymentsUrl = "deployments_url"
                    case description
                    case disabled
                    case downloadsUrl = "downloads_url"
                    case eventsUrl = "events_url"
                    case fork
                    case forks
                    case forksCount = "forks_count"
                    case forksUrl = "forks_url"
                    case fullName = "full_name"
                    case gitCommitsUrl = "git_commits_url"
                    case gitRefsUrl = "git_refs_url"
                    case gitTagsUrl = "git_tags_url"
                    case gitUrl = "git_url"
                    case hasDownloads = "has_downloads"
                    case hasIssues = "has_issues"
                    case hasPages = "has_pages"
                    case hasProjects = "has_projects"
                    case hasWiki = "has_wiki"
                    case homepage
                    case hooksUrl = "hooks_url"
                    case htmlUrl = "html_url"
                    case id
                    case isTemplate = "is_template"
                    case issueCommentUrl = "issue_comment_url"
                    case issueEventsUrl = "issue_events_url"
                    case issuesUrl = "issues_url"
                    case keysUrl = "keys_url"
                    case labelsUrl = "labels_url"
                    case language
                    case languagesUrl = "languages_url"
                    case license
                    case masterBranch = "master_branch"
                    case mergesUrl = "merges_url"
                    case milestonesUrl = "milestones_url"
                    case mirrorUrl = "mirror_url"
                    case name
                    case nodeId = "node_id"
                    case notificationsUrl = "notifications_url"
                    case openIssues = "open_issues"
                    case openIssuesCount = "open_issues_count"
                    case organization
                    case owner
                    case permissions
                    case _private = "private"
                    case _public = "public"
                    case pullsUrl = "pulls_url"
                    case pushedAt = "pushed_at"
                    case releasesUrl = "releases_url"
                    case roleName = "role_name"
                    case size
                    case sshUrl = "ssh_url"
                    case stargazers
                    case stargazersCount = "stargazers_count"
                    case stargazersUrl = "stargazers_url"
                    case statusesUrl = "statuses_url"
                    case subscribersUrl = "subscribers_url"
                    case subscriptionUrl = "subscription_url"
                    case svnUrl = "svn_url"
                    case tagsUrl = "tags_url"
                    case teamsUrl = "teams_url"
                    case topics
                    case treesUrl = "trees_url"
                    case updatedAt = "updated_at"
                    case url
                    case visibility
                    case watchers
                    case watchersCount = "watchers_count"
                }
            }
            /// A git repository
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/repository`.
            public var repository: Components.Schemas.WebhookTeamDeleted.RepositoryPayload?
            /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/sender`.
            public var sender: Components.Schemas.SimpleUser?
            /// Groups of organization members that gives permissions on specified repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/team`.
            public struct TeamPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/team/deleted`.
                public var deleted: Swift.Bool?
                /// Description of the team
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/team/description`.
                public var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/team/html_url`.
                public var htmlUrl: Swift.String?
                /// Unique identifier of the team
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/team/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/team/members_url`.
                public var membersUrl: Swift.String?
                /// Name of the team
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/team/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/team/node_id`.
                public var nodeId: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/team/parent`.
                public struct ParentPayload: Codable, Hashable, Sendable {
                    /// Description of the team
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/team/parent/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/team/parent/html_url`.
                    public var htmlUrl: Swift.String
                    /// Unique identifier of the team
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/team/parent/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/team/parent/members_url`.
                    public var membersUrl: Swift.String
                    /// Name of the team
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/team/parent/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/team/parent/node_id`.
                    public var nodeId: Swift.String
                    /// Permission that the team will have for its repositories
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/team/parent/permission`.
                    public var permission: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/team/parent/privacy`.
                    @frozen public enum PrivacyPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case closed = "closed"
                        case secret = "secret"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/team/parent/privacy`.
                    public var privacy: Components.Schemas.WebhookTeamDeleted.TeamPayload.ParentPayload.PrivacyPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/team/parent/repositories_url`.
                    public var repositoriesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/team/parent/slug`.
                    public var slug: Swift.String
                    /// URL for the team
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/team/parent/url`.
                    public var url: Swift.String
                    /// Creates a new `ParentPayload`.
                    ///
                    /// - Parameters:
                    ///   - description: Description of the team
                    ///   - htmlUrl:
                    ///   - id: Unique identifier of the team
                    ///   - membersUrl:
                    ///   - name: Name of the team
                    ///   - nodeId:
                    ///   - permission: Permission that the team will have for its repositories
                    ///   - privacy:
                    ///   - repositoriesUrl:
                    ///   - slug:
                    ///   - url: URL for the team
                    public init(
                        description: Swift.String? = nil,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        membersUrl: Swift.String,
                        name: Swift.String,
                        nodeId: Swift.String,
                        permission: Swift.String,
                        privacy: Components.Schemas.WebhookTeamDeleted.TeamPayload.ParentPayload.PrivacyPayload,
                        repositoriesUrl: Swift.String,
                        slug: Swift.String,
                        url: Swift.String
                    ) {
                        self.description = description
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.membersUrl = membersUrl
                        self.name = name
                        self.nodeId = nodeId
                        self.permission = permission
                        self.privacy = privacy
                        self.repositoriesUrl = repositoriesUrl
                        self.slug = slug
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case description
                        case htmlUrl = "html_url"
                        case id
                        case membersUrl = "members_url"
                        case name
                        case nodeId = "node_id"
                        case permission
                        case privacy
                        case repositoriesUrl = "repositories_url"
                        case slug
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/team/parent`.
                public var parent: Components.Schemas.WebhookTeamDeleted.TeamPayload.ParentPayload?
                /// Permission that the team will have for its repositories
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/team/permission`.
                public var permission: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/team/privacy`.
                @frozen public enum PrivacyPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case open = "open"
                    case closed = "closed"
                    case secret = "secret"
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/team/privacy`.
                public var privacy: Components.Schemas.WebhookTeamDeleted.TeamPayload.PrivacyPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/team/repositories_url`.
                public var repositoriesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/team/slug`.
                public var slug: Swift.String?
                /// URL for the team
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/team/url`.
                public var url: Swift.String?
                /// Creates a new `TeamPayload`.
                ///
                /// - Parameters:
                ///   - deleted:
                ///   - description: Description of the team
                ///   - htmlUrl:
                ///   - id: Unique identifier of the team
                ///   - membersUrl:
                ///   - name: Name of the team
                ///   - nodeId:
                ///   - parent:
                ///   - permission: Permission that the team will have for its repositories
                ///   - privacy:
                ///   - repositoriesUrl:
                ///   - slug:
                ///   - url: URL for the team
                public init(
                    deleted: Swift.Bool? = nil,
                    description: Swift.String? = nil,
                    htmlUrl: Swift.String? = nil,
                    id: Swift.Int,
                    membersUrl: Swift.String? = nil,
                    name: Swift.String,
                    nodeId: Swift.String? = nil,
                    parent: Components.Schemas.WebhookTeamDeleted.TeamPayload.ParentPayload? = nil,
                    permission: Swift.String? = nil,
                    privacy: Components.Schemas.WebhookTeamDeleted.TeamPayload.PrivacyPayload? = nil,
                    repositoriesUrl: Swift.String? = nil,
                    slug: Swift.String? = nil,
                    url: Swift.String? = nil
                ) {
                    self.deleted = deleted
                    self.description = description
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.membersUrl = membersUrl
                    self.name = name
                    self.nodeId = nodeId
                    self.parent = parent
                    self.permission = permission
                    self.privacy = privacy
                    self.repositoriesUrl = repositoriesUrl
                    self.slug = slug
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case deleted
                    case description
                    case htmlUrl = "html_url"
                    case id
                    case membersUrl = "members_url"
                    case name
                    case nodeId = "node_id"
                    case parent
                    case permission
                    case privacy
                    case repositoriesUrl = "repositories_url"
                    case slug
                    case url
                }
            }
            /// Groups of organization members that gives permissions on specified repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-team-deleted/team`.
            public var team: Components.Schemas.WebhookTeamDeleted.TeamPayload
            /// Creates a new `WebhookTeamDeleted`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - enterprise:
            ///   - installation:
            ///   - organization:
            ///   - repository: A git repository
            ///   - sender:
            ///   - team: Groups of organization members that gives permissions on specified repositories.
            public init(
                action: Components.Schemas.WebhookTeamDeleted.ActionPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                organization: Components.Schemas.OrganizationSimple,
                repository: Components.Schemas.WebhookTeamDeleted.RepositoryPayload? = nil,
                sender: Components.Schemas.SimpleUser? = nil,
                team: Components.Schemas.WebhookTeamDeleted.TeamPayload
            ) {
                self.action = action
                self.enterprise = enterprise
                self.installation = installation
                self.organization = organization
                self.repository = repository
                self.sender = sender
                self.team = team
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case enterprise
                case installation
                case organization
                case repository
                case sender
                case team
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-team-edited`.
        public struct WebhookTeamEdited: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-team-edited/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case edited = "edited"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-team-edited/action`.
            public var action: Components.Schemas.WebhookTeamEdited.ActionPayload
            /// The changes to the team if the action was `edited`.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-team-edited/changes`.
            public struct ChangesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/changes/description`.
                public struct DescriptionPayload: Codable, Hashable, Sendable {
                    /// The previous version of the description if the action was `edited`.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/changes/description/from`.
                    public var from: Swift.String
                    /// Creates a new `DescriptionPayload`.
                    ///
                    /// - Parameters:
                    ///   - from: The previous version of the description if the action was `edited`.
                    public init(from: Swift.String) {
                        self.from = from
                    }
                    public enum CodingKeys: String, CodingKey {
                        case from
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/changes/description`.
                public var description: Components.Schemas.WebhookTeamEdited.ChangesPayload.DescriptionPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/changes/name`.
                public struct NamePayload: Codable, Hashable, Sendable {
                    /// The previous version of the name if the action was `edited`.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/changes/name/from`.
                    public var from: Swift.String
                    /// Creates a new `NamePayload`.
                    ///
                    /// - Parameters:
                    ///   - from: The previous version of the name if the action was `edited`.
                    public init(from: Swift.String) {
                        self.from = from
                    }
                    public enum CodingKeys: String, CodingKey {
                        case from
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/changes/name`.
                public var name: Components.Schemas.WebhookTeamEdited.ChangesPayload.NamePayload?
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/changes/privacy`.
                public struct PrivacyPayload: Codable, Hashable, Sendable {
                    /// The previous version of the team's privacy if the action was `edited`.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/changes/privacy/from`.
                    public var from: Swift.String
                    /// Creates a new `PrivacyPayload`.
                    ///
                    /// - Parameters:
                    ///   - from: The previous version of the team's privacy if the action was `edited`.
                    public init(from: Swift.String) {
                        self.from = from
                    }
                    public enum CodingKeys: String, CodingKey {
                        case from
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/changes/privacy`.
                public var privacy: Components.Schemas.WebhookTeamEdited.ChangesPayload.PrivacyPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/changes/repository`.
                public struct RepositoryPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/changes/repository/permissions`.
                    public struct PermissionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-team-edited/changes/repository/permissions/from`.
                        public struct FromPayload: Codable, Hashable, Sendable {
                            /// The previous version of the team member's `admin` permission on a repository, if the action was `edited`.
                            ///
                            /// - Remark: Generated from `#/components/schemas/webhook-team-edited/changes/repository/permissions/from/admin`.
                            public var admin: Swift.Bool?
                            /// The previous version of the team member's `pull` permission on a repository, if the action was `edited`.
                            ///
                            /// - Remark: Generated from `#/components/schemas/webhook-team-edited/changes/repository/permissions/from/pull`.
                            public var pull: Swift.Bool?
                            /// The previous version of the team member's `push` permission on a repository, if the action was `edited`.
                            ///
                            /// - Remark: Generated from `#/components/schemas/webhook-team-edited/changes/repository/permissions/from/push`.
                            public var push: Swift.Bool?
                            /// Creates a new `FromPayload`.
                            ///
                            /// - Parameters:
                            ///   - admin: The previous version of the team member's `admin` permission on a repository, if the action was `edited`.
                            ///   - pull: The previous version of the team member's `pull` permission on a repository, if the action was `edited`.
                            ///   - push: The previous version of the team member's `push` permission on a repository, if the action was `edited`.
                            public init(
                                admin: Swift.Bool? = nil,
                                pull: Swift.Bool? = nil,
                                push: Swift.Bool? = nil
                            ) {
                                self.admin = admin
                                self.pull = pull
                                self.push = push
                            }
                            public enum CodingKeys: String, CodingKey {
                                case admin
                                case pull
                                case push
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-team-edited/changes/repository/permissions/from`.
                        public var from: Components.Schemas.WebhookTeamEdited.ChangesPayload.RepositoryPayload.PermissionsPayload.FromPayload
                        /// Creates a new `PermissionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - from:
                        public init(from: Components.Schemas.WebhookTeamEdited.ChangesPayload.RepositoryPayload.PermissionsPayload.FromPayload) {
                            self.from = from
                        }
                        public enum CodingKeys: String, CodingKey {
                            case from
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/changes/repository/permissions`.
                    public var permissions: Components.Schemas.WebhookTeamEdited.ChangesPayload.RepositoryPayload.PermissionsPayload
                    /// Creates a new `RepositoryPayload`.
                    ///
                    /// - Parameters:
                    ///   - permissions:
                    public init(permissions: Components.Schemas.WebhookTeamEdited.ChangesPayload.RepositoryPayload.PermissionsPayload) {
                        self.permissions = permissions
                    }
                    public enum CodingKeys: String, CodingKey {
                        case permissions
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/changes/repository`.
                public var repository: Components.Schemas.WebhookTeamEdited.ChangesPayload.RepositoryPayload?
                /// Creates a new `ChangesPayload`.
                ///
                /// - Parameters:
                ///   - description:
                ///   - name:
                ///   - privacy:
                ///   - repository:
                public init(
                    description: Components.Schemas.WebhookTeamEdited.ChangesPayload.DescriptionPayload? = nil,
                    name: Components.Schemas.WebhookTeamEdited.ChangesPayload.NamePayload? = nil,
                    privacy: Components.Schemas.WebhookTeamEdited.ChangesPayload.PrivacyPayload? = nil,
                    repository: Components.Schemas.WebhookTeamEdited.ChangesPayload.RepositoryPayload? = nil
                ) {
                    self.description = description
                    self.name = name
                    self.privacy = privacy
                    self.repository = repository
                }
                public enum CodingKeys: String, CodingKey {
                    case description
                    case name
                    case privacy
                    case repository
                }
            }
            /// The changes to the team if the action was `edited`.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-team-edited/changes`.
            public var changes: Components.Schemas.WebhookTeamEdited.ChangesPayload
            /// - Remark: Generated from `#/components/schemas/webhook-team-edited/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-team-edited/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-team-edited/organization`.
            public var organization: Components.Schemas.OrganizationSimple
            /// A git repository
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository`.
            public struct RepositoryPayload: Codable, Hashable, Sendable {
                /// Whether to allow auto-merge for pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/allow_auto_merge`.
                public var allowAutoMerge: Swift.Bool?
                /// Whether to allow private forks
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/allow_forking`.
                public var allowForking: Swift.Bool?
                /// Whether to allow merge commits for pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/allow_merge_commit`.
                public var allowMergeCommit: Swift.Bool?
                /// Whether to allow rebase merges for pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/allow_rebase_merge`.
                public var allowRebaseMerge: Swift.Bool?
                /// Whether to allow squash merges for pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/allow_squash_merge`.
                public var allowSquashMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/allow_update_branch`.
                public var allowUpdateBranch: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/archive_url`.
                public var archiveUrl: Swift.String
                /// Whether the repository is archived.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/archived`.
                public var archived: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/assignees_url`.
                public var assigneesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/blobs_url`.
                public var blobsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/branches_url`.
                public var branchesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/clone_url`.
                public var cloneUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/collaborators_url`.
                public var collaboratorsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/comments_url`.
                public var commentsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/commits_url`.
                public var commitsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/compare_url`.
                public var compareUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/contents_url`.
                public var contentsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/contributors_url`.
                public var contributorsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/created_at`.
                @frozen public enum CreatedAtPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/created_at/case1`.
                    case case1(Swift.Int)
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/created_at/case2`.
                    case case2(Foundation.Date)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/created_at`.
                public var createdAt: Components.Schemas.WebhookTeamEdited.RepositoryPayload.CreatedAtPayload
                /// The default branch of the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/default_branch`.
                public var defaultBranch: Swift.String
                /// Whether to delete head branches when pull requests are merged
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/delete_branch_on_merge`.
                public var deleteBranchOnMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/deployments_url`.
                public var deploymentsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/description`.
                public var description: Swift.String?
                /// Returns whether or not this repository is disabled.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/disabled`.
                public var disabled: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/downloads_url`.
                public var downloadsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/events_url`.
                public var eventsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/fork`.
                public var fork: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/forks`.
                public var forks: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/forks_count`.
                public var forksCount: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/forks_url`.
                public var forksUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/full_name`.
                public var fullName: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/git_commits_url`.
                public var gitCommitsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/git_refs_url`.
                public var gitRefsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/git_tags_url`.
                public var gitTagsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/git_url`.
                public var gitUrl: Swift.String
                /// Whether downloads are enabled.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/has_downloads`.
                public var hasDownloads: Swift.Bool
                /// Whether issues are enabled.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/has_issues`.
                public var hasIssues: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/has_pages`.
                public var hasPages: Swift.Bool
                /// Whether projects are enabled.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/has_projects`.
                public var hasProjects: Swift.Bool
                /// Whether the wiki is enabled.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/has_wiki`.
                public var hasWiki: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/homepage`.
                public var homepage: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/hooks_url`.
                public var hooksUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/html_url`.
                public var htmlUrl: Swift.String
                /// Unique identifier of the repository
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/is_template`.
                public var isTemplate: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/issue_comment_url`.
                public var issueCommentUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/issue_events_url`.
                public var issueEventsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/issues_url`.
                public var issuesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/keys_url`.
                public var keysUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/labels_url`.
                public var labelsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/language`.
                public var language: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/languages_url`.
                public var languagesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/license`.
                public struct LicensePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/license/key`.
                    public var key: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/license/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/license/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/license/spdx_id`.
                    public var spdxId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/license/url`.
                    public var url: Swift.String?
                    /// Creates a new `LicensePayload`.
                    ///
                    /// - Parameters:
                    ///   - key:
                    ///   - name:
                    ///   - nodeId:
                    ///   - spdxId:
                    ///   - url:
                    public init(
                        key: Swift.String,
                        name: Swift.String,
                        nodeId: Swift.String,
                        spdxId: Swift.String,
                        url: Swift.String? = nil
                    ) {
                        self.key = key
                        self.name = name
                        self.nodeId = nodeId
                        self.spdxId = spdxId
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case key
                        case name
                        case nodeId = "node_id"
                        case spdxId = "spdx_id"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/license`.
                public var license: Components.Schemas.WebhookTeamEdited.RepositoryPayload.LicensePayload?
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/master_branch`.
                public var masterBranch: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/merges_url`.
                public var mergesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/milestones_url`.
                public var milestonesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/mirror_url`.
                public var mirrorUrl: Swift.String?
                /// The name of the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/notifications_url`.
                public var notificationsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/open_issues`.
                public var openIssues: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/open_issues_count`.
                public var openIssuesCount: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/organization`.
                public var organization: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/owner`.
                public struct OwnerPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/owner/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/owner/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/owner/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/owner/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/owner/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/owner/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/owner/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/owner/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/owner/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/owner/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/owner/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/owner/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/owner/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/owner/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/owner/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/owner/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/owner/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/owner/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/owner/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/owner/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/owner/type`.
                    public var _type: Components.Schemas.WebhookTeamEdited.RepositoryPayload.OwnerPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/owner/url`.
                    public var url: Swift.String?
                    /// Creates a new `OwnerPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookTeamEdited.RepositoryPayload.OwnerPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/owner`.
                public var owner: Components.Schemas.WebhookTeamEdited.RepositoryPayload.OwnerPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/permissions`.
                public struct PermissionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/permissions/admin`.
                    public var admin: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/permissions/maintain`.
                    public var maintain: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/permissions/pull`.
                    public var pull: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/permissions/push`.
                    public var push: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/permissions/triage`.
                    public var triage: Swift.Bool?
                    /// Creates a new `PermissionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - admin:
                    ///   - maintain:
                    ///   - pull:
                    ///   - push:
                    ///   - triage:
                    public init(
                        admin: Swift.Bool,
                        maintain: Swift.Bool? = nil,
                        pull: Swift.Bool,
                        push: Swift.Bool,
                        triage: Swift.Bool? = nil
                    ) {
                        self.admin = admin
                        self.maintain = maintain
                        self.pull = pull
                        self.push = push
                        self.triage = triage
                    }
                    public enum CodingKeys: String, CodingKey {
                        case admin
                        case maintain
                        case pull
                        case push
                        case triage
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/permissions`.
                public var permissions: Components.Schemas.WebhookTeamEdited.RepositoryPayload.PermissionsPayload?
                /// Whether the repository is private or public.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/private`.
                public var _private: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/public`.
                public var _public: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/pulls_url`.
                public var pullsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/pushed_at`.
                @frozen public enum PushedAtPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/pushed_at/case1`.
                    case case1(Swift.Int)
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/pushed_at/case2`.
                    case case2(Foundation.Date)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/pushed_at`.
                public var pushedAt: Components.Schemas.WebhookTeamEdited.RepositoryPayload.PushedAtPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/releases_url`.
                public var releasesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/role_name`.
                public var roleName: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/size`.
                public var size: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/ssh_url`.
                public var sshUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/stargazers`.
                public var stargazers: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/stargazers_count`.
                public var stargazersCount: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/stargazers_url`.
                public var stargazersUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/statuses_url`.
                public var statusesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/subscribers_url`.
                public var subscribersUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/subscription_url`.
                public var subscriptionUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/svn_url`.
                public var svnUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/tags_url`.
                public var tagsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/teams_url`.
                public var teamsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/topics`.
                public var topics: [Swift.String]
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/trees_url`.
                public var treesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/updated_at`.
                public var updatedAt: Foundation.Date
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/visibility`.
                @frozen public enum VisibilityPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case _public = "public"
                    case _private = "private"
                    case _internal = "internal"
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/visibility`.
                public var visibility: Components.Schemas.WebhookTeamEdited.RepositoryPayload.VisibilityPayload
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/watchers`.
                public var watchers: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository/watchers_count`.
                public var watchersCount: Swift.Int
                /// Creates a new `RepositoryPayload`.
                ///
                /// - Parameters:
                ///   - allowAutoMerge: Whether to allow auto-merge for pull requests.
                ///   - allowForking: Whether to allow private forks
                ///   - allowMergeCommit: Whether to allow merge commits for pull requests.
                ///   - allowRebaseMerge: Whether to allow rebase merges for pull requests.
                ///   - allowSquashMerge: Whether to allow squash merges for pull requests.
                ///   - allowUpdateBranch:
                ///   - archiveUrl:
                ///   - archived: Whether the repository is archived.
                ///   - assigneesUrl:
                ///   - blobsUrl:
                ///   - branchesUrl:
                ///   - cloneUrl:
                ///   - collaboratorsUrl:
                ///   - commentsUrl:
                ///   - commitsUrl:
                ///   - compareUrl:
                ///   - contentsUrl:
                ///   - contributorsUrl:
                ///   - createdAt:
                ///   - defaultBranch: The default branch of the repository.
                ///   - deleteBranchOnMerge: Whether to delete head branches when pull requests are merged
                ///   - deploymentsUrl:
                ///   - description:
                ///   - disabled: Returns whether or not this repository is disabled.
                ///   - downloadsUrl:
                ///   - eventsUrl:
                ///   - fork:
                ///   - forks:
                ///   - forksCount:
                ///   - forksUrl:
                ///   - fullName:
                ///   - gitCommitsUrl:
                ///   - gitRefsUrl:
                ///   - gitTagsUrl:
                ///   - gitUrl:
                ///   - hasDownloads: Whether downloads are enabled.
                ///   - hasIssues: Whether issues are enabled.
                ///   - hasPages:
                ///   - hasProjects: Whether projects are enabled.
                ///   - hasWiki: Whether the wiki is enabled.
                ///   - homepage:
                ///   - hooksUrl:
                ///   - htmlUrl:
                ///   - id: Unique identifier of the repository
                ///   - isTemplate:
                ///   - issueCommentUrl:
                ///   - issueEventsUrl:
                ///   - issuesUrl:
                ///   - keysUrl:
                ///   - labelsUrl:
                ///   - language:
                ///   - languagesUrl:
                ///   - license:
                ///   - masterBranch:
                ///   - mergesUrl:
                ///   - milestonesUrl:
                ///   - mirrorUrl:
                ///   - name: The name of the repository.
                ///   - nodeId:
                ///   - notificationsUrl:
                ///   - openIssues:
                ///   - openIssuesCount:
                ///   - organization:
                ///   - owner:
                ///   - permissions:
                ///   - _private: Whether the repository is private or public.
                ///   - _public:
                ///   - pullsUrl:
                ///   - pushedAt:
                ///   - releasesUrl:
                ///   - roleName:
                ///   - size:
                ///   - sshUrl:
                ///   - stargazers:
                ///   - stargazersCount:
                ///   - stargazersUrl:
                ///   - statusesUrl:
                ///   - subscribersUrl:
                ///   - subscriptionUrl:
                ///   - svnUrl:
                ///   - tagsUrl:
                ///   - teamsUrl:
                ///   - topics:
                ///   - treesUrl:
                ///   - updatedAt:
                ///   - url:
                ///   - visibility:
                ///   - watchers:
                ///   - watchersCount:
                public init(
                    allowAutoMerge: Swift.Bool? = nil,
                    allowForking: Swift.Bool? = nil,
                    allowMergeCommit: Swift.Bool? = nil,
                    allowRebaseMerge: Swift.Bool? = nil,
                    allowSquashMerge: Swift.Bool? = nil,
                    allowUpdateBranch: Swift.Bool? = nil,
                    archiveUrl: Swift.String,
                    archived: Swift.Bool,
                    assigneesUrl: Swift.String,
                    blobsUrl: Swift.String,
                    branchesUrl: Swift.String,
                    cloneUrl: Swift.String,
                    collaboratorsUrl: Swift.String,
                    commentsUrl: Swift.String,
                    commitsUrl: Swift.String,
                    compareUrl: Swift.String,
                    contentsUrl: Swift.String,
                    contributorsUrl: Swift.String,
                    createdAt: Components.Schemas.WebhookTeamEdited.RepositoryPayload.CreatedAtPayload,
                    defaultBranch: Swift.String,
                    deleteBranchOnMerge: Swift.Bool? = nil,
                    deploymentsUrl: Swift.String,
                    description: Swift.String? = nil,
                    disabled: Swift.Bool? = nil,
                    downloadsUrl: Swift.String,
                    eventsUrl: Swift.String,
                    fork: Swift.Bool,
                    forks: Swift.Int,
                    forksCount: Swift.Int,
                    forksUrl: Swift.String,
                    fullName: Swift.String,
                    gitCommitsUrl: Swift.String,
                    gitRefsUrl: Swift.String,
                    gitTagsUrl: Swift.String,
                    gitUrl: Swift.String,
                    hasDownloads: Swift.Bool,
                    hasIssues: Swift.Bool,
                    hasPages: Swift.Bool,
                    hasProjects: Swift.Bool,
                    hasWiki: Swift.Bool,
                    homepage: Swift.String? = nil,
                    hooksUrl: Swift.String,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    isTemplate: Swift.Bool? = nil,
                    issueCommentUrl: Swift.String,
                    issueEventsUrl: Swift.String,
                    issuesUrl: Swift.String,
                    keysUrl: Swift.String,
                    labelsUrl: Swift.String,
                    language: Swift.String? = nil,
                    languagesUrl: Swift.String,
                    license: Components.Schemas.WebhookTeamEdited.RepositoryPayload.LicensePayload? = nil,
                    masterBranch: Swift.String? = nil,
                    mergesUrl: Swift.String,
                    milestonesUrl: Swift.String,
                    mirrorUrl: Swift.String? = nil,
                    name: Swift.String,
                    nodeId: Swift.String,
                    notificationsUrl: Swift.String,
                    openIssues: Swift.Int,
                    openIssuesCount: Swift.Int,
                    organization: Swift.String? = nil,
                    owner: Components.Schemas.WebhookTeamEdited.RepositoryPayload.OwnerPayload? = nil,
                    permissions: Components.Schemas.WebhookTeamEdited.RepositoryPayload.PermissionsPayload? = nil,
                    _private: Swift.Bool,
                    _public: Swift.Bool? = nil,
                    pullsUrl: Swift.String,
                    pushedAt: Components.Schemas.WebhookTeamEdited.RepositoryPayload.PushedAtPayload? = nil,
                    releasesUrl: Swift.String,
                    roleName: Swift.String? = nil,
                    size: Swift.Int,
                    sshUrl: Swift.String,
                    stargazers: Swift.Int? = nil,
                    stargazersCount: Swift.Int,
                    stargazersUrl: Swift.String,
                    statusesUrl: Swift.String,
                    subscribersUrl: Swift.String,
                    subscriptionUrl: Swift.String,
                    svnUrl: Swift.String,
                    tagsUrl: Swift.String,
                    teamsUrl: Swift.String,
                    topics: [Swift.String],
                    treesUrl: Swift.String,
                    updatedAt: Foundation.Date,
                    url: Swift.String,
                    visibility: Components.Schemas.WebhookTeamEdited.RepositoryPayload.VisibilityPayload,
                    watchers: Swift.Int,
                    watchersCount: Swift.Int
                ) {
                    self.allowAutoMerge = allowAutoMerge
                    self.allowForking = allowForking
                    self.allowMergeCommit = allowMergeCommit
                    self.allowRebaseMerge = allowRebaseMerge
                    self.allowSquashMerge = allowSquashMerge
                    self.allowUpdateBranch = allowUpdateBranch
                    self.archiveUrl = archiveUrl
                    self.archived = archived
                    self.assigneesUrl = assigneesUrl
                    self.blobsUrl = blobsUrl
                    self.branchesUrl = branchesUrl
                    self.cloneUrl = cloneUrl
                    self.collaboratorsUrl = collaboratorsUrl
                    self.commentsUrl = commentsUrl
                    self.commitsUrl = commitsUrl
                    self.compareUrl = compareUrl
                    self.contentsUrl = contentsUrl
                    self.contributorsUrl = contributorsUrl
                    self.createdAt = createdAt
                    self.defaultBranch = defaultBranch
                    self.deleteBranchOnMerge = deleteBranchOnMerge
                    self.deploymentsUrl = deploymentsUrl
                    self.description = description
                    self.disabled = disabled
                    self.downloadsUrl = downloadsUrl
                    self.eventsUrl = eventsUrl
                    self.fork = fork
                    self.forks = forks
                    self.forksCount = forksCount
                    self.forksUrl = forksUrl
                    self.fullName = fullName
                    self.gitCommitsUrl = gitCommitsUrl
                    self.gitRefsUrl = gitRefsUrl
                    self.gitTagsUrl = gitTagsUrl
                    self.gitUrl = gitUrl
                    self.hasDownloads = hasDownloads
                    self.hasIssues = hasIssues
                    self.hasPages = hasPages
                    self.hasProjects = hasProjects
                    self.hasWiki = hasWiki
                    self.homepage = homepage
                    self.hooksUrl = hooksUrl
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.isTemplate = isTemplate
                    self.issueCommentUrl = issueCommentUrl
                    self.issueEventsUrl = issueEventsUrl
                    self.issuesUrl = issuesUrl
                    self.keysUrl = keysUrl
                    self.labelsUrl = labelsUrl
                    self.language = language
                    self.languagesUrl = languagesUrl
                    self.license = license
                    self.masterBranch = masterBranch
                    self.mergesUrl = mergesUrl
                    self.milestonesUrl = milestonesUrl
                    self.mirrorUrl = mirrorUrl
                    self.name = name
                    self.nodeId = nodeId
                    self.notificationsUrl = notificationsUrl
                    self.openIssues = openIssues
                    self.openIssuesCount = openIssuesCount
                    self.organization = organization
                    self.owner = owner
                    self.permissions = permissions
                    self._private = _private
                    self._public = _public
                    self.pullsUrl = pullsUrl
                    self.pushedAt = pushedAt
                    self.releasesUrl = releasesUrl
                    self.roleName = roleName
                    self.size = size
                    self.sshUrl = sshUrl
                    self.stargazers = stargazers
                    self.stargazersCount = stargazersCount
                    self.stargazersUrl = stargazersUrl
                    self.statusesUrl = statusesUrl
                    self.subscribersUrl = subscribersUrl
                    self.subscriptionUrl = subscriptionUrl
                    self.svnUrl = svnUrl
                    self.tagsUrl = tagsUrl
                    self.teamsUrl = teamsUrl
                    self.topics = topics
                    self.treesUrl = treesUrl
                    self.updatedAt = updatedAt
                    self.url = url
                    self.visibility = visibility
                    self.watchers = watchers
                    self.watchersCount = watchersCount
                }
                public enum CodingKeys: String, CodingKey {
                    case allowAutoMerge = "allow_auto_merge"
                    case allowForking = "allow_forking"
                    case allowMergeCommit = "allow_merge_commit"
                    case allowRebaseMerge = "allow_rebase_merge"
                    case allowSquashMerge = "allow_squash_merge"
                    case allowUpdateBranch = "allow_update_branch"
                    case archiveUrl = "archive_url"
                    case archived
                    case assigneesUrl = "assignees_url"
                    case blobsUrl = "blobs_url"
                    case branchesUrl = "branches_url"
                    case cloneUrl = "clone_url"
                    case collaboratorsUrl = "collaborators_url"
                    case commentsUrl = "comments_url"
                    case commitsUrl = "commits_url"
                    case compareUrl = "compare_url"
                    case contentsUrl = "contents_url"
                    case contributorsUrl = "contributors_url"
                    case createdAt = "created_at"
                    case defaultBranch = "default_branch"
                    case deleteBranchOnMerge = "delete_branch_on_merge"
                    case deploymentsUrl = "deployments_url"
                    case description
                    case disabled
                    case downloadsUrl = "downloads_url"
                    case eventsUrl = "events_url"
                    case fork
                    case forks
                    case forksCount = "forks_count"
                    case forksUrl = "forks_url"
                    case fullName = "full_name"
                    case gitCommitsUrl = "git_commits_url"
                    case gitRefsUrl = "git_refs_url"
                    case gitTagsUrl = "git_tags_url"
                    case gitUrl = "git_url"
                    case hasDownloads = "has_downloads"
                    case hasIssues = "has_issues"
                    case hasPages = "has_pages"
                    case hasProjects = "has_projects"
                    case hasWiki = "has_wiki"
                    case homepage
                    case hooksUrl = "hooks_url"
                    case htmlUrl = "html_url"
                    case id
                    case isTemplate = "is_template"
                    case issueCommentUrl = "issue_comment_url"
                    case issueEventsUrl = "issue_events_url"
                    case issuesUrl = "issues_url"
                    case keysUrl = "keys_url"
                    case labelsUrl = "labels_url"
                    case language
                    case languagesUrl = "languages_url"
                    case license
                    case masterBranch = "master_branch"
                    case mergesUrl = "merges_url"
                    case milestonesUrl = "milestones_url"
                    case mirrorUrl = "mirror_url"
                    case name
                    case nodeId = "node_id"
                    case notificationsUrl = "notifications_url"
                    case openIssues = "open_issues"
                    case openIssuesCount = "open_issues_count"
                    case organization
                    case owner
                    case permissions
                    case _private = "private"
                    case _public = "public"
                    case pullsUrl = "pulls_url"
                    case pushedAt = "pushed_at"
                    case releasesUrl = "releases_url"
                    case roleName = "role_name"
                    case size
                    case sshUrl = "ssh_url"
                    case stargazers
                    case stargazersCount = "stargazers_count"
                    case stargazersUrl = "stargazers_url"
                    case statusesUrl = "statuses_url"
                    case subscribersUrl = "subscribers_url"
                    case subscriptionUrl = "subscription_url"
                    case svnUrl = "svn_url"
                    case tagsUrl = "tags_url"
                    case teamsUrl = "teams_url"
                    case topics
                    case treesUrl = "trees_url"
                    case updatedAt = "updated_at"
                    case url
                    case visibility
                    case watchers
                    case watchersCount = "watchers_count"
                }
            }
            /// A git repository
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-team-edited/repository`.
            public var repository: Components.Schemas.WebhookTeamEdited.RepositoryPayload?
            /// - Remark: Generated from `#/components/schemas/webhook-team-edited/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Groups of organization members that gives permissions on specified repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-team-edited/team`.
            public struct TeamPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/team/deleted`.
                public var deleted: Swift.Bool?
                /// Description of the team
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/team/description`.
                public var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/team/html_url`.
                public var htmlUrl: Swift.String?
                /// Unique identifier of the team
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/team/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/team/members_url`.
                public var membersUrl: Swift.String?
                /// Name of the team
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/team/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/team/node_id`.
                public var nodeId: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/team/parent`.
                public struct ParentPayload: Codable, Hashable, Sendable {
                    /// Description of the team
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/team/parent/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/team/parent/html_url`.
                    public var htmlUrl: Swift.String
                    /// Unique identifier of the team
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/team/parent/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/team/parent/members_url`.
                    public var membersUrl: Swift.String
                    /// Name of the team
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/team/parent/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/team/parent/node_id`.
                    public var nodeId: Swift.String
                    /// Permission that the team will have for its repositories
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/team/parent/permission`.
                    public var permission: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/team/parent/privacy`.
                    @frozen public enum PrivacyPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case closed = "closed"
                        case secret = "secret"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/team/parent/privacy`.
                    public var privacy: Components.Schemas.WebhookTeamEdited.TeamPayload.ParentPayload.PrivacyPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/team/parent/repositories_url`.
                    public var repositoriesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/team/parent/slug`.
                    public var slug: Swift.String
                    /// URL for the team
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-team-edited/team/parent/url`.
                    public var url: Swift.String
                    /// Creates a new `ParentPayload`.
                    ///
                    /// - Parameters:
                    ///   - description: Description of the team
                    ///   - htmlUrl:
                    ///   - id: Unique identifier of the team
                    ///   - membersUrl:
                    ///   - name: Name of the team
                    ///   - nodeId:
                    ///   - permission: Permission that the team will have for its repositories
                    ///   - privacy:
                    ///   - repositoriesUrl:
                    ///   - slug:
                    ///   - url: URL for the team
                    public init(
                        description: Swift.String? = nil,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        membersUrl: Swift.String,
                        name: Swift.String,
                        nodeId: Swift.String,
                        permission: Swift.String,
                        privacy: Components.Schemas.WebhookTeamEdited.TeamPayload.ParentPayload.PrivacyPayload,
                        repositoriesUrl: Swift.String,
                        slug: Swift.String,
                        url: Swift.String
                    ) {
                        self.description = description
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.membersUrl = membersUrl
                        self.name = name
                        self.nodeId = nodeId
                        self.permission = permission
                        self.privacy = privacy
                        self.repositoriesUrl = repositoriesUrl
                        self.slug = slug
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case description
                        case htmlUrl = "html_url"
                        case id
                        case membersUrl = "members_url"
                        case name
                        case nodeId = "node_id"
                        case permission
                        case privacy
                        case repositoriesUrl = "repositories_url"
                        case slug
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/team/parent`.
                public var parent: Components.Schemas.WebhookTeamEdited.TeamPayload.ParentPayload?
                /// Permission that the team will have for its repositories
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/team/permission`.
                public var permission: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/team/privacy`.
                @frozen public enum PrivacyPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case open = "open"
                    case closed = "closed"
                    case secret = "secret"
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/team/privacy`.
                public var privacy: Components.Schemas.WebhookTeamEdited.TeamPayload.PrivacyPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/team/repositories_url`.
                public var repositoriesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/team/slug`.
                public var slug: Swift.String?
                /// URL for the team
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-edited/team/url`.
                public var url: Swift.String?
                /// Creates a new `TeamPayload`.
                ///
                /// - Parameters:
                ///   - deleted:
                ///   - description: Description of the team
                ///   - htmlUrl:
                ///   - id: Unique identifier of the team
                ///   - membersUrl:
                ///   - name: Name of the team
                ///   - nodeId:
                ///   - parent:
                ///   - permission: Permission that the team will have for its repositories
                ///   - privacy:
                ///   - repositoriesUrl:
                ///   - slug:
                ///   - url: URL for the team
                public init(
                    deleted: Swift.Bool? = nil,
                    description: Swift.String? = nil,
                    htmlUrl: Swift.String? = nil,
                    id: Swift.Int,
                    membersUrl: Swift.String? = nil,
                    name: Swift.String,
                    nodeId: Swift.String? = nil,
                    parent: Components.Schemas.WebhookTeamEdited.TeamPayload.ParentPayload? = nil,
                    permission: Swift.String? = nil,
                    privacy: Components.Schemas.WebhookTeamEdited.TeamPayload.PrivacyPayload? = nil,
                    repositoriesUrl: Swift.String? = nil,
                    slug: Swift.String? = nil,
                    url: Swift.String? = nil
                ) {
                    self.deleted = deleted
                    self.description = description
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.membersUrl = membersUrl
                    self.name = name
                    self.nodeId = nodeId
                    self.parent = parent
                    self.permission = permission
                    self.privacy = privacy
                    self.repositoriesUrl = repositoriesUrl
                    self.slug = slug
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case deleted
                    case description
                    case htmlUrl = "html_url"
                    case id
                    case membersUrl = "members_url"
                    case name
                    case nodeId = "node_id"
                    case parent
                    case permission
                    case privacy
                    case repositoriesUrl = "repositories_url"
                    case slug
                    case url
                }
            }
            /// Groups of organization members that gives permissions on specified repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-team-edited/team`.
            public var team: Components.Schemas.WebhookTeamEdited.TeamPayload
            /// Creates a new `WebhookTeamEdited`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - changes: The changes to the team if the action was `edited`.
            ///   - enterprise:
            ///   - installation:
            ///   - organization:
            ///   - repository: A git repository
            ///   - sender:
            ///   - team: Groups of organization members that gives permissions on specified repositories.
            public init(
                action: Components.Schemas.WebhookTeamEdited.ActionPayload,
                changes: Components.Schemas.WebhookTeamEdited.ChangesPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                organization: Components.Schemas.OrganizationSimple,
                repository: Components.Schemas.WebhookTeamEdited.RepositoryPayload? = nil,
                sender: Components.Schemas.SimpleUser,
                team: Components.Schemas.WebhookTeamEdited.TeamPayload
            ) {
                self.action = action
                self.changes = changes
                self.enterprise = enterprise
                self.installation = installation
                self.organization = organization
                self.repository = repository
                self.sender = sender
                self.team = team
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case changes
                case enterprise
                case installation
                case organization
                case repository
                case sender
                case team
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository`.
        public struct WebhookTeamRemovedFromRepository: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case removedFromRepository = "removed_from_repository"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/action`.
            public var action: Components.Schemas.WebhookTeamRemovedFromRepository.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/organization`.
            public var organization: Components.Schemas.OrganizationSimple
            /// A git repository
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository`.
            public struct RepositoryPayload: Codable, Hashable, Sendable {
                /// Whether to allow auto-merge for pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/allow_auto_merge`.
                public var allowAutoMerge: Swift.Bool?
                /// Whether to allow private forks
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/allow_forking`.
                public var allowForking: Swift.Bool?
                /// Whether to allow merge commits for pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/allow_merge_commit`.
                public var allowMergeCommit: Swift.Bool?
                /// Whether to allow rebase merges for pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/allow_rebase_merge`.
                public var allowRebaseMerge: Swift.Bool?
                /// Whether to allow squash merges for pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/allow_squash_merge`.
                public var allowSquashMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/allow_update_branch`.
                public var allowUpdateBranch: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/archive_url`.
                public var archiveUrl: Swift.String
                /// Whether the repository is archived.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/archived`.
                public var archived: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/assignees_url`.
                public var assigneesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/blobs_url`.
                public var blobsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/branches_url`.
                public var branchesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/clone_url`.
                public var cloneUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/collaborators_url`.
                public var collaboratorsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/comments_url`.
                public var commentsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/commits_url`.
                public var commitsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/compare_url`.
                public var compareUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/contents_url`.
                public var contentsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/contributors_url`.
                public var contributorsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/created_at`.
                @frozen public enum CreatedAtPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/created_at/case1`.
                    case case1(Swift.Int)
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/created_at/case2`.
                    case case2(Foundation.Date)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/created_at`.
                public var createdAt: Components.Schemas.WebhookTeamRemovedFromRepository.RepositoryPayload.CreatedAtPayload
                /// The default branch of the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/default_branch`.
                public var defaultBranch: Swift.String
                /// Whether to delete head branches when pull requests are merged
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/delete_branch_on_merge`.
                public var deleteBranchOnMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/deployments_url`.
                public var deploymentsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/description`.
                public var description: Swift.String?
                /// Returns whether or not this repository is disabled.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/disabled`.
                public var disabled: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/downloads_url`.
                public var downloadsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/events_url`.
                public var eventsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/fork`.
                public var fork: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/forks`.
                public var forks: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/forks_count`.
                public var forksCount: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/forks_url`.
                public var forksUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/full_name`.
                public var fullName: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/git_commits_url`.
                public var gitCommitsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/git_refs_url`.
                public var gitRefsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/git_tags_url`.
                public var gitTagsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/git_url`.
                public var gitUrl: Swift.String
                /// Whether downloads are enabled.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/has_downloads`.
                public var hasDownloads: Swift.Bool
                /// Whether issues are enabled.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/has_issues`.
                public var hasIssues: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/has_pages`.
                public var hasPages: Swift.Bool
                /// Whether projects are enabled.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/has_projects`.
                public var hasProjects: Swift.Bool
                /// Whether the wiki is enabled.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/has_wiki`.
                public var hasWiki: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/homepage`.
                public var homepage: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/hooks_url`.
                public var hooksUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/html_url`.
                public var htmlUrl: Swift.String
                /// Unique identifier of the repository
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/is_template`.
                public var isTemplate: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/issue_comment_url`.
                public var issueCommentUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/issue_events_url`.
                public var issueEventsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/issues_url`.
                public var issuesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/keys_url`.
                public var keysUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/labels_url`.
                public var labelsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/language`.
                public var language: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/languages_url`.
                public var languagesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/license`.
                public struct LicensePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/license/key`.
                    public var key: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/license/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/license/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/license/spdx_id`.
                    public var spdxId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/license/url`.
                    public var url: Swift.String?
                    /// Creates a new `LicensePayload`.
                    ///
                    /// - Parameters:
                    ///   - key:
                    ///   - name:
                    ///   - nodeId:
                    ///   - spdxId:
                    ///   - url:
                    public init(
                        key: Swift.String,
                        name: Swift.String,
                        nodeId: Swift.String,
                        spdxId: Swift.String,
                        url: Swift.String? = nil
                    ) {
                        self.key = key
                        self.name = name
                        self.nodeId = nodeId
                        self.spdxId = spdxId
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case key
                        case name
                        case nodeId = "node_id"
                        case spdxId = "spdx_id"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/license`.
                public var license: Components.Schemas.WebhookTeamRemovedFromRepository.RepositoryPayload.LicensePayload?
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/master_branch`.
                public var masterBranch: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/merges_url`.
                public var mergesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/milestones_url`.
                public var milestonesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/mirror_url`.
                public var mirrorUrl: Swift.String?
                /// The name of the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/notifications_url`.
                public var notificationsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/open_issues`.
                public var openIssues: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/open_issues_count`.
                public var openIssuesCount: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/organization`.
                public var organization: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/owner`.
                public struct OwnerPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/owner/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/owner/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/owner/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/owner/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/owner/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/owner/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/owner/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/owner/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/owner/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/owner/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/owner/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/owner/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/owner/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/owner/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/owner/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/owner/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/owner/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/owner/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/owner/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/owner/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/owner/type`.
                    public var _type: Components.Schemas.WebhookTeamRemovedFromRepository.RepositoryPayload.OwnerPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/owner/url`.
                    public var url: Swift.String?
                    /// Creates a new `OwnerPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookTeamRemovedFromRepository.RepositoryPayload.OwnerPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/owner`.
                public var owner: Components.Schemas.WebhookTeamRemovedFromRepository.RepositoryPayload.OwnerPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/permissions`.
                public struct PermissionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/permissions/admin`.
                    public var admin: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/permissions/maintain`.
                    public var maintain: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/permissions/pull`.
                    public var pull: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/permissions/push`.
                    public var push: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/permissions/triage`.
                    public var triage: Swift.Bool?
                    /// Creates a new `PermissionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - admin:
                    ///   - maintain:
                    ///   - pull:
                    ///   - push:
                    ///   - triage:
                    public init(
                        admin: Swift.Bool,
                        maintain: Swift.Bool? = nil,
                        pull: Swift.Bool,
                        push: Swift.Bool,
                        triage: Swift.Bool? = nil
                    ) {
                        self.admin = admin
                        self.maintain = maintain
                        self.pull = pull
                        self.push = push
                        self.triage = triage
                    }
                    public enum CodingKeys: String, CodingKey {
                        case admin
                        case maintain
                        case pull
                        case push
                        case triage
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/permissions`.
                public var permissions: Components.Schemas.WebhookTeamRemovedFromRepository.RepositoryPayload.PermissionsPayload?
                /// Whether the repository is private or public.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/private`.
                public var _private: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/public`.
                public var _public: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/pulls_url`.
                public var pullsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/pushed_at`.
                @frozen public enum PushedAtPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/pushed_at/case1`.
                    case case1(Swift.Int)
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/pushed_at/case2`.
                    case case2(Foundation.Date)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/pushed_at`.
                public var pushedAt: Components.Schemas.WebhookTeamRemovedFromRepository.RepositoryPayload.PushedAtPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/releases_url`.
                public var releasesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/role_name`.
                public var roleName: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/size`.
                public var size: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/ssh_url`.
                public var sshUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/stargazers`.
                public var stargazers: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/stargazers_count`.
                public var stargazersCount: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/stargazers_url`.
                public var stargazersUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/statuses_url`.
                public var statusesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/subscribers_url`.
                public var subscribersUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/subscription_url`.
                public var subscriptionUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/svn_url`.
                public var svnUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/tags_url`.
                public var tagsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/teams_url`.
                public var teamsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/topics`.
                public var topics: [Swift.String]
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/trees_url`.
                public var treesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/updated_at`.
                public var updatedAt: Foundation.Date
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/visibility`.
                @frozen public enum VisibilityPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case _public = "public"
                    case _private = "private"
                    case _internal = "internal"
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/visibility`.
                public var visibility: Components.Schemas.WebhookTeamRemovedFromRepository.RepositoryPayload.VisibilityPayload
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/watchers`.
                public var watchers: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository/watchers_count`.
                public var watchersCount: Swift.Int
                /// Creates a new `RepositoryPayload`.
                ///
                /// - Parameters:
                ///   - allowAutoMerge: Whether to allow auto-merge for pull requests.
                ///   - allowForking: Whether to allow private forks
                ///   - allowMergeCommit: Whether to allow merge commits for pull requests.
                ///   - allowRebaseMerge: Whether to allow rebase merges for pull requests.
                ///   - allowSquashMerge: Whether to allow squash merges for pull requests.
                ///   - allowUpdateBranch:
                ///   - archiveUrl:
                ///   - archived: Whether the repository is archived.
                ///   - assigneesUrl:
                ///   - blobsUrl:
                ///   - branchesUrl:
                ///   - cloneUrl:
                ///   - collaboratorsUrl:
                ///   - commentsUrl:
                ///   - commitsUrl:
                ///   - compareUrl:
                ///   - contentsUrl:
                ///   - contributorsUrl:
                ///   - createdAt:
                ///   - defaultBranch: The default branch of the repository.
                ///   - deleteBranchOnMerge: Whether to delete head branches when pull requests are merged
                ///   - deploymentsUrl:
                ///   - description:
                ///   - disabled: Returns whether or not this repository is disabled.
                ///   - downloadsUrl:
                ///   - eventsUrl:
                ///   - fork:
                ///   - forks:
                ///   - forksCount:
                ///   - forksUrl:
                ///   - fullName:
                ///   - gitCommitsUrl:
                ///   - gitRefsUrl:
                ///   - gitTagsUrl:
                ///   - gitUrl:
                ///   - hasDownloads: Whether downloads are enabled.
                ///   - hasIssues: Whether issues are enabled.
                ///   - hasPages:
                ///   - hasProjects: Whether projects are enabled.
                ///   - hasWiki: Whether the wiki is enabled.
                ///   - homepage:
                ///   - hooksUrl:
                ///   - htmlUrl:
                ///   - id: Unique identifier of the repository
                ///   - isTemplate:
                ///   - issueCommentUrl:
                ///   - issueEventsUrl:
                ///   - issuesUrl:
                ///   - keysUrl:
                ///   - labelsUrl:
                ///   - language:
                ///   - languagesUrl:
                ///   - license:
                ///   - masterBranch:
                ///   - mergesUrl:
                ///   - milestonesUrl:
                ///   - mirrorUrl:
                ///   - name: The name of the repository.
                ///   - nodeId:
                ///   - notificationsUrl:
                ///   - openIssues:
                ///   - openIssuesCount:
                ///   - organization:
                ///   - owner:
                ///   - permissions:
                ///   - _private: Whether the repository is private or public.
                ///   - _public:
                ///   - pullsUrl:
                ///   - pushedAt:
                ///   - releasesUrl:
                ///   - roleName:
                ///   - size:
                ///   - sshUrl:
                ///   - stargazers:
                ///   - stargazersCount:
                ///   - stargazersUrl:
                ///   - statusesUrl:
                ///   - subscribersUrl:
                ///   - subscriptionUrl:
                ///   - svnUrl:
                ///   - tagsUrl:
                ///   - teamsUrl:
                ///   - topics:
                ///   - treesUrl:
                ///   - updatedAt:
                ///   - url:
                ///   - visibility:
                ///   - watchers:
                ///   - watchersCount:
                public init(
                    allowAutoMerge: Swift.Bool? = nil,
                    allowForking: Swift.Bool? = nil,
                    allowMergeCommit: Swift.Bool? = nil,
                    allowRebaseMerge: Swift.Bool? = nil,
                    allowSquashMerge: Swift.Bool? = nil,
                    allowUpdateBranch: Swift.Bool? = nil,
                    archiveUrl: Swift.String,
                    archived: Swift.Bool,
                    assigneesUrl: Swift.String,
                    blobsUrl: Swift.String,
                    branchesUrl: Swift.String,
                    cloneUrl: Swift.String,
                    collaboratorsUrl: Swift.String,
                    commentsUrl: Swift.String,
                    commitsUrl: Swift.String,
                    compareUrl: Swift.String,
                    contentsUrl: Swift.String,
                    contributorsUrl: Swift.String,
                    createdAt: Components.Schemas.WebhookTeamRemovedFromRepository.RepositoryPayload.CreatedAtPayload,
                    defaultBranch: Swift.String,
                    deleteBranchOnMerge: Swift.Bool? = nil,
                    deploymentsUrl: Swift.String,
                    description: Swift.String? = nil,
                    disabled: Swift.Bool? = nil,
                    downloadsUrl: Swift.String,
                    eventsUrl: Swift.String,
                    fork: Swift.Bool,
                    forks: Swift.Int,
                    forksCount: Swift.Int,
                    forksUrl: Swift.String,
                    fullName: Swift.String,
                    gitCommitsUrl: Swift.String,
                    gitRefsUrl: Swift.String,
                    gitTagsUrl: Swift.String,
                    gitUrl: Swift.String,
                    hasDownloads: Swift.Bool,
                    hasIssues: Swift.Bool,
                    hasPages: Swift.Bool,
                    hasProjects: Swift.Bool,
                    hasWiki: Swift.Bool,
                    homepage: Swift.String? = nil,
                    hooksUrl: Swift.String,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    isTemplate: Swift.Bool? = nil,
                    issueCommentUrl: Swift.String,
                    issueEventsUrl: Swift.String,
                    issuesUrl: Swift.String,
                    keysUrl: Swift.String,
                    labelsUrl: Swift.String,
                    language: Swift.String? = nil,
                    languagesUrl: Swift.String,
                    license: Components.Schemas.WebhookTeamRemovedFromRepository.RepositoryPayload.LicensePayload? = nil,
                    masterBranch: Swift.String? = nil,
                    mergesUrl: Swift.String,
                    milestonesUrl: Swift.String,
                    mirrorUrl: Swift.String? = nil,
                    name: Swift.String,
                    nodeId: Swift.String,
                    notificationsUrl: Swift.String,
                    openIssues: Swift.Int,
                    openIssuesCount: Swift.Int,
                    organization: Swift.String? = nil,
                    owner: Components.Schemas.WebhookTeamRemovedFromRepository.RepositoryPayload.OwnerPayload? = nil,
                    permissions: Components.Schemas.WebhookTeamRemovedFromRepository.RepositoryPayload.PermissionsPayload? = nil,
                    _private: Swift.Bool,
                    _public: Swift.Bool? = nil,
                    pullsUrl: Swift.String,
                    pushedAt: Components.Schemas.WebhookTeamRemovedFromRepository.RepositoryPayload.PushedAtPayload? = nil,
                    releasesUrl: Swift.String,
                    roleName: Swift.String? = nil,
                    size: Swift.Int,
                    sshUrl: Swift.String,
                    stargazers: Swift.Int? = nil,
                    stargazersCount: Swift.Int,
                    stargazersUrl: Swift.String,
                    statusesUrl: Swift.String,
                    subscribersUrl: Swift.String,
                    subscriptionUrl: Swift.String,
                    svnUrl: Swift.String,
                    tagsUrl: Swift.String,
                    teamsUrl: Swift.String,
                    topics: [Swift.String],
                    treesUrl: Swift.String,
                    updatedAt: Foundation.Date,
                    url: Swift.String,
                    visibility: Components.Schemas.WebhookTeamRemovedFromRepository.RepositoryPayload.VisibilityPayload,
                    watchers: Swift.Int,
                    watchersCount: Swift.Int
                ) {
                    self.allowAutoMerge = allowAutoMerge
                    self.allowForking = allowForking
                    self.allowMergeCommit = allowMergeCommit
                    self.allowRebaseMerge = allowRebaseMerge
                    self.allowSquashMerge = allowSquashMerge
                    self.allowUpdateBranch = allowUpdateBranch
                    self.archiveUrl = archiveUrl
                    self.archived = archived
                    self.assigneesUrl = assigneesUrl
                    self.blobsUrl = blobsUrl
                    self.branchesUrl = branchesUrl
                    self.cloneUrl = cloneUrl
                    self.collaboratorsUrl = collaboratorsUrl
                    self.commentsUrl = commentsUrl
                    self.commitsUrl = commitsUrl
                    self.compareUrl = compareUrl
                    self.contentsUrl = contentsUrl
                    self.contributorsUrl = contributorsUrl
                    self.createdAt = createdAt
                    self.defaultBranch = defaultBranch
                    self.deleteBranchOnMerge = deleteBranchOnMerge
                    self.deploymentsUrl = deploymentsUrl
                    self.description = description
                    self.disabled = disabled
                    self.downloadsUrl = downloadsUrl
                    self.eventsUrl = eventsUrl
                    self.fork = fork
                    self.forks = forks
                    self.forksCount = forksCount
                    self.forksUrl = forksUrl
                    self.fullName = fullName
                    self.gitCommitsUrl = gitCommitsUrl
                    self.gitRefsUrl = gitRefsUrl
                    self.gitTagsUrl = gitTagsUrl
                    self.gitUrl = gitUrl
                    self.hasDownloads = hasDownloads
                    self.hasIssues = hasIssues
                    self.hasPages = hasPages
                    self.hasProjects = hasProjects
                    self.hasWiki = hasWiki
                    self.homepage = homepage
                    self.hooksUrl = hooksUrl
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.isTemplate = isTemplate
                    self.issueCommentUrl = issueCommentUrl
                    self.issueEventsUrl = issueEventsUrl
                    self.issuesUrl = issuesUrl
                    self.keysUrl = keysUrl
                    self.labelsUrl = labelsUrl
                    self.language = language
                    self.languagesUrl = languagesUrl
                    self.license = license
                    self.masterBranch = masterBranch
                    self.mergesUrl = mergesUrl
                    self.milestonesUrl = milestonesUrl
                    self.mirrorUrl = mirrorUrl
                    self.name = name
                    self.nodeId = nodeId
                    self.notificationsUrl = notificationsUrl
                    self.openIssues = openIssues
                    self.openIssuesCount = openIssuesCount
                    self.organization = organization
                    self.owner = owner
                    self.permissions = permissions
                    self._private = _private
                    self._public = _public
                    self.pullsUrl = pullsUrl
                    self.pushedAt = pushedAt
                    self.releasesUrl = releasesUrl
                    self.roleName = roleName
                    self.size = size
                    self.sshUrl = sshUrl
                    self.stargazers = stargazers
                    self.stargazersCount = stargazersCount
                    self.stargazersUrl = stargazersUrl
                    self.statusesUrl = statusesUrl
                    self.subscribersUrl = subscribersUrl
                    self.subscriptionUrl = subscriptionUrl
                    self.svnUrl = svnUrl
                    self.tagsUrl = tagsUrl
                    self.teamsUrl = teamsUrl
                    self.topics = topics
                    self.treesUrl = treesUrl
                    self.updatedAt = updatedAt
                    self.url = url
                    self.visibility = visibility
                    self.watchers = watchers
                    self.watchersCount = watchersCount
                }
                public enum CodingKeys: String, CodingKey {
                    case allowAutoMerge = "allow_auto_merge"
                    case allowForking = "allow_forking"
                    case allowMergeCommit = "allow_merge_commit"
                    case allowRebaseMerge = "allow_rebase_merge"
                    case allowSquashMerge = "allow_squash_merge"
                    case allowUpdateBranch = "allow_update_branch"
                    case archiveUrl = "archive_url"
                    case archived
                    case assigneesUrl = "assignees_url"
                    case blobsUrl = "blobs_url"
                    case branchesUrl = "branches_url"
                    case cloneUrl = "clone_url"
                    case collaboratorsUrl = "collaborators_url"
                    case commentsUrl = "comments_url"
                    case commitsUrl = "commits_url"
                    case compareUrl = "compare_url"
                    case contentsUrl = "contents_url"
                    case contributorsUrl = "contributors_url"
                    case createdAt = "created_at"
                    case defaultBranch = "default_branch"
                    case deleteBranchOnMerge = "delete_branch_on_merge"
                    case deploymentsUrl = "deployments_url"
                    case description
                    case disabled
                    case downloadsUrl = "downloads_url"
                    case eventsUrl = "events_url"
                    case fork
                    case forks
                    case forksCount = "forks_count"
                    case forksUrl = "forks_url"
                    case fullName = "full_name"
                    case gitCommitsUrl = "git_commits_url"
                    case gitRefsUrl = "git_refs_url"
                    case gitTagsUrl = "git_tags_url"
                    case gitUrl = "git_url"
                    case hasDownloads = "has_downloads"
                    case hasIssues = "has_issues"
                    case hasPages = "has_pages"
                    case hasProjects = "has_projects"
                    case hasWiki = "has_wiki"
                    case homepage
                    case hooksUrl = "hooks_url"
                    case htmlUrl = "html_url"
                    case id
                    case isTemplate = "is_template"
                    case issueCommentUrl = "issue_comment_url"
                    case issueEventsUrl = "issue_events_url"
                    case issuesUrl = "issues_url"
                    case keysUrl = "keys_url"
                    case labelsUrl = "labels_url"
                    case language
                    case languagesUrl = "languages_url"
                    case license
                    case masterBranch = "master_branch"
                    case mergesUrl = "merges_url"
                    case milestonesUrl = "milestones_url"
                    case mirrorUrl = "mirror_url"
                    case name
                    case nodeId = "node_id"
                    case notificationsUrl = "notifications_url"
                    case openIssues = "open_issues"
                    case openIssuesCount = "open_issues_count"
                    case organization
                    case owner
                    case permissions
                    case _private = "private"
                    case _public = "public"
                    case pullsUrl = "pulls_url"
                    case pushedAt = "pushed_at"
                    case releasesUrl = "releases_url"
                    case roleName = "role_name"
                    case size
                    case sshUrl = "ssh_url"
                    case stargazers
                    case stargazersCount = "stargazers_count"
                    case stargazersUrl = "stargazers_url"
                    case statusesUrl = "statuses_url"
                    case subscribersUrl = "subscribers_url"
                    case subscriptionUrl = "subscription_url"
                    case svnUrl = "svn_url"
                    case tagsUrl = "tags_url"
                    case teamsUrl = "teams_url"
                    case topics
                    case treesUrl = "trees_url"
                    case updatedAt = "updated_at"
                    case url
                    case visibility
                    case watchers
                    case watchersCount = "watchers_count"
                }
            }
            /// A git repository
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/repository`.
            public var repository: Components.Schemas.WebhookTeamRemovedFromRepository.RepositoryPayload?
            /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Groups of organization members that gives permissions on specified repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/team`.
            public struct TeamPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/team/deleted`.
                public var deleted: Swift.Bool?
                /// Description of the team
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/team/description`.
                public var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/team/html_url`.
                public var htmlUrl: Swift.String?
                /// Unique identifier of the team
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/team/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/team/members_url`.
                public var membersUrl: Swift.String?
                /// Name of the team
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/team/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/team/node_id`.
                public var nodeId: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/team/parent`.
                public struct ParentPayload: Codable, Hashable, Sendable {
                    /// Description of the team
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/team/parent/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/team/parent/html_url`.
                    public var htmlUrl: Swift.String
                    /// Unique identifier of the team
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/team/parent/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/team/parent/members_url`.
                    public var membersUrl: Swift.String
                    /// Name of the team
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/team/parent/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/team/parent/node_id`.
                    public var nodeId: Swift.String
                    /// Permission that the team will have for its repositories
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/team/parent/permission`.
                    public var permission: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/team/parent/privacy`.
                    @frozen public enum PrivacyPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case closed = "closed"
                        case secret = "secret"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/team/parent/privacy`.
                    public var privacy: Components.Schemas.WebhookTeamRemovedFromRepository.TeamPayload.ParentPayload.PrivacyPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/team/parent/repositories_url`.
                    public var repositoriesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/team/parent/slug`.
                    public var slug: Swift.String
                    /// URL for the team
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/team/parent/url`.
                    public var url: Swift.String
                    /// Creates a new `ParentPayload`.
                    ///
                    /// - Parameters:
                    ///   - description: Description of the team
                    ///   - htmlUrl:
                    ///   - id: Unique identifier of the team
                    ///   - membersUrl:
                    ///   - name: Name of the team
                    ///   - nodeId:
                    ///   - permission: Permission that the team will have for its repositories
                    ///   - privacy:
                    ///   - repositoriesUrl:
                    ///   - slug:
                    ///   - url: URL for the team
                    public init(
                        description: Swift.String? = nil,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        membersUrl: Swift.String,
                        name: Swift.String,
                        nodeId: Swift.String,
                        permission: Swift.String,
                        privacy: Components.Schemas.WebhookTeamRemovedFromRepository.TeamPayload.ParentPayload.PrivacyPayload,
                        repositoriesUrl: Swift.String,
                        slug: Swift.String,
                        url: Swift.String
                    ) {
                        self.description = description
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.membersUrl = membersUrl
                        self.name = name
                        self.nodeId = nodeId
                        self.permission = permission
                        self.privacy = privacy
                        self.repositoriesUrl = repositoriesUrl
                        self.slug = slug
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case description
                        case htmlUrl = "html_url"
                        case id
                        case membersUrl = "members_url"
                        case name
                        case nodeId = "node_id"
                        case permission
                        case privacy
                        case repositoriesUrl = "repositories_url"
                        case slug
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/team/parent`.
                public var parent: Components.Schemas.WebhookTeamRemovedFromRepository.TeamPayload.ParentPayload?
                /// Permission that the team will have for its repositories
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/team/permission`.
                public var permission: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/team/privacy`.
                @frozen public enum PrivacyPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case open = "open"
                    case closed = "closed"
                    case secret = "secret"
                }
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/team/privacy`.
                public var privacy: Components.Schemas.WebhookTeamRemovedFromRepository.TeamPayload.PrivacyPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/team/repositories_url`.
                public var repositoriesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/team/slug`.
                public var slug: Swift.String?
                /// URL for the team
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/team/url`.
                public var url: Swift.String?
                /// Creates a new `TeamPayload`.
                ///
                /// - Parameters:
                ///   - deleted:
                ///   - description: Description of the team
                ///   - htmlUrl:
                ///   - id: Unique identifier of the team
                ///   - membersUrl:
                ///   - name: Name of the team
                ///   - nodeId:
                ///   - parent:
                ///   - permission: Permission that the team will have for its repositories
                ///   - privacy:
                ///   - repositoriesUrl:
                ///   - slug:
                ///   - url: URL for the team
                public init(
                    deleted: Swift.Bool? = nil,
                    description: Swift.String? = nil,
                    htmlUrl: Swift.String? = nil,
                    id: Swift.Int,
                    membersUrl: Swift.String? = nil,
                    name: Swift.String,
                    nodeId: Swift.String? = nil,
                    parent: Components.Schemas.WebhookTeamRemovedFromRepository.TeamPayload.ParentPayload? = nil,
                    permission: Swift.String? = nil,
                    privacy: Components.Schemas.WebhookTeamRemovedFromRepository.TeamPayload.PrivacyPayload? = nil,
                    repositoriesUrl: Swift.String? = nil,
                    slug: Swift.String? = nil,
                    url: Swift.String? = nil
                ) {
                    self.deleted = deleted
                    self.description = description
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.membersUrl = membersUrl
                    self.name = name
                    self.nodeId = nodeId
                    self.parent = parent
                    self.permission = permission
                    self.privacy = privacy
                    self.repositoriesUrl = repositoriesUrl
                    self.slug = slug
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case deleted
                    case description
                    case htmlUrl = "html_url"
                    case id
                    case membersUrl = "members_url"
                    case name
                    case nodeId = "node_id"
                    case parent
                    case permission
                    case privacy
                    case repositoriesUrl = "repositories_url"
                    case slug
                    case url
                }
            }
            /// Groups of organization members that gives permissions on specified repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-team-removed-from-repository/team`.
            public var team: Components.Schemas.WebhookTeamRemovedFromRepository.TeamPayload
            /// Creates a new `WebhookTeamRemovedFromRepository`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - enterprise:
            ///   - installation:
            ///   - organization:
            ///   - repository: A git repository
            ///   - sender:
            ///   - team: Groups of organization members that gives permissions on specified repositories.
            public init(
                action: Components.Schemas.WebhookTeamRemovedFromRepository.ActionPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                organization: Components.Schemas.OrganizationSimple,
                repository: Components.Schemas.WebhookTeamRemovedFromRepository.RepositoryPayload? = nil,
                sender: Components.Schemas.SimpleUser,
                team: Components.Schemas.WebhookTeamRemovedFromRepository.TeamPayload
            ) {
                self.action = action
                self.enterprise = enterprise
                self.installation = installation
                self.organization = organization
                self.repository = repository
                self.sender = sender
                self.team = team
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case enterprise
                case installation
                case organization
                case repository
                case sender
                case team
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Team add
    ///
    /// - Remark: HTTP `POST /team-add`.
    /// - Remark: Generated from `#/paths//team-add/post(team-add)`.
    public enum TeamAdd {
        public static let id: Swift.String = "team-add"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/team-add/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team-add/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/team-add/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/team-add/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/team-add/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/team-add/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/team-add/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/team-add/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.TeamAdd.Input.Headers
            /// - Remark: Generated from `#/paths/team-add/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team-add/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookTeamAdd)
            }
            public var body: Operations.TeamAdd.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.TeamAdd.Input.Headers = .init(),
                body: Operations.TeamAdd.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//team-add/post(team-add)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.TeamAdd.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//team-add/post(team-add)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.TeamAdd.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Team added to repository
    ///
    /// - Remark: HTTP `POST /team-added-to-repository`.
    /// - Remark: Generated from `#/paths//team-added-to-repository/post(team/added-to-repository)`.
    public enum TeamAddedToRepository {
        public static let id: Swift.String = "team/added-to-repository"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/team-added-to-repository/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team-added-to-repository/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/team-added-to-repository/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/team-added-to-repository/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/team-added-to-repository/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/team-added-to-repository/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/team-added-to-repository/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/team-added-to-repository/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.TeamAddedToRepository.Input.Headers
            /// - Remark: Generated from `#/paths/team-added-to-repository/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team-added-to-repository/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookTeamAddedToRepository)
            }
            public var body: Operations.TeamAddedToRepository.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.TeamAddedToRepository.Input.Headers = .init(),
                body: Operations.TeamAddedToRepository.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//team-added-to-repository/post(team/added-to-repository)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.TeamAddedToRepository.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//team-added-to-repository/post(team/added-to-repository)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.TeamAddedToRepository.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Team created
    ///
    /// - Remark: HTTP `POST /team-created`.
    /// - Remark: Generated from `#/paths//team-created/post(team/created)`.
    public enum TeamCreated {
        public static let id: Swift.String = "team/created"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/team-created/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team-created/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/team-created/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/team-created/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/team-created/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/team-created/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/team-created/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/team-created/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.TeamCreated.Input.Headers
            /// - Remark: Generated from `#/paths/team-created/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team-created/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookTeamCreated)
            }
            public var body: Operations.TeamCreated.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.TeamCreated.Input.Headers = .init(),
                body: Operations.TeamCreated.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//team-created/post(team/created)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.TeamCreated.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//team-created/post(team/created)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.TeamCreated.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Team deleted
    ///
    /// - Remark: HTTP `POST /team-deleted`.
    /// - Remark: Generated from `#/paths//team-deleted/post(team/deleted)`.
    public enum TeamDeleted {
        public static let id: Swift.String = "team/deleted"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/team-deleted/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team-deleted/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/team-deleted/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/team-deleted/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/team-deleted/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/team-deleted/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/team-deleted/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/team-deleted/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.TeamDeleted.Input.Headers
            /// - Remark: Generated from `#/paths/team-deleted/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team-deleted/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookTeamDeleted)
            }
            public var body: Operations.TeamDeleted.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.TeamDeleted.Input.Headers = .init(),
                body: Operations.TeamDeleted.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//team-deleted/post(team/deleted)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.TeamDeleted.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//team-deleted/post(team/deleted)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.TeamDeleted.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Team edited
    ///
    /// - Remark: HTTP `POST /team-edited`.
    /// - Remark: Generated from `#/paths//team-edited/post(team/edited)`.
    public enum TeamEdited {
        public static let id: Swift.String = "team/edited"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/team-edited/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team-edited/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/team-edited/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/team-edited/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/team-edited/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/team-edited/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/team-edited/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/team-edited/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.TeamEdited.Input.Headers
            /// - Remark: Generated from `#/paths/team-edited/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team-edited/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookTeamEdited)
            }
            public var body: Operations.TeamEdited.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.TeamEdited.Input.Headers = .init(),
                body: Operations.TeamEdited.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//team-edited/post(team/edited)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.TeamEdited.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//team-edited/post(team/edited)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.TeamEdited.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Team removed from repository
    ///
    /// - Remark: HTTP `POST /team-removed-from-repository`.
    /// - Remark: Generated from `#/paths//team-removed-from-repository/post(team/removed-from-repository)`.
    public enum TeamRemovedFromRepository {
        public static let id: Swift.String = "team/removed-from-repository"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/team-removed-from-repository/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team-removed-from-repository/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/team-removed-from-repository/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/team-removed-from-repository/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/team-removed-from-repository/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/team-removed-from-repository/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/team-removed-from-repository/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/team-removed-from-repository/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.TeamRemovedFromRepository.Input.Headers
            /// - Remark: Generated from `#/paths/team-removed-from-repository/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team-removed-from-repository/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookTeamRemovedFromRepository)
            }
            public var body: Operations.TeamRemovedFromRepository.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.TeamRemovedFromRepository.Input.Headers = .init(),
                body: Operations.TeamRemovedFromRepository.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//team-removed-from-repository/post(team/removed-from-repository)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.TeamRemovedFromRepository.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//team-removed-from-repository/post(team/removed-from-repository)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.TeamRemovedFromRepository.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
}
