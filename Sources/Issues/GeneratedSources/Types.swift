// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// This event occurs when there is activity relating to a comment on an issue of pull request.
    ///
    /// For more information about issues and pull requests, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)" and "[About pull requests](https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the Issue comments APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issuecomment) and [the REST API documentation](https://docs.github.com/rest/issues/comments).
    ///
    /// For activity relating to an issue as opposed to comments on an issue, see the `issue` event. For activity related to pull request reviews or pull request review comments, see the `pull_request_review` or `pull_request_review_comment` events. For mor information about the different types of pull request comments, see "[Working with comments](https://docs.github.com/rest/guides/working-with-comments)."
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level permission for issues or pull requests.
    ///
    /// A comment on an issue or pull request was created.
    ///
    /// - Remark: HTTP `POST /issue-comment-created`.
    /// - Remark: Generated from `#/paths//issue-comment-created/post(issue-comment/created)`.
    func issueCommentCreated(_ input: Operations.IssueCommentCreated.Input) async throws -> Operations.IssueCommentCreated.Output
    /// This event occurs when there is activity relating to a comment on an issue of pull request.
    ///
    /// For more information about issues and pull requests, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)" and "[About pull requests](https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the Issue comments APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issuecomment) and [the REST API documentation](https://docs.github.com/rest/issues/comments).
    ///
    /// For activity relating to an issue as opposed to comments on an issue, see the `issue` event. For activity related to pull request reviews or pull request review comments, see the `pull_request_review` or `pull_request_review_comment` events. For mor information about the different types of pull request comments, see "[Working with comments](https://docs.github.com/rest/guides/working-with-comments)."
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level permission for issues or pull requests.
    ///
    /// A comment on an issue or pull request was deleted.
    ///
    /// - Remark: HTTP `POST /issue-comment-deleted`.
    /// - Remark: Generated from `#/paths//issue-comment-deleted/post(issue-comment/deleted)`.
    func issueCommentDeleted(_ input: Operations.IssueCommentDeleted.Input) async throws -> Operations.IssueCommentDeleted.Output
    /// This event occurs when there is activity relating to a comment on an issue of pull request.
    ///
    /// For more information about issues and pull requests, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)" and "[About pull requests](https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the Issue comments APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issuecomment) and [the REST API documentation](https://docs.github.com/rest/issues/comments).
    ///
    /// For activity relating to an issue as opposed to comments on an issue, see the `issue` event. For activity related to pull request reviews or pull request review comments, see the `pull_request_review` or `pull_request_review_comment` events. For mor information about the different types of pull request comments, see "[Working with comments](https://docs.github.com/rest/guides/working-with-comments)."
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level permission for issues or pull requests.
    ///
    /// A comment on an issue or pull request was edited.
    ///
    /// - Remark: HTTP `POST /issue-comment-edited`.
    /// - Remark: Generated from `#/paths//issue-comment-edited/post(issue-comment/edited)`.
    func issueCommentEdited(_ input: Operations.IssueCommentEdited.Input) async throws -> Operations.IssueCommentEdited.Output
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// An issue was assigned to a user.
    ///
    /// - Remark: HTTP `POST /issues-assigned`.
    /// - Remark: Generated from `#/paths//issues-assigned/post(issues/assigned)`.
    func issuesAssigned(_ input: Operations.IssuesAssigned.Input) async throws -> Operations.IssuesAssigned.Output
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// An issue was closed.
    ///
    /// - Remark: HTTP `POST /issues-closed`.
    /// - Remark: Generated from `#/paths//issues-closed/post(issues/closed)`.
    func issuesClosed(_ input: Operations.IssuesClosed.Input) async throws -> Operations.IssuesClosed.Output
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// An issue was deleted.
    ///
    /// - Remark: HTTP `POST /issues-deleted`.
    /// - Remark: Generated from `#/paths//issues-deleted/post(issues/deleted)`.
    func issuesDeleted(_ input: Operations.IssuesDeleted.Input) async throws -> Operations.IssuesDeleted.Output
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// An issue was removed from a milestone.
    ///
    /// - Remark: HTTP `POST /issues-demilestoned`.
    /// - Remark: Generated from `#/paths//issues-demilestoned/post(issues/demilestoned)`.
    func issuesDemilestoned(_ input: Operations.IssuesDemilestoned.Input) async throws -> Operations.IssuesDemilestoned.Output
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// The title or body on an issue was edited.
    ///
    /// - Remark: HTTP `POST /issues-edited`.
    /// - Remark: Generated from `#/paths//issues-edited/post(issues/edited)`.
    func issuesEdited(_ input: Operations.IssuesEdited.Input) async throws -> Operations.IssuesEdited.Output
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// A label was added to an issue.
    ///
    /// - Remark: HTTP `POST /issues-labeled`.
    /// - Remark: Generated from `#/paths//issues-labeled/post(issues/labeled)`.
    func issuesLabeled(_ input: Operations.IssuesLabeled.Input) async throws -> Operations.IssuesLabeled.Output
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// Conversation on an issue was locked. For more information, see "[Locking conversations](https://docs.github.com/communities/moderating-comments-and-conversations/locking-conversations)."
    ///
    /// - Remark: HTTP `POST /issues-locked`.
    /// - Remark: Generated from `#/paths//issues-locked/post(issues/locked)`.
    func issuesLocked(_ input: Operations.IssuesLocked.Input) async throws -> Operations.IssuesLocked.Output
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// An issue was added to a milestone.
    ///
    /// - Remark: HTTP `POST /issues-milestoned`.
    /// - Remark: Generated from `#/paths//issues-milestoned/post(issues/milestoned)`.
    func issuesMilestoned(_ input: Operations.IssuesMilestoned.Input) async throws -> Operations.IssuesMilestoned.Output
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// An issue was created. When a closed issue is reopened, the action will be `reopened` instead.
    ///
    /// - Remark: HTTP `POST /issues-opened`.
    /// - Remark: Generated from `#/paths//issues-opened/post(issues/opened)`.
    func issuesOpened(_ input: Operations.IssuesOpened.Input) async throws -> Operations.IssuesOpened.Output
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// An issue was pinned to a repository. For more information, see "[Pinning an issue to your repository](https://docs.github.com/issues/tracking-your-work-with-issues/pinning-an-issue-to-your-repository)."
    ///
    /// - Remark: HTTP `POST /issues-pinned`.
    /// - Remark: Generated from `#/paths//issues-pinned/post(issues/pinned)`.
    func issuesPinned(_ input: Operations.IssuesPinned.Input) async throws -> Operations.IssuesPinned.Output
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// A closed issue was reopened.
    ///
    /// - Remark: HTTP `POST /issues-reopened`.
    /// - Remark: Generated from `#/paths//issues-reopened/post(issues/reopened)`.
    func issuesReopened(_ input: Operations.IssuesReopened.Input) async throws -> Operations.IssuesReopened.Output
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// An issue was transferred to another repository. For more information, see "[Transferring an issue to another repository](https://docs.github.com/issues/tracking-your-work-with-issues/transferring-an-issue-to-another-repository)."
    ///
    /// - Remark: HTTP `POST /issues-transferred`.
    /// - Remark: Generated from `#/paths//issues-transferred/post(issues/transferred)`.
    func issuesTransferred(_ input: Operations.IssuesTransferred.Input) async throws -> Operations.IssuesTransferred.Output
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// A user was unassigned from an issue.
    ///
    /// - Remark: HTTP `POST /issues-unassigned`.
    /// - Remark: Generated from `#/paths//issues-unassigned/post(issues/unassigned)`.
    func issuesUnassigned(_ input: Operations.IssuesUnassigned.Input) async throws -> Operations.IssuesUnassigned.Output
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// A label was removed from an issue.
    ///
    /// - Remark: HTTP `POST /issues-unlabeled`.
    /// - Remark: Generated from `#/paths//issues-unlabeled/post(issues/unlabeled)`.
    func issuesUnlabeled(_ input: Operations.IssuesUnlabeled.Input) async throws -> Operations.IssuesUnlabeled.Output
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// Conversation on an issue was locked. For more information, see "[Locking conversations](https://docs.github.com/communities/moderating-comments-and-conversations/locking-conversations)."
    ///
    /// - Remark: HTTP `POST /issues-unlocked`.
    /// - Remark: Generated from `#/paths//issues-unlocked/post(issues/unlocked)`.
    func issuesUnlocked(_ input: Operations.IssuesUnlocked.Input) async throws -> Operations.IssuesUnlocked.Output
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// An issue was unpinned from a repository. For more information, see "[Pinning an issue to your repository](https://docs.github.com/issues/tracking-your-work-with-issues/pinning-an-issue-to-your-repository)."
    ///
    /// - Remark: HTTP `POST /issues-unpinned`.
    /// - Remark: Generated from `#/paths//issues-unpinned/post(issues/unpinned)`.
    func issuesUnpinned(_ input: Operations.IssuesUnpinned.Input) async throws -> Operations.IssuesUnpinned.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// This event occurs when there is activity relating to a comment on an issue of pull request.
    ///
    /// For more information about issues and pull requests, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)" and "[About pull requests](https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the Issue comments APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issuecomment) and [the REST API documentation](https://docs.github.com/rest/issues/comments).
    ///
    /// For activity relating to an issue as opposed to comments on an issue, see the `issue` event. For activity related to pull request reviews or pull request review comments, see the `pull_request_review` or `pull_request_review_comment` events. For mor information about the different types of pull request comments, see "[Working with comments](https://docs.github.com/rest/guides/working-with-comments)."
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level permission for issues or pull requests.
    ///
    /// A comment on an issue or pull request was created.
    ///
    /// - Remark: HTTP `POST /issue-comment-created`.
    /// - Remark: Generated from `#/paths//issue-comment-created/post(issue-comment/created)`.
    public func issueCommentCreated(
        headers: Operations.IssueCommentCreated.Input.Headers = .init(),
        body: Operations.IssueCommentCreated.Input.Body
    ) async throws -> Operations.IssueCommentCreated.Output {
        try await issueCommentCreated(Operations.IssueCommentCreated.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to a comment on an issue of pull request.
    ///
    /// For more information about issues and pull requests, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)" and "[About pull requests](https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the Issue comments APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issuecomment) and [the REST API documentation](https://docs.github.com/rest/issues/comments).
    ///
    /// For activity relating to an issue as opposed to comments on an issue, see the `issue` event. For activity related to pull request reviews or pull request review comments, see the `pull_request_review` or `pull_request_review_comment` events. For mor information about the different types of pull request comments, see "[Working with comments](https://docs.github.com/rest/guides/working-with-comments)."
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level permission for issues or pull requests.
    ///
    /// A comment on an issue or pull request was deleted.
    ///
    /// - Remark: HTTP `POST /issue-comment-deleted`.
    /// - Remark: Generated from `#/paths//issue-comment-deleted/post(issue-comment/deleted)`.
    public func issueCommentDeleted(
        headers: Operations.IssueCommentDeleted.Input.Headers = .init(),
        body: Operations.IssueCommentDeleted.Input.Body
    ) async throws -> Operations.IssueCommentDeleted.Output {
        try await issueCommentDeleted(Operations.IssueCommentDeleted.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to a comment on an issue of pull request.
    ///
    /// For more information about issues and pull requests, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)" and "[About pull requests](https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the Issue comments APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issuecomment) and [the REST API documentation](https://docs.github.com/rest/issues/comments).
    ///
    /// For activity relating to an issue as opposed to comments on an issue, see the `issue` event. For activity related to pull request reviews or pull request review comments, see the `pull_request_review` or `pull_request_review_comment` events. For mor information about the different types of pull request comments, see "[Working with comments](https://docs.github.com/rest/guides/working-with-comments)."
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level permission for issues or pull requests.
    ///
    /// A comment on an issue or pull request was edited.
    ///
    /// - Remark: HTTP `POST /issue-comment-edited`.
    /// - Remark: Generated from `#/paths//issue-comment-edited/post(issue-comment/edited)`.
    public func issueCommentEdited(
        headers: Operations.IssueCommentEdited.Input.Headers = .init(),
        body: Operations.IssueCommentEdited.Input.Body
    ) async throws -> Operations.IssueCommentEdited.Output {
        try await issueCommentEdited(Operations.IssueCommentEdited.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// An issue was assigned to a user.
    ///
    /// - Remark: HTTP `POST /issues-assigned`.
    /// - Remark: Generated from `#/paths//issues-assigned/post(issues/assigned)`.
    public func issuesAssigned(
        headers: Operations.IssuesAssigned.Input.Headers = .init(),
        body: Operations.IssuesAssigned.Input.Body
    ) async throws -> Operations.IssuesAssigned.Output {
        try await issuesAssigned(Operations.IssuesAssigned.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// An issue was closed.
    ///
    /// - Remark: HTTP `POST /issues-closed`.
    /// - Remark: Generated from `#/paths//issues-closed/post(issues/closed)`.
    public func issuesClosed(
        headers: Operations.IssuesClosed.Input.Headers = .init(),
        body: Operations.IssuesClosed.Input.Body
    ) async throws -> Operations.IssuesClosed.Output {
        try await issuesClosed(Operations.IssuesClosed.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// An issue was deleted.
    ///
    /// - Remark: HTTP `POST /issues-deleted`.
    /// - Remark: Generated from `#/paths//issues-deleted/post(issues/deleted)`.
    public func issuesDeleted(
        headers: Operations.IssuesDeleted.Input.Headers = .init(),
        body: Operations.IssuesDeleted.Input.Body
    ) async throws -> Operations.IssuesDeleted.Output {
        try await issuesDeleted(Operations.IssuesDeleted.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// An issue was removed from a milestone.
    ///
    /// - Remark: HTTP `POST /issues-demilestoned`.
    /// - Remark: Generated from `#/paths//issues-demilestoned/post(issues/demilestoned)`.
    public func issuesDemilestoned(
        headers: Operations.IssuesDemilestoned.Input.Headers = .init(),
        body: Operations.IssuesDemilestoned.Input.Body
    ) async throws -> Operations.IssuesDemilestoned.Output {
        try await issuesDemilestoned(Operations.IssuesDemilestoned.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// The title or body on an issue was edited.
    ///
    /// - Remark: HTTP `POST /issues-edited`.
    /// - Remark: Generated from `#/paths//issues-edited/post(issues/edited)`.
    public func issuesEdited(
        headers: Operations.IssuesEdited.Input.Headers = .init(),
        body: Operations.IssuesEdited.Input.Body
    ) async throws -> Operations.IssuesEdited.Output {
        try await issuesEdited(Operations.IssuesEdited.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// A label was added to an issue.
    ///
    /// - Remark: HTTP `POST /issues-labeled`.
    /// - Remark: Generated from `#/paths//issues-labeled/post(issues/labeled)`.
    public func issuesLabeled(
        headers: Operations.IssuesLabeled.Input.Headers = .init(),
        body: Operations.IssuesLabeled.Input.Body
    ) async throws -> Operations.IssuesLabeled.Output {
        try await issuesLabeled(Operations.IssuesLabeled.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// Conversation on an issue was locked. For more information, see "[Locking conversations](https://docs.github.com/communities/moderating-comments-and-conversations/locking-conversations)."
    ///
    /// - Remark: HTTP `POST /issues-locked`.
    /// - Remark: Generated from `#/paths//issues-locked/post(issues/locked)`.
    public func issuesLocked(
        headers: Operations.IssuesLocked.Input.Headers = .init(),
        body: Operations.IssuesLocked.Input.Body
    ) async throws -> Operations.IssuesLocked.Output {
        try await issuesLocked(Operations.IssuesLocked.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// An issue was added to a milestone.
    ///
    /// - Remark: HTTP `POST /issues-milestoned`.
    /// - Remark: Generated from `#/paths//issues-milestoned/post(issues/milestoned)`.
    public func issuesMilestoned(
        headers: Operations.IssuesMilestoned.Input.Headers = .init(),
        body: Operations.IssuesMilestoned.Input.Body
    ) async throws -> Operations.IssuesMilestoned.Output {
        try await issuesMilestoned(Operations.IssuesMilestoned.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// An issue was created. When a closed issue is reopened, the action will be `reopened` instead.
    ///
    /// - Remark: HTTP `POST /issues-opened`.
    /// - Remark: Generated from `#/paths//issues-opened/post(issues/opened)`.
    public func issuesOpened(
        headers: Operations.IssuesOpened.Input.Headers = .init(),
        body: Operations.IssuesOpened.Input.Body
    ) async throws -> Operations.IssuesOpened.Output {
        try await issuesOpened(Operations.IssuesOpened.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// An issue was pinned to a repository. For more information, see "[Pinning an issue to your repository](https://docs.github.com/issues/tracking-your-work-with-issues/pinning-an-issue-to-your-repository)."
    ///
    /// - Remark: HTTP `POST /issues-pinned`.
    /// - Remark: Generated from `#/paths//issues-pinned/post(issues/pinned)`.
    public func issuesPinned(
        headers: Operations.IssuesPinned.Input.Headers = .init(),
        body: Operations.IssuesPinned.Input.Body
    ) async throws -> Operations.IssuesPinned.Output {
        try await issuesPinned(Operations.IssuesPinned.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// A closed issue was reopened.
    ///
    /// - Remark: HTTP `POST /issues-reopened`.
    /// - Remark: Generated from `#/paths//issues-reopened/post(issues/reopened)`.
    public func issuesReopened(
        headers: Operations.IssuesReopened.Input.Headers = .init(),
        body: Operations.IssuesReopened.Input.Body
    ) async throws -> Operations.IssuesReopened.Output {
        try await issuesReopened(Operations.IssuesReopened.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// An issue was transferred to another repository. For more information, see "[Transferring an issue to another repository](https://docs.github.com/issues/tracking-your-work-with-issues/transferring-an-issue-to-another-repository)."
    ///
    /// - Remark: HTTP `POST /issues-transferred`.
    /// - Remark: Generated from `#/paths//issues-transferred/post(issues/transferred)`.
    public func issuesTransferred(
        headers: Operations.IssuesTransferred.Input.Headers = .init(),
        body: Operations.IssuesTransferred.Input.Body
    ) async throws -> Operations.IssuesTransferred.Output {
        try await issuesTransferred(Operations.IssuesTransferred.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// A user was unassigned from an issue.
    ///
    /// - Remark: HTTP `POST /issues-unassigned`.
    /// - Remark: Generated from `#/paths//issues-unassigned/post(issues/unassigned)`.
    public func issuesUnassigned(
        headers: Operations.IssuesUnassigned.Input.Headers = .init(),
        body: Operations.IssuesUnassigned.Input.Body
    ) async throws -> Operations.IssuesUnassigned.Output {
        try await issuesUnassigned(Operations.IssuesUnassigned.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// A label was removed from an issue.
    ///
    /// - Remark: HTTP `POST /issues-unlabeled`.
    /// - Remark: Generated from `#/paths//issues-unlabeled/post(issues/unlabeled)`.
    public func issuesUnlabeled(
        headers: Operations.IssuesUnlabeled.Input.Headers = .init(),
        body: Operations.IssuesUnlabeled.Input.Body
    ) async throws -> Operations.IssuesUnlabeled.Output {
        try await issuesUnlabeled(Operations.IssuesUnlabeled.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// Conversation on an issue was locked. For more information, see "[Locking conversations](https://docs.github.com/communities/moderating-comments-and-conversations/locking-conversations)."
    ///
    /// - Remark: HTTP `POST /issues-unlocked`.
    /// - Remark: Generated from `#/paths//issues-unlocked/post(issues/unlocked)`.
    public func issuesUnlocked(
        headers: Operations.IssuesUnlocked.Input.Headers = .init(),
        body: Operations.IssuesUnlocked.Input.Body
    ) async throws -> Operations.IssuesUnlocked.Output {
        try await issuesUnlocked(Operations.IssuesUnlocked.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// An issue was unpinned from a repository. For more information, see "[Pinning an issue to your repository](https://docs.github.com/issues/tracking-your-work-with-issues/pinning-an-issue-to-your-repository)."
    ///
    /// - Remark: HTTP `POST /issues-unpinned`.
    /// - Remark: Generated from `#/paths//issues-unpinned/post(issues/unpinned)`.
    public func issuesUnpinned(
        headers: Operations.IssuesUnpinned.Input.Headers = .init(),
        body: Operations.IssuesUnpinned.Input.Body
    ) async throws -> Operations.IssuesUnpinned.Output {
        try await issuesUnpinned(Operations.IssuesUnpinned.Input(
            headers: headers,
            body: body
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public enum Server1 {
        public static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://api.github.com",
                variables: []
            )
        }
    }
    @available(*, deprecated, renamed: "Servers.Server1.url")
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.github.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// Simple User
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-simple-user`.
        public struct NullableSimpleUser: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/node_id`.
            public var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/avatar_url`.
            public var avatarUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gravatar_id`.
            public var gravatarId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/html_url`.
            public var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/followers_url`.
            public var followersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/following_url`.
            public var followingUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gists_url`.
            public var gistsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_url`.
            public var starredUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/subscriptions_url`.
            public var subscriptionsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/organizations_url`.
            public var organizationsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/repos_url`.
            public var reposUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/events_url`.
            public var eventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/received_events_url`.
            public var receivedEventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/site_admin`.
            public var siteAdmin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_at`.
            public var starredAt: Swift.String?
            /// Creates a new `NullableSimpleUser`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - nodeId:
            ///   - avatarUrl:
            ///   - gravatarId:
            ///   - url:
            ///   - htmlUrl:
            ///   - followersUrl:
            ///   - followingUrl:
            ///   - gistsUrl:
            ///   - starredUrl:
            ///   - subscriptionsUrl:
            ///   - organizationsUrl:
            ///   - reposUrl:
            ///   - eventsUrl:
            ///   - receivedEventsUrl:
            ///   - _type:
            ///   - siteAdmin:
            ///   - starredAt:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int,
                nodeId: Swift.String,
                avatarUrl: Swift.String,
                gravatarId: Swift.String? = nil,
                url: Swift.String,
                htmlUrl: Swift.String,
                followersUrl: Swift.String,
                followingUrl: Swift.String,
                gistsUrl: Swift.String,
                starredUrl: Swift.String,
                subscriptionsUrl: Swift.String,
                organizationsUrl: Swift.String,
                reposUrl: Swift.String,
                eventsUrl: Swift.String,
                receivedEventsUrl: Swift.String,
                _type: Swift.String,
                siteAdmin: Swift.Bool,
                starredAt: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.nodeId = nodeId
                self.avatarUrl = avatarUrl
                self.gravatarId = gravatarId
                self.url = url
                self.htmlUrl = htmlUrl
                self.followersUrl = followersUrl
                self.followingUrl = followingUrl
                self.gistsUrl = gistsUrl
                self.starredUrl = starredUrl
                self.subscriptionsUrl = subscriptionsUrl
                self.organizationsUrl = organizationsUrl
                self.reposUrl = reposUrl
                self.eventsUrl = eventsUrl
                self.receivedEventsUrl = receivedEventsUrl
                self._type = _type
                self.siteAdmin = siteAdmin
                self.starredAt = starredAt
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case nodeId = "node_id"
                case avatarUrl = "avatar_url"
                case gravatarId = "gravatar_id"
                case url
                case htmlUrl = "html_url"
                case followersUrl = "followers_url"
                case followingUrl = "following_url"
                case gistsUrl = "gists_url"
                case starredUrl = "starred_url"
                case subscriptionsUrl = "subscriptions_url"
                case organizationsUrl = "organizations_url"
                case reposUrl = "repos_url"
                case eventsUrl = "events_url"
                case receivedEventsUrl = "received_events_url"
                case _type = "type"
                case siteAdmin = "site_admin"
                case starredAt = "starred_at"
            }
        }
        /// Simple User
        ///
        /// - Remark: Generated from `#/components/schemas/simple-user`.
        public struct SimpleUser: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/simple-user/node_id`.
            public var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/avatar_url`.
            public var avatarUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gravatar_id`.
            public var gravatarId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/html_url`.
            public var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/followers_url`.
            public var followersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/following_url`.
            public var followingUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gists_url`.
            public var gistsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_url`.
            public var starredUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/subscriptions_url`.
            public var subscriptionsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/organizations_url`.
            public var organizationsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/repos_url`.
            public var reposUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/events_url`.
            public var eventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/received_events_url`.
            public var receivedEventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/site_admin`.
            public var siteAdmin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_at`.
            public var starredAt: Swift.String?
            /// Creates a new `SimpleUser`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - nodeId:
            ///   - avatarUrl:
            ///   - gravatarId:
            ///   - url:
            ///   - htmlUrl:
            ///   - followersUrl:
            ///   - followingUrl:
            ///   - gistsUrl:
            ///   - starredUrl:
            ///   - subscriptionsUrl:
            ///   - organizationsUrl:
            ///   - reposUrl:
            ///   - eventsUrl:
            ///   - receivedEventsUrl:
            ///   - _type:
            ///   - siteAdmin:
            ///   - starredAt:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int,
                nodeId: Swift.String,
                avatarUrl: Swift.String,
                gravatarId: Swift.String? = nil,
                url: Swift.String,
                htmlUrl: Swift.String,
                followersUrl: Swift.String,
                followingUrl: Swift.String,
                gistsUrl: Swift.String,
                starredUrl: Swift.String,
                subscriptionsUrl: Swift.String,
                organizationsUrl: Swift.String,
                reposUrl: Swift.String,
                eventsUrl: Swift.String,
                receivedEventsUrl: Swift.String,
                _type: Swift.String,
                siteAdmin: Swift.Bool,
                starredAt: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.nodeId = nodeId
                self.avatarUrl = avatarUrl
                self.gravatarId = gravatarId
                self.url = url
                self.htmlUrl = htmlUrl
                self.followersUrl = followersUrl
                self.followingUrl = followingUrl
                self.gistsUrl = gistsUrl
                self.starredUrl = starredUrl
                self.subscriptionsUrl = subscriptionsUrl
                self.organizationsUrl = organizationsUrl
                self.reposUrl = reposUrl
                self.eventsUrl = eventsUrl
                self.receivedEventsUrl = receivedEventsUrl
                self._type = _type
                self.siteAdmin = siteAdmin
                self.starredAt = starredAt
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case nodeId = "node_id"
                case avatarUrl = "avatar_url"
                case gravatarId = "gravatar_id"
                case url
                case htmlUrl = "html_url"
                case followersUrl = "followers_url"
                case followingUrl = "following_url"
                case gistsUrl = "gists_url"
                case starredUrl = "starred_url"
                case subscriptionsUrl = "subscriptions_url"
                case organizationsUrl = "organizations_url"
                case reposUrl = "repos_url"
                case eventsUrl = "events_url"
                case receivedEventsUrl = "received_events_url"
                case _type = "type"
                case siteAdmin = "site_admin"
                case starredAt = "starred_at"
            }
        }
        /// An enterprise account
        ///
        /// - Remark: Generated from `#/components/schemas/enterprise`.
        public struct Enterprise: Codable, Hashable, Sendable {
            /// A short description of the enterprise.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/enterprise/html_url`.
            public var htmlUrl: Swift.String
            /// The enterprise's website URL.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/website_url`.
            public var websiteUrl: Swift.String?
            /// Unique identifier of the enterprise
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/enterprise/node_id`.
            public var nodeId: Swift.String
            /// The name of the enterprise.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/name`.
            public var name: Swift.String
            /// The slug url identifier for the enterprise.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/slug`.
            public var slug: Swift.String
            /// - Remark: Generated from `#/components/schemas/enterprise/created_at`.
            public var createdAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/enterprise/updated_at`.
            public var updatedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/enterprise/avatar_url`.
            public var avatarUrl: Swift.String
            /// Creates a new `Enterprise`.
            ///
            /// - Parameters:
            ///   - description: A short description of the enterprise.
            ///   - htmlUrl:
            ///   - websiteUrl: The enterprise's website URL.
            ///   - id: Unique identifier of the enterprise
            ///   - nodeId:
            ///   - name: The name of the enterprise.
            ///   - slug: The slug url identifier for the enterprise.
            ///   - createdAt:
            ///   - updatedAt:
            ///   - avatarUrl:
            public init(
                description: Swift.String? = nil,
                htmlUrl: Swift.String,
                websiteUrl: Swift.String? = nil,
                id: Swift.Int,
                nodeId: Swift.String,
                name: Swift.String,
                slug: Swift.String,
                createdAt: Foundation.Date? = nil,
                updatedAt: Foundation.Date? = nil,
                avatarUrl: Swift.String
            ) {
                self.description = description
                self.htmlUrl = htmlUrl
                self.websiteUrl = websiteUrl
                self.id = id
                self.nodeId = nodeId
                self.name = name
                self.slug = slug
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.avatarUrl = avatarUrl
            }
            public enum CodingKeys: String, CodingKey {
                case description
                case htmlUrl = "html_url"
                case websiteUrl = "website_url"
                case id
                case nodeId = "node_id"
                case name
                case slug
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case avatarUrl = "avatar_url"
            }
        }
        /// License Simple
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-license-simple`.
        public struct NullableLicenseSimple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/spdx_id`.
            public var spdxId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/node_id`.
            public var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/html_url`.
            public var htmlUrl: Swift.String?
            /// Creates a new `NullableLicenseSimple`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - url:
            ///   - spdxId:
            ///   - nodeId:
            ///   - htmlUrl:
            public init(
                key: Swift.String,
                name: Swift.String,
                url: Swift.String? = nil,
                spdxId: Swift.String? = nil,
                nodeId: Swift.String,
                htmlUrl: Swift.String? = nil
            ) {
                self.key = key
                self.name = name
                self.url = url
                self.spdxId = spdxId
                self.nodeId = nodeId
                self.htmlUrl = htmlUrl
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case url
                case spdxId = "spdx_id"
                case nodeId = "node_id"
                case htmlUrl = "html_url"
            }
        }
        /// A git repository
        ///
        /// - Remark: Generated from `#/components/schemas/repository`.
        public struct Repository: Codable, Hashable, Sendable {
            /// Unique identifier of the repository
            ///
            /// - Remark: Generated from `#/components/schemas/repository/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/node_id`.
            public var nodeId: Swift.String
            /// The name of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/full_name`.
            public var fullName: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/license`.
            public var license: Components.Schemas.NullableLicenseSimple?
            /// - Remark: Generated from `#/components/schemas/repository/organization`.
            public var organization: Components.Schemas.NullableSimpleUser?
            /// - Remark: Generated from `#/components/schemas/repository/forks`.
            public var forks: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/permissions`.
            public struct PermissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository/permissions/admin`.
                public var admin: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/pull`.
                public var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// Creates a new `PermissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                public init(
                    admin: Swift.Bool,
                    pull: Swift.Bool,
                    triage: Swift.Bool? = nil,
                    push: Swift.Bool,
                    maintain: Swift.Bool? = nil
                ) {
                    self.admin = admin
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                }
                public enum CodingKeys: String, CodingKey {
                    case admin
                    case pull
                    case triage
                    case push
                    case maintain
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository/permissions`.
            public var permissions: Components.Schemas.Repository.PermissionsPayload?
            /// - Remark: Generated from `#/components/schemas/repository/owner`.
            public var owner: Components.Schemas.SimpleUser
            /// Whether the repository is private or public.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/private`.
            public var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/html_url`.
            public var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/fork`.
            public var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/archive_url`.
            public var archiveUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/assignees_url`.
            public var assigneesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/blobs_url`.
            public var blobsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/branches_url`.
            public var branchesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/collaborators_url`.
            public var collaboratorsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/comments_url`.
            public var commentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/commits_url`.
            public var commitsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/compare_url`.
            public var compareUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/contents_url`.
            public var contentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/contributors_url`.
            public var contributorsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/deployments_url`.
            public var deploymentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/downloads_url`.
            public var downloadsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/events_url`.
            public var eventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/forks_url`.
            public var forksUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_commits_url`.
            public var gitCommitsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_refs_url`.
            public var gitRefsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_tags_url`.
            public var gitTagsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_url`.
            public var gitUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issue_comment_url`.
            public var issueCommentUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issue_events_url`.
            public var issueEventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issues_url`.
            public var issuesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/keys_url`.
            public var keysUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/labels_url`.
            public var labelsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/languages_url`.
            public var languagesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/merges_url`.
            public var mergesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/milestones_url`.
            public var milestonesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/notifications_url`.
            public var notificationsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/pulls_url`.
            public var pullsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/releases_url`.
            public var releasesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/ssh_url`.
            public var sshUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/stargazers_url`.
            public var stargazersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/statuses_url`.
            public var statusesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/subscribers_url`.
            public var subscribersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/subscription_url`.
            public var subscriptionUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/tags_url`.
            public var tagsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/teams_url`.
            public var teamsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/trees_url`.
            public var treesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/clone_url`.
            public var cloneUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/mirror_url`.
            public var mirrorUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/hooks_url`.
            public var hooksUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/svn_url`.
            public var svnUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/homepage`.
            public var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/language`.
            public var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/forks_count`.
            public var forksCount: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/stargazers_count`.
            public var stargazersCount: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/watchers_count`.
            public var watchersCount: Swift.Int
            /// The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/size`.
            public var size: Swift.Int
            /// The default branch of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/default_branch`.
            public var defaultBranch: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/open_issues_count`.
            public var openIssuesCount: Swift.Int
            /// Whether this repository acts as a template that can be used to generate new repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/is_template`.
            public var isTemplate: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/topics`.
            public var topics: [Swift.String]?
            /// Whether issues are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_issues`.
            public var hasIssues: Swift.Bool
            /// Whether projects are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_projects`.
            public var hasProjects: Swift.Bool
            /// Whether the wiki is enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_wiki`.
            public var hasWiki: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/has_pages`.
            public var hasPages: Swift.Bool
            /// Whether downloads are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_downloads`.
            public var hasDownloads: Swift.Bool
            /// Whether the repository is archived.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/archived`.
            public var archived: Swift.Bool
            /// Returns whether or not this repository disabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/disabled`.
            public var disabled: Swift.Bool
            /// The repository visibility: public, private, or internal.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/visibility`.
            public var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/pushed_at`.
            public var pushedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/repository/created_at`.
            public var createdAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/repository/updated_at`.
            public var updatedAt: Foundation.Date?
            /// Whether to allow rebase merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_rebase_merge`.
            public var allowRebaseMerge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/template_repository`.
            public struct TemplateRepositoryPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/id`.
                public var id: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/node_id`.
                public var nodeId: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/full_name`.
                public var fullName: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner`.
                public struct OwnerPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/login`.
                    public var login: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/id`.
                    public var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/url`.
                    public var url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/type`.
                    public var _type: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// Creates a new `OwnerPayload`.
                    ///
                    /// - Parameters:
                    ///   - login:
                    ///   - id:
                    ///   - nodeId:
                    ///   - avatarUrl:
                    ///   - gravatarId:
                    ///   - url:
                    ///   - htmlUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - organizationsUrl:
                    ///   - reposUrl:
                    ///   - eventsUrl:
                    ///   - receivedEventsUrl:
                    ///   - _type:
                    ///   - siteAdmin:
                    public init(
                        login: Swift.String? = nil,
                        id: Swift.Int? = nil,
                        nodeId: Swift.String? = nil,
                        avatarUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        url: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        _type: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil
                    ) {
                        self.login = login
                        self.id = id
                        self.nodeId = nodeId
                        self.avatarUrl = avatarUrl
                        self.gravatarId = gravatarId
                        self.url = url
                        self.htmlUrl = htmlUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self.organizationsUrl = organizationsUrl
                        self.reposUrl = reposUrl
                        self.eventsUrl = eventsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self._type = _type
                        self.siteAdmin = siteAdmin
                    }
                    public enum CodingKeys: String, CodingKey {
                        case login
                        case id
                        case nodeId = "node_id"
                        case avatarUrl = "avatar_url"
                        case gravatarId = "gravatar_id"
                        case url
                        case htmlUrl = "html_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case organizationsUrl = "organizations_url"
                        case reposUrl = "repos_url"
                        case eventsUrl = "events_url"
                        case receivedEventsUrl = "received_events_url"
                        case _type = "type"
                        case siteAdmin = "site_admin"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner`.
                public var owner: Components.Schemas.Repository.TemplateRepositoryPayload.OwnerPayload?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/private`.
                public var _private: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/html_url`.
                public var htmlUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/description`.
                public var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/fork`.
                public var fork: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/url`.
                public var url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/archive_url`.
                public var archiveUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/assignees_url`.
                public var assigneesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/blobs_url`.
                public var blobsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/branches_url`.
                public var branchesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/collaborators_url`.
                public var collaboratorsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/comments_url`.
                public var commentsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/commits_url`.
                public var commitsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/compare_url`.
                public var compareUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/contents_url`.
                public var contentsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/contributors_url`.
                public var contributorsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/deployments_url`.
                public var deploymentsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/downloads_url`.
                public var downloadsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/events_url`.
                public var eventsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/forks_url`.
                public var forksUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/git_commits_url`.
                public var gitCommitsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/git_refs_url`.
                public var gitRefsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/git_tags_url`.
                public var gitTagsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/git_url`.
                public var gitUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/issue_comment_url`.
                public var issueCommentUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/issue_events_url`.
                public var issueEventsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/issues_url`.
                public var issuesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/keys_url`.
                public var keysUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/labels_url`.
                public var labelsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/languages_url`.
                public var languagesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merges_url`.
                public var mergesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/milestones_url`.
                public var milestonesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/notifications_url`.
                public var notificationsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/pulls_url`.
                public var pullsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/releases_url`.
                public var releasesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/ssh_url`.
                public var sshUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/stargazers_url`.
                public var stargazersUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/statuses_url`.
                public var statusesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/subscribers_url`.
                public var subscribersUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/subscription_url`.
                public var subscriptionUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/tags_url`.
                public var tagsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/teams_url`.
                public var teamsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/trees_url`.
                public var treesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/clone_url`.
                public var cloneUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/mirror_url`.
                public var mirrorUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/hooks_url`.
                public var hooksUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/svn_url`.
                public var svnUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/homepage`.
                public var homepage: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/language`.
                public var language: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/forks_count`.
                public var forksCount: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/stargazers_count`.
                public var stargazersCount: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/watchers_count`.
                public var watchersCount: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/size`.
                public var size: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/default_branch`.
                public var defaultBranch: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/open_issues_count`.
                public var openIssuesCount: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/is_template`.
                public var isTemplate: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/topics`.
                public var topics: [Swift.String]?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_issues`.
                public var hasIssues: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_projects`.
                public var hasProjects: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_wiki`.
                public var hasWiki: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_pages`.
                public var hasPages: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_downloads`.
                public var hasDownloads: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/archived`.
                public var archived: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/disabled`.
                public var disabled: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/visibility`.
                public var visibility: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/pushed_at`.
                public var pushedAt: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/created_at`.
                public var createdAt: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/updated_at`.
                public var updatedAt: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions`.
                public struct PermissionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/admin`.
                    public var admin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/maintain`.
                    public var maintain: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/push`.
                    public var push: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/triage`.
                    public var triage: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/pull`.
                    public var pull: Swift.Bool?
                    /// Creates a new `PermissionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - admin:
                    ///   - maintain:
                    ///   - push:
                    ///   - triage:
                    ///   - pull:
                    public init(
                        admin: Swift.Bool? = nil,
                        maintain: Swift.Bool? = nil,
                        push: Swift.Bool? = nil,
                        triage: Swift.Bool? = nil,
                        pull: Swift.Bool? = nil
                    ) {
                        self.admin = admin
                        self.maintain = maintain
                        self.push = push
                        self.triage = triage
                        self.pull = pull
                    }
                    public enum CodingKeys: String, CodingKey {
                        case admin
                        case maintain
                        case push
                        case triage
                        case pull
                    }
                }
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions`.
                public var permissions: Components.Schemas.Repository.TemplateRepositoryPayload.PermissionsPayload?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_rebase_merge`.
                public var allowRebaseMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/temp_clone_token`.
                public var tempCloneToken: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_squash_merge`.
                public var allowSquashMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_auto_merge`.
                public var allowAutoMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/delete_branch_on_merge`.
                public var deleteBranchOnMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_update_branch`.
                public var allowUpdateBranch: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/use_squash_pr_title_as_default`.
                public var useSquashPrTitleAsDefault: Swift.Bool?
                /// The default value for a squash merge commit title:
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/squash_merge_commit_title`.
                @frozen public enum SquashMergeCommitTitlePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case prTitle = "PR_TITLE"
                    case commitOrPrTitle = "COMMIT_OR_PR_TITLE"
                }
                /// The default value for a squash merge commit title:
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/squash_merge_commit_title`.
                public var squashMergeCommitTitle: Components.Schemas.Repository.TemplateRepositoryPayload.SquashMergeCommitTitlePayload?
                /// The default value for a squash merge commit message:
                ///
                /// - `PR_BODY` - default to the pull request's body.
                /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/squash_merge_commit_message`.
                @frozen public enum SquashMergeCommitMessagePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case prBody = "PR_BODY"
                    case commitMessages = "COMMIT_MESSAGES"
                    case blank = "BLANK"
                }
                /// The default value for a squash merge commit message:
                ///
                /// - `PR_BODY` - default to the pull request's body.
                /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/squash_merge_commit_message`.
                public var squashMergeCommitMessage: Components.Schemas.Repository.TemplateRepositoryPayload.SquashMergeCommitMessagePayload?
                /// The default value for a merge commit title.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merge_commit_title`.
                @frozen public enum MergeCommitTitlePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case prTitle = "PR_TITLE"
                    case mergeMessage = "MERGE_MESSAGE"
                }
                /// The default value for a merge commit title.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merge_commit_title`.
                public var mergeCommitTitle: Components.Schemas.Repository.TemplateRepositoryPayload.MergeCommitTitlePayload?
                /// The default value for a merge commit message.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `PR_BODY` - default to the pull request's body.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merge_commit_message`.
                @frozen public enum MergeCommitMessagePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case prBody = "PR_BODY"
                    case prTitle = "PR_TITLE"
                    case blank = "BLANK"
                }
                /// The default value for a merge commit message.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `PR_BODY` - default to the pull request's body.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merge_commit_message`.
                public var mergeCommitMessage: Components.Schemas.Repository.TemplateRepositoryPayload.MergeCommitMessagePayload?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_merge_commit`.
                public var allowMergeCommit: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/subscribers_count`.
                public var subscribersCount: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/network_count`.
                public var networkCount: Swift.Int?
                /// Creates a new `TemplateRepositoryPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - nodeId:
                ///   - name:
                ///   - fullName:
                ///   - owner:
                ///   - _private:
                ///   - htmlUrl:
                ///   - description:
                ///   - fork:
                ///   - url:
                ///   - archiveUrl:
                ///   - assigneesUrl:
                ///   - blobsUrl:
                ///   - branchesUrl:
                ///   - collaboratorsUrl:
                ///   - commentsUrl:
                ///   - commitsUrl:
                ///   - compareUrl:
                ///   - contentsUrl:
                ///   - contributorsUrl:
                ///   - deploymentsUrl:
                ///   - downloadsUrl:
                ///   - eventsUrl:
                ///   - forksUrl:
                ///   - gitCommitsUrl:
                ///   - gitRefsUrl:
                ///   - gitTagsUrl:
                ///   - gitUrl:
                ///   - issueCommentUrl:
                ///   - issueEventsUrl:
                ///   - issuesUrl:
                ///   - keysUrl:
                ///   - labelsUrl:
                ///   - languagesUrl:
                ///   - mergesUrl:
                ///   - milestonesUrl:
                ///   - notificationsUrl:
                ///   - pullsUrl:
                ///   - releasesUrl:
                ///   - sshUrl:
                ///   - stargazersUrl:
                ///   - statusesUrl:
                ///   - subscribersUrl:
                ///   - subscriptionUrl:
                ///   - tagsUrl:
                ///   - teamsUrl:
                ///   - treesUrl:
                ///   - cloneUrl:
                ///   - mirrorUrl:
                ///   - hooksUrl:
                ///   - svnUrl:
                ///   - homepage:
                ///   - language:
                ///   - forksCount:
                ///   - stargazersCount:
                ///   - watchersCount:
                ///   - size:
                ///   - defaultBranch:
                ///   - openIssuesCount:
                ///   - isTemplate:
                ///   - topics:
                ///   - hasIssues:
                ///   - hasProjects:
                ///   - hasWiki:
                ///   - hasPages:
                ///   - hasDownloads:
                ///   - archived:
                ///   - disabled:
                ///   - visibility:
                ///   - pushedAt:
                ///   - createdAt:
                ///   - updatedAt:
                ///   - permissions:
                ///   - allowRebaseMerge:
                ///   - tempCloneToken:
                ///   - allowSquashMerge:
                ///   - allowAutoMerge:
                ///   - deleteBranchOnMerge:
                ///   - allowUpdateBranch:
                ///   - useSquashPrTitleAsDefault:
                ///   - squashMergeCommitTitle: The default value for a squash merge commit title:
                ///   - squashMergeCommitMessage: The default value for a squash merge commit message:
                ///   - mergeCommitTitle: The default value for a merge commit title.
                ///   - mergeCommitMessage: The default value for a merge commit message.
                ///   - allowMergeCommit:
                ///   - subscribersCount:
                ///   - networkCount:
                public init(
                    id: Swift.Int? = nil,
                    nodeId: Swift.String? = nil,
                    name: Swift.String? = nil,
                    fullName: Swift.String? = nil,
                    owner: Components.Schemas.Repository.TemplateRepositoryPayload.OwnerPayload? = nil,
                    _private: Swift.Bool? = nil,
                    htmlUrl: Swift.String? = nil,
                    description: Swift.String? = nil,
                    fork: Swift.Bool? = nil,
                    url: Swift.String? = nil,
                    archiveUrl: Swift.String? = nil,
                    assigneesUrl: Swift.String? = nil,
                    blobsUrl: Swift.String? = nil,
                    branchesUrl: Swift.String? = nil,
                    collaboratorsUrl: Swift.String? = nil,
                    commentsUrl: Swift.String? = nil,
                    commitsUrl: Swift.String? = nil,
                    compareUrl: Swift.String? = nil,
                    contentsUrl: Swift.String? = nil,
                    contributorsUrl: Swift.String? = nil,
                    deploymentsUrl: Swift.String? = nil,
                    downloadsUrl: Swift.String? = nil,
                    eventsUrl: Swift.String? = nil,
                    forksUrl: Swift.String? = nil,
                    gitCommitsUrl: Swift.String? = nil,
                    gitRefsUrl: Swift.String? = nil,
                    gitTagsUrl: Swift.String? = nil,
                    gitUrl: Swift.String? = nil,
                    issueCommentUrl: Swift.String? = nil,
                    issueEventsUrl: Swift.String? = nil,
                    issuesUrl: Swift.String? = nil,
                    keysUrl: Swift.String? = nil,
                    labelsUrl: Swift.String? = nil,
                    languagesUrl: Swift.String? = nil,
                    mergesUrl: Swift.String? = nil,
                    milestonesUrl: Swift.String? = nil,
                    notificationsUrl: Swift.String? = nil,
                    pullsUrl: Swift.String? = nil,
                    releasesUrl: Swift.String? = nil,
                    sshUrl: Swift.String? = nil,
                    stargazersUrl: Swift.String? = nil,
                    statusesUrl: Swift.String? = nil,
                    subscribersUrl: Swift.String? = nil,
                    subscriptionUrl: Swift.String? = nil,
                    tagsUrl: Swift.String? = nil,
                    teamsUrl: Swift.String? = nil,
                    treesUrl: Swift.String? = nil,
                    cloneUrl: Swift.String? = nil,
                    mirrorUrl: Swift.String? = nil,
                    hooksUrl: Swift.String? = nil,
                    svnUrl: Swift.String? = nil,
                    homepage: Swift.String? = nil,
                    language: Swift.String? = nil,
                    forksCount: Swift.Int? = nil,
                    stargazersCount: Swift.Int? = nil,
                    watchersCount: Swift.Int? = nil,
                    size: Swift.Int? = nil,
                    defaultBranch: Swift.String? = nil,
                    openIssuesCount: Swift.Int? = nil,
                    isTemplate: Swift.Bool? = nil,
                    topics: [Swift.String]? = nil,
                    hasIssues: Swift.Bool? = nil,
                    hasProjects: Swift.Bool? = nil,
                    hasWiki: Swift.Bool? = nil,
                    hasPages: Swift.Bool? = nil,
                    hasDownloads: Swift.Bool? = nil,
                    archived: Swift.Bool? = nil,
                    disabled: Swift.Bool? = nil,
                    visibility: Swift.String? = nil,
                    pushedAt: Swift.String? = nil,
                    createdAt: Swift.String? = nil,
                    updatedAt: Swift.String? = nil,
                    permissions: Components.Schemas.Repository.TemplateRepositoryPayload.PermissionsPayload? = nil,
                    allowRebaseMerge: Swift.Bool? = nil,
                    tempCloneToken: Swift.String? = nil,
                    allowSquashMerge: Swift.Bool? = nil,
                    allowAutoMerge: Swift.Bool? = nil,
                    deleteBranchOnMerge: Swift.Bool? = nil,
                    allowUpdateBranch: Swift.Bool? = nil,
                    useSquashPrTitleAsDefault: Swift.Bool? = nil,
                    squashMergeCommitTitle: Components.Schemas.Repository.TemplateRepositoryPayload.SquashMergeCommitTitlePayload? = nil,
                    squashMergeCommitMessage: Components.Schemas.Repository.TemplateRepositoryPayload.SquashMergeCommitMessagePayload? = nil,
                    mergeCommitTitle: Components.Schemas.Repository.TemplateRepositoryPayload.MergeCommitTitlePayload? = nil,
                    mergeCommitMessage: Components.Schemas.Repository.TemplateRepositoryPayload.MergeCommitMessagePayload? = nil,
                    allowMergeCommit: Swift.Bool? = nil,
                    subscribersCount: Swift.Int? = nil,
                    networkCount: Swift.Int? = nil
                ) {
                    self.id = id
                    self.nodeId = nodeId
                    self.name = name
                    self.fullName = fullName
                    self.owner = owner
                    self._private = _private
                    self.htmlUrl = htmlUrl
                    self.description = description
                    self.fork = fork
                    self.url = url
                    self.archiveUrl = archiveUrl
                    self.assigneesUrl = assigneesUrl
                    self.blobsUrl = blobsUrl
                    self.branchesUrl = branchesUrl
                    self.collaboratorsUrl = collaboratorsUrl
                    self.commentsUrl = commentsUrl
                    self.commitsUrl = commitsUrl
                    self.compareUrl = compareUrl
                    self.contentsUrl = contentsUrl
                    self.contributorsUrl = contributorsUrl
                    self.deploymentsUrl = deploymentsUrl
                    self.downloadsUrl = downloadsUrl
                    self.eventsUrl = eventsUrl
                    self.forksUrl = forksUrl
                    self.gitCommitsUrl = gitCommitsUrl
                    self.gitRefsUrl = gitRefsUrl
                    self.gitTagsUrl = gitTagsUrl
                    self.gitUrl = gitUrl
                    self.issueCommentUrl = issueCommentUrl
                    self.issueEventsUrl = issueEventsUrl
                    self.issuesUrl = issuesUrl
                    self.keysUrl = keysUrl
                    self.labelsUrl = labelsUrl
                    self.languagesUrl = languagesUrl
                    self.mergesUrl = mergesUrl
                    self.milestonesUrl = milestonesUrl
                    self.notificationsUrl = notificationsUrl
                    self.pullsUrl = pullsUrl
                    self.releasesUrl = releasesUrl
                    self.sshUrl = sshUrl
                    self.stargazersUrl = stargazersUrl
                    self.statusesUrl = statusesUrl
                    self.subscribersUrl = subscribersUrl
                    self.subscriptionUrl = subscriptionUrl
                    self.tagsUrl = tagsUrl
                    self.teamsUrl = teamsUrl
                    self.treesUrl = treesUrl
                    self.cloneUrl = cloneUrl
                    self.mirrorUrl = mirrorUrl
                    self.hooksUrl = hooksUrl
                    self.svnUrl = svnUrl
                    self.homepage = homepage
                    self.language = language
                    self.forksCount = forksCount
                    self.stargazersCount = stargazersCount
                    self.watchersCount = watchersCount
                    self.size = size
                    self.defaultBranch = defaultBranch
                    self.openIssuesCount = openIssuesCount
                    self.isTemplate = isTemplate
                    self.topics = topics
                    self.hasIssues = hasIssues
                    self.hasProjects = hasProjects
                    self.hasWiki = hasWiki
                    self.hasPages = hasPages
                    self.hasDownloads = hasDownloads
                    self.archived = archived
                    self.disabled = disabled
                    self.visibility = visibility
                    self.pushedAt = pushedAt
                    self.createdAt = createdAt
                    self.updatedAt = updatedAt
                    self.permissions = permissions
                    self.allowRebaseMerge = allowRebaseMerge
                    self.tempCloneToken = tempCloneToken
                    self.allowSquashMerge = allowSquashMerge
                    self.allowAutoMerge = allowAutoMerge
                    self.deleteBranchOnMerge = deleteBranchOnMerge
                    self.allowUpdateBranch = allowUpdateBranch
                    self.useSquashPrTitleAsDefault = useSquashPrTitleAsDefault
                    self.squashMergeCommitTitle = squashMergeCommitTitle
                    self.squashMergeCommitMessage = squashMergeCommitMessage
                    self.mergeCommitTitle = mergeCommitTitle
                    self.mergeCommitMessage = mergeCommitMessage
                    self.allowMergeCommit = allowMergeCommit
                    self.subscribersCount = subscribersCount
                    self.networkCount = networkCount
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case nodeId = "node_id"
                    case name
                    case fullName = "full_name"
                    case owner
                    case _private = "private"
                    case htmlUrl = "html_url"
                    case description
                    case fork
                    case url
                    case archiveUrl = "archive_url"
                    case assigneesUrl = "assignees_url"
                    case blobsUrl = "blobs_url"
                    case branchesUrl = "branches_url"
                    case collaboratorsUrl = "collaborators_url"
                    case commentsUrl = "comments_url"
                    case commitsUrl = "commits_url"
                    case compareUrl = "compare_url"
                    case contentsUrl = "contents_url"
                    case contributorsUrl = "contributors_url"
                    case deploymentsUrl = "deployments_url"
                    case downloadsUrl = "downloads_url"
                    case eventsUrl = "events_url"
                    case forksUrl = "forks_url"
                    case gitCommitsUrl = "git_commits_url"
                    case gitRefsUrl = "git_refs_url"
                    case gitTagsUrl = "git_tags_url"
                    case gitUrl = "git_url"
                    case issueCommentUrl = "issue_comment_url"
                    case issueEventsUrl = "issue_events_url"
                    case issuesUrl = "issues_url"
                    case keysUrl = "keys_url"
                    case labelsUrl = "labels_url"
                    case languagesUrl = "languages_url"
                    case mergesUrl = "merges_url"
                    case milestonesUrl = "milestones_url"
                    case notificationsUrl = "notifications_url"
                    case pullsUrl = "pulls_url"
                    case releasesUrl = "releases_url"
                    case sshUrl = "ssh_url"
                    case stargazersUrl = "stargazers_url"
                    case statusesUrl = "statuses_url"
                    case subscribersUrl = "subscribers_url"
                    case subscriptionUrl = "subscription_url"
                    case tagsUrl = "tags_url"
                    case teamsUrl = "teams_url"
                    case treesUrl = "trees_url"
                    case cloneUrl = "clone_url"
                    case mirrorUrl = "mirror_url"
                    case hooksUrl = "hooks_url"
                    case svnUrl = "svn_url"
                    case homepage
                    case language
                    case forksCount = "forks_count"
                    case stargazersCount = "stargazers_count"
                    case watchersCount = "watchers_count"
                    case size
                    case defaultBranch = "default_branch"
                    case openIssuesCount = "open_issues_count"
                    case isTemplate = "is_template"
                    case topics
                    case hasIssues = "has_issues"
                    case hasProjects = "has_projects"
                    case hasWiki = "has_wiki"
                    case hasPages = "has_pages"
                    case hasDownloads = "has_downloads"
                    case archived
                    case disabled
                    case visibility
                    case pushedAt = "pushed_at"
                    case createdAt = "created_at"
                    case updatedAt = "updated_at"
                    case permissions
                    case allowRebaseMerge = "allow_rebase_merge"
                    case tempCloneToken = "temp_clone_token"
                    case allowSquashMerge = "allow_squash_merge"
                    case allowAutoMerge = "allow_auto_merge"
                    case deleteBranchOnMerge = "delete_branch_on_merge"
                    case allowUpdateBranch = "allow_update_branch"
                    case useSquashPrTitleAsDefault = "use_squash_pr_title_as_default"
                    case squashMergeCommitTitle = "squash_merge_commit_title"
                    case squashMergeCommitMessage = "squash_merge_commit_message"
                    case mergeCommitTitle = "merge_commit_title"
                    case mergeCommitMessage = "merge_commit_message"
                    case allowMergeCommit = "allow_merge_commit"
                    case subscribersCount = "subscribers_count"
                    case networkCount = "network_count"
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository/template_repository`.
            public var templateRepository: Components.Schemas.Repository.TemplateRepositoryPayload?
            /// - Remark: Generated from `#/components/schemas/repository/temp_clone_token`.
            public var tempCloneToken: Swift.String?
            /// Whether to allow squash merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_squash_merge`.
            public var allowSquashMerge: Swift.Bool?
            /// Whether to allow Auto-merge to be used on pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_auto_merge`.
            public var allowAutoMerge: Swift.Bool?
            /// Whether to delete head branches when pull requests are merged
            ///
            /// - Remark: Generated from `#/components/schemas/repository/delete_branch_on_merge`.
            public var deleteBranchOnMerge: Swift.Bool?
            /// Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_update_branch`.
            public var allowUpdateBranch: Swift.Bool?
            /// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/use_squash_pr_title_as_default`.
            @available(*, deprecated)
            public var useSquashPrTitleAsDefault: Swift.Bool?
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_title`.
            @frozen public enum SquashMergeCommitTitlePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case prTitle = "PR_TITLE"
                case commitOrPrTitle = "COMMIT_OR_PR_TITLE"
            }
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_title`.
            public var squashMergeCommitTitle: Components.Schemas.Repository.SquashMergeCommitTitlePayload?
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_message`.
            @frozen public enum SquashMergeCommitMessagePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case prBody = "PR_BODY"
                case commitMessages = "COMMIT_MESSAGES"
                case blank = "BLANK"
            }
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_message`.
            public var squashMergeCommitMessage: Components.Schemas.Repository.SquashMergeCommitMessagePayload?
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_title`.
            @frozen public enum MergeCommitTitlePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case prTitle = "PR_TITLE"
                case mergeMessage = "MERGE_MESSAGE"
            }
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_title`.
            public var mergeCommitTitle: Components.Schemas.Repository.MergeCommitTitlePayload?
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_message`.
            @frozen public enum MergeCommitMessagePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case prBody = "PR_BODY"
                case prTitle = "PR_TITLE"
                case blank = "BLANK"
            }
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_message`.
            public var mergeCommitMessage: Components.Schemas.Repository.MergeCommitMessagePayload?
            /// Whether to allow merge commits for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_merge_commit`.
            public var allowMergeCommit: Swift.Bool?
            /// Whether to allow forking this repo
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_forking`.
            public var allowForking: Swift.Bool?
            /// Whether to require contributors to sign off on web-based commits
            ///
            /// - Remark: Generated from `#/components/schemas/repository/web_commit_signoff_required`.
            public var webCommitSignoffRequired: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/subscribers_count`.
            public var subscribersCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/repository/network_count`.
            public var networkCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/repository/open_issues`.
            public var openIssues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/watchers`.
            public var watchers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/master_branch`.
            public var masterBranch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/starred_at`.
            public var starredAt: Swift.String?
            /// Whether anonymous git access is enabled for this repository
            ///
            /// - Remark: Generated from `#/components/schemas/repository/anonymous_access_enabled`.
            public var anonymousAccessEnabled: Swift.Bool?
            /// Creates a new `Repository`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the repository
            ///   - nodeId:
            ///   - name: The name of the repository.
            ///   - fullName:
            ///   - license:
            ///   - organization:
            ///   - forks:
            ///   - permissions:
            ///   - owner:
            ///   - _private: Whether the repository is private or public.
            ///   - htmlUrl:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archiveUrl:
            ///   - assigneesUrl:
            ///   - blobsUrl:
            ///   - branchesUrl:
            ///   - collaboratorsUrl:
            ///   - commentsUrl:
            ///   - commitsUrl:
            ///   - compareUrl:
            ///   - contentsUrl:
            ///   - contributorsUrl:
            ///   - deploymentsUrl:
            ///   - downloadsUrl:
            ///   - eventsUrl:
            ///   - forksUrl:
            ///   - gitCommitsUrl:
            ///   - gitRefsUrl:
            ///   - gitTagsUrl:
            ///   - gitUrl:
            ///   - issueCommentUrl:
            ///   - issueEventsUrl:
            ///   - issuesUrl:
            ///   - keysUrl:
            ///   - labelsUrl:
            ///   - languagesUrl:
            ///   - mergesUrl:
            ///   - milestonesUrl:
            ///   - notificationsUrl:
            ///   - pullsUrl:
            ///   - releasesUrl:
            ///   - sshUrl:
            ///   - stargazersUrl:
            ///   - statusesUrl:
            ///   - subscribersUrl:
            ///   - subscriptionUrl:
            ///   - tagsUrl:
            ///   - teamsUrl:
            ///   - treesUrl:
            ///   - cloneUrl:
            ///   - mirrorUrl:
            ///   - hooksUrl:
            ///   - svnUrl:
            ///   - homepage:
            ///   - language:
            ///   - forksCount:
            ///   - stargazersCount:
            ///   - watchersCount:
            ///   - size: The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - defaultBranch: The default branch of the repository.
            ///   - openIssuesCount:
            ///   - isTemplate: Whether this repository acts as a template that can be used to generate new repositories.
            ///   - topics:
            ///   - hasIssues: Whether issues are enabled.
            ///   - hasProjects: Whether projects are enabled.
            ///   - hasWiki: Whether the wiki is enabled.
            ///   - hasPages:
            ///   - hasDownloads: Whether downloads are enabled.
            ///   - archived: Whether the repository is archived.
            ///   - disabled: Returns whether or not this repository disabled.
            ///   - visibility: The repository visibility: public, private, or internal.
            ///   - pushedAt:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - allowRebaseMerge: Whether to allow rebase merges for pull requests.
            ///   - templateRepository:
            ///   - tempCloneToken:
            ///   - allowSquashMerge: Whether to allow squash merges for pull requests.
            ///   - allowAutoMerge: Whether to allow Auto-merge to be used on pull requests.
            ///   - deleteBranchOnMerge: Whether to delete head branches when pull requests are merged
            ///   - allowUpdateBranch: Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///   - useSquashPrTitleAsDefault: Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///   - squashMergeCommitTitle: The default value for a squash merge commit title:
            ///   - squashMergeCommitMessage: The default value for a squash merge commit message:
            ///   - mergeCommitTitle: The default value for a merge commit title.
            ///   - mergeCommitMessage: The default value for a merge commit message.
            ///   - allowMergeCommit: Whether to allow merge commits for pull requests.
            ///   - allowForking: Whether to allow forking this repo
            ///   - webCommitSignoffRequired: Whether to require contributors to sign off on web-based commits
            ///   - subscribersCount:
            ///   - networkCount:
            ///   - openIssues:
            ///   - watchers:
            ///   - masterBranch:
            ///   - starredAt:
            ///   - anonymousAccessEnabled: Whether anonymous git access is enabled for this repository
            public init(
                id: Swift.Int,
                nodeId: Swift.String,
                name: Swift.String,
                fullName: Swift.String,
                license: Components.Schemas.NullableLicenseSimple? = nil,
                organization: Components.Schemas.NullableSimpleUser? = nil,
                forks: Swift.Int,
                permissions: Components.Schemas.Repository.PermissionsPayload? = nil,
                owner: Components.Schemas.SimpleUser,
                _private: Swift.Bool,
                htmlUrl: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archiveUrl: Swift.String,
                assigneesUrl: Swift.String,
                blobsUrl: Swift.String,
                branchesUrl: Swift.String,
                collaboratorsUrl: Swift.String,
                commentsUrl: Swift.String,
                commitsUrl: Swift.String,
                compareUrl: Swift.String,
                contentsUrl: Swift.String,
                contributorsUrl: Swift.String,
                deploymentsUrl: Swift.String,
                downloadsUrl: Swift.String,
                eventsUrl: Swift.String,
                forksUrl: Swift.String,
                gitCommitsUrl: Swift.String,
                gitRefsUrl: Swift.String,
                gitTagsUrl: Swift.String,
                gitUrl: Swift.String,
                issueCommentUrl: Swift.String,
                issueEventsUrl: Swift.String,
                issuesUrl: Swift.String,
                keysUrl: Swift.String,
                labelsUrl: Swift.String,
                languagesUrl: Swift.String,
                mergesUrl: Swift.String,
                milestonesUrl: Swift.String,
                notificationsUrl: Swift.String,
                pullsUrl: Swift.String,
                releasesUrl: Swift.String,
                sshUrl: Swift.String,
                stargazersUrl: Swift.String,
                statusesUrl: Swift.String,
                subscribersUrl: Swift.String,
                subscriptionUrl: Swift.String,
                tagsUrl: Swift.String,
                teamsUrl: Swift.String,
                treesUrl: Swift.String,
                cloneUrl: Swift.String,
                mirrorUrl: Swift.String? = nil,
                hooksUrl: Swift.String,
                svnUrl: Swift.String,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forksCount: Swift.Int,
                stargazersCount: Swift.Int,
                watchersCount: Swift.Int,
                size: Swift.Int,
                defaultBranch: Swift.String,
                openIssuesCount: Swift.Int,
                isTemplate: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                hasIssues: Swift.Bool,
                hasProjects: Swift.Bool,
                hasWiki: Swift.Bool,
                hasPages: Swift.Bool,
                hasDownloads: Swift.Bool,
                archived: Swift.Bool,
                disabled: Swift.Bool,
                visibility: Swift.String? = nil,
                pushedAt: Foundation.Date? = nil,
                createdAt: Foundation.Date? = nil,
                updatedAt: Foundation.Date? = nil,
                allowRebaseMerge: Swift.Bool? = nil,
                templateRepository: Components.Schemas.Repository.TemplateRepositoryPayload? = nil,
                tempCloneToken: Swift.String? = nil,
                allowSquashMerge: Swift.Bool? = nil,
                allowAutoMerge: Swift.Bool? = nil,
                deleteBranchOnMerge: Swift.Bool? = nil,
                allowUpdateBranch: Swift.Bool? = nil,
                useSquashPrTitleAsDefault: Swift.Bool? = nil,
                squashMergeCommitTitle: Components.Schemas.Repository.SquashMergeCommitTitlePayload? = nil,
                squashMergeCommitMessage: Components.Schemas.Repository.SquashMergeCommitMessagePayload? = nil,
                mergeCommitTitle: Components.Schemas.Repository.MergeCommitTitlePayload? = nil,
                mergeCommitMessage: Components.Schemas.Repository.MergeCommitMessagePayload? = nil,
                allowMergeCommit: Swift.Bool? = nil,
                allowForking: Swift.Bool? = nil,
                webCommitSignoffRequired: Swift.Bool? = nil,
                subscribersCount: Swift.Int? = nil,
                networkCount: Swift.Int? = nil,
                openIssues: Swift.Int,
                watchers: Swift.Int,
                masterBranch: Swift.String? = nil,
                starredAt: Swift.String? = nil,
                anonymousAccessEnabled: Swift.Bool? = nil
            ) {
                self.id = id
                self.nodeId = nodeId
                self.name = name
                self.fullName = fullName
                self.license = license
                self.organization = organization
                self.forks = forks
                self.permissions = permissions
                self.owner = owner
                self._private = _private
                self.htmlUrl = htmlUrl
                self.description = description
                self.fork = fork
                self.url = url
                self.archiveUrl = archiveUrl
                self.assigneesUrl = assigneesUrl
                self.blobsUrl = blobsUrl
                self.branchesUrl = branchesUrl
                self.collaboratorsUrl = collaboratorsUrl
                self.commentsUrl = commentsUrl
                self.commitsUrl = commitsUrl
                self.compareUrl = compareUrl
                self.contentsUrl = contentsUrl
                self.contributorsUrl = contributorsUrl
                self.deploymentsUrl = deploymentsUrl
                self.downloadsUrl = downloadsUrl
                self.eventsUrl = eventsUrl
                self.forksUrl = forksUrl
                self.gitCommitsUrl = gitCommitsUrl
                self.gitRefsUrl = gitRefsUrl
                self.gitTagsUrl = gitTagsUrl
                self.gitUrl = gitUrl
                self.issueCommentUrl = issueCommentUrl
                self.issueEventsUrl = issueEventsUrl
                self.issuesUrl = issuesUrl
                self.keysUrl = keysUrl
                self.labelsUrl = labelsUrl
                self.languagesUrl = languagesUrl
                self.mergesUrl = mergesUrl
                self.milestonesUrl = milestonesUrl
                self.notificationsUrl = notificationsUrl
                self.pullsUrl = pullsUrl
                self.releasesUrl = releasesUrl
                self.sshUrl = sshUrl
                self.stargazersUrl = stargazersUrl
                self.statusesUrl = statusesUrl
                self.subscribersUrl = subscribersUrl
                self.subscriptionUrl = subscriptionUrl
                self.tagsUrl = tagsUrl
                self.teamsUrl = teamsUrl
                self.treesUrl = treesUrl
                self.cloneUrl = cloneUrl
                self.mirrorUrl = mirrorUrl
                self.hooksUrl = hooksUrl
                self.svnUrl = svnUrl
                self.homepage = homepage
                self.language = language
                self.forksCount = forksCount
                self.stargazersCount = stargazersCount
                self.watchersCount = watchersCount
                self.size = size
                self.defaultBranch = defaultBranch
                self.openIssuesCount = openIssuesCount
                self.isTemplate = isTemplate
                self.topics = topics
                self.hasIssues = hasIssues
                self.hasProjects = hasProjects
                self.hasWiki = hasWiki
                self.hasPages = hasPages
                self.hasDownloads = hasDownloads
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushedAt = pushedAt
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.allowRebaseMerge = allowRebaseMerge
                self.templateRepository = templateRepository
                self.tempCloneToken = tempCloneToken
                self.allowSquashMerge = allowSquashMerge
                self.allowAutoMerge = allowAutoMerge
                self.deleteBranchOnMerge = deleteBranchOnMerge
                self.allowUpdateBranch = allowUpdateBranch
                self.useSquashPrTitleAsDefault = useSquashPrTitleAsDefault
                self.squashMergeCommitTitle = squashMergeCommitTitle
                self.squashMergeCommitMessage = squashMergeCommitMessage
                self.mergeCommitTitle = mergeCommitTitle
                self.mergeCommitMessage = mergeCommitMessage
                self.allowMergeCommit = allowMergeCommit
                self.allowForking = allowForking
                self.webCommitSignoffRequired = webCommitSignoffRequired
                self.subscribersCount = subscribersCount
                self.networkCount = networkCount
                self.openIssues = openIssues
                self.watchers = watchers
                self.masterBranch = masterBranch
                self.starredAt = starredAt
                self.anonymousAccessEnabled = anonymousAccessEnabled
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case name
                case fullName = "full_name"
                case license
                case organization
                case forks
                case permissions
                case owner
                case _private = "private"
                case htmlUrl = "html_url"
                case description
                case fork
                case url
                case archiveUrl = "archive_url"
                case assigneesUrl = "assignees_url"
                case blobsUrl = "blobs_url"
                case branchesUrl = "branches_url"
                case collaboratorsUrl = "collaborators_url"
                case commentsUrl = "comments_url"
                case commitsUrl = "commits_url"
                case compareUrl = "compare_url"
                case contentsUrl = "contents_url"
                case contributorsUrl = "contributors_url"
                case deploymentsUrl = "deployments_url"
                case downloadsUrl = "downloads_url"
                case eventsUrl = "events_url"
                case forksUrl = "forks_url"
                case gitCommitsUrl = "git_commits_url"
                case gitRefsUrl = "git_refs_url"
                case gitTagsUrl = "git_tags_url"
                case gitUrl = "git_url"
                case issueCommentUrl = "issue_comment_url"
                case issueEventsUrl = "issue_events_url"
                case issuesUrl = "issues_url"
                case keysUrl = "keys_url"
                case labelsUrl = "labels_url"
                case languagesUrl = "languages_url"
                case mergesUrl = "merges_url"
                case milestonesUrl = "milestones_url"
                case notificationsUrl = "notifications_url"
                case pullsUrl = "pulls_url"
                case releasesUrl = "releases_url"
                case sshUrl = "ssh_url"
                case stargazersUrl = "stargazers_url"
                case statusesUrl = "statuses_url"
                case subscribersUrl = "subscribers_url"
                case subscriptionUrl = "subscription_url"
                case tagsUrl = "tags_url"
                case teamsUrl = "teams_url"
                case treesUrl = "trees_url"
                case cloneUrl = "clone_url"
                case mirrorUrl = "mirror_url"
                case hooksUrl = "hooks_url"
                case svnUrl = "svn_url"
                case homepage
                case language
                case forksCount = "forks_count"
                case stargazersCount = "stargazers_count"
                case watchersCount = "watchers_count"
                case size
                case defaultBranch = "default_branch"
                case openIssuesCount = "open_issues_count"
                case isTemplate = "is_template"
                case topics
                case hasIssues = "has_issues"
                case hasProjects = "has_projects"
                case hasWiki = "has_wiki"
                case hasPages = "has_pages"
                case hasDownloads = "has_downloads"
                case archived
                case disabled
                case visibility
                case pushedAt = "pushed_at"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case allowRebaseMerge = "allow_rebase_merge"
                case templateRepository = "template_repository"
                case tempCloneToken = "temp_clone_token"
                case allowSquashMerge = "allow_squash_merge"
                case allowAutoMerge = "allow_auto_merge"
                case deleteBranchOnMerge = "delete_branch_on_merge"
                case allowUpdateBranch = "allow_update_branch"
                case useSquashPrTitleAsDefault = "use_squash_pr_title_as_default"
                case squashMergeCommitTitle = "squash_merge_commit_title"
                case squashMergeCommitMessage = "squash_merge_commit_message"
                case mergeCommitTitle = "merge_commit_title"
                case mergeCommitMessage = "merge_commit_message"
                case allowMergeCommit = "allow_merge_commit"
                case allowForking = "allow_forking"
                case webCommitSignoffRequired = "web_commit_signoff_required"
                case subscribersCount = "subscribers_count"
                case networkCount = "network_count"
                case openIssues = "open_issues"
                case watchers
                case masterBranch = "master_branch"
                case starredAt = "starred_at"
                case anonymousAccessEnabled = "anonymous_access_enabled"
            }
        }
        /// Organization Simple
        ///
        /// - Remark: Generated from `#/components/schemas/organization-simple`.
        public struct OrganizationSimple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/organization-simple/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization-simple/node_id`.
            public var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/repos_url`.
            public var reposUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/events_url`.
            public var eventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/hooks_url`.
            public var hooksUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/issues_url`.
            public var issuesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/members_url`.
            public var membersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/public_members_url`.
            public var publicMembersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/avatar_url`.
            public var avatarUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/description`.
            public var description: Swift.String?
            /// Creates a new `OrganizationSimple`.
            ///
            /// - Parameters:
            ///   - login:
            ///   - id:
            ///   - nodeId:
            ///   - url:
            ///   - reposUrl:
            ///   - eventsUrl:
            ///   - hooksUrl:
            ///   - issuesUrl:
            ///   - membersUrl:
            ///   - publicMembersUrl:
            ///   - avatarUrl:
            ///   - description:
            public init(
                login: Swift.String,
                id: Swift.Int,
                nodeId: Swift.String,
                url: Swift.String,
                reposUrl: Swift.String,
                eventsUrl: Swift.String,
                hooksUrl: Swift.String,
                issuesUrl: Swift.String,
                membersUrl: Swift.String,
                publicMembersUrl: Swift.String,
                avatarUrl: Swift.String,
                description: Swift.String? = nil
            ) {
                self.login = login
                self.id = id
                self.nodeId = nodeId
                self.url = url
                self.reposUrl = reposUrl
                self.eventsUrl = eventsUrl
                self.hooksUrl = hooksUrl
                self.issuesUrl = issuesUrl
                self.membersUrl = membersUrl
                self.publicMembersUrl = publicMembersUrl
                self.avatarUrl = avatarUrl
                self.description = description
            }
            public enum CodingKeys: String, CodingKey {
                case login
                case id
                case nodeId = "node_id"
                case url
                case reposUrl = "repos_url"
                case eventsUrl = "events_url"
                case hooksUrl = "hooks_url"
                case issuesUrl = "issues_url"
                case membersUrl = "members_url"
                case publicMembersUrl = "public_members_url"
                case avatarUrl = "avatar_url"
                case description
            }
        }
        /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-integration`.
        public struct NullableIntegration: Codable, Hashable, Sendable {
            /// Unique identifier of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/id`.
            public var id: Swift.Int
            /// The slug name of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/slug`.
            public var slug: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/node_id`.
            public var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/owner`.
            public var owner: Components.Schemas.NullableSimpleUser?
            /// The name of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/external_url`.
            public var externalUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/html_url`.
            public var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/created_at`.
            public var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/nullable-integration/updated_at`.
            public var updatedAt: Foundation.Date
            /// The set of permissions for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions`.
            public struct PermissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/issues`.
                public var issues: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/checks`.
                public var checks: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/metadata`.
                public var metadata: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/contents`.
                public var contents: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/deployments`.
                public var deployments: Swift.String?
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.String]
                /// Creates a new `PermissionsPayload`.
                ///
                /// - Parameters:
                ///   - issues:
                ///   - checks:
                ///   - metadata:
                ///   - contents:
                ///   - deployments:
                ///   - additionalProperties: A container of undocumented properties.
                public init(
                    issues: Swift.String? = nil,
                    checks: Swift.String? = nil,
                    metadata: Swift.String? = nil,
                    contents: Swift.String? = nil,
                    deployments: Swift.String? = nil,
                    additionalProperties: [String: Swift.String] = .init()
                ) {
                    self.issues = issues
                    self.checks = checks
                    self.metadata = metadata
                    self.contents = contents
                    self.deployments = deployments
                    self.additionalProperties = additionalProperties
                }
                public enum CodingKeys: String, CodingKey {
                    case issues
                    case checks
                    case metadata
                    case contents
                    case deployments
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.issues = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .issues
                    )
                    self.checks = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .checks
                    )
                    self.metadata = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .metadata
                    )
                    self.contents = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .contents
                    )
                    self.deployments = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .deployments
                    )
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                        "issues",
                        "checks",
                        "metadata",
                        "contents",
                        "deployments"
                    ])
                }
                public func encode(to encoder: any Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)
                    try container.encodeIfPresent(
                        self.issues,
                        forKey: .issues
                    )
                    try container.encodeIfPresent(
                        self.checks,
                        forKey: .checks
                    )
                    try container.encodeIfPresent(
                        self.metadata,
                        forKey: .metadata
                    )
                    try container.encodeIfPresent(
                        self.contents,
                        forKey: .contents
                    )
                    try container.encodeIfPresent(
                        self.deployments,
                        forKey: .deployments
                    )
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The set of permissions for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions`.
            public var permissions: Components.Schemas.NullableIntegration.PermissionsPayload
            /// The list of events for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/events`.
            public var events: [Swift.String]
            /// The number of installations associated with the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/installations_count`.
            public var installationsCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/client_id`.
            public var clientId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/client_secret`.
            public var clientSecret: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/webhook_secret`.
            public var webhookSecret: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/pem`.
            public var pem: Swift.String?
            /// Creates a new `NullableIntegration`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the GitHub app
            ///   - slug: The slug name of the GitHub app
            ///   - nodeId:
            ///   - owner:
            ///   - name: The name of the GitHub app
            ///   - description:
            ///   - externalUrl:
            ///   - htmlUrl:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - permissions: The set of permissions for the GitHub app
            ///   - events: The list of events for the GitHub app
            ///   - installationsCount: The number of installations associated with the GitHub app
            ///   - clientId:
            ///   - clientSecret:
            ///   - webhookSecret:
            ///   - pem:
            public init(
                id: Swift.Int,
                slug: Swift.String? = nil,
                nodeId: Swift.String,
                owner: Components.Schemas.NullableSimpleUser? = nil,
                name: Swift.String,
                description: Swift.String? = nil,
                externalUrl: Swift.String,
                htmlUrl: Swift.String,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                permissions: Components.Schemas.NullableIntegration.PermissionsPayload,
                events: [Swift.String],
                installationsCount: Swift.Int? = nil,
                clientId: Swift.String? = nil,
                clientSecret: Swift.String? = nil,
                webhookSecret: Swift.String? = nil,
                pem: Swift.String? = nil
            ) {
                self.id = id
                self.slug = slug
                self.nodeId = nodeId
                self.owner = owner
                self.name = name
                self.description = description
                self.externalUrl = externalUrl
                self.htmlUrl = htmlUrl
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.permissions = permissions
                self.events = events
                self.installationsCount = installationsCount
                self.clientId = clientId
                self.clientSecret = clientSecret
                self.webhookSecret = webhookSecret
                self.pem = pem
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case slug
                case nodeId = "node_id"
                case owner
                case name
                case description
                case externalUrl = "external_url"
                case htmlUrl = "html_url"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case permissions
                case events
                case installationsCount = "installations_count"
                case clientId = "client_id"
                case clientSecret = "client_secret"
                case webhookSecret = "webhook_secret"
                case pem
            }
        }
        /// Simple Installation
        ///
        /// - Remark: Generated from `#/components/schemas/simple-installation`.
        public struct SimpleInstallation: Codable, Hashable, Sendable {
            /// The ID of the installation.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-installation/id`.
            public var id: Swift.Int
            /// The global node ID of the installation.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-installation/node_id`.
            public var nodeId: Swift.String
            /// Creates a new `SimpleInstallation`.
            ///
            /// - Parameters:
            ///   - id: The ID of the installation.
            ///   - nodeId: The global node ID of the installation.
            public init(
                id: Swift.Int,
                nodeId: Swift.String
            ) {
                self.id = id
                self.nodeId = nodeId
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created`.
        public struct WebhookIssueCommentCreated: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case created = "created"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/action`.
            public var action: Components.Schemas.WebhookIssueCommentCreated.ActionPayload
            /// The [comment](https://docs.github.com/en/rest/reference/issues#comments) itself.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment`.
            public struct CommentPayload: Codable, Hashable, Sendable {
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/author_association`.
                @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case collaborator = "COLLABORATOR"
                    case contributor = "CONTRIBUTOR"
                    case firstTimer = "FIRST_TIMER"
                    case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                    case mannequin = "MANNEQUIN"
                    case member = "MEMBER"
                    case none = "NONE"
                    case owner = "OWNER"
                }
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/author_association`.
                public var authorAssociation: Components.Schemas.WebhookIssueCommentCreated.CommentPayload.AuthorAssociationPayload
                /// Contents of the issue comment
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/body`.
                public var body: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/created_at`.
                public var createdAt: Foundation.Date
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/html_url`.
                public var htmlUrl: Swift.String
                /// Unique identifier of the issue comment
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/issue_url`.
                public var issueUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/performed_via_github_app`.
                public var performedViaGithubApp: Components.Schemas.NullableIntegration?
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/reactions`.
                public struct ReactionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/reactions/+1`.
                    public var _plus_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/reactions/-1`.
                    public var _hyphen_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/reactions/confused`.
                    public var confused: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/reactions/eyes`.
                    public var eyes: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/reactions/heart`.
                    public var heart: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/reactions/hooray`.
                    public var hooray: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/reactions/laugh`.
                    public var laugh: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/reactions/rocket`.
                    public var rocket: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/reactions/total_count`.
                    public var totalCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/reactions/url`.
                    public var url: Swift.String
                    /// Creates a new `ReactionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - _plus_1:
                    ///   - _hyphen_1:
                    ///   - confused:
                    ///   - eyes:
                    ///   - heart:
                    ///   - hooray:
                    ///   - laugh:
                    ///   - rocket:
                    ///   - totalCount:
                    ///   - url:
                    public init(
                        _plus_1: Swift.Int,
                        _hyphen_1: Swift.Int,
                        confused: Swift.Int,
                        eyes: Swift.Int,
                        heart: Swift.Int,
                        hooray: Swift.Int,
                        laugh: Swift.Int,
                        rocket: Swift.Int,
                        totalCount: Swift.Int,
                        url: Swift.String
                    ) {
                        self._plus_1 = _plus_1
                        self._hyphen_1 = _hyphen_1
                        self.confused = confused
                        self.eyes = eyes
                        self.heart = heart
                        self.hooray = hooray
                        self.laugh = laugh
                        self.rocket = rocket
                        self.totalCount = totalCount
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _plus_1 = "+1"
                        case _hyphen_1 = "-1"
                        case confused
                        case eyes
                        case heart
                        case hooray
                        case laugh
                        case rocket
                        case totalCount = "total_count"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/reactions`.
                public var reactions: Components.Schemas.WebhookIssueCommentCreated.CommentPayload.ReactionsPayload
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/updated_at`.
                public var updatedAt: Foundation.Date
                /// URL for the issue comment
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/user`.
                public struct UserPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/user/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/user/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/user/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/user/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/user/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/user/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/user/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/user/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/user/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/user/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/user/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/user/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/user/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/user/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/user/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/user/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/user/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/user/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/user/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/user/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/user/type`.
                    public var _type: Components.Schemas.WebhookIssueCommentCreated.CommentPayload.UserPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/user/url`.
                    public var url: Swift.String?
                    /// Creates a new `UserPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookIssueCommentCreated.CommentPayload.UserPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment/user`.
                public var user: Components.Schemas.WebhookIssueCommentCreated.CommentPayload.UserPayload?
                /// Creates a new `CommentPayload`.
                ///
                /// - Parameters:
                ///   - authorAssociation: How the author is associated with the repository.
                ///   - body: Contents of the issue comment
                ///   - createdAt:
                ///   - htmlUrl:
                ///   - id: Unique identifier of the issue comment
                ///   - issueUrl:
                ///   - nodeId:
                ///   - performedViaGithubApp:
                ///   - reactions:
                ///   - updatedAt:
                ///   - url: URL for the issue comment
                ///   - user:
                public init(
                    authorAssociation: Components.Schemas.WebhookIssueCommentCreated.CommentPayload.AuthorAssociationPayload,
                    body: Swift.String,
                    createdAt: Foundation.Date,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    issueUrl: Swift.String,
                    nodeId: Swift.String,
                    performedViaGithubApp: Components.Schemas.NullableIntegration? = nil,
                    reactions: Components.Schemas.WebhookIssueCommentCreated.CommentPayload.ReactionsPayload,
                    updatedAt: Foundation.Date,
                    url: Swift.String,
                    user: Components.Schemas.WebhookIssueCommentCreated.CommentPayload.UserPayload? = nil
                ) {
                    self.authorAssociation = authorAssociation
                    self.body = body
                    self.createdAt = createdAt
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.issueUrl = issueUrl
                    self.nodeId = nodeId
                    self.performedViaGithubApp = performedViaGithubApp
                    self.reactions = reactions
                    self.updatedAt = updatedAt
                    self.url = url
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case authorAssociation = "author_association"
                    case body
                    case createdAt = "created_at"
                    case htmlUrl = "html_url"
                    case id
                    case issueUrl = "issue_url"
                    case nodeId = "node_id"
                    case performedViaGithubApp = "performed_via_github_app"
                    case reactions
                    case updatedAt = "updated_at"
                    case url
                    case user
                }
            }
            /// The [comment](https://docs.github.com/en/rest/reference/issues#comments) itself.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/comment`.
            public var comment: Components.Schemas.WebhookIssueCommentCreated.CommentPayload
            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// The [issue](https://docs.github.com/en/rest/reference/issues) the comment belongs to.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue`.
            public struct IssuePayload: Codable, Hashable, Sendable {
                /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/active_lock_reason`.
                    @frozen public enum ActiveLockReasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case resolved = "resolved"
                        case offTopic = "off-topic"
                        case tooHeated = "too heated"
                        case spam = "spam"
                        case _empty_ = ""
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/active_lock_reason`.
                    public var activeLockReason: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.ActiveLockReasonPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/assignee`.
                    public struct AssigneePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/assignee/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/assignee/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/assignee/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/assignee/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/assignee/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/assignee/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/assignee/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/assignee/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/assignee/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/assignee/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/assignee/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/assignee/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/assignee/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/assignee/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/assignee/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/assignee/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/assignee/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/assignee/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/assignee/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/assignee/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                            case mannequin = "Mannequin"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/assignee/type`.
                        public var _type: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.AssigneePayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/assignee/url`.
                        public var url: Swift.String?
                        /// Creates a new `AssigneePayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.AssigneePayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/assignee`.
                    public var assignee: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.AssigneePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/AssigneesPayload`.
                    public struct AssigneesPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/AssigneesPayload/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/AssigneesPayload/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/AssigneesPayload/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/AssigneesPayload/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/AssigneesPayload/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/AssigneesPayload/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/AssigneesPayload/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/AssigneesPayload/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/AssigneesPayload/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/AssigneesPayload/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/AssigneesPayload/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/AssigneesPayload/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/AssigneesPayload/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/AssigneesPayload/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/AssigneesPayload/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/AssigneesPayload/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/AssigneesPayload/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/AssigneesPayload/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/AssigneesPayload/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/AssigneesPayload/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                            case mannequin = "Mannequin"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/AssigneesPayload/type`.
                        public var _type: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.AssigneesPayloadPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/AssigneesPayload/url`.
                        public var url: Swift.String?
                        /// Creates a new `AssigneesPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.AssigneesPayloadPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/assignees`.
                    public typealias AssigneesPayload = [Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.AssigneesPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/assignees`.
                    public var assignees: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.AssigneesPayload
                    /// How the author is associated with the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/author_association`.
                    @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case collaborator = "COLLABORATOR"
                        case contributor = "CONTRIBUTOR"
                        case firstTimer = "FIRST_TIMER"
                        case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                        case mannequin = "MANNEQUIN"
                        case member = "MEMBER"
                        case none = "NONE"
                        case owner = "OWNER"
                    }
                    /// How the author is associated with the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/author_association`.
                    public var authorAssociation: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.AuthorAssociationPayload
                    /// Contents of the issue
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/body`.
                    public var body: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/closed_at`.
                    public var closedAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/comments`.
                    public var comments: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/comments_url`.
                    public var commentsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/created_at`.
                    public var createdAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/draft`.
                    public var draft: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/events_url`.
                    public var eventsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/html_url`.
                    public var htmlUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/LabelsPayload`.
                    public struct LabelsPayloadPayload: Codable, Hashable, Sendable {
                        /// 6-character hex code, without the leading #, identifying the color
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/LabelsPayload/color`.
                        public var color: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/LabelsPayload/default`.
                        public var _default: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/LabelsPayload/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/LabelsPayload/id`.
                        public var id: Swift.Int
                        /// The name of the label.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/LabelsPayload/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/LabelsPayload/node_id`.
                        public var nodeId: Swift.String
                        /// URL for the label
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/LabelsPayload/url`.
                        public var url: Swift.String
                        /// Creates a new `LabelsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - color: 6-character hex code, without the leading #, identifying the color
                        ///   - _default:
                        ///   - description:
                        ///   - id:
                        ///   - name: The name of the label.
                        ///   - nodeId:
                        ///   - url: URL for the label
                        public init(
                            color: Swift.String,
                            _default: Swift.Bool,
                            description: Swift.String? = nil,
                            id: Swift.Int,
                            name: Swift.String,
                            nodeId: Swift.String,
                            url: Swift.String
                        ) {
                            self.color = color
                            self._default = _default
                            self.description = description
                            self.id = id
                            self.name = name
                            self.nodeId = nodeId
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case color
                            case _default = "default"
                            case description
                            case id
                            case name
                            case nodeId = "node_id"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/labels`.
                    public typealias LabelsPayload = [Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.LabelsPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/labels`.
                    public var labels: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.LabelsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/labels_url`.
                    public var labelsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/locked`.
                    public var locked: Swift.Bool?
                    /// A collection of related issues and pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone`.
                    public struct MilestonePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/closed_at`.
                        public var closedAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/closed_issues`.
                        public var closedIssues: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/created_at`.
                        public var createdAt: Foundation.Date
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/creator`.
                        public struct CreatorPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/creator/avatar_url`.
                            public var avatarUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/creator/deleted`.
                            public var deleted: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/creator/email`.
                            public var email: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/creator/events_url`.
                            public var eventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/creator/followers_url`.
                            public var followersUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/creator/following_url`.
                            public var followingUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/creator/gists_url`.
                            public var gistsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/creator/gravatar_id`.
                            public var gravatarId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/creator/html_url`.
                            public var htmlUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/creator/id`.
                            public var id: Swift.Int
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/creator/login`.
                            public var login: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/creator/name`.
                            public var name: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/creator/node_id`.
                            public var nodeId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/creator/organizations_url`.
                            public var organizationsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/creator/received_events_url`.
                            public var receivedEventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/creator/repos_url`.
                            public var reposUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/creator/site_admin`.
                            public var siteAdmin: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/creator/starred_url`.
                            public var starredUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/creator/subscriptions_url`.
                            public var subscriptionsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/creator/type`.
                            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case bot = "Bot"
                                case user = "User"
                                case organization = "Organization"
                                case mannequin = "Mannequin"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/creator/type`.
                            public var _type: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload._TypePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/creator/url`.
                            public var url: Swift.String?
                            /// Creates a new `CreatorPayload`.
                            ///
                            /// - Parameters:
                            ///   - avatarUrl:
                            ///   - deleted:
                            ///   - email:
                            ///   - eventsUrl:
                            ///   - followersUrl:
                            ///   - followingUrl:
                            ///   - gistsUrl:
                            ///   - gravatarId:
                            ///   - htmlUrl:
                            ///   - id:
                            ///   - login:
                            ///   - name:
                            ///   - nodeId:
                            ///   - organizationsUrl:
                            ///   - receivedEventsUrl:
                            ///   - reposUrl:
                            ///   - siteAdmin:
                            ///   - starredUrl:
                            ///   - subscriptionsUrl:
                            ///   - _type:
                            ///   - url:
                            public init(
                                avatarUrl: Swift.String? = nil,
                                deleted: Swift.Bool? = nil,
                                email: Swift.String? = nil,
                                eventsUrl: Swift.String? = nil,
                                followersUrl: Swift.String? = nil,
                                followingUrl: Swift.String? = nil,
                                gistsUrl: Swift.String? = nil,
                                gravatarId: Swift.String? = nil,
                                htmlUrl: Swift.String? = nil,
                                id: Swift.Int,
                                login: Swift.String,
                                name: Swift.String? = nil,
                                nodeId: Swift.String? = nil,
                                organizationsUrl: Swift.String? = nil,
                                receivedEventsUrl: Swift.String? = nil,
                                reposUrl: Swift.String? = nil,
                                siteAdmin: Swift.Bool? = nil,
                                starredUrl: Swift.String? = nil,
                                subscriptionsUrl: Swift.String? = nil,
                                _type: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload._TypePayload? = nil,
                                url: Swift.String? = nil
                            ) {
                                self.avatarUrl = avatarUrl
                                self.deleted = deleted
                                self.email = email
                                self.eventsUrl = eventsUrl
                                self.followersUrl = followersUrl
                                self.followingUrl = followingUrl
                                self.gistsUrl = gistsUrl
                                self.gravatarId = gravatarId
                                self.htmlUrl = htmlUrl
                                self.id = id
                                self.login = login
                                self.name = name
                                self.nodeId = nodeId
                                self.organizationsUrl = organizationsUrl
                                self.receivedEventsUrl = receivedEventsUrl
                                self.reposUrl = reposUrl
                                self.siteAdmin = siteAdmin
                                self.starredUrl = starredUrl
                                self.subscriptionsUrl = subscriptionsUrl
                                self._type = _type
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case avatarUrl = "avatar_url"
                                case deleted
                                case email
                                case eventsUrl = "events_url"
                                case followersUrl = "followers_url"
                                case followingUrl = "following_url"
                                case gistsUrl = "gists_url"
                                case gravatarId = "gravatar_id"
                                case htmlUrl = "html_url"
                                case id
                                case login
                                case name
                                case nodeId = "node_id"
                                case organizationsUrl = "organizations_url"
                                case receivedEventsUrl = "received_events_url"
                                case reposUrl = "repos_url"
                                case siteAdmin = "site_admin"
                                case starredUrl = "starred_url"
                                case subscriptionsUrl = "subscriptions_url"
                                case _type = "type"
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/creator`.
                        public var creator: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/due_on`.
                        public var dueOn: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/html_url`.
                        public var htmlUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/labels_url`.
                        public var labelsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/node_id`.
                        public var nodeId: Swift.String
                        /// The number of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/number`.
                        public var number: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/open_issues`.
                        public var openIssues: Swift.Int
                        /// The state of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/state`.
                        @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case open = "open"
                            case closed = "closed"
                        }
                        /// The state of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/state`.
                        public var state: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.MilestonePayload.StatePayload
                        /// The title of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/title`.
                        public var title: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/updated_at`.
                        public var updatedAt: Foundation.Date
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone/url`.
                        public var url: Swift.String
                        /// Creates a new `MilestonePayload`.
                        ///
                        /// - Parameters:
                        ///   - closedAt:
                        ///   - closedIssues:
                        ///   - createdAt:
                        ///   - creator:
                        ///   - description:
                        ///   - dueOn:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - labelsUrl:
                        ///   - nodeId:
                        ///   - number: The number of the milestone.
                        ///   - openIssues:
                        ///   - state: The state of the milestone.
                        ///   - title: The title of the milestone.
                        ///   - updatedAt:
                        ///   - url:
                        public init(
                            closedAt: Foundation.Date? = nil,
                            closedIssues: Swift.Int,
                            createdAt: Foundation.Date,
                            creator: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload? = nil,
                            description: Swift.String? = nil,
                            dueOn: Foundation.Date? = nil,
                            htmlUrl: Swift.String,
                            id: Swift.Int,
                            labelsUrl: Swift.String,
                            nodeId: Swift.String,
                            number: Swift.Int,
                            openIssues: Swift.Int,
                            state: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.MilestonePayload.StatePayload,
                            title: Swift.String,
                            updatedAt: Foundation.Date,
                            url: Swift.String
                        ) {
                            self.closedAt = closedAt
                            self.closedIssues = closedIssues
                            self.createdAt = createdAt
                            self.creator = creator
                            self.description = description
                            self.dueOn = dueOn
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.labelsUrl = labelsUrl
                            self.nodeId = nodeId
                            self.number = number
                            self.openIssues = openIssues
                            self.state = state
                            self.title = title
                            self.updatedAt = updatedAt
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case closedAt = "closed_at"
                            case closedIssues = "closed_issues"
                            case createdAt = "created_at"
                            case creator
                            case description
                            case dueOn = "due_on"
                            case htmlUrl = "html_url"
                            case id
                            case labelsUrl = "labels_url"
                            case nodeId = "node_id"
                            case number
                            case openIssues = "open_issues"
                            case state
                            case title
                            case updatedAt = "updated_at"
                            case url
                        }
                    }
                    /// A collection of related issues and pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/milestone`.
                    public var milestone: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.MilestonePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/number`.
                    public var number: Swift.Int
                    /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app`.
                    public struct PerformedViaGithubAppPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/created_at`.
                        public var createdAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/EventsPayload`.
                        @frozen public enum EventsPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case branchProtectionRule = "branch_protection_rule"
                            case checkRun = "check_run"
                            case checkSuite = "check_suite"
                            case codeScanningAlert = "code_scanning_alert"
                            case commitComment = "commit_comment"
                            case contentReference = "content_reference"
                            case create = "create"
                            case delete = "delete"
                            case deployment = "deployment"
                            case deploymentReview = "deployment_review"
                            case deploymentStatus = "deployment_status"
                            case deployKey = "deploy_key"
                            case discussion = "discussion"
                            case discussionComment = "discussion_comment"
                            case fork = "fork"
                            case gollum = "gollum"
                            case issues = "issues"
                            case issueComment = "issue_comment"
                            case label = "label"
                            case member = "member"
                            case membership = "membership"
                            case milestone = "milestone"
                            case organization = "organization"
                            case orgBlock = "org_block"
                            case pageBuild = "page_build"
                            case project = "project"
                            case projectCard = "project_card"
                            case projectColumn = "project_column"
                            case _public = "public"
                            case pullRequest = "pull_request"
                            case pullRequestReview = "pull_request_review"
                            case pullRequestReviewComment = "pull_request_review_comment"
                            case push = "push"
                            case registryPackage = "registry_package"
                            case release = "release"
                            case repository = "repository"
                            case repositoryDispatch = "repository_dispatch"
                            case secretScanningAlert = "secret_scanning_alert"
                            case star = "star"
                            case status = "status"
                            case team = "team"
                            case teamAdd = "team_add"
                            case watch = "watch"
                            case workflowDispatch = "workflow_dispatch"
                            case workflowRun = "workflow_run"
                            case reminder = "reminder"
                            case pullRequestReviewThread = "pull_request_review_thread"
                        }
                        /// The list of events for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/events`.
                        public typealias EventsPayload = [Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.EventsPayloadPayload]
                        /// The list of events for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/events`.
                        public var events: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.EventsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/external_url`.
                        public var externalUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/html_url`.
                        public var htmlUrl: Swift.String
                        /// Unique identifier of the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/id`.
                        public var id: Swift.Int?
                        /// The name of the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/node_id`.
                        public var nodeId: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/owner`.
                        public struct OwnerPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/owner/avatar_url`.
                            public var avatarUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/owner/deleted`.
                            public var deleted: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/owner/email`.
                            public var email: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/owner/events_url`.
                            public var eventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/owner/followers_url`.
                            public var followersUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/owner/following_url`.
                            public var followingUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/owner/gists_url`.
                            public var gistsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/owner/gravatar_id`.
                            public var gravatarId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/owner/html_url`.
                            public var htmlUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/owner/id`.
                            public var id: Swift.Int
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/owner/login`.
                            public var login: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/owner/name`.
                            public var name: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/owner/node_id`.
                            public var nodeId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/owner/organizations_url`.
                            public var organizationsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/owner/received_events_url`.
                            public var receivedEventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/owner/repos_url`.
                            public var reposUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/owner/site_admin`.
                            public var siteAdmin: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/owner/starred_url`.
                            public var starredUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/owner/subscriptions_url`.
                            public var subscriptionsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/owner/type`.
                            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case bot = "Bot"
                                case user = "User"
                                case organization = "Organization"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/owner/type`.
                            public var _type: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/owner/url`.
                            public var url: Swift.String?
                            /// Creates a new `OwnerPayload`.
                            ///
                            /// - Parameters:
                            ///   - avatarUrl:
                            ///   - deleted:
                            ///   - email:
                            ///   - eventsUrl:
                            ///   - followersUrl:
                            ///   - followingUrl:
                            ///   - gistsUrl:
                            ///   - gravatarId:
                            ///   - htmlUrl:
                            ///   - id:
                            ///   - login:
                            ///   - name:
                            ///   - nodeId:
                            ///   - organizationsUrl:
                            ///   - receivedEventsUrl:
                            ///   - reposUrl:
                            ///   - siteAdmin:
                            ///   - starredUrl:
                            ///   - subscriptionsUrl:
                            ///   - _type:
                            ///   - url:
                            public init(
                                avatarUrl: Swift.String? = nil,
                                deleted: Swift.Bool? = nil,
                                email: Swift.String? = nil,
                                eventsUrl: Swift.String? = nil,
                                followersUrl: Swift.String? = nil,
                                followingUrl: Swift.String? = nil,
                                gistsUrl: Swift.String? = nil,
                                gravatarId: Swift.String? = nil,
                                htmlUrl: Swift.String? = nil,
                                id: Swift.Int,
                                login: Swift.String,
                                name: Swift.String? = nil,
                                nodeId: Swift.String? = nil,
                                organizationsUrl: Swift.String? = nil,
                                receivedEventsUrl: Swift.String? = nil,
                                reposUrl: Swift.String? = nil,
                                siteAdmin: Swift.Bool? = nil,
                                starredUrl: Swift.String? = nil,
                                subscriptionsUrl: Swift.String? = nil,
                                _type: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload? = nil,
                                url: Swift.String? = nil
                            ) {
                                self.avatarUrl = avatarUrl
                                self.deleted = deleted
                                self.email = email
                                self.eventsUrl = eventsUrl
                                self.followersUrl = followersUrl
                                self.followingUrl = followingUrl
                                self.gistsUrl = gistsUrl
                                self.gravatarId = gravatarId
                                self.htmlUrl = htmlUrl
                                self.id = id
                                self.login = login
                                self.name = name
                                self.nodeId = nodeId
                                self.organizationsUrl = organizationsUrl
                                self.receivedEventsUrl = receivedEventsUrl
                                self.reposUrl = reposUrl
                                self.siteAdmin = siteAdmin
                                self.starredUrl = starredUrl
                                self.subscriptionsUrl = subscriptionsUrl
                                self._type = _type
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case avatarUrl = "avatar_url"
                                case deleted
                                case email
                                case eventsUrl = "events_url"
                                case followersUrl = "followers_url"
                                case followingUrl = "following_url"
                                case gistsUrl = "gists_url"
                                case gravatarId = "gravatar_id"
                                case htmlUrl = "html_url"
                                case id
                                case login
                                case name
                                case nodeId = "node_id"
                                case organizationsUrl = "organizations_url"
                                case receivedEventsUrl = "received_events_url"
                                case reposUrl = "repos_url"
                                case siteAdmin = "site_admin"
                                case starredUrl = "starred_url"
                                case subscriptionsUrl = "subscriptions_url"
                                case _type = "type"
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/owner`.
                        public var owner: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload?
                        /// The set of permissions for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions`.
                        public struct PermissionsPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/actions`.
                            @frozen public enum ActionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/actions`.
                            public var actions: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/administration`.
                            @frozen public enum AdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/administration`.
                            public var administration: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/checks`.
                            @frozen public enum ChecksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/checks`.
                            public var checks: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/content_references`.
                            @frozen public enum ContentReferencesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/content_references`.
                            public var contentReferences: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/contents`.
                            @frozen public enum ContentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/contents`.
                            public var contents: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/deployments`.
                            @frozen public enum DeploymentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/deployments`.
                            public var deployments: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/discussions`.
                            @frozen public enum DiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/discussions`.
                            public var discussions: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/emails`.
                            @frozen public enum EmailsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/emails`.
                            public var emails: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/environments`.
                            @frozen public enum EnvironmentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/environments`.
                            public var environments: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/issues`.
                            @frozen public enum IssuesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/issues`.
                            public var issues: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/keys`.
                            @frozen public enum KeysPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/keys`.
                            public var keys: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/members`.
                            @frozen public enum MembersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/members`.
                            public var members: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/metadata`.
                            @frozen public enum MetadataPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/metadata`.
                            public var metadata: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/organization_administration`.
                            @frozen public enum OrganizationAdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/organization_administration`.
                            public var organizationAdministration: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/organization_hooks`.
                            @frozen public enum OrganizationHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/organization_hooks`.
                            public var organizationHooks: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/organization_packages`.
                            @frozen public enum OrganizationPackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/organization_packages`.
                            public var organizationPackages: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/organization_plan`.
                            @frozen public enum OrganizationPlanPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/organization_plan`.
                            public var organizationPlan: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/organization_projects`.
                            @frozen public enum OrganizationProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                                case admin = "admin"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/organization_projects`.
                            public var organizationProjects: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/organization_secrets`.
                            @frozen public enum OrganizationSecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/organization_secrets`.
                            public var organizationSecrets: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/organization_self_hosted_runners`.
                            @frozen public enum OrganizationSelfHostedRunnersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/organization_self_hosted_runners`.
                            public var organizationSelfHostedRunners: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/organization_user_blocking`.
                            @frozen public enum OrganizationUserBlockingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/organization_user_blocking`.
                            public var organizationUserBlocking: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/packages`.
                            @frozen public enum PackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/packages`.
                            public var packages: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/pages`.
                            @frozen public enum PagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/pages`.
                            public var pages: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/pull_requests`.
                            @frozen public enum PullRequestsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/pull_requests`.
                            public var pullRequests: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/repository_hooks`.
                            @frozen public enum RepositoryHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/repository_hooks`.
                            public var repositoryHooks: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/repository_projects`.
                            @frozen public enum RepositoryProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                                case admin = "admin"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/repository_projects`.
                            public var repositoryProjects: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/secret_scanning_alerts`.
                            @frozen public enum SecretScanningAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/secret_scanning_alerts`.
                            public var secretScanningAlerts: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/secrets`.
                            @frozen public enum SecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/secrets`.
                            public var secrets: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/security_events`.
                            @frozen public enum SecurityEventsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/security_events`.
                            public var securityEvents: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/security_scanning_alert`.
                            @frozen public enum SecurityScanningAlertPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/security_scanning_alert`.
                            public var securityScanningAlert: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/single_file`.
                            @frozen public enum SingleFilePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/single_file`.
                            public var singleFile: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/statuses`.
                            @frozen public enum StatusesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/statuses`.
                            public var statuses: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/team_discussions`.
                            @frozen public enum TeamDiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/team_discussions`.
                            public var teamDiscussions: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/vulnerability_alerts`.
                            @frozen public enum VulnerabilityAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/vulnerability_alerts`.
                            public var vulnerabilityAlerts: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/workflows`.
                            @frozen public enum WorkflowsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions/workflows`.
                            public var workflows: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload?
                            /// Creates a new `PermissionsPayload`.
                            ///
                            /// - Parameters:
                            ///   - actions:
                            ///   - administration:
                            ///   - checks:
                            ///   - contentReferences:
                            ///   - contents:
                            ///   - deployments:
                            ///   - discussions:
                            ///   - emails:
                            ///   - environments:
                            ///   - issues:
                            ///   - keys:
                            ///   - members:
                            ///   - metadata:
                            ///   - organizationAdministration:
                            ///   - organizationHooks:
                            ///   - organizationPackages:
                            ///   - organizationPlan:
                            ///   - organizationProjects:
                            ///   - organizationSecrets:
                            ///   - organizationSelfHostedRunners:
                            ///   - organizationUserBlocking:
                            ///   - packages:
                            ///   - pages:
                            ///   - pullRequests:
                            ///   - repositoryHooks:
                            ///   - repositoryProjects:
                            ///   - secretScanningAlerts:
                            ///   - secrets:
                            ///   - securityEvents:
                            ///   - securityScanningAlert:
                            ///   - singleFile:
                            ///   - statuses:
                            ///   - teamDiscussions:
                            ///   - vulnerabilityAlerts:
                            ///   - workflows:
                            public init(
                                actions: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload? = nil,
                                administration: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload? = nil,
                                checks: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload? = nil,
                                contentReferences: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload? = nil,
                                contents: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload? = nil,
                                deployments: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload? = nil,
                                discussions: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload? = nil,
                                emails: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload? = nil,
                                environments: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload? = nil,
                                issues: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload? = nil,
                                keys: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload? = nil,
                                members: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload? = nil,
                                metadata: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload? = nil,
                                organizationAdministration: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload? = nil,
                                organizationHooks: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload? = nil,
                                organizationPackages: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload? = nil,
                                organizationPlan: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload? = nil,
                                organizationProjects: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload? = nil,
                                organizationSecrets: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload? = nil,
                                organizationSelfHostedRunners: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload? = nil,
                                organizationUserBlocking: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload? = nil,
                                packages: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload? = nil,
                                pages: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload? = nil,
                                pullRequests: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload? = nil,
                                repositoryHooks: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload? = nil,
                                repositoryProjects: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload? = nil,
                                secretScanningAlerts: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload? = nil,
                                secrets: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload? = nil,
                                securityEvents: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload? = nil,
                                securityScanningAlert: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload? = nil,
                                singleFile: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload? = nil,
                                statuses: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload? = nil,
                                teamDiscussions: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload? = nil,
                                vulnerabilityAlerts: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload? = nil,
                                workflows: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload? = nil
                            ) {
                                self.actions = actions
                                self.administration = administration
                                self.checks = checks
                                self.contentReferences = contentReferences
                                self.contents = contents
                                self.deployments = deployments
                                self.discussions = discussions
                                self.emails = emails
                                self.environments = environments
                                self.issues = issues
                                self.keys = keys
                                self.members = members
                                self.metadata = metadata
                                self.organizationAdministration = organizationAdministration
                                self.organizationHooks = organizationHooks
                                self.organizationPackages = organizationPackages
                                self.organizationPlan = organizationPlan
                                self.organizationProjects = organizationProjects
                                self.organizationSecrets = organizationSecrets
                                self.organizationSelfHostedRunners = organizationSelfHostedRunners
                                self.organizationUserBlocking = organizationUserBlocking
                                self.packages = packages
                                self.pages = pages
                                self.pullRequests = pullRequests
                                self.repositoryHooks = repositoryHooks
                                self.repositoryProjects = repositoryProjects
                                self.secretScanningAlerts = secretScanningAlerts
                                self.secrets = secrets
                                self.securityEvents = securityEvents
                                self.securityScanningAlert = securityScanningAlert
                                self.singleFile = singleFile
                                self.statuses = statuses
                                self.teamDiscussions = teamDiscussions
                                self.vulnerabilityAlerts = vulnerabilityAlerts
                                self.workflows = workflows
                            }
                            public enum CodingKeys: String, CodingKey {
                                case actions
                                case administration
                                case checks
                                case contentReferences = "content_references"
                                case contents
                                case deployments
                                case discussions
                                case emails
                                case environments
                                case issues
                                case keys
                                case members
                                case metadata
                                case organizationAdministration = "organization_administration"
                                case organizationHooks = "organization_hooks"
                                case organizationPackages = "organization_packages"
                                case organizationPlan = "organization_plan"
                                case organizationProjects = "organization_projects"
                                case organizationSecrets = "organization_secrets"
                                case organizationSelfHostedRunners = "organization_self_hosted_runners"
                                case organizationUserBlocking = "organization_user_blocking"
                                case packages
                                case pages
                                case pullRequests = "pull_requests"
                                case repositoryHooks = "repository_hooks"
                                case repositoryProjects = "repository_projects"
                                case secretScanningAlerts = "secret_scanning_alerts"
                                case secrets
                                case securityEvents = "security_events"
                                case securityScanningAlert = "security_scanning_alert"
                                case singleFile = "single_file"
                                case statuses
                                case teamDiscussions = "team_discussions"
                                case vulnerabilityAlerts = "vulnerability_alerts"
                                case workflows
                            }
                        }
                        /// The set of permissions for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/permissions`.
                        public var permissions: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload?
                        /// The slug name of the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/slug`.
                        public var slug: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app/updated_at`.
                        public var updatedAt: Foundation.Date?
                        /// Creates a new `PerformedViaGithubAppPayload`.
                        ///
                        /// - Parameters:
                        ///   - createdAt:
                        ///   - description:
                        ///   - events: The list of events for the GitHub app
                        ///   - externalUrl:
                        ///   - htmlUrl:
                        ///   - id: Unique identifier of the GitHub app
                        ///   - name: The name of the GitHub app
                        ///   - nodeId:
                        ///   - owner:
                        ///   - permissions: The set of permissions for the GitHub app
                        ///   - slug: The slug name of the GitHub app
                        ///   - updatedAt:
                        public init(
                            createdAt: Foundation.Date? = nil,
                            description: Swift.String? = nil,
                            events: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.EventsPayload? = nil,
                            externalUrl: Swift.String? = nil,
                            htmlUrl: Swift.String,
                            id: Swift.Int? = nil,
                            name: Swift.String,
                            nodeId: Swift.String,
                            owner: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload? = nil,
                            permissions: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload? = nil,
                            slug: Swift.String? = nil,
                            updatedAt: Foundation.Date? = nil
                        ) {
                            self.createdAt = createdAt
                            self.description = description
                            self.events = events
                            self.externalUrl = externalUrl
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.name = name
                            self.nodeId = nodeId
                            self.owner = owner
                            self.permissions = permissions
                            self.slug = slug
                            self.updatedAt = updatedAt
                        }
                        public enum CodingKeys: String, CodingKey {
                            case createdAt = "created_at"
                            case description
                            case events
                            case externalUrl = "external_url"
                            case htmlUrl = "html_url"
                            case id
                            case name
                            case nodeId = "node_id"
                            case owner
                            case permissions
                            case slug
                            case updatedAt = "updated_at"
                        }
                    }
                    /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/performed_via_github_app`.
                    public var performedViaGithubApp: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/pull_request`.
                    public struct PullRequestPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/pull_request/diff_url`.
                        public var diffUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/pull_request/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/pull_request/merged_at`.
                        public var mergedAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/pull_request/patch_url`.
                        public var patchUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/pull_request/url`.
                        public var url: Swift.String?
                        /// Creates a new `PullRequestPayload`.
                        ///
                        /// - Parameters:
                        ///   - diffUrl:
                        ///   - htmlUrl:
                        ///   - mergedAt:
                        ///   - patchUrl:
                        ///   - url:
                        public init(
                            diffUrl: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            mergedAt: Foundation.Date? = nil,
                            patchUrl: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.diffUrl = diffUrl
                            self.htmlUrl = htmlUrl
                            self.mergedAt = mergedAt
                            self.patchUrl = patchUrl
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case diffUrl = "diff_url"
                            case htmlUrl = "html_url"
                            case mergedAt = "merged_at"
                            case patchUrl = "patch_url"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/pull_request`.
                    public var pullRequest: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PullRequestPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/reactions`.
                    public struct ReactionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/reactions/+1`.
                        public var _plus_1: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/reactions/-1`.
                        public var _hyphen_1: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/reactions/confused`.
                        public var confused: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/reactions/eyes`.
                        public var eyes: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/reactions/heart`.
                        public var heart: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/reactions/hooray`.
                        public var hooray: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/reactions/laugh`.
                        public var laugh: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/reactions/rocket`.
                        public var rocket: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/reactions/total_count`.
                        public var totalCount: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/reactions/url`.
                        public var url: Swift.String
                        /// Creates a new `ReactionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - _plus_1:
                        ///   - _hyphen_1:
                        ///   - confused:
                        ///   - eyes:
                        ///   - heart:
                        ///   - hooray:
                        ///   - laugh:
                        ///   - rocket:
                        ///   - totalCount:
                        ///   - url:
                        public init(
                            _plus_1: Swift.Int,
                            _hyphen_1: Swift.Int,
                            confused: Swift.Int,
                            eyes: Swift.Int,
                            heart: Swift.Int,
                            hooray: Swift.Int,
                            laugh: Swift.Int,
                            rocket: Swift.Int,
                            totalCount: Swift.Int,
                            url: Swift.String
                        ) {
                            self._plus_1 = _plus_1
                            self._hyphen_1 = _hyphen_1
                            self.confused = confused
                            self.eyes = eyes
                            self.heart = heart
                            self.hooray = hooray
                            self.laugh = laugh
                            self.rocket = rocket
                            self.totalCount = totalCount
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _plus_1 = "+1"
                            case _hyphen_1 = "-1"
                            case confused
                            case eyes
                            case heart
                            case hooray
                            case laugh
                            case rocket
                            case totalCount = "total_count"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/reactions`.
                    public var reactions: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.ReactionsPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/repository_url`.
                    public var repositoryUrl: Swift.String
                    /// State of the issue; either 'open' or 'closed'
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/state`.
                    @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case closed = "closed"
                    }
                    /// State of the issue; either 'open' or 'closed'
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/state`.
                    public var state: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.StatePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/state_reason`.
                    public var stateReason: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/timeline_url`.
                    public var timelineUrl: Swift.String?
                    /// Title of the issue
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/title`.
                    public var title: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/updated_at`.
                    public var updatedAt: Foundation.Date
                    /// URL for the issue
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/url`.
                    public var url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/user`.
                    public struct UserPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/user/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/user/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/user/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/user/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/user/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/user/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/user/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/user/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/user/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/user/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/user/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/user/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/user/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/user/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/user/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/user/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/user/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/user/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/user/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/user/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                            case mannequin = "Mannequin"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/user/type`.
                        public var _type: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.UserPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/user/url`.
                        public var url: Swift.String?
                        /// Creates a new `UserPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.UserPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1/user`.
                    public var user: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.UserPayload?
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - activeLockReason:
                    ///   - assignee:
                    ///   - assignees:
                    ///   - authorAssociation: How the author is associated with the repository.
                    ///   - body: Contents of the issue
                    ///   - closedAt:
                    ///   - comments:
                    ///   - commentsUrl:
                    ///   - createdAt:
                    ///   - draft:
                    ///   - eventsUrl:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - labels:
                    ///   - labelsUrl:
                    ///   - locked:
                    ///   - milestone: A collection of related issues and pull requests.
                    ///   - nodeId:
                    ///   - number:
                    ///   - performedViaGithubApp: GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                    ///   - pullRequest:
                    ///   - reactions:
                    ///   - repositoryUrl:
                    ///   - state: State of the issue; either 'open' or 'closed'
                    ///   - stateReason:
                    ///   - timelineUrl:
                    ///   - title: Title of the issue
                    ///   - updatedAt:
                    ///   - url: URL for the issue
                    ///   - user:
                    public init(
                        activeLockReason: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.ActiveLockReasonPayload? = nil,
                        assignee: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.AssigneePayload? = nil,
                        assignees: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.AssigneesPayload,
                        authorAssociation: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.AuthorAssociationPayload,
                        body: Swift.String? = nil,
                        closedAt: Foundation.Date? = nil,
                        comments: Swift.Int,
                        commentsUrl: Swift.String,
                        createdAt: Foundation.Date,
                        draft: Swift.Bool? = nil,
                        eventsUrl: Swift.String,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        labels: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.LabelsPayload? = nil,
                        labelsUrl: Swift.String,
                        locked: Swift.Bool? = nil,
                        milestone: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.MilestonePayload? = nil,
                        nodeId: Swift.String,
                        number: Swift.Int,
                        performedViaGithubApp: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PerformedViaGithubAppPayload? = nil,
                        pullRequest: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.PullRequestPayload? = nil,
                        reactions: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.ReactionsPayload,
                        repositoryUrl: Swift.String,
                        state: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.StatePayload? = nil,
                        stateReason: Swift.String? = nil,
                        timelineUrl: Swift.String? = nil,
                        title: Swift.String,
                        updatedAt: Foundation.Date,
                        url: Swift.String,
                        user: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload.UserPayload? = nil
                    ) {
                        self.activeLockReason = activeLockReason
                        self.assignee = assignee
                        self.assignees = assignees
                        self.authorAssociation = authorAssociation
                        self.body = body
                        self.closedAt = closedAt
                        self.comments = comments
                        self.commentsUrl = commentsUrl
                        self.createdAt = createdAt
                        self.draft = draft
                        self.eventsUrl = eventsUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.labels = labels
                        self.labelsUrl = labelsUrl
                        self.locked = locked
                        self.milestone = milestone
                        self.nodeId = nodeId
                        self.number = number
                        self.performedViaGithubApp = performedViaGithubApp
                        self.pullRequest = pullRequest
                        self.reactions = reactions
                        self.repositoryUrl = repositoryUrl
                        self.state = state
                        self.stateReason = stateReason
                        self.timelineUrl = timelineUrl
                        self.title = title
                        self.updatedAt = updatedAt
                        self.url = url
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case activeLockReason = "active_lock_reason"
                        case assignee
                        case assignees
                        case authorAssociation = "author_association"
                        case body
                        case closedAt = "closed_at"
                        case comments
                        case commentsUrl = "comments_url"
                        case createdAt = "created_at"
                        case draft
                        case eventsUrl = "events_url"
                        case htmlUrl = "html_url"
                        case id
                        case labels
                        case labelsUrl = "labels_url"
                        case locked
                        case milestone
                        case nodeId = "node_id"
                        case number
                        case performedViaGithubApp = "performed_via_github_app"
                        case pullRequest = "pull_request"
                        case reactions
                        case repositoryUrl = "repository_url"
                        case state
                        case stateReason = "state_reason"
                        case timelineUrl = "timeline_url"
                        case title
                        case updatedAt = "updated_at"
                        case url
                        case user
                    }
                }
                /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value1`.
                public var value1: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/active_lock_reason`.
                    public var activeLockReason: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/assignee`.
                    public struct AssigneePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/assignee/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/assignee/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/assignee/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/assignee/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/assignee/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/assignee/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/assignee/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/assignee/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/assignee/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/assignee/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/assignee/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/assignee/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/assignee/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/assignee/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/assignee/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/assignee/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/assignee/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/assignee/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/assignee/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/assignee/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                            case mannequin = "Mannequin"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/assignee/type`.
                        public var _type: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value2Payload.AssigneePayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/assignee/url`.
                        public var url: Swift.String?
                        /// Creates a new `AssigneePayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value2Payload.AssigneePayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/assignee`.
                    public var assignee: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value2Payload.AssigneePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/assignees`.
                    public var assignees: [OpenAPIRuntime.OpenAPIObjectContainer?]?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/author_association`.
                    public var authorAssociation: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/body`.
                    public var body: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/closed_at`.
                    public var closedAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/comments`.
                    public var comments: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/comments_url`.
                    public var commentsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/created_at`.
                    public var createdAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/id`.
                    public var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/LabelsPayload`.
                    public struct LabelsPayloadPayload: Codable, Hashable, Sendable {
                        /// 6-character hex code, without the leading #, identifying the color
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/LabelsPayload/color`.
                        public var color: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/LabelsPayload/default`.
                        public var _default: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/LabelsPayload/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/LabelsPayload/id`.
                        public var id: Swift.Int
                        /// The name of the label.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/LabelsPayload/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/LabelsPayload/node_id`.
                        public var nodeId: Swift.String
                        /// URL for the label
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/LabelsPayload/url`.
                        public var url: Swift.String
                        /// Creates a new `LabelsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - color: 6-character hex code, without the leading #, identifying the color
                        ///   - _default:
                        ///   - description:
                        ///   - id:
                        ///   - name: The name of the label.
                        ///   - nodeId:
                        ///   - url: URL for the label
                        public init(
                            color: Swift.String,
                            _default: Swift.Bool,
                            description: Swift.String? = nil,
                            id: Swift.Int,
                            name: Swift.String,
                            nodeId: Swift.String,
                            url: Swift.String
                        ) {
                            self.color = color
                            self._default = _default
                            self.description = description
                            self.id = id
                            self.name = name
                            self.nodeId = nodeId
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case color
                            case _default = "default"
                            case description
                            case id
                            case name
                            case nodeId = "node_id"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/labels`.
                    public typealias LabelsPayload = [Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value2Payload.LabelsPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/labels`.
                    public var labels: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value2Payload.LabelsPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/labels_url`.
                    public var labelsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/locked`.
                    public var locked: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/milestone`.
                    public var milestone: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/number`.
                    public var number: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/performed_via_github_app`.
                    public var performedViaGithubApp: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/reactions`.
                    public struct ReactionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/reactions/+1`.
                        public var _plus_1: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/reactions/-1`.
                        public var _hyphen_1: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/reactions/confused`.
                        public var confused: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/reactions/eyes`.
                        public var eyes: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/reactions/heart`.
                        public var heart: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/reactions/hooray`.
                        public var hooray: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/reactions/laugh`.
                        public var laugh: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/reactions/rocket`.
                        public var rocket: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/reactions/total_count`.
                        public var totalCount: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/reactions/url`.
                        public var url: Swift.String?
                        /// Creates a new `ReactionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - _plus_1:
                        ///   - _hyphen_1:
                        ///   - confused:
                        ///   - eyes:
                        ///   - heart:
                        ///   - hooray:
                        ///   - laugh:
                        ///   - rocket:
                        ///   - totalCount:
                        ///   - url:
                        public init(
                            _plus_1: Swift.Int? = nil,
                            _hyphen_1: Swift.Int? = nil,
                            confused: Swift.Int? = nil,
                            eyes: Swift.Int? = nil,
                            heart: Swift.Int? = nil,
                            hooray: Swift.Int? = nil,
                            laugh: Swift.Int? = nil,
                            rocket: Swift.Int? = nil,
                            totalCount: Swift.Int? = nil,
                            url: Swift.String? = nil
                        ) {
                            self._plus_1 = _plus_1
                            self._hyphen_1 = _hyphen_1
                            self.confused = confused
                            self.eyes = eyes
                            self.heart = heart
                            self.hooray = hooray
                            self.laugh = laugh
                            self.rocket = rocket
                            self.totalCount = totalCount
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _plus_1 = "+1"
                            case _hyphen_1 = "-1"
                            case confused
                            case eyes
                            case heart
                            case hooray
                            case laugh
                            case rocket
                            case totalCount = "total_count"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/reactions`.
                    public var reactions: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value2Payload.ReactionsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/repository_url`.
                    public var repositoryUrl: Swift.String?
                    /// State of the issue; either 'open' or 'closed'
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/state`.
                    @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case closed = "closed"
                    }
                    /// State of the issue; either 'open' or 'closed'
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/state`.
                    public var state: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value2Payload.StatePayload
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/timeline_url`.
                    public var timelineUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/title`.
                    public var title: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/updated_at`.
                    public var updatedAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/url`.
                    public var url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/user`.
                    public struct UserPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/user/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/user/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/user/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/user/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/user/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/user/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/user/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/user/id`.
                        public var id: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/user/login`.
                        public var login: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/user/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/user/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/user/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/user/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/user/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/user/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/user/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/user/type`.
                        public var _type: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/user/url`.
                        public var url: Swift.String?
                        /// Creates a new `UserPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int? = nil,
                            login: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2/user`.
                    public var user: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value2Payload.UserPayload?
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - activeLockReason:
                    ///   - assignee:
                    ///   - assignees:
                    ///   - authorAssociation:
                    ///   - body:
                    ///   - closedAt:
                    ///   - comments:
                    ///   - commentsUrl:
                    ///   - createdAt:
                    ///   - eventsUrl:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - labels:
                    ///   - labelsUrl:
                    ///   - locked:
                    ///   - milestone:
                    ///   - nodeId:
                    ///   - number:
                    ///   - performedViaGithubApp:
                    ///   - reactions:
                    ///   - repositoryUrl:
                    ///   - state: State of the issue; either 'open' or 'closed'
                    ///   - timelineUrl:
                    ///   - title:
                    ///   - updatedAt:
                    ///   - url:
                    ///   - user:
                    public init(
                        activeLockReason: Swift.String? = nil,
                        assignee: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value2Payload.AssigneePayload? = nil,
                        assignees: [OpenAPIRuntime.OpenAPIObjectContainer?]? = nil,
                        authorAssociation: Swift.String? = nil,
                        body: Swift.String? = nil,
                        closedAt: Swift.String? = nil,
                        comments: Swift.Int? = nil,
                        commentsUrl: Swift.String? = nil,
                        createdAt: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int? = nil,
                        labels: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value2Payload.LabelsPayload,
                        labelsUrl: Swift.String? = nil,
                        locked: Swift.Bool,
                        milestone: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                        nodeId: Swift.String? = nil,
                        number: Swift.Int? = nil,
                        performedViaGithubApp: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                        reactions: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value2Payload.ReactionsPayload? = nil,
                        repositoryUrl: Swift.String? = nil,
                        state: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value2Payload.StatePayload,
                        timelineUrl: Swift.String? = nil,
                        title: Swift.String? = nil,
                        updatedAt: Swift.String? = nil,
                        url: Swift.String? = nil,
                        user: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value2Payload.UserPayload? = nil
                    ) {
                        self.activeLockReason = activeLockReason
                        self.assignee = assignee
                        self.assignees = assignees
                        self.authorAssociation = authorAssociation
                        self.body = body
                        self.closedAt = closedAt
                        self.comments = comments
                        self.commentsUrl = commentsUrl
                        self.createdAt = createdAt
                        self.eventsUrl = eventsUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.labels = labels
                        self.labelsUrl = labelsUrl
                        self.locked = locked
                        self.milestone = milestone
                        self.nodeId = nodeId
                        self.number = number
                        self.performedViaGithubApp = performedViaGithubApp
                        self.reactions = reactions
                        self.repositoryUrl = repositoryUrl
                        self.state = state
                        self.timelineUrl = timelineUrl
                        self.title = title
                        self.updatedAt = updatedAt
                        self.url = url
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case activeLockReason = "active_lock_reason"
                        case assignee
                        case assignees
                        case authorAssociation = "author_association"
                        case body
                        case closedAt = "closed_at"
                        case comments
                        case commentsUrl = "comments_url"
                        case createdAt = "created_at"
                        case eventsUrl = "events_url"
                        case htmlUrl = "html_url"
                        case id
                        case labels
                        case labelsUrl = "labels_url"
                        case locked
                        case milestone
                        case nodeId = "node_id"
                        case number
                        case performedViaGithubApp = "performed_via_github_app"
                        case reactions
                        case repositoryUrl = "repository_url"
                        case state
                        case timelineUrl = "timeline_url"
                        case title
                        case updatedAt = "updated_at"
                        case url
                        case user
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue/value2`.
                public var value2: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value2Payload
                /// Creates a new `IssuePayload`.
                ///
                /// - Parameters:
                ///   - value1: The [issue](https://docs.github.com/en/rest/reference/issues) itself.
                ///   - value2:
                public init(
                    value1: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value1Payload,
                    value2: Components.Schemas.WebhookIssueCommentCreated.IssuePayload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// The [issue](https://docs.github.com/en/rest/reference/issues) the comment belongs to.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/issue`.
            public var issue: Components.Schemas.WebhookIssueCommentCreated.IssuePayload
            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-created/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Creates a new `WebhookIssueCommentCreated`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - comment: The [comment](https://docs.github.com/en/rest/reference/issues#comments) itself.
            ///   - enterprise:
            ///   - installation:
            ///   - issue: The [issue](https://docs.github.com/en/rest/reference/issues) the comment belongs to.
            ///   - organization:
            ///   - repository:
            ///   - sender:
            public init(
                action: Components.Schemas.WebhookIssueCommentCreated.ActionPayload,
                comment: Components.Schemas.WebhookIssueCommentCreated.CommentPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                issue: Components.Schemas.WebhookIssueCommentCreated.IssuePayload,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser
            ) {
                self.action = action
                self.comment = comment
                self.enterprise = enterprise
                self.installation = installation
                self.issue = issue
                self.organization = organization
                self.repository = repository
                self.sender = sender
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case comment
                case enterprise
                case installation
                case issue
                case organization
                case repository
                case sender
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted`.
        public struct WebhookIssueCommentDeleted: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case deleted = "deleted"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/action`.
            public var action: Components.Schemas.WebhookIssueCommentDeleted.ActionPayload
            /// The [comment](https://docs.github.com/en/rest/reference/issues#comments) itself.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment`.
            public struct CommentPayload: Codable, Hashable, Sendable {
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/author_association`.
                @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case collaborator = "COLLABORATOR"
                    case contributor = "CONTRIBUTOR"
                    case firstTimer = "FIRST_TIMER"
                    case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                    case mannequin = "MANNEQUIN"
                    case member = "MEMBER"
                    case none = "NONE"
                    case owner = "OWNER"
                }
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/author_association`.
                public var authorAssociation: Components.Schemas.WebhookIssueCommentDeleted.CommentPayload.AuthorAssociationPayload
                /// Contents of the issue comment
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/body`.
                public var body: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/created_at`.
                public var createdAt: Foundation.Date
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/html_url`.
                public var htmlUrl: Swift.String
                /// Unique identifier of the issue comment
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/issue_url`.
                public var issueUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/performed_via_github_app`.
                public var performedViaGithubApp: Components.Schemas.NullableIntegration?
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/reactions`.
                public struct ReactionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/reactions/+1`.
                    public var _plus_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/reactions/-1`.
                    public var _hyphen_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/reactions/confused`.
                    public var confused: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/reactions/eyes`.
                    public var eyes: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/reactions/heart`.
                    public var heart: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/reactions/hooray`.
                    public var hooray: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/reactions/laugh`.
                    public var laugh: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/reactions/rocket`.
                    public var rocket: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/reactions/total_count`.
                    public var totalCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/reactions/url`.
                    public var url: Swift.String
                    /// Creates a new `ReactionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - _plus_1:
                    ///   - _hyphen_1:
                    ///   - confused:
                    ///   - eyes:
                    ///   - heart:
                    ///   - hooray:
                    ///   - laugh:
                    ///   - rocket:
                    ///   - totalCount:
                    ///   - url:
                    public init(
                        _plus_1: Swift.Int,
                        _hyphen_1: Swift.Int,
                        confused: Swift.Int,
                        eyes: Swift.Int,
                        heart: Swift.Int,
                        hooray: Swift.Int,
                        laugh: Swift.Int,
                        rocket: Swift.Int,
                        totalCount: Swift.Int,
                        url: Swift.String
                    ) {
                        self._plus_1 = _plus_1
                        self._hyphen_1 = _hyphen_1
                        self.confused = confused
                        self.eyes = eyes
                        self.heart = heart
                        self.hooray = hooray
                        self.laugh = laugh
                        self.rocket = rocket
                        self.totalCount = totalCount
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _plus_1 = "+1"
                        case _hyphen_1 = "-1"
                        case confused
                        case eyes
                        case heart
                        case hooray
                        case laugh
                        case rocket
                        case totalCount = "total_count"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/reactions`.
                public var reactions: Components.Schemas.WebhookIssueCommentDeleted.CommentPayload.ReactionsPayload
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/updated_at`.
                public var updatedAt: Foundation.Date
                /// URL for the issue comment
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/user`.
                public struct UserPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/user/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/user/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/user/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/user/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/user/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/user/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/user/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/user/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/user/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/user/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/user/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/user/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/user/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/user/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/user/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/user/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/user/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/user/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/user/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/user/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                        case mannequin = "Mannequin"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/user/type`.
                    public var _type: Components.Schemas.WebhookIssueCommentDeleted.CommentPayload.UserPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/user/url`.
                    public var url: Swift.String?
                    /// Creates a new `UserPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookIssueCommentDeleted.CommentPayload.UserPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment/user`.
                public var user: Components.Schemas.WebhookIssueCommentDeleted.CommentPayload.UserPayload?
                /// Creates a new `CommentPayload`.
                ///
                /// - Parameters:
                ///   - authorAssociation: How the author is associated with the repository.
                ///   - body: Contents of the issue comment
                ///   - createdAt:
                ///   - htmlUrl:
                ///   - id: Unique identifier of the issue comment
                ///   - issueUrl:
                ///   - nodeId:
                ///   - performedViaGithubApp:
                ///   - reactions:
                ///   - updatedAt:
                ///   - url: URL for the issue comment
                ///   - user:
                public init(
                    authorAssociation: Components.Schemas.WebhookIssueCommentDeleted.CommentPayload.AuthorAssociationPayload,
                    body: Swift.String,
                    createdAt: Foundation.Date,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    issueUrl: Swift.String,
                    nodeId: Swift.String,
                    performedViaGithubApp: Components.Schemas.NullableIntegration? = nil,
                    reactions: Components.Schemas.WebhookIssueCommentDeleted.CommentPayload.ReactionsPayload,
                    updatedAt: Foundation.Date,
                    url: Swift.String,
                    user: Components.Schemas.WebhookIssueCommentDeleted.CommentPayload.UserPayload? = nil
                ) {
                    self.authorAssociation = authorAssociation
                    self.body = body
                    self.createdAt = createdAt
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.issueUrl = issueUrl
                    self.nodeId = nodeId
                    self.performedViaGithubApp = performedViaGithubApp
                    self.reactions = reactions
                    self.updatedAt = updatedAt
                    self.url = url
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case authorAssociation = "author_association"
                    case body
                    case createdAt = "created_at"
                    case htmlUrl = "html_url"
                    case id
                    case issueUrl = "issue_url"
                    case nodeId = "node_id"
                    case performedViaGithubApp = "performed_via_github_app"
                    case reactions
                    case updatedAt = "updated_at"
                    case url
                    case user
                }
            }
            /// The [comment](https://docs.github.com/en/rest/reference/issues#comments) itself.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/comment`.
            public var comment: Components.Schemas.WebhookIssueCommentDeleted.CommentPayload
            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// The [issue](https://docs.github.com/en/rest/reference/issues) the comment belongs to.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue`.
            public struct IssuePayload: Codable, Hashable, Sendable {
                /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/active_lock_reason`.
                    @frozen public enum ActiveLockReasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case resolved = "resolved"
                        case offTopic = "off-topic"
                        case tooHeated = "too heated"
                        case spam = "spam"
                        case _empty_ = ""
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/active_lock_reason`.
                    public var activeLockReason: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.ActiveLockReasonPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/assignee`.
                    public struct AssigneePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/assignee/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/assignee/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/assignee/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/assignee/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/assignee/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/assignee/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/assignee/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/assignee/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/assignee/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/assignee/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/assignee/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/assignee/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/assignee/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/assignee/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/assignee/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/assignee/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/assignee/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/assignee/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/assignee/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/assignee/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                            case mannequin = "Mannequin"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/assignee/type`.
                        public var _type: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.AssigneePayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/assignee/url`.
                        public var url: Swift.String?
                        /// Creates a new `AssigneePayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.AssigneePayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/assignee`.
                    public var assignee: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.AssigneePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/AssigneesPayload`.
                    public struct AssigneesPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/AssigneesPayload/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/AssigneesPayload/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/AssigneesPayload/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/AssigneesPayload/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/AssigneesPayload/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/AssigneesPayload/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/AssigneesPayload/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/AssigneesPayload/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/AssigneesPayload/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/AssigneesPayload/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/AssigneesPayload/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/AssigneesPayload/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/AssigneesPayload/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/AssigneesPayload/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/AssigneesPayload/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/AssigneesPayload/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/AssigneesPayload/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/AssigneesPayload/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/AssigneesPayload/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/AssigneesPayload/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                            case mannequin = "Mannequin"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/AssigneesPayload/type`.
                        public var _type: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.AssigneesPayloadPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/AssigneesPayload/url`.
                        public var url: Swift.String?
                        /// Creates a new `AssigneesPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.AssigneesPayloadPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/assignees`.
                    public typealias AssigneesPayload = [Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.AssigneesPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/assignees`.
                    public var assignees: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.AssigneesPayload
                    /// How the author is associated with the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/author_association`.
                    @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case collaborator = "COLLABORATOR"
                        case contributor = "CONTRIBUTOR"
                        case firstTimer = "FIRST_TIMER"
                        case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                        case mannequin = "MANNEQUIN"
                        case member = "MEMBER"
                        case none = "NONE"
                        case owner = "OWNER"
                    }
                    /// How the author is associated with the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/author_association`.
                    public var authorAssociation: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.AuthorAssociationPayload
                    /// Contents of the issue
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/body`.
                    public var body: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/closed_at`.
                    public var closedAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/comments`.
                    public var comments: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/comments_url`.
                    public var commentsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/created_at`.
                    public var createdAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/draft`.
                    public var draft: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/events_url`.
                    public var eventsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/html_url`.
                    public var htmlUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/LabelsPayload`.
                    public struct LabelsPayloadPayload: Codable, Hashable, Sendable {
                        /// 6-character hex code, without the leading #, identifying the color
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/LabelsPayload/color`.
                        public var color: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/LabelsPayload/default`.
                        public var _default: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/LabelsPayload/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/LabelsPayload/id`.
                        public var id: Swift.Int
                        /// The name of the label.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/LabelsPayload/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/LabelsPayload/node_id`.
                        public var nodeId: Swift.String
                        /// URL for the label
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/LabelsPayload/url`.
                        public var url: Swift.String
                        /// Creates a new `LabelsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - color: 6-character hex code, without the leading #, identifying the color
                        ///   - _default:
                        ///   - description:
                        ///   - id:
                        ///   - name: The name of the label.
                        ///   - nodeId:
                        ///   - url: URL for the label
                        public init(
                            color: Swift.String,
                            _default: Swift.Bool,
                            description: Swift.String? = nil,
                            id: Swift.Int,
                            name: Swift.String,
                            nodeId: Swift.String,
                            url: Swift.String
                        ) {
                            self.color = color
                            self._default = _default
                            self.description = description
                            self.id = id
                            self.name = name
                            self.nodeId = nodeId
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case color
                            case _default = "default"
                            case description
                            case id
                            case name
                            case nodeId = "node_id"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/labels`.
                    public typealias LabelsPayload = [Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.LabelsPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/labels`.
                    public var labels: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.LabelsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/labels_url`.
                    public var labelsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/locked`.
                    public var locked: Swift.Bool?
                    /// A collection of related issues and pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone`.
                    public struct MilestonePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/closed_at`.
                        public var closedAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/closed_issues`.
                        public var closedIssues: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/created_at`.
                        public var createdAt: Foundation.Date
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/creator`.
                        public struct CreatorPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/creator/avatar_url`.
                            public var avatarUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/creator/deleted`.
                            public var deleted: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/creator/email`.
                            public var email: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/creator/events_url`.
                            public var eventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/creator/followers_url`.
                            public var followersUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/creator/following_url`.
                            public var followingUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/creator/gists_url`.
                            public var gistsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/creator/gravatar_id`.
                            public var gravatarId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/creator/html_url`.
                            public var htmlUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/creator/id`.
                            public var id: Swift.Int
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/creator/login`.
                            public var login: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/creator/name`.
                            public var name: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/creator/node_id`.
                            public var nodeId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/creator/organizations_url`.
                            public var organizationsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/creator/received_events_url`.
                            public var receivedEventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/creator/repos_url`.
                            public var reposUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/creator/site_admin`.
                            public var siteAdmin: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/creator/starred_url`.
                            public var starredUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/creator/subscriptions_url`.
                            public var subscriptionsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/creator/type`.
                            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case bot = "Bot"
                                case user = "User"
                                case organization = "Organization"
                                case mannequin = "Mannequin"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/creator/type`.
                            public var _type: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload._TypePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/creator/url`.
                            public var url: Swift.String?
                            /// Creates a new `CreatorPayload`.
                            ///
                            /// - Parameters:
                            ///   - avatarUrl:
                            ///   - deleted:
                            ///   - email:
                            ///   - eventsUrl:
                            ///   - followersUrl:
                            ///   - followingUrl:
                            ///   - gistsUrl:
                            ///   - gravatarId:
                            ///   - htmlUrl:
                            ///   - id:
                            ///   - login:
                            ///   - name:
                            ///   - nodeId:
                            ///   - organizationsUrl:
                            ///   - receivedEventsUrl:
                            ///   - reposUrl:
                            ///   - siteAdmin:
                            ///   - starredUrl:
                            ///   - subscriptionsUrl:
                            ///   - _type:
                            ///   - url:
                            public init(
                                avatarUrl: Swift.String? = nil,
                                deleted: Swift.Bool? = nil,
                                email: Swift.String? = nil,
                                eventsUrl: Swift.String? = nil,
                                followersUrl: Swift.String? = nil,
                                followingUrl: Swift.String? = nil,
                                gistsUrl: Swift.String? = nil,
                                gravatarId: Swift.String? = nil,
                                htmlUrl: Swift.String? = nil,
                                id: Swift.Int,
                                login: Swift.String,
                                name: Swift.String? = nil,
                                nodeId: Swift.String? = nil,
                                organizationsUrl: Swift.String? = nil,
                                receivedEventsUrl: Swift.String? = nil,
                                reposUrl: Swift.String? = nil,
                                siteAdmin: Swift.Bool? = nil,
                                starredUrl: Swift.String? = nil,
                                subscriptionsUrl: Swift.String? = nil,
                                _type: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload._TypePayload? = nil,
                                url: Swift.String? = nil
                            ) {
                                self.avatarUrl = avatarUrl
                                self.deleted = deleted
                                self.email = email
                                self.eventsUrl = eventsUrl
                                self.followersUrl = followersUrl
                                self.followingUrl = followingUrl
                                self.gistsUrl = gistsUrl
                                self.gravatarId = gravatarId
                                self.htmlUrl = htmlUrl
                                self.id = id
                                self.login = login
                                self.name = name
                                self.nodeId = nodeId
                                self.organizationsUrl = organizationsUrl
                                self.receivedEventsUrl = receivedEventsUrl
                                self.reposUrl = reposUrl
                                self.siteAdmin = siteAdmin
                                self.starredUrl = starredUrl
                                self.subscriptionsUrl = subscriptionsUrl
                                self._type = _type
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case avatarUrl = "avatar_url"
                                case deleted
                                case email
                                case eventsUrl = "events_url"
                                case followersUrl = "followers_url"
                                case followingUrl = "following_url"
                                case gistsUrl = "gists_url"
                                case gravatarId = "gravatar_id"
                                case htmlUrl = "html_url"
                                case id
                                case login
                                case name
                                case nodeId = "node_id"
                                case organizationsUrl = "organizations_url"
                                case receivedEventsUrl = "received_events_url"
                                case reposUrl = "repos_url"
                                case siteAdmin = "site_admin"
                                case starredUrl = "starred_url"
                                case subscriptionsUrl = "subscriptions_url"
                                case _type = "type"
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/creator`.
                        public var creator: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/due_on`.
                        public var dueOn: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/html_url`.
                        public var htmlUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/labels_url`.
                        public var labelsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/node_id`.
                        public var nodeId: Swift.String
                        /// The number of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/number`.
                        public var number: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/open_issues`.
                        public var openIssues: Swift.Int
                        /// The state of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/state`.
                        @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case open = "open"
                            case closed = "closed"
                        }
                        /// The state of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/state`.
                        public var state: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.MilestonePayload.StatePayload
                        /// The title of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/title`.
                        public var title: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/updated_at`.
                        public var updatedAt: Foundation.Date
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone/url`.
                        public var url: Swift.String
                        /// Creates a new `MilestonePayload`.
                        ///
                        /// - Parameters:
                        ///   - closedAt:
                        ///   - closedIssues:
                        ///   - createdAt:
                        ///   - creator:
                        ///   - description:
                        ///   - dueOn:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - labelsUrl:
                        ///   - nodeId:
                        ///   - number: The number of the milestone.
                        ///   - openIssues:
                        ///   - state: The state of the milestone.
                        ///   - title: The title of the milestone.
                        ///   - updatedAt:
                        ///   - url:
                        public init(
                            closedAt: Foundation.Date? = nil,
                            closedIssues: Swift.Int,
                            createdAt: Foundation.Date,
                            creator: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload? = nil,
                            description: Swift.String? = nil,
                            dueOn: Foundation.Date? = nil,
                            htmlUrl: Swift.String,
                            id: Swift.Int,
                            labelsUrl: Swift.String,
                            nodeId: Swift.String,
                            number: Swift.Int,
                            openIssues: Swift.Int,
                            state: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.MilestonePayload.StatePayload,
                            title: Swift.String,
                            updatedAt: Foundation.Date,
                            url: Swift.String
                        ) {
                            self.closedAt = closedAt
                            self.closedIssues = closedIssues
                            self.createdAt = createdAt
                            self.creator = creator
                            self.description = description
                            self.dueOn = dueOn
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.labelsUrl = labelsUrl
                            self.nodeId = nodeId
                            self.number = number
                            self.openIssues = openIssues
                            self.state = state
                            self.title = title
                            self.updatedAt = updatedAt
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case closedAt = "closed_at"
                            case closedIssues = "closed_issues"
                            case createdAt = "created_at"
                            case creator
                            case description
                            case dueOn = "due_on"
                            case htmlUrl = "html_url"
                            case id
                            case labelsUrl = "labels_url"
                            case nodeId = "node_id"
                            case number
                            case openIssues = "open_issues"
                            case state
                            case title
                            case updatedAt = "updated_at"
                            case url
                        }
                    }
                    /// A collection of related issues and pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/milestone`.
                    public var milestone: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.MilestonePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/number`.
                    public var number: Swift.Int
                    /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app`.
                    public struct PerformedViaGithubAppPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/created_at`.
                        public var createdAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/EventsPayload`.
                        @frozen public enum EventsPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case branchProtectionRule = "branch_protection_rule"
                            case checkRun = "check_run"
                            case checkSuite = "check_suite"
                            case codeScanningAlert = "code_scanning_alert"
                            case commitComment = "commit_comment"
                            case contentReference = "content_reference"
                            case create = "create"
                            case delete = "delete"
                            case deployment = "deployment"
                            case deploymentReview = "deployment_review"
                            case deploymentStatus = "deployment_status"
                            case deployKey = "deploy_key"
                            case discussion = "discussion"
                            case discussionComment = "discussion_comment"
                            case fork = "fork"
                            case gollum = "gollum"
                            case issues = "issues"
                            case issueComment = "issue_comment"
                            case label = "label"
                            case member = "member"
                            case membership = "membership"
                            case milestone = "milestone"
                            case organization = "organization"
                            case orgBlock = "org_block"
                            case pageBuild = "page_build"
                            case project = "project"
                            case projectCard = "project_card"
                            case projectColumn = "project_column"
                            case _public = "public"
                            case pullRequest = "pull_request"
                            case pullRequestReview = "pull_request_review"
                            case pullRequestReviewComment = "pull_request_review_comment"
                            case push = "push"
                            case registryPackage = "registry_package"
                            case release = "release"
                            case repository = "repository"
                            case repositoryDispatch = "repository_dispatch"
                            case secretScanningAlert = "secret_scanning_alert"
                            case star = "star"
                            case status = "status"
                            case team = "team"
                            case teamAdd = "team_add"
                            case watch = "watch"
                            case workflowDispatch = "workflow_dispatch"
                            case workflowRun = "workflow_run"
                        }
                        /// The list of events for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/events`.
                        public typealias EventsPayload = [Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.EventsPayloadPayload]
                        /// The list of events for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/events`.
                        public var events: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.EventsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/external_url`.
                        public var externalUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/html_url`.
                        public var htmlUrl: Swift.String
                        /// Unique identifier of the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/id`.
                        public var id: Swift.Int?
                        /// The name of the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/node_id`.
                        public var nodeId: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/owner`.
                        public struct OwnerPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/owner/avatar_url`.
                            public var avatarUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/owner/deleted`.
                            public var deleted: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/owner/email`.
                            public var email: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/owner/events_url`.
                            public var eventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/owner/followers_url`.
                            public var followersUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/owner/following_url`.
                            public var followingUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/owner/gists_url`.
                            public var gistsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/owner/gravatar_id`.
                            public var gravatarId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/owner/html_url`.
                            public var htmlUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/owner/id`.
                            public var id: Swift.Int
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/owner/login`.
                            public var login: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/owner/name`.
                            public var name: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/owner/node_id`.
                            public var nodeId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/owner/organizations_url`.
                            public var organizationsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/owner/received_events_url`.
                            public var receivedEventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/owner/repos_url`.
                            public var reposUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/owner/site_admin`.
                            public var siteAdmin: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/owner/starred_url`.
                            public var starredUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/owner/subscriptions_url`.
                            public var subscriptionsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/owner/type`.
                            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case bot = "Bot"
                                case user = "User"
                                case organization = "Organization"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/owner/type`.
                            public var _type: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/owner/url`.
                            public var url: Swift.String?
                            /// Creates a new `OwnerPayload`.
                            ///
                            /// - Parameters:
                            ///   - avatarUrl:
                            ///   - deleted:
                            ///   - email:
                            ///   - eventsUrl:
                            ///   - followersUrl:
                            ///   - followingUrl:
                            ///   - gistsUrl:
                            ///   - gravatarId:
                            ///   - htmlUrl:
                            ///   - id:
                            ///   - login:
                            ///   - name:
                            ///   - nodeId:
                            ///   - organizationsUrl:
                            ///   - receivedEventsUrl:
                            ///   - reposUrl:
                            ///   - siteAdmin:
                            ///   - starredUrl:
                            ///   - subscriptionsUrl:
                            ///   - _type:
                            ///   - url:
                            public init(
                                avatarUrl: Swift.String? = nil,
                                deleted: Swift.Bool? = nil,
                                email: Swift.String? = nil,
                                eventsUrl: Swift.String? = nil,
                                followersUrl: Swift.String? = nil,
                                followingUrl: Swift.String? = nil,
                                gistsUrl: Swift.String? = nil,
                                gravatarId: Swift.String? = nil,
                                htmlUrl: Swift.String? = nil,
                                id: Swift.Int,
                                login: Swift.String,
                                name: Swift.String? = nil,
                                nodeId: Swift.String? = nil,
                                organizationsUrl: Swift.String? = nil,
                                receivedEventsUrl: Swift.String? = nil,
                                reposUrl: Swift.String? = nil,
                                siteAdmin: Swift.Bool? = nil,
                                starredUrl: Swift.String? = nil,
                                subscriptionsUrl: Swift.String? = nil,
                                _type: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload? = nil,
                                url: Swift.String? = nil
                            ) {
                                self.avatarUrl = avatarUrl
                                self.deleted = deleted
                                self.email = email
                                self.eventsUrl = eventsUrl
                                self.followersUrl = followersUrl
                                self.followingUrl = followingUrl
                                self.gistsUrl = gistsUrl
                                self.gravatarId = gravatarId
                                self.htmlUrl = htmlUrl
                                self.id = id
                                self.login = login
                                self.name = name
                                self.nodeId = nodeId
                                self.organizationsUrl = organizationsUrl
                                self.receivedEventsUrl = receivedEventsUrl
                                self.reposUrl = reposUrl
                                self.siteAdmin = siteAdmin
                                self.starredUrl = starredUrl
                                self.subscriptionsUrl = subscriptionsUrl
                                self._type = _type
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case avatarUrl = "avatar_url"
                                case deleted
                                case email
                                case eventsUrl = "events_url"
                                case followersUrl = "followers_url"
                                case followingUrl = "following_url"
                                case gistsUrl = "gists_url"
                                case gravatarId = "gravatar_id"
                                case htmlUrl = "html_url"
                                case id
                                case login
                                case name
                                case nodeId = "node_id"
                                case organizationsUrl = "organizations_url"
                                case receivedEventsUrl = "received_events_url"
                                case reposUrl = "repos_url"
                                case siteAdmin = "site_admin"
                                case starredUrl = "starred_url"
                                case subscriptionsUrl = "subscriptions_url"
                                case _type = "type"
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/owner`.
                        public var owner: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload?
                        /// The set of permissions for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions`.
                        public struct PermissionsPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/actions`.
                            @frozen public enum ActionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/actions`.
                            public var actions: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/administration`.
                            @frozen public enum AdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/administration`.
                            public var administration: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/checks`.
                            @frozen public enum ChecksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/checks`.
                            public var checks: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/content_references`.
                            @frozen public enum ContentReferencesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/content_references`.
                            public var contentReferences: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/contents`.
                            @frozen public enum ContentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/contents`.
                            public var contents: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/deployments`.
                            @frozen public enum DeploymentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/deployments`.
                            public var deployments: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/discussions`.
                            @frozen public enum DiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/discussions`.
                            public var discussions: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/emails`.
                            @frozen public enum EmailsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/emails`.
                            public var emails: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/environments`.
                            @frozen public enum EnvironmentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/environments`.
                            public var environments: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/issues`.
                            @frozen public enum IssuesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/issues`.
                            public var issues: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/keys`.
                            @frozen public enum KeysPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/keys`.
                            public var keys: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/members`.
                            @frozen public enum MembersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/members`.
                            public var members: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/metadata`.
                            @frozen public enum MetadataPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/metadata`.
                            public var metadata: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/organization_administration`.
                            @frozen public enum OrganizationAdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/organization_administration`.
                            public var organizationAdministration: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/organization_hooks`.
                            @frozen public enum OrganizationHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/organization_hooks`.
                            public var organizationHooks: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/organization_packages`.
                            @frozen public enum OrganizationPackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/organization_packages`.
                            public var organizationPackages: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/organization_plan`.
                            @frozen public enum OrganizationPlanPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/organization_plan`.
                            public var organizationPlan: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/organization_projects`.
                            @frozen public enum OrganizationProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/organization_projects`.
                            public var organizationProjects: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/organization_secrets`.
                            @frozen public enum OrganizationSecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/organization_secrets`.
                            public var organizationSecrets: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/organization_self_hosted_runners`.
                            @frozen public enum OrganizationSelfHostedRunnersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/organization_self_hosted_runners`.
                            public var organizationSelfHostedRunners: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/organization_user_blocking`.
                            @frozen public enum OrganizationUserBlockingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/organization_user_blocking`.
                            public var organizationUserBlocking: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/packages`.
                            @frozen public enum PackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/packages`.
                            public var packages: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/pages`.
                            @frozen public enum PagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/pages`.
                            public var pages: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/pull_requests`.
                            @frozen public enum PullRequestsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/pull_requests`.
                            public var pullRequests: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/repository_hooks`.
                            @frozen public enum RepositoryHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/repository_hooks`.
                            public var repositoryHooks: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/repository_projects`.
                            @frozen public enum RepositoryProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/repository_projects`.
                            public var repositoryProjects: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/secret_scanning_alerts`.
                            @frozen public enum SecretScanningAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/secret_scanning_alerts`.
                            public var secretScanningAlerts: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/secrets`.
                            @frozen public enum SecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/secrets`.
                            public var secrets: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/security_events`.
                            @frozen public enum SecurityEventsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/security_events`.
                            public var securityEvents: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/security_scanning_alert`.
                            @frozen public enum SecurityScanningAlertPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/security_scanning_alert`.
                            public var securityScanningAlert: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/single_file`.
                            @frozen public enum SingleFilePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/single_file`.
                            public var singleFile: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/statuses`.
                            @frozen public enum StatusesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/statuses`.
                            public var statuses: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/team_discussions`.
                            @frozen public enum TeamDiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/team_discussions`.
                            public var teamDiscussions: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/vulnerability_alerts`.
                            @frozen public enum VulnerabilityAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/vulnerability_alerts`.
                            public var vulnerabilityAlerts: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/workflows`.
                            @frozen public enum WorkflowsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions/workflows`.
                            public var workflows: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload?
                            /// Creates a new `PermissionsPayload`.
                            ///
                            /// - Parameters:
                            ///   - actions:
                            ///   - administration:
                            ///   - checks:
                            ///   - contentReferences:
                            ///   - contents:
                            ///   - deployments:
                            ///   - discussions:
                            ///   - emails:
                            ///   - environments:
                            ///   - issues:
                            ///   - keys:
                            ///   - members:
                            ///   - metadata:
                            ///   - organizationAdministration:
                            ///   - organizationHooks:
                            ///   - organizationPackages:
                            ///   - organizationPlan:
                            ///   - organizationProjects:
                            ///   - organizationSecrets:
                            ///   - organizationSelfHostedRunners:
                            ///   - organizationUserBlocking:
                            ///   - packages:
                            ///   - pages:
                            ///   - pullRequests:
                            ///   - repositoryHooks:
                            ///   - repositoryProjects:
                            ///   - secretScanningAlerts:
                            ///   - secrets:
                            ///   - securityEvents:
                            ///   - securityScanningAlert:
                            ///   - singleFile:
                            ///   - statuses:
                            ///   - teamDiscussions:
                            ///   - vulnerabilityAlerts:
                            ///   - workflows:
                            public init(
                                actions: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload? = nil,
                                administration: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload? = nil,
                                checks: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload? = nil,
                                contentReferences: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload? = nil,
                                contents: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload? = nil,
                                deployments: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload? = nil,
                                discussions: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload? = nil,
                                emails: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload? = nil,
                                environments: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload? = nil,
                                issues: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload? = nil,
                                keys: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload? = nil,
                                members: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload? = nil,
                                metadata: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload? = nil,
                                organizationAdministration: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload? = nil,
                                organizationHooks: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload? = nil,
                                organizationPackages: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload? = nil,
                                organizationPlan: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload? = nil,
                                organizationProjects: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload? = nil,
                                organizationSecrets: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload? = nil,
                                organizationSelfHostedRunners: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload? = nil,
                                organizationUserBlocking: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload? = nil,
                                packages: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload? = nil,
                                pages: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload? = nil,
                                pullRequests: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload? = nil,
                                repositoryHooks: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload? = nil,
                                repositoryProjects: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload? = nil,
                                secretScanningAlerts: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload? = nil,
                                secrets: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload? = nil,
                                securityEvents: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload? = nil,
                                securityScanningAlert: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload? = nil,
                                singleFile: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload? = nil,
                                statuses: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload? = nil,
                                teamDiscussions: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload? = nil,
                                vulnerabilityAlerts: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload? = nil,
                                workflows: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload? = nil
                            ) {
                                self.actions = actions
                                self.administration = administration
                                self.checks = checks
                                self.contentReferences = contentReferences
                                self.contents = contents
                                self.deployments = deployments
                                self.discussions = discussions
                                self.emails = emails
                                self.environments = environments
                                self.issues = issues
                                self.keys = keys
                                self.members = members
                                self.metadata = metadata
                                self.organizationAdministration = organizationAdministration
                                self.organizationHooks = organizationHooks
                                self.organizationPackages = organizationPackages
                                self.organizationPlan = organizationPlan
                                self.organizationProjects = organizationProjects
                                self.organizationSecrets = organizationSecrets
                                self.organizationSelfHostedRunners = organizationSelfHostedRunners
                                self.organizationUserBlocking = organizationUserBlocking
                                self.packages = packages
                                self.pages = pages
                                self.pullRequests = pullRequests
                                self.repositoryHooks = repositoryHooks
                                self.repositoryProjects = repositoryProjects
                                self.secretScanningAlerts = secretScanningAlerts
                                self.secrets = secrets
                                self.securityEvents = securityEvents
                                self.securityScanningAlert = securityScanningAlert
                                self.singleFile = singleFile
                                self.statuses = statuses
                                self.teamDiscussions = teamDiscussions
                                self.vulnerabilityAlerts = vulnerabilityAlerts
                                self.workflows = workflows
                            }
                            public enum CodingKeys: String, CodingKey {
                                case actions
                                case administration
                                case checks
                                case contentReferences = "content_references"
                                case contents
                                case deployments
                                case discussions
                                case emails
                                case environments
                                case issues
                                case keys
                                case members
                                case metadata
                                case organizationAdministration = "organization_administration"
                                case organizationHooks = "organization_hooks"
                                case organizationPackages = "organization_packages"
                                case organizationPlan = "organization_plan"
                                case organizationProjects = "organization_projects"
                                case organizationSecrets = "organization_secrets"
                                case organizationSelfHostedRunners = "organization_self_hosted_runners"
                                case organizationUserBlocking = "organization_user_blocking"
                                case packages
                                case pages
                                case pullRequests = "pull_requests"
                                case repositoryHooks = "repository_hooks"
                                case repositoryProjects = "repository_projects"
                                case secretScanningAlerts = "secret_scanning_alerts"
                                case secrets
                                case securityEvents = "security_events"
                                case securityScanningAlert = "security_scanning_alert"
                                case singleFile = "single_file"
                                case statuses
                                case teamDiscussions = "team_discussions"
                                case vulnerabilityAlerts = "vulnerability_alerts"
                                case workflows
                            }
                        }
                        /// The set of permissions for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/permissions`.
                        public var permissions: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload?
                        /// The slug name of the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/slug`.
                        public var slug: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app/updated_at`.
                        public var updatedAt: Foundation.Date?
                        /// Creates a new `PerformedViaGithubAppPayload`.
                        ///
                        /// - Parameters:
                        ///   - createdAt:
                        ///   - description:
                        ///   - events: The list of events for the GitHub app
                        ///   - externalUrl:
                        ///   - htmlUrl:
                        ///   - id: Unique identifier of the GitHub app
                        ///   - name: The name of the GitHub app
                        ///   - nodeId:
                        ///   - owner:
                        ///   - permissions: The set of permissions for the GitHub app
                        ///   - slug: The slug name of the GitHub app
                        ///   - updatedAt:
                        public init(
                            createdAt: Foundation.Date? = nil,
                            description: Swift.String? = nil,
                            events: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.EventsPayload? = nil,
                            externalUrl: Swift.String? = nil,
                            htmlUrl: Swift.String,
                            id: Swift.Int? = nil,
                            name: Swift.String,
                            nodeId: Swift.String,
                            owner: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload? = nil,
                            permissions: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload? = nil,
                            slug: Swift.String? = nil,
                            updatedAt: Foundation.Date? = nil
                        ) {
                            self.createdAt = createdAt
                            self.description = description
                            self.events = events
                            self.externalUrl = externalUrl
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.name = name
                            self.nodeId = nodeId
                            self.owner = owner
                            self.permissions = permissions
                            self.slug = slug
                            self.updatedAt = updatedAt
                        }
                        public enum CodingKeys: String, CodingKey {
                            case createdAt = "created_at"
                            case description
                            case events
                            case externalUrl = "external_url"
                            case htmlUrl = "html_url"
                            case id
                            case name
                            case nodeId = "node_id"
                            case owner
                            case permissions
                            case slug
                            case updatedAt = "updated_at"
                        }
                    }
                    /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/performed_via_github_app`.
                    public var performedViaGithubApp: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/pull_request`.
                    public struct PullRequestPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/pull_request/diff_url`.
                        public var diffUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/pull_request/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/pull_request/merged_at`.
                        public var mergedAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/pull_request/patch_url`.
                        public var patchUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/pull_request/url`.
                        public var url: Swift.String?
                        /// Creates a new `PullRequestPayload`.
                        ///
                        /// - Parameters:
                        ///   - diffUrl:
                        ///   - htmlUrl:
                        ///   - mergedAt:
                        ///   - patchUrl:
                        ///   - url:
                        public init(
                            diffUrl: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            mergedAt: Foundation.Date? = nil,
                            patchUrl: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.diffUrl = diffUrl
                            self.htmlUrl = htmlUrl
                            self.mergedAt = mergedAt
                            self.patchUrl = patchUrl
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case diffUrl = "diff_url"
                            case htmlUrl = "html_url"
                            case mergedAt = "merged_at"
                            case patchUrl = "patch_url"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/pull_request`.
                    public var pullRequest: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PullRequestPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/reactions`.
                    public struct ReactionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/reactions/+1`.
                        public var _plus_1: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/reactions/-1`.
                        public var _hyphen_1: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/reactions/confused`.
                        public var confused: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/reactions/eyes`.
                        public var eyes: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/reactions/heart`.
                        public var heart: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/reactions/hooray`.
                        public var hooray: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/reactions/laugh`.
                        public var laugh: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/reactions/rocket`.
                        public var rocket: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/reactions/total_count`.
                        public var totalCount: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/reactions/url`.
                        public var url: Swift.String
                        /// Creates a new `ReactionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - _plus_1:
                        ///   - _hyphen_1:
                        ///   - confused:
                        ///   - eyes:
                        ///   - heart:
                        ///   - hooray:
                        ///   - laugh:
                        ///   - rocket:
                        ///   - totalCount:
                        ///   - url:
                        public init(
                            _plus_1: Swift.Int,
                            _hyphen_1: Swift.Int,
                            confused: Swift.Int,
                            eyes: Swift.Int,
                            heart: Swift.Int,
                            hooray: Swift.Int,
                            laugh: Swift.Int,
                            rocket: Swift.Int,
                            totalCount: Swift.Int,
                            url: Swift.String
                        ) {
                            self._plus_1 = _plus_1
                            self._hyphen_1 = _hyphen_1
                            self.confused = confused
                            self.eyes = eyes
                            self.heart = heart
                            self.hooray = hooray
                            self.laugh = laugh
                            self.rocket = rocket
                            self.totalCount = totalCount
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _plus_1 = "+1"
                            case _hyphen_1 = "-1"
                            case confused
                            case eyes
                            case heart
                            case hooray
                            case laugh
                            case rocket
                            case totalCount = "total_count"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/reactions`.
                    public var reactions: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.ReactionsPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/repository_url`.
                    public var repositoryUrl: Swift.String
                    /// State of the issue; either 'open' or 'closed'
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/state`.
                    @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case closed = "closed"
                    }
                    /// State of the issue; either 'open' or 'closed'
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/state`.
                    public var state: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.StatePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/state_reason`.
                    public var stateReason: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/timeline_url`.
                    public var timelineUrl: Swift.String?
                    /// Title of the issue
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/title`.
                    public var title: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/updated_at`.
                    public var updatedAt: Foundation.Date
                    /// URL for the issue
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/url`.
                    public var url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/user`.
                    public struct UserPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/user/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/user/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/user/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/user/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/user/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/user/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/user/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/user/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/user/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/user/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/user/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/user/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/user/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/user/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/user/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/user/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/user/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/user/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/user/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/user/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                            case mannequin = "Mannequin"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/user/type`.
                        public var _type: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.UserPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/user/url`.
                        public var url: Swift.String?
                        /// Creates a new `UserPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.UserPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1/user`.
                    public var user: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.UserPayload?
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - activeLockReason:
                    ///   - assignee:
                    ///   - assignees:
                    ///   - authorAssociation: How the author is associated with the repository.
                    ///   - body: Contents of the issue
                    ///   - closedAt:
                    ///   - comments:
                    ///   - commentsUrl:
                    ///   - createdAt:
                    ///   - draft:
                    ///   - eventsUrl:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - labels:
                    ///   - labelsUrl:
                    ///   - locked:
                    ///   - milestone: A collection of related issues and pull requests.
                    ///   - nodeId:
                    ///   - number:
                    ///   - performedViaGithubApp: GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                    ///   - pullRequest:
                    ///   - reactions:
                    ///   - repositoryUrl:
                    ///   - state: State of the issue; either 'open' or 'closed'
                    ///   - stateReason:
                    ///   - timelineUrl:
                    ///   - title: Title of the issue
                    ///   - updatedAt:
                    ///   - url: URL for the issue
                    ///   - user:
                    public init(
                        activeLockReason: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.ActiveLockReasonPayload? = nil,
                        assignee: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.AssigneePayload? = nil,
                        assignees: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.AssigneesPayload,
                        authorAssociation: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.AuthorAssociationPayload,
                        body: Swift.String? = nil,
                        closedAt: Foundation.Date? = nil,
                        comments: Swift.Int,
                        commentsUrl: Swift.String,
                        createdAt: Foundation.Date,
                        draft: Swift.Bool? = nil,
                        eventsUrl: Swift.String,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        labels: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.LabelsPayload? = nil,
                        labelsUrl: Swift.String,
                        locked: Swift.Bool? = nil,
                        milestone: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.MilestonePayload? = nil,
                        nodeId: Swift.String,
                        number: Swift.Int,
                        performedViaGithubApp: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PerformedViaGithubAppPayload? = nil,
                        pullRequest: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.PullRequestPayload? = nil,
                        reactions: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.ReactionsPayload,
                        repositoryUrl: Swift.String,
                        state: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.StatePayload? = nil,
                        stateReason: Swift.String? = nil,
                        timelineUrl: Swift.String? = nil,
                        title: Swift.String,
                        updatedAt: Foundation.Date,
                        url: Swift.String,
                        user: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload.UserPayload? = nil
                    ) {
                        self.activeLockReason = activeLockReason
                        self.assignee = assignee
                        self.assignees = assignees
                        self.authorAssociation = authorAssociation
                        self.body = body
                        self.closedAt = closedAt
                        self.comments = comments
                        self.commentsUrl = commentsUrl
                        self.createdAt = createdAt
                        self.draft = draft
                        self.eventsUrl = eventsUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.labels = labels
                        self.labelsUrl = labelsUrl
                        self.locked = locked
                        self.milestone = milestone
                        self.nodeId = nodeId
                        self.number = number
                        self.performedViaGithubApp = performedViaGithubApp
                        self.pullRequest = pullRequest
                        self.reactions = reactions
                        self.repositoryUrl = repositoryUrl
                        self.state = state
                        self.stateReason = stateReason
                        self.timelineUrl = timelineUrl
                        self.title = title
                        self.updatedAt = updatedAt
                        self.url = url
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case activeLockReason = "active_lock_reason"
                        case assignee
                        case assignees
                        case authorAssociation = "author_association"
                        case body
                        case closedAt = "closed_at"
                        case comments
                        case commentsUrl = "comments_url"
                        case createdAt = "created_at"
                        case draft
                        case eventsUrl = "events_url"
                        case htmlUrl = "html_url"
                        case id
                        case labels
                        case labelsUrl = "labels_url"
                        case locked
                        case milestone
                        case nodeId = "node_id"
                        case number
                        case performedViaGithubApp = "performed_via_github_app"
                        case pullRequest = "pull_request"
                        case reactions
                        case repositoryUrl = "repository_url"
                        case state
                        case stateReason = "state_reason"
                        case timelineUrl = "timeline_url"
                        case title
                        case updatedAt = "updated_at"
                        case url
                        case user
                    }
                }
                /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value1`.
                public var value1: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/active_lock_reason`.
                    public var activeLockReason: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/assignee`.
                    public struct AssigneePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/assignee/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/assignee/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/assignee/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/assignee/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/assignee/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/assignee/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/assignee/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/assignee/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/assignee/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/assignee/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/assignee/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/assignee/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/assignee/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/assignee/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/assignee/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/assignee/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/assignee/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/assignee/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/assignee/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/assignee/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                            case mannequin = "Mannequin"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/assignee/type`.
                        public var _type: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value2Payload.AssigneePayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/assignee/url`.
                        public var url: Swift.String?
                        /// Creates a new `AssigneePayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value2Payload.AssigneePayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/assignee`.
                    public var assignee: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value2Payload.AssigneePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/assignees`.
                    public var assignees: [OpenAPIRuntime.OpenAPIObjectContainer?]?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/author_association`.
                    public var authorAssociation: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/body`.
                    public var body: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/closed_at`.
                    public var closedAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/comments`.
                    public var comments: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/comments_url`.
                    public var commentsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/created_at`.
                    public var createdAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/id`.
                    public var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/LabelsPayload`.
                    public struct LabelsPayloadPayload: Codable, Hashable, Sendable {
                        /// 6-character hex code, without the leading #, identifying the color
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/LabelsPayload/color`.
                        public var color: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/LabelsPayload/default`.
                        public var _default: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/LabelsPayload/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/LabelsPayload/id`.
                        public var id: Swift.Int
                        /// The name of the label.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/LabelsPayload/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/LabelsPayload/node_id`.
                        public var nodeId: Swift.String
                        /// URL for the label
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/LabelsPayload/url`.
                        public var url: Swift.String
                        /// Creates a new `LabelsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - color: 6-character hex code, without the leading #, identifying the color
                        ///   - _default:
                        ///   - description:
                        ///   - id:
                        ///   - name: The name of the label.
                        ///   - nodeId:
                        ///   - url: URL for the label
                        public init(
                            color: Swift.String,
                            _default: Swift.Bool,
                            description: Swift.String? = nil,
                            id: Swift.Int,
                            name: Swift.String,
                            nodeId: Swift.String,
                            url: Swift.String
                        ) {
                            self.color = color
                            self._default = _default
                            self.description = description
                            self.id = id
                            self.name = name
                            self.nodeId = nodeId
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case color
                            case _default = "default"
                            case description
                            case id
                            case name
                            case nodeId = "node_id"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/labels`.
                    public typealias LabelsPayload = [Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value2Payload.LabelsPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/labels`.
                    public var labels: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value2Payload.LabelsPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/labels_url`.
                    public var labelsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/locked`.
                    public var locked: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/milestone`.
                    public var milestone: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/number`.
                    public var number: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/performed_via_github_app`.
                    public var performedViaGithubApp: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/reactions`.
                    public struct ReactionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/reactions/+1`.
                        public var _plus_1: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/reactions/-1`.
                        public var _hyphen_1: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/reactions/confused`.
                        public var confused: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/reactions/eyes`.
                        public var eyes: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/reactions/heart`.
                        public var heart: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/reactions/hooray`.
                        public var hooray: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/reactions/laugh`.
                        public var laugh: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/reactions/rocket`.
                        public var rocket: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/reactions/total_count`.
                        public var totalCount: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/reactions/url`.
                        public var url: Swift.String?
                        /// Creates a new `ReactionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - _plus_1:
                        ///   - _hyphen_1:
                        ///   - confused:
                        ///   - eyes:
                        ///   - heart:
                        ///   - hooray:
                        ///   - laugh:
                        ///   - rocket:
                        ///   - totalCount:
                        ///   - url:
                        public init(
                            _plus_1: Swift.Int? = nil,
                            _hyphen_1: Swift.Int? = nil,
                            confused: Swift.Int? = nil,
                            eyes: Swift.Int? = nil,
                            heart: Swift.Int? = nil,
                            hooray: Swift.Int? = nil,
                            laugh: Swift.Int? = nil,
                            rocket: Swift.Int? = nil,
                            totalCount: Swift.Int? = nil,
                            url: Swift.String? = nil
                        ) {
                            self._plus_1 = _plus_1
                            self._hyphen_1 = _hyphen_1
                            self.confused = confused
                            self.eyes = eyes
                            self.heart = heart
                            self.hooray = hooray
                            self.laugh = laugh
                            self.rocket = rocket
                            self.totalCount = totalCount
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _plus_1 = "+1"
                            case _hyphen_1 = "-1"
                            case confused
                            case eyes
                            case heart
                            case hooray
                            case laugh
                            case rocket
                            case totalCount = "total_count"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/reactions`.
                    public var reactions: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value2Payload.ReactionsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/repository_url`.
                    public var repositoryUrl: Swift.String?
                    /// State of the issue; either 'open' or 'closed'
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/state`.
                    @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case closed = "closed"
                    }
                    /// State of the issue; either 'open' or 'closed'
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/state`.
                    public var state: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value2Payload.StatePayload
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/timeline_url`.
                    public var timelineUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/title`.
                    public var title: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/updated_at`.
                    public var updatedAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/url`.
                    public var url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/user`.
                    public struct UserPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/user/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/user/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/user/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/user/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/user/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/user/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/user/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/user/id`.
                        public var id: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/user/login`.
                        public var login: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/user/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/user/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/user/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/user/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/user/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/user/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/user/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/user/type`.
                        public var _type: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/user/url`.
                        public var url: Swift.String?
                        /// Creates a new `UserPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int? = nil,
                            login: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2/user`.
                    public var user: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value2Payload.UserPayload?
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - activeLockReason:
                    ///   - assignee:
                    ///   - assignees:
                    ///   - authorAssociation:
                    ///   - body:
                    ///   - closedAt:
                    ///   - comments:
                    ///   - commentsUrl:
                    ///   - createdAt:
                    ///   - eventsUrl:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - labels:
                    ///   - labelsUrl:
                    ///   - locked:
                    ///   - milestone:
                    ///   - nodeId:
                    ///   - number:
                    ///   - performedViaGithubApp:
                    ///   - reactions:
                    ///   - repositoryUrl:
                    ///   - state: State of the issue; either 'open' or 'closed'
                    ///   - timelineUrl:
                    ///   - title:
                    ///   - updatedAt:
                    ///   - url:
                    ///   - user:
                    public init(
                        activeLockReason: Swift.String? = nil,
                        assignee: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value2Payload.AssigneePayload? = nil,
                        assignees: [OpenAPIRuntime.OpenAPIObjectContainer?]? = nil,
                        authorAssociation: Swift.String? = nil,
                        body: Swift.String? = nil,
                        closedAt: Swift.String? = nil,
                        comments: Swift.Int? = nil,
                        commentsUrl: Swift.String? = nil,
                        createdAt: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int? = nil,
                        labels: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value2Payload.LabelsPayload,
                        labelsUrl: Swift.String? = nil,
                        locked: Swift.Bool,
                        milestone: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                        nodeId: Swift.String? = nil,
                        number: Swift.Int? = nil,
                        performedViaGithubApp: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                        reactions: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value2Payload.ReactionsPayload? = nil,
                        repositoryUrl: Swift.String? = nil,
                        state: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value2Payload.StatePayload,
                        timelineUrl: Swift.String? = nil,
                        title: Swift.String? = nil,
                        updatedAt: Swift.String? = nil,
                        url: Swift.String? = nil,
                        user: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value2Payload.UserPayload? = nil
                    ) {
                        self.activeLockReason = activeLockReason
                        self.assignee = assignee
                        self.assignees = assignees
                        self.authorAssociation = authorAssociation
                        self.body = body
                        self.closedAt = closedAt
                        self.comments = comments
                        self.commentsUrl = commentsUrl
                        self.createdAt = createdAt
                        self.eventsUrl = eventsUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.labels = labels
                        self.labelsUrl = labelsUrl
                        self.locked = locked
                        self.milestone = milestone
                        self.nodeId = nodeId
                        self.number = number
                        self.performedViaGithubApp = performedViaGithubApp
                        self.reactions = reactions
                        self.repositoryUrl = repositoryUrl
                        self.state = state
                        self.timelineUrl = timelineUrl
                        self.title = title
                        self.updatedAt = updatedAt
                        self.url = url
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case activeLockReason = "active_lock_reason"
                        case assignee
                        case assignees
                        case authorAssociation = "author_association"
                        case body
                        case closedAt = "closed_at"
                        case comments
                        case commentsUrl = "comments_url"
                        case createdAt = "created_at"
                        case eventsUrl = "events_url"
                        case htmlUrl = "html_url"
                        case id
                        case labels
                        case labelsUrl = "labels_url"
                        case locked
                        case milestone
                        case nodeId = "node_id"
                        case number
                        case performedViaGithubApp = "performed_via_github_app"
                        case reactions
                        case repositoryUrl = "repository_url"
                        case state
                        case timelineUrl = "timeline_url"
                        case title
                        case updatedAt = "updated_at"
                        case url
                        case user
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue/value2`.
                public var value2: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value2Payload
                /// Creates a new `IssuePayload`.
                ///
                /// - Parameters:
                ///   - value1: The [issue](https://docs.github.com/en/rest/reference/issues) itself.
                ///   - value2:
                public init(
                    value1: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value1Payload,
                    value2: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// The [issue](https://docs.github.com/en/rest/reference/issues) the comment belongs to.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/issue`.
            public var issue: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload
            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-deleted/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Creates a new `WebhookIssueCommentDeleted`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - comment: The [comment](https://docs.github.com/en/rest/reference/issues#comments) itself.
            ///   - enterprise:
            ///   - installation:
            ///   - issue: The [issue](https://docs.github.com/en/rest/reference/issues) the comment belongs to.
            ///   - organization:
            ///   - repository:
            ///   - sender:
            public init(
                action: Components.Schemas.WebhookIssueCommentDeleted.ActionPayload,
                comment: Components.Schemas.WebhookIssueCommentDeleted.CommentPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                issue: Components.Schemas.WebhookIssueCommentDeleted.IssuePayload,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser
            ) {
                self.action = action
                self.comment = comment
                self.enterprise = enterprise
                self.installation = installation
                self.issue = issue
                self.organization = organization
                self.repository = repository
                self.sender = sender
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case comment
                case enterprise
                case installation
                case issue
                case organization
                case repository
                case sender
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited`.
        public struct WebhookIssueCommentEdited: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case edited = "edited"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/action`.
            public var action: Components.Schemas.WebhookIssueCommentEdited.ActionPayload
            /// The changes to the comment.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/changes`.
            public struct ChangesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/changes/body`.
                public struct BodyPayload: Codable, Hashable, Sendable {
                    /// The previous version of the body.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/changes/body/from`.
                    public var from: Swift.String
                    /// Creates a new `BodyPayload`.
                    ///
                    /// - Parameters:
                    ///   - from: The previous version of the body.
                    public init(from: Swift.String) {
                        self.from = from
                    }
                    public enum CodingKeys: String, CodingKey {
                        case from
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/changes/body`.
                public var body: Components.Schemas.WebhookIssueCommentEdited.ChangesPayload.BodyPayload?
                /// Creates a new `ChangesPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: Components.Schemas.WebhookIssueCommentEdited.ChangesPayload.BodyPayload? = nil) {
                    self.body = body
                }
                public enum CodingKeys: String, CodingKey {
                    case body
                }
            }
            /// The changes to the comment.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/changes`.
            public var changes: Components.Schemas.WebhookIssueCommentEdited.ChangesPayload
            /// The [comment](https://docs.github.com/en/rest/reference/issues#comments) itself.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment`.
            public struct CommentPayload: Codable, Hashable, Sendable {
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/author_association`.
                @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case collaborator = "COLLABORATOR"
                    case contributor = "CONTRIBUTOR"
                    case firstTimer = "FIRST_TIMER"
                    case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                    case mannequin = "MANNEQUIN"
                    case member = "MEMBER"
                    case none = "NONE"
                    case owner = "OWNER"
                }
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/author_association`.
                public var authorAssociation: Components.Schemas.WebhookIssueCommentEdited.CommentPayload.AuthorAssociationPayload
                /// Contents of the issue comment
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/body`.
                public var body: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/created_at`.
                public var createdAt: Foundation.Date
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/html_url`.
                public var htmlUrl: Swift.String
                /// Unique identifier of the issue comment
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/issue_url`.
                public var issueUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/performed_via_github_app`.
                public var performedViaGithubApp: Components.Schemas.NullableIntegration?
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/reactions`.
                public struct ReactionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/reactions/+1`.
                    public var _plus_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/reactions/-1`.
                    public var _hyphen_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/reactions/confused`.
                    public var confused: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/reactions/eyes`.
                    public var eyes: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/reactions/heart`.
                    public var heart: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/reactions/hooray`.
                    public var hooray: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/reactions/laugh`.
                    public var laugh: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/reactions/rocket`.
                    public var rocket: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/reactions/total_count`.
                    public var totalCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/reactions/url`.
                    public var url: Swift.String
                    /// Creates a new `ReactionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - _plus_1:
                    ///   - _hyphen_1:
                    ///   - confused:
                    ///   - eyes:
                    ///   - heart:
                    ///   - hooray:
                    ///   - laugh:
                    ///   - rocket:
                    ///   - totalCount:
                    ///   - url:
                    public init(
                        _plus_1: Swift.Int,
                        _hyphen_1: Swift.Int,
                        confused: Swift.Int,
                        eyes: Swift.Int,
                        heart: Swift.Int,
                        hooray: Swift.Int,
                        laugh: Swift.Int,
                        rocket: Swift.Int,
                        totalCount: Swift.Int,
                        url: Swift.String
                    ) {
                        self._plus_1 = _plus_1
                        self._hyphen_1 = _hyphen_1
                        self.confused = confused
                        self.eyes = eyes
                        self.heart = heart
                        self.hooray = hooray
                        self.laugh = laugh
                        self.rocket = rocket
                        self.totalCount = totalCount
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _plus_1 = "+1"
                        case _hyphen_1 = "-1"
                        case confused
                        case eyes
                        case heart
                        case hooray
                        case laugh
                        case rocket
                        case totalCount = "total_count"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/reactions`.
                public var reactions: Components.Schemas.WebhookIssueCommentEdited.CommentPayload.ReactionsPayload
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/updated_at`.
                public var updatedAt: Foundation.Date
                /// URL for the issue comment
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/user`.
                public struct UserPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/user/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/user/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/user/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/user/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/user/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/user/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/user/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/user/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/user/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/user/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/user/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/user/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/user/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/user/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/user/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/user/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/user/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/user/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/user/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/user/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                        case mannequin = "Mannequin"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/user/type`.
                    public var _type: Components.Schemas.WebhookIssueCommentEdited.CommentPayload.UserPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/user/url`.
                    public var url: Swift.String?
                    /// Creates a new `UserPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookIssueCommentEdited.CommentPayload.UserPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment/user`.
                public var user: Components.Schemas.WebhookIssueCommentEdited.CommentPayload.UserPayload?
                /// Creates a new `CommentPayload`.
                ///
                /// - Parameters:
                ///   - authorAssociation: How the author is associated with the repository.
                ///   - body: Contents of the issue comment
                ///   - createdAt:
                ///   - htmlUrl:
                ///   - id: Unique identifier of the issue comment
                ///   - issueUrl:
                ///   - nodeId:
                ///   - performedViaGithubApp:
                ///   - reactions:
                ///   - updatedAt:
                ///   - url: URL for the issue comment
                ///   - user:
                public init(
                    authorAssociation: Components.Schemas.WebhookIssueCommentEdited.CommentPayload.AuthorAssociationPayload,
                    body: Swift.String,
                    createdAt: Foundation.Date,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    issueUrl: Swift.String,
                    nodeId: Swift.String,
                    performedViaGithubApp: Components.Schemas.NullableIntegration? = nil,
                    reactions: Components.Schemas.WebhookIssueCommentEdited.CommentPayload.ReactionsPayload,
                    updatedAt: Foundation.Date,
                    url: Swift.String,
                    user: Components.Schemas.WebhookIssueCommentEdited.CommentPayload.UserPayload? = nil
                ) {
                    self.authorAssociation = authorAssociation
                    self.body = body
                    self.createdAt = createdAt
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.issueUrl = issueUrl
                    self.nodeId = nodeId
                    self.performedViaGithubApp = performedViaGithubApp
                    self.reactions = reactions
                    self.updatedAt = updatedAt
                    self.url = url
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case authorAssociation = "author_association"
                    case body
                    case createdAt = "created_at"
                    case htmlUrl = "html_url"
                    case id
                    case issueUrl = "issue_url"
                    case nodeId = "node_id"
                    case performedViaGithubApp = "performed_via_github_app"
                    case reactions
                    case updatedAt = "updated_at"
                    case url
                    case user
                }
            }
            /// The [comment](https://docs.github.com/en/rest/reference/issues#comments) itself.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/comment`.
            public var comment: Components.Schemas.WebhookIssueCommentEdited.CommentPayload
            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// The [issue](https://docs.github.com/en/rest/reference/issues) the comment belongs to.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue`.
            public struct IssuePayload: Codable, Hashable, Sendable {
                /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/active_lock_reason`.
                    @frozen public enum ActiveLockReasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case resolved = "resolved"
                        case offTopic = "off-topic"
                        case tooHeated = "too heated"
                        case spam = "spam"
                        case _empty_ = ""
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/active_lock_reason`.
                    public var activeLockReason: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.ActiveLockReasonPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/assignee`.
                    public struct AssigneePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/assignee/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/assignee/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/assignee/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/assignee/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/assignee/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/assignee/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/assignee/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/assignee/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/assignee/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/assignee/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/assignee/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/assignee/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/assignee/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/assignee/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/assignee/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/assignee/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/assignee/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/assignee/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/assignee/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/assignee/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                            case mannequin = "Mannequin"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/assignee/type`.
                        public var _type: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.AssigneePayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/assignee/url`.
                        public var url: Swift.String?
                        /// Creates a new `AssigneePayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.AssigneePayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/assignee`.
                    public var assignee: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.AssigneePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/AssigneesPayload`.
                    public struct AssigneesPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/AssigneesPayload/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/AssigneesPayload/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/AssigneesPayload/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/AssigneesPayload/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/AssigneesPayload/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/AssigneesPayload/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/AssigneesPayload/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/AssigneesPayload/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/AssigneesPayload/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/AssigneesPayload/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/AssigneesPayload/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/AssigneesPayload/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/AssigneesPayload/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/AssigneesPayload/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/AssigneesPayload/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/AssigneesPayload/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/AssigneesPayload/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/AssigneesPayload/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/AssigneesPayload/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/AssigneesPayload/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                            case mannequin = "Mannequin"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/AssigneesPayload/type`.
                        public var _type: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.AssigneesPayloadPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/AssigneesPayload/url`.
                        public var url: Swift.String?
                        /// Creates a new `AssigneesPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.AssigneesPayloadPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/assignees`.
                    public typealias AssigneesPayload = [Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.AssigneesPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/assignees`.
                    public var assignees: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.AssigneesPayload
                    /// How the author is associated with the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/author_association`.
                    @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case collaborator = "COLLABORATOR"
                        case contributor = "CONTRIBUTOR"
                        case firstTimer = "FIRST_TIMER"
                        case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                        case mannequin = "MANNEQUIN"
                        case member = "MEMBER"
                        case none = "NONE"
                        case owner = "OWNER"
                    }
                    /// How the author is associated with the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/author_association`.
                    public var authorAssociation: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.AuthorAssociationPayload
                    /// Contents of the issue
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/body`.
                    public var body: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/closed_at`.
                    public var closedAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/comments`.
                    public var comments: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/comments_url`.
                    public var commentsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/created_at`.
                    public var createdAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/draft`.
                    public var draft: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/events_url`.
                    public var eventsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/html_url`.
                    public var htmlUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/LabelsPayload`.
                    public struct LabelsPayloadPayload: Codable, Hashable, Sendable {
                        /// 6-character hex code, without the leading #, identifying the color
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/LabelsPayload/color`.
                        public var color: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/LabelsPayload/default`.
                        public var _default: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/LabelsPayload/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/LabelsPayload/id`.
                        public var id: Swift.Int
                        /// The name of the label.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/LabelsPayload/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/LabelsPayload/node_id`.
                        public var nodeId: Swift.String
                        /// URL for the label
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/LabelsPayload/url`.
                        public var url: Swift.String
                        /// Creates a new `LabelsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - color: 6-character hex code, without the leading #, identifying the color
                        ///   - _default:
                        ///   - description:
                        ///   - id:
                        ///   - name: The name of the label.
                        ///   - nodeId:
                        ///   - url: URL for the label
                        public init(
                            color: Swift.String,
                            _default: Swift.Bool,
                            description: Swift.String? = nil,
                            id: Swift.Int,
                            name: Swift.String,
                            nodeId: Swift.String,
                            url: Swift.String
                        ) {
                            self.color = color
                            self._default = _default
                            self.description = description
                            self.id = id
                            self.name = name
                            self.nodeId = nodeId
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case color
                            case _default = "default"
                            case description
                            case id
                            case name
                            case nodeId = "node_id"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/labels`.
                    public typealias LabelsPayload = [Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.LabelsPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/labels`.
                    public var labels: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.LabelsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/labels_url`.
                    public var labelsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/locked`.
                    public var locked: Swift.Bool?
                    /// A collection of related issues and pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone`.
                    public struct MilestonePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/closed_at`.
                        public var closedAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/closed_issues`.
                        public var closedIssues: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/created_at`.
                        public var createdAt: Foundation.Date
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/creator`.
                        public struct CreatorPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/creator/avatar_url`.
                            public var avatarUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/creator/deleted`.
                            public var deleted: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/creator/email`.
                            public var email: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/creator/events_url`.
                            public var eventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/creator/followers_url`.
                            public var followersUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/creator/following_url`.
                            public var followingUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/creator/gists_url`.
                            public var gistsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/creator/gravatar_id`.
                            public var gravatarId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/creator/html_url`.
                            public var htmlUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/creator/id`.
                            public var id: Swift.Int
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/creator/login`.
                            public var login: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/creator/name`.
                            public var name: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/creator/node_id`.
                            public var nodeId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/creator/organizations_url`.
                            public var organizationsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/creator/received_events_url`.
                            public var receivedEventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/creator/repos_url`.
                            public var reposUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/creator/site_admin`.
                            public var siteAdmin: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/creator/starred_url`.
                            public var starredUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/creator/subscriptions_url`.
                            public var subscriptionsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/creator/type`.
                            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case bot = "Bot"
                                case user = "User"
                                case organization = "Organization"
                                case mannequin = "Mannequin"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/creator/type`.
                            public var _type: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload._TypePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/creator/url`.
                            public var url: Swift.String?
                            /// Creates a new `CreatorPayload`.
                            ///
                            /// - Parameters:
                            ///   - avatarUrl:
                            ///   - deleted:
                            ///   - email:
                            ///   - eventsUrl:
                            ///   - followersUrl:
                            ///   - followingUrl:
                            ///   - gistsUrl:
                            ///   - gravatarId:
                            ///   - htmlUrl:
                            ///   - id:
                            ///   - login:
                            ///   - name:
                            ///   - nodeId:
                            ///   - organizationsUrl:
                            ///   - receivedEventsUrl:
                            ///   - reposUrl:
                            ///   - siteAdmin:
                            ///   - starredUrl:
                            ///   - subscriptionsUrl:
                            ///   - _type:
                            ///   - url:
                            public init(
                                avatarUrl: Swift.String? = nil,
                                deleted: Swift.Bool? = nil,
                                email: Swift.String? = nil,
                                eventsUrl: Swift.String? = nil,
                                followersUrl: Swift.String? = nil,
                                followingUrl: Swift.String? = nil,
                                gistsUrl: Swift.String? = nil,
                                gravatarId: Swift.String? = nil,
                                htmlUrl: Swift.String? = nil,
                                id: Swift.Int,
                                login: Swift.String,
                                name: Swift.String? = nil,
                                nodeId: Swift.String? = nil,
                                organizationsUrl: Swift.String? = nil,
                                receivedEventsUrl: Swift.String? = nil,
                                reposUrl: Swift.String? = nil,
                                siteAdmin: Swift.Bool? = nil,
                                starredUrl: Swift.String? = nil,
                                subscriptionsUrl: Swift.String? = nil,
                                _type: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload._TypePayload? = nil,
                                url: Swift.String? = nil
                            ) {
                                self.avatarUrl = avatarUrl
                                self.deleted = deleted
                                self.email = email
                                self.eventsUrl = eventsUrl
                                self.followersUrl = followersUrl
                                self.followingUrl = followingUrl
                                self.gistsUrl = gistsUrl
                                self.gravatarId = gravatarId
                                self.htmlUrl = htmlUrl
                                self.id = id
                                self.login = login
                                self.name = name
                                self.nodeId = nodeId
                                self.organizationsUrl = organizationsUrl
                                self.receivedEventsUrl = receivedEventsUrl
                                self.reposUrl = reposUrl
                                self.siteAdmin = siteAdmin
                                self.starredUrl = starredUrl
                                self.subscriptionsUrl = subscriptionsUrl
                                self._type = _type
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case avatarUrl = "avatar_url"
                                case deleted
                                case email
                                case eventsUrl = "events_url"
                                case followersUrl = "followers_url"
                                case followingUrl = "following_url"
                                case gistsUrl = "gists_url"
                                case gravatarId = "gravatar_id"
                                case htmlUrl = "html_url"
                                case id
                                case login
                                case name
                                case nodeId = "node_id"
                                case organizationsUrl = "organizations_url"
                                case receivedEventsUrl = "received_events_url"
                                case reposUrl = "repos_url"
                                case siteAdmin = "site_admin"
                                case starredUrl = "starred_url"
                                case subscriptionsUrl = "subscriptions_url"
                                case _type = "type"
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/creator`.
                        public var creator: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/due_on`.
                        public var dueOn: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/html_url`.
                        public var htmlUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/labels_url`.
                        public var labelsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/node_id`.
                        public var nodeId: Swift.String
                        /// The number of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/number`.
                        public var number: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/open_issues`.
                        public var openIssues: Swift.Int
                        /// The state of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/state`.
                        @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case open = "open"
                            case closed = "closed"
                        }
                        /// The state of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/state`.
                        public var state: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.MilestonePayload.StatePayload
                        /// The title of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/title`.
                        public var title: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/updated_at`.
                        public var updatedAt: Foundation.Date
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone/url`.
                        public var url: Swift.String
                        /// Creates a new `MilestonePayload`.
                        ///
                        /// - Parameters:
                        ///   - closedAt:
                        ///   - closedIssues:
                        ///   - createdAt:
                        ///   - creator:
                        ///   - description:
                        ///   - dueOn:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - labelsUrl:
                        ///   - nodeId:
                        ///   - number: The number of the milestone.
                        ///   - openIssues:
                        ///   - state: The state of the milestone.
                        ///   - title: The title of the milestone.
                        ///   - updatedAt:
                        ///   - url:
                        public init(
                            closedAt: Foundation.Date? = nil,
                            closedIssues: Swift.Int,
                            createdAt: Foundation.Date,
                            creator: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload? = nil,
                            description: Swift.String? = nil,
                            dueOn: Foundation.Date? = nil,
                            htmlUrl: Swift.String,
                            id: Swift.Int,
                            labelsUrl: Swift.String,
                            nodeId: Swift.String,
                            number: Swift.Int,
                            openIssues: Swift.Int,
                            state: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.MilestonePayload.StatePayload,
                            title: Swift.String,
                            updatedAt: Foundation.Date,
                            url: Swift.String
                        ) {
                            self.closedAt = closedAt
                            self.closedIssues = closedIssues
                            self.createdAt = createdAt
                            self.creator = creator
                            self.description = description
                            self.dueOn = dueOn
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.labelsUrl = labelsUrl
                            self.nodeId = nodeId
                            self.number = number
                            self.openIssues = openIssues
                            self.state = state
                            self.title = title
                            self.updatedAt = updatedAt
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case closedAt = "closed_at"
                            case closedIssues = "closed_issues"
                            case createdAt = "created_at"
                            case creator
                            case description
                            case dueOn = "due_on"
                            case htmlUrl = "html_url"
                            case id
                            case labelsUrl = "labels_url"
                            case nodeId = "node_id"
                            case number
                            case openIssues = "open_issues"
                            case state
                            case title
                            case updatedAt = "updated_at"
                            case url
                        }
                    }
                    /// A collection of related issues and pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/milestone`.
                    public var milestone: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.MilestonePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/number`.
                    public var number: Swift.Int
                    /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app`.
                    public struct PerformedViaGithubAppPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/created_at`.
                        public var createdAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/EventsPayload`.
                        @frozen public enum EventsPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case branchProtectionRule = "branch_protection_rule"
                            case checkRun = "check_run"
                            case checkSuite = "check_suite"
                            case codeScanningAlert = "code_scanning_alert"
                            case commitComment = "commit_comment"
                            case contentReference = "content_reference"
                            case create = "create"
                            case delete = "delete"
                            case deployment = "deployment"
                            case deploymentReview = "deployment_review"
                            case deploymentStatus = "deployment_status"
                            case deployKey = "deploy_key"
                            case discussion = "discussion"
                            case discussionComment = "discussion_comment"
                            case fork = "fork"
                            case gollum = "gollum"
                            case issues = "issues"
                            case issueComment = "issue_comment"
                            case label = "label"
                            case member = "member"
                            case membership = "membership"
                            case milestone = "milestone"
                            case organization = "organization"
                            case orgBlock = "org_block"
                            case pageBuild = "page_build"
                            case project = "project"
                            case projectCard = "project_card"
                            case projectColumn = "project_column"
                            case _public = "public"
                            case pullRequest = "pull_request"
                            case pullRequestReview = "pull_request_review"
                            case pullRequestReviewComment = "pull_request_review_comment"
                            case push = "push"
                            case registryPackage = "registry_package"
                            case release = "release"
                            case repository = "repository"
                            case repositoryDispatch = "repository_dispatch"
                            case secretScanningAlert = "secret_scanning_alert"
                            case star = "star"
                            case status = "status"
                            case team = "team"
                            case teamAdd = "team_add"
                            case watch = "watch"
                            case workflowDispatch = "workflow_dispatch"
                            case workflowRun = "workflow_run"
                            case reminder = "reminder"
                            case pullRequestReviewThread = "pull_request_review_thread"
                        }
                        /// The list of events for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/events`.
                        public typealias EventsPayload = [Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.EventsPayloadPayload]
                        /// The list of events for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/events`.
                        public var events: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.EventsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/external_url`.
                        public var externalUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/html_url`.
                        public var htmlUrl: Swift.String
                        /// Unique identifier of the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/id`.
                        public var id: Swift.Int?
                        /// The name of the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/node_id`.
                        public var nodeId: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/owner`.
                        public struct OwnerPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/owner/avatar_url`.
                            public var avatarUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/owner/deleted`.
                            public var deleted: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/owner/email`.
                            public var email: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/owner/events_url`.
                            public var eventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/owner/followers_url`.
                            public var followersUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/owner/following_url`.
                            public var followingUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/owner/gists_url`.
                            public var gistsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/owner/gravatar_id`.
                            public var gravatarId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/owner/html_url`.
                            public var htmlUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/owner/id`.
                            public var id: Swift.Int
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/owner/login`.
                            public var login: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/owner/name`.
                            public var name: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/owner/node_id`.
                            public var nodeId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/owner/organizations_url`.
                            public var organizationsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/owner/received_events_url`.
                            public var receivedEventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/owner/repos_url`.
                            public var reposUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/owner/site_admin`.
                            public var siteAdmin: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/owner/starred_url`.
                            public var starredUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/owner/subscriptions_url`.
                            public var subscriptionsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/owner/type`.
                            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case bot = "Bot"
                                case user = "User"
                                case organization = "Organization"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/owner/type`.
                            public var _type: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/owner/url`.
                            public var url: Swift.String?
                            /// Creates a new `OwnerPayload`.
                            ///
                            /// - Parameters:
                            ///   - avatarUrl:
                            ///   - deleted:
                            ///   - email:
                            ///   - eventsUrl:
                            ///   - followersUrl:
                            ///   - followingUrl:
                            ///   - gistsUrl:
                            ///   - gravatarId:
                            ///   - htmlUrl:
                            ///   - id:
                            ///   - login:
                            ///   - name:
                            ///   - nodeId:
                            ///   - organizationsUrl:
                            ///   - receivedEventsUrl:
                            ///   - reposUrl:
                            ///   - siteAdmin:
                            ///   - starredUrl:
                            ///   - subscriptionsUrl:
                            ///   - _type:
                            ///   - url:
                            public init(
                                avatarUrl: Swift.String? = nil,
                                deleted: Swift.Bool? = nil,
                                email: Swift.String? = nil,
                                eventsUrl: Swift.String? = nil,
                                followersUrl: Swift.String? = nil,
                                followingUrl: Swift.String? = nil,
                                gistsUrl: Swift.String? = nil,
                                gravatarId: Swift.String? = nil,
                                htmlUrl: Swift.String? = nil,
                                id: Swift.Int,
                                login: Swift.String,
                                name: Swift.String? = nil,
                                nodeId: Swift.String? = nil,
                                organizationsUrl: Swift.String? = nil,
                                receivedEventsUrl: Swift.String? = nil,
                                reposUrl: Swift.String? = nil,
                                siteAdmin: Swift.Bool? = nil,
                                starredUrl: Swift.String? = nil,
                                subscriptionsUrl: Swift.String? = nil,
                                _type: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload? = nil,
                                url: Swift.String? = nil
                            ) {
                                self.avatarUrl = avatarUrl
                                self.deleted = deleted
                                self.email = email
                                self.eventsUrl = eventsUrl
                                self.followersUrl = followersUrl
                                self.followingUrl = followingUrl
                                self.gistsUrl = gistsUrl
                                self.gravatarId = gravatarId
                                self.htmlUrl = htmlUrl
                                self.id = id
                                self.login = login
                                self.name = name
                                self.nodeId = nodeId
                                self.organizationsUrl = organizationsUrl
                                self.receivedEventsUrl = receivedEventsUrl
                                self.reposUrl = reposUrl
                                self.siteAdmin = siteAdmin
                                self.starredUrl = starredUrl
                                self.subscriptionsUrl = subscriptionsUrl
                                self._type = _type
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case avatarUrl = "avatar_url"
                                case deleted
                                case email
                                case eventsUrl = "events_url"
                                case followersUrl = "followers_url"
                                case followingUrl = "following_url"
                                case gistsUrl = "gists_url"
                                case gravatarId = "gravatar_id"
                                case htmlUrl = "html_url"
                                case id
                                case login
                                case name
                                case nodeId = "node_id"
                                case organizationsUrl = "organizations_url"
                                case receivedEventsUrl = "received_events_url"
                                case reposUrl = "repos_url"
                                case siteAdmin = "site_admin"
                                case starredUrl = "starred_url"
                                case subscriptionsUrl = "subscriptions_url"
                                case _type = "type"
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/owner`.
                        public var owner: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload?
                        /// The set of permissions for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions`.
                        public struct PermissionsPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/actions`.
                            @frozen public enum ActionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/actions`.
                            public var actions: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/administration`.
                            @frozen public enum AdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/administration`.
                            public var administration: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/checks`.
                            @frozen public enum ChecksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/checks`.
                            public var checks: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/content_references`.
                            @frozen public enum ContentReferencesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/content_references`.
                            public var contentReferences: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/contents`.
                            @frozen public enum ContentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/contents`.
                            public var contents: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/deployments`.
                            @frozen public enum DeploymentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/deployments`.
                            public var deployments: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/discussions`.
                            @frozen public enum DiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/discussions`.
                            public var discussions: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/emails`.
                            @frozen public enum EmailsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/emails`.
                            public var emails: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/environments`.
                            @frozen public enum EnvironmentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/environments`.
                            public var environments: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/issues`.
                            @frozen public enum IssuesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/issues`.
                            public var issues: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/keys`.
                            @frozen public enum KeysPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/keys`.
                            public var keys: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/members`.
                            @frozen public enum MembersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/members`.
                            public var members: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/metadata`.
                            @frozen public enum MetadataPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/metadata`.
                            public var metadata: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/organization_administration`.
                            @frozen public enum OrganizationAdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/organization_administration`.
                            public var organizationAdministration: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/organization_hooks`.
                            @frozen public enum OrganizationHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/organization_hooks`.
                            public var organizationHooks: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/organization_packages`.
                            @frozen public enum OrganizationPackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/organization_packages`.
                            public var organizationPackages: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/organization_plan`.
                            @frozen public enum OrganizationPlanPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/organization_plan`.
                            public var organizationPlan: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/organization_projects`.
                            @frozen public enum OrganizationProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                                case admin = "admin"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/organization_projects`.
                            public var organizationProjects: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/organization_secrets`.
                            @frozen public enum OrganizationSecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/organization_secrets`.
                            public var organizationSecrets: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/organization_self_hosted_runners`.
                            @frozen public enum OrganizationSelfHostedRunnersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/organization_self_hosted_runners`.
                            public var organizationSelfHostedRunners: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/organization_user_blocking`.
                            @frozen public enum OrganizationUserBlockingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/organization_user_blocking`.
                            public var organizationUserBlocking: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/packages`.
                            @frozen public enum PackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/packages`.
                            public var packages: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/pages`.
                            @frozen public enum PagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/pages`.
                            public var pages: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/pull_requests`.
                            @frozen public enum PullRequestsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/pull_requests`.
                            public var pullRequests: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/repository_hooks`.
                            @frozen public enum RepositoryHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/repository_hooks`.
                            public var repositoryHooks: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/repository_projects`.
                            @frozen public enum RepositoryProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/repository_projects`.
                            public var repositoryProjects: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/secret_scanning_alerts`.
                            @frozen public enum SecretScanningAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/secret_scanning_alerts`.
                            public var secretScanningAlerts: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/secrets`.
                            @frozen public enum SecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/secrets`.
                            public var secrets: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/security_events`.
                            @frozen public enum SecurityEventsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/security_events`.
                            public var securityEvents: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/security_scanning_alert`.
                            @frozen public enum SecurityScanningAlertPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/security_scanning_alert`.
                            public var securityScanningAlert: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/single_file`.
                            @frozen public enum SingleFilePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/single_file`.
                            public var singleFile: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/statuses`.
                            @frozen public enum StatusesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/statuses`.
                            public var statuses: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/team_discussions`.
                            @frozen public enum TeamDiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/team_discussions`.
                            public var teamDiscussions: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/vulnerability_alerts`.
                            @frozen public enum VulnerabilityAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/vulnerability_alerts`.
                            public var vulnerabilityAlerts: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/workflows`.
                            @frozen public enum WorkflowsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions/workflows`.
                            public var workflows: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload?
                            /// Creates a new `PermissionsPayload`.
                            ///
                            /// - Parameters:
                            ///   - actions:
                            ///   - administration:
                            ///   - checks:
                            ///   - contentReferences:
                            ///   - contents:
                            ///   - deployments:
                            ///   - discussions:
                            ///   - emails:
                            ///   - environments:
                            ///   - issues:
                            ///   - keys:
                            ///   - members:
                            ///   - metadata:
                            ///   - organizationAdministration:
                            ///   - organizationHooks:
                            ///   - organizationPackages:
                            ///   - organizationPlan:
                            ///   - organizationProjects:
                            ///   - organizationSecrets:
                            ///   - organizationSelfHostedRunners:
                            ///   - organizationUserBlocking:
                            ///   - packages:
                            ///   - pages:
                            ///   - pullRequests:
                            ///   - repositoryHooks:
                            ///   - repositoryProjects:
                            ///   - secretScanningAlerts:
                            ///   - secrets:
                            ///   - securityEvents:
                            ///   - securityScanningAlert:
                            ///   - singleFile:
                            ///   - statuses:
                            ///   - teamDiscussions:
                            ///   - vulnerabilityAlerts:
                            ///   - workflows:
                            public init(
                                actions: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload? = nil,
                                administration: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload? = nil,
                                checks: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload? = nil,
                                contentReferences: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload? = nil,
                                contents: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload? = nil,
                                deployments: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload? = nil,
                                discussions: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload? = nil,
                                emails: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload? = nil,
                                environments: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload? = nil,
                                issues: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload? = nil,
                                keys: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload? = nil,
                                members: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload? = nil,
                                metadata: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload? = nil,
                                organizationAdministration: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload? = nil,
                                organizationHooks: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload? = nil,
                                organizationPackages: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload? = nil,
                                organizationPlan: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload? = nil,
                                organizationProjects: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload? = nil,
                                organizationSecrets: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload? = nil,
                                organizationSelfHostedRunners: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload? = nil,
                                organizationUserBlocking: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload? = nil,
                                packages: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload? = nil,
                                pages: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload? = nil,
                                pullRequests: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload? = nil,
                                repositoryHooks: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload? = nil,
                                repositoryProjects: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload? = nil,
                                secretScanningAlerts: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload? = nil,
                                secrets: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload? = nil,
                                securityEvents: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload? = nil,
                                securityScanningAlert: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload? = nil,
                                singleFile: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload? = nil,
                                statuses: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload? = nil,
                                teamDiscussions: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload? = nil,
                                vulnerabilityAlerts: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload? = nil,
                                workflows: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload? = nil
                            ) {
                                self.actions = actions
                                self.administration = administration
                                self.checks = checks
                                self.contentReferences = contentReferences
                                self.contents = contents
                                self.deployments = deployments
                                self.discussions = discussions
                                self.emails = emails
                                self.environments = environments
                                self.issues = issues
                                self.keys = keys
                                self.members = members
                                self.metadata = metadata
                                self.organizationAdministration = organizationAdministration
                                self.organizationHooks = organizationHooks
                                self.organizationPackages = organizationPackages
                                self.organizationPlan = organizationPlan
                                self.organizationProjects = organizationProjects
                                self.organizationSecrets = organizationSecrets
                                self.organizationSelfHostedRunners = organizationSelfHostedRunners
                                self.organizationUserBlocking = organizationUserBlocking
                                self.packages = packages
                                self.pages = pages
                                self.pullRequests = pullRequests
                                self.repositoryHooks = repositoryHooks
                                self.repositoryProjects = repositoryProjects
                                self.secretScanningAlerts = secretScanningAlerts
                                self.secrets = secrets
                                self.securityEvents = securityEvents
                                self.securityScanningAlert = securityScanningAlert
                                self.singleFile = singleFile
                                self.statuses = statuses
                                self.teamDiscussions = teamDiscussions
                                self.vulnerabilityAlerts = vulnerabilityAlerts
                                self.workflows = workflows
                            }
                            public enum CodingKeys: String, CodingKey {
                                case actions
                                case administration
                                case checks
                                case contentReferences = "content_references"
                                case contents
                                case deployments
                                case discussions
                                case emails
                                case environments
                                case issues
                                case keys
                                case members
                                case metadata
                                case organizationAdministration = "organization_administration"
                                case organizationHooks = "organization_hooks"
                                case organizationPackages = "organization_packages"
                                case organizationPlan = "organization_plan"
                                case organizationProjects = "organization_projects"
                                case organizationSecrets = "organization_secrets"
                                case organizationSelfHostedRunners = "organization_self_hosted_runners"
                                case organizationUserBlocking = "organization_user_blocking"
                                case packages
                                case pages
                                case pullRequests = "pull_requests"
                                case repositoryHooks = "repository_hooks"
                                case repositoryProjects = "repository_projects"
                                case secretScanningAlerts = "secret_scanning_alerts"
                                case secrets
                                case securityEvents = "security_events"
                                case securityScanningAlert = "security_scanning_alert"
                                case singleFile = "single_file"
                                case statuses
                                case teamDiscussions = "team_discussions"
                                case vulnerabilityAlerts = "vulnerability_alerts"
                                case workflows
                            }
                        }
                        /// The set of permissions for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/permissions`.
                        public var permissions: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload?
                        /// The slug name of the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/slug`.
                        public var slug: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app/updated_at`.
                        public var updatedAt: Foundation.Date?
                        /// Creates a new `PerformedViaGithubAppPayload`.
                        ///
                        /// - Parameters:
                        ///   - createdAt:
                        ///   - description:
                        ///   - events: The list of events for the GitHub app
                        ///   - externalUrl:
                        ///   - htmlUrl:
                        ///   - id: Unique identifier of the GitHub app
                        ///   - name: The name of the GitHub app
                        ///   - nodeId:
                        ///   - owner:
                        ///   - permissions: The set of permissions for the GitHub app
                        ///   - slug: The slug name of the GitHub app
                        ///   - updatedAt:
                        public init(
                            createdAt: Foundation.Date? = nil,
                            description: Swift.String? = nil,
                            events: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.EventsPayload? = nil,
                            externalUrl: Swift.String? = nil,
                            htmlUrl: Swift.String,
                            id: Swift.Int? = nil,
                            name: Swift.String,
                            nodeId: Swift.String,
                            owner: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload? = nil,
                            permissions: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload? = nil,
                            slug: Swift.String? = nil,
                            updatedAt: Foundation.Date? = nil
                        ) {
                            self.createdAt = createdAt
                            self.description = description
                            self.events = events
                            self.externalUrl = externalUrl
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.name = name
                            self.nodeId = nodeId
                            self.owner = owner
                            self.permissions = permissions
                            self.slug = slug
                            self.updatedAt = updatedAt
                        }
                        public enum CodingKeys: String, CodingKey {
                            case createdAt = "created_at"
                            case description
                            case events
                            case externalUrl = "external_url"
                            case htmlUrl = "html_url"
                            case id
                            case name
                            case nodeId = "node_id"
                            case owner
                            case permissions
                            case slug
                            case updatedAt = "updated_at"
                        }
                    }
                    /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/performed_via_github_app`.
                    public var performedViaGithubApp: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/pull_request`.
                    public struct PullRequestPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/pull_request/diff_url`.
                        public var diffUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/pull_request/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/pull_request/merged_at`.
                        public var mergedAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/pull_request/patch_url`.
                        public var patchUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/pull_request/url`.
                        public var url: Swift.String?
                        /// Creates a new `PullRequestPayload`.
                        ///
                        /// - Parameters:
                        ///   - diffUrl:
                        ///   - htmlUrl:
                        ///   - mergedAt:
                        ///   - patchUrl:
                        ///   - url:
                        public init(
                            diffUrl: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            mergedAt: Foundation.Date? = nil,
                            patchUrl: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.diffUrl = diffUrl
                            self.htmlUrl = htmlUrl
                            self.mergedAt = mergedAt
                            self.patchUrl = patchUrl
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case diffUrl = "diff_url"
                            case htmlUrl = "html_url"
                            case mergedAt = "merged_at"
                            case patchUrl = "patch_url"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/pull_request`.
                    public var pullRequest: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PullRequestPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/reactions`.
                    public struct ReactionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/reactions/+1`.
                        public var _plus_1: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/reactions/-1`.
                        public var _hyphen_1: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/reactions/confused`.
                        public var confused: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/reactions/eyes`.
                        public var eyes: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/reactions/heart`.
                        public var heart: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/reactions/hooray`.
                        public var hooray: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/reactions/laugh`.
                        public var laugh: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/reactions/rocket`.
                        public var rocket: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/reactions/total_count`.
                        public var totalCount: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/reactions/url`.
                        public var url: Swift.String
                        /// Creates a new `ReactionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - _plus_1:
                        ///   - _hyphen_1:
                        ///   - confused:
                        ///   - eyes:
                        ///   - heart:
                        ///   - hooray:
                        ///   - laugh:
                        ///   - rocket:
                        ///   - totalCount:
                        ///   - url:
                        public init(
                            _plus_1: Swift.Int,
                            _hyphen_1: Swift.Int,
                            confused: Swift.Int,
                            eyes: Swift.Int,
                            heart: Swift.Int,
                            hooray: Swift.Int,
                            laugh: Swift.Int,
                            rocket: Swift.Int,
                            totalCount: Swift.Int,
                            url: Swift.String
                        ) {
                            self._plus_1 = _plus_1
                            self._hyphen_1 = _hyphen_1
                            self.confused = confused
                            self.eyes = eyes
                            self.heart = heart
                            self.hooray = hooray
                            self.laugh = laugh
                            self.rocket = rocket
                            self.totalCount = totalCount
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _plus_1 = "+1"
                            case _hyphen_1 = "-1"
                            case confused
                            case eyes
                            case heart
                            case hooray
                            case laugh
                            case rocket
                            case totalCount = "total_count"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/reactions`.
                    public var reactions: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.ReactionsPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/repository_url`.
                    public var repositoryUrl: Swift.String
                    /// State of the issue; either 'open' or 'closed'
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/state`.
                    @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case closed = "closed"
                    }
                    /// State of the issue; either 'open' or 'closed'
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/state`.
                    public var state: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.StatePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/state_reason`.
                    public var stateReason: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/timeline_url`.
                    public var timelineUrl: Swift.String?
                    /// Title of the issue
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/title`.
                    public var title: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/updated_at`.
                    public var updatedAt: Foundation.Date
                    /// URL for the issue
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/url`.
                    public var url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/user`.
                    public struct UserPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/user/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/user/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/user/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/user/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/user/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/user/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/user/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/user/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/user/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/user/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/user/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/user/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/user/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/user/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/user/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/user/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/user/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/user/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/user/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/user/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                            case mannequin = "Mannequin"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/user/type`.
                        public var _type: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.UserPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/user/url`.
                        public var url: Swift.String?
                        /// Creates a new `UserPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.UserPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1/user`.
                    public var user: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.UserPayload?
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - activeLockReason:
                    ///   - assignee:
                    ///   - assignees:
                    ///   - authorAssociation: How the author is associated with the repository.
                    ///   - body: Contents of the issue
                    ///   - closedAt:
                    ///   - comments:
                    ///   - commentsUrl:
                    ///   - createdAt:
                    ///   - draft:
                    ///   - eventsUrl:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - labels:
                    ///   - labelsUrl:
                    ///   - locked:
                    ///   - milestone: A collection of related issues and pull requests.
                    ///   - nodeId:
                    ///   - number:
                    ///   - performedViaGithubApp: GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                    ///   - pullRequest:
                    ///   - reactions:
                    ///   - repositoryUrl:
                    ///   - state: State of the issue; either 'open' or 'closed'
                    ///   - stateReason:
                    ///   - timelineUrl:
                    ///   - title: Title of the issue
                    ///   - updatedAt:
                    ///   - url: URL for the issue
                    ///   - user:
                    public init(
                        activeLockReason: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.ActiveLockReasonPayload? = nil,
                        assignee: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.AssigneePayload? = nil,
                        assignees: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.AssigneesPayload,
                        authorAssociation: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.AuthorAssociationPayload,
                        body: Swift.String? = nil,
                        closedAt: Foundation.Date? = nil,
                        comments: Swift.Int,
                        commentsUrl: Swift.String,
                        createdAt: Foundation.Date,
                        draft: Swift.Bool? = nil,
                        eventsUrl: Swift.String,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        labels: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.LabelsPayload? = nil,
                        labelsUrl: Swift.String,
                        locked: Swift.Bool? = nil,
                        milestone: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.MilestonePayload? = nil,
                        nodeId: Swift.String,
                        number: Swift.Int,
                        performedViaGithubApp: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PerformedViaGithubAppPayload? = nil,
                        pullRequest: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.PullRequestPayload? = nil,
                        reactions: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.ReactionsPayload,
                        repositoryUrl: Swift.String,
                        state: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.StatePayload? = nil,
                        stateReason: Swift.String? = nil,
                        timelineUrl: Swift.String? = nil,
                        title: Swift.String,
                        updatedAt: Foundation.Date,
                        url: Swift.String,
                        user: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload.UserPayload? = nil
                    ) {
                        self.activeLockReason = activeLockReason
                        self.assignee = assignee
                        self.assignees = assignees
                        self.authorAssociation = authorAssociation
                        self.body = body
                        self.closedAt = closedAt
                        self.comments = comments
                        self.commentsUrl = commentsUrl
                        self.createdAt = createdAt
                        self.draft = draft
                        self.eventsUrl = eventsUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.labels = labels
                        self.labelsUrl = labelsUrl
                        self.locked = locked
                        self.milestone = milestone
                        self.nodeId = nodeId
                        self.number = number
                        self.performedViaGithubApp = performedViaGithubApp
                        self.pullRequest = pullRequest
                        self.reactions = reactions
                        self.repositoryUrl = repositoryUrl
                        self.state = state
                        self.stateReason = stateReason
                        self.timelineUrl = timelineUrl
                        self.title = title
                        self.updatedAt = updatedAt
                        self.url = url
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case activeLockReason = "active_lock_reason"
                        case assignee
                        case assignees
                        case authorAssociation = "author_association"
                        case body
                        case closedAt = "closed_at"
                        case comments
                        case commentsUrl = "comments_url"
                        case createdAt = "created_at"
                        case draft
                        case eventsUrl = "events_url"
                        case htmlUrl = "html_url"
                        case id
                        case labels
                        case labelsUrl = "labels_url"
                        case locked
                        case milestone
                        case nodeId = "node_id"
                        case number
                        case performedViaGithubApp = "performed_via_github_app"
                        case pullRequest = "pull_request"
                        case reactions
                        case repositoryUrl = "repository_url"
                        case state
                        case stateReason = "state_reason"
                        case timelineUrl = "timeline_url"
                        case title
                        case updatedAt = "updated_at"
                        case url
                        case user
                    }
                }
                /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value1`.
                public var value1: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/active_lock_reason`.
                    public var activeLockReason: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/assignee`.
                    public struct AssigneePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/assignee/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/assignee/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/assignee/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/assignee/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/assignee/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/assignee/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/assignee/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/assignee/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/assignee/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/assignee/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/assignee/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/assignee/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/assignee/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/assignee/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/assignee/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/assignee/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/assignee/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/assignee/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/assignee/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/assignee/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                            case mannequin = "Mannequin"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/assignee/type`.
                        public var _type: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value2Payload.AssigneePayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/assignee/url`.
                        public var url: Swift.String?
                        /// Creates a new `AssigneePayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value2Payload.AssigneePayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/assignee`.
                    public var assignee: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value2Payload.AssigneePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/assignees`.
                    public var assignees: [OpenAPIRuntime.OpenAPIObjectContainer?]?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/author_association`.
                    public var authorAssociation: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/body`.
                    public var body: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/closed_at`.
                    public var closedAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/comments`.
                    public var comments: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/comments_url`.
                    public var commentsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/created_at`.
                    public var createdAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/id`.
                    public var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/LabelsPayload`.
                    public struct LabelsPayloadPayload: Codable, Hashable, Sendable {
                        /// 6-character hex code, without the leading #, identifying the color
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/LabelsPayload/color`.
                        public var color: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/LabelsPayload/default`.
                        public var _default: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/LabelsPayload/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/LabelsPayload/id`.
                        public var id: Swift.Int
                        /// The name of the label.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/LabelsPayload/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/LabelsPayload/node_id`.
                        public var nodeId: Swift.String
                        /// URL for the label
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/LabelsPayload/url`.
                        public var url: Swift.String
                        /// Creates a new `LabelsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - color: 6-character hex code, without the leading #, identifying the color
                        ///   - _default:
                        ///   - description:
                        ///   - id:
                        ///   - name: The name of the label.
                        ///   - nodeId:
                        ///   - url: URL for the label
                        public init(
                            color: Swift.String,
                            _default: Swift.Bool,
                            description: Swift.String? = nil,
                            id: Swift.Int,
                            name: Swift.String,
                            nodeId: Swift.String,
                            url: Swift.String
                        ) {
                            self.color = color
                            self._default = _default
                            self.description = description
                            self.id = id
                            self.name = name
                            self.nodeId = nodeId
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case color
                            case _default = "default"
                            case description
                            case id
                            case name
                            case nodeId = "node_id"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/labels`.
                    public typealias LabelsPayload = [Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value2Payload.LabelsPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/labels`.
                    public var labels: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value2Payload.LabelsPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/labels_url`.
                    public var labelsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/locked`.
                    public var locked: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/milestone`.
                    public var milestone: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/number`.
                    public var number: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/performed_via_github_app`.
                    public var performedViaGithubApp: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/reactions`.
                    public struct ReactionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/reactions/+1`.
                        public var _plus_1: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/reactions/-1`.
                        public var _hyphen_1: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/reactions/confused`.
                        public var confused: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/reactions/eyes`.
                        public var eyes: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/reactions/heart`.
                        public var heart: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/reactions/hooray`.
                        public var hooray: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/reactions/laugh`.
                        public var laugh: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/reactions/rocket`.
                        public var rocket: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/reactions/total_count`.
                        public var totalCount: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/reactions/url`.
                        public var url: Swift.String?
                        /// Creates a new `ReactionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - _plus_1:
                        ///   - _hyphen_1:
                        ///   - confused:
                        ///   - eyes:
                        ///   - heart:
                        ///   - hooray:
                        ///   - laugh:
                        ///   - rocket:
                        ///   - totalCount:
                        ///   - url:
                        public init(
                            _plus_1: Swift.Int? = nil,
                            _hyphen_1: Swift.Int? = nil,
                            confused: Swift.Int? = nil,
                            eyes: Swift.Int? = nil,
                            heart: Swift.Int? = nil,
                            hooray: Swift.Int? = nil,
                            laugh: Swift.Int? = nil,
                            rocket: Swift.Int? = nil,
                            totalCount: Swift.Int? = nil,
                            url: Swift.String? = nil
                        ) {
                            self._plus_1 = _plus_1
                            self._hyphen_1 = _hyphen_1
                            self.confused = confused
                            self.eyes = eyes
                            self.heart = heart
                            self.hooray = hooray
                            self.laugh = laugh
                            self.rocket = rocket
                            self.totalCount = totalCount
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _plus_1 = "+1"
                            case _hyphen_1 = "-1"
                            case confused
                            case eyes
                            case heart
                            case hooray
                            case laugh
                            case rocket
                            case totalCount = "total_count"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/reactions`.
                    public var reactions: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value2Payload.ReactionsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/repository_url`.
                    public var repositoryUrl: Swift.String?
                    /// State of the issue; either 'open' or 'closed'
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/state`.
                    @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case closed = "closed"
                    }
                    /// State of the issue; either 'open' or 'closed'
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/state`.
                    public var state: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value2Payload.StatePayload
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/timeline_url`.
                    public var timelineUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/title`.
                    public var title: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/updated_at`.
                    public var updatedAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/url`.
                    public var url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/user`.
                    public struct UserPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/user/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/user/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/user/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/user/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/user/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/user/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/user/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/user/id`.
                        public var id: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/user/login`.
                        public var login: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/user/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/user/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/user/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/user/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/user/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/user/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/user/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/user/type`.
                        public var _type: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/user/url`.
                        public var url: Swift.String?
                        /// Creates a new `UserPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int? = nil,
                            login: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2/user`.
                    public var user: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value2Payload.UserPayload?
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - activeLockReason:
                    ///   - assignee:
                    ///   - assignees:
                    ///   - authorAssociation:
                    ///   - body:
                    ///   - closedAt:
                    ///   - comments:
                    ///   - commentsUrl:
                    ///   - createdAt:
                    ///   - eventsUrl:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - labels:
                    ///   - labelsUrl:
                    ///   - locked:
                    ///   - milestone:
                    ///   - nodeId:
                    ///   - number:
                    ///   - performedViaGithubApp:
                    ///   - reactions:
                    ///   - repositoryUrl:
                    ///   - state: State of the issue; either 'open' or 'closed'
                    ///   - timelineUrl:
                    ///   - title:
                    ///   - updatedAt:
                    ///   - url:
                    ///   - user:
                    public init(
                        activeLockReason: Swift.String? = nil,
                        assignee: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value2Payload.AssigneePayload? = nil,
                        assignees: [OpenAPIRuntime.OpenAPIObjectContainer?]? = nil,
                        authorAssociation: Swift.String? = nil,
                        body: Swift.String? = nil,
                        closedAt: Swift.String? = nil,
                        comments: Swift.Int? = nil,
                        commentsUrl: Swift.String? = nil,
                        createdAt: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int? = nil,
                        labels: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value2Payload.LabelsPayload,
                        labelsUrl: Swift.String? = nil,
                        locked: Swift.Bool,
                        milestone: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                        nodeId: Swift.String? = nil,
                        number: Swift.Int? = nil,
                        performedViaGithubApp: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                        reactions: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value2Payload.ReactionsPayload? = nil,
                        repositoryUrl: Swift.String? = nil,
                        state: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value2Payload.StatePayload,
                        timelineUrl: Swift.String? = nil,
                        title: Swift.String? = nil,
                        updatedAt: Swift.String? = nil,
                        url: Swift.String? = nil,
                        user: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value2Payload.UserPayload? = nil
                    ) {
                        self.activeLockReason = activeLockReason
                        self.assignee = assignee
                        self.assignees = assignees
                        self.authorAssociation = authorAssociation
                        self.body = body
                        self.closedAt = closedAt
                        self.comments = comments
                        self.commentsUrl = commentsUrl
                        self.createdAt = createdAt
                        self.eventsUrl = eventsUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.labels = labels
                        self.labelsUrl = labelsUrl
                        self.locked = locked
                        self.milestone = milestone
                        self.nodeId = nodeId
                        self.number = number
                        self.performedViaGithubApp = performedViaGithubApp
                        self.reactions = reactions
                        self.repositoryUrl = repositoryUrl
                        self.state = state
                        self.timelineUrl = timelineUrl
                        self.title = title
                        self.updatedAt = updatedAt
                        self.url = url
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case activeLockReason = "active_lock_reason"
                        case assignee
                        case assignees
                        case authorAssociation = "author_association"
                        case body
                        case closedAt = "closed_at"
                        case comments
                        case commentsUrl = "comments_url"
                        case createdAt = "created_at"
                        case eventsUrl = "events_url"
                        case htmlUrl = "html_url"
                        case id
                        case labels
                        case labelsUrl = "labels_url"
                        case locked
                        case milestone
                        case nodeId = "node_id"
                        case number
                        case performedViaGithubApp = "performed_via_github_app"
                        case reactions
                        case repositoryUrl = "repository_url"
                        case state
                        case timelineUrl = "timeline_url"
                        case title
                        case updatedAt = "updated_at"
                        case url
                        case user
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue/value2`.
                public var value2: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value2Payload
                /// Creates a new `IssuePayload`.
                ///
                /// - Parameters:
                ///   - value1: The [issue](https://docs.github.com/en/rest/reference/issues) itself.
                ///   - value2:
                public init(
                    value1: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value1Payload,
                    value2: Components.Schemas.WebhookIssueCommentEdited.IssuePayload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// The [issue](https://docs.github.com/en/rest/reference/issues) the comment belongs to.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/issue`.
            public var issue: Components.Schemas.WebhookIssueCommentEdited.IssuePayload
            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-issue-comment-edited/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Creates a new `WebhookIssueCommentEdited`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - changes: The changes to the comment.
            ///   - comment: The [comment](https://docs.github.com/en/rest/reference/issues#comments) itself.
            ///   - enterprise:
            ///   - installation:
            ///   - issue: The [issue](https://docs.github.com/en/rest/reference/issues) the comment belongs to.
            ///   - organization:
            ///   - repository:
            ///   - sender:
            public init(
                action: Components.Schemas.WebhookIssueCommentEdited.ActionPayload,
                changes: Components.Schemas.WebhookIssueCommentEdited.ChangesPayload,
                comment: Components.Schemas.WebhookIssueCommentEdited.CommentPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                issue: Components.Schemas.WebhookIssueCommentEdited.IssuePayload,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser
            ) {
                self.action = action
                self.changes = changes
                self.comment = comment
                self.enterprise = enterprise
                self.installation = installation
                self.issue = issue
                self.organization = organization
                self.repository = repository
                self.sender = sender
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case changes
                case comment
                case enterprise
                case installation
                case issue
                case organization
                case repository
                case sender
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned`.
        public struct WebhookIssuesAssigned: Codable, Hashable, Sendable {
            /// The action that was performed.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case assigned = "assigned"
            }
            /// The action that was performed.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/action`.
            public var action: Components.Schemas.WebhookIssuesAssigned.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/assignee`.
            public struct AssigneePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/assignee/avatar_url`.
                public var avatarUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/assignee/deleted`.
                public var deleted: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/assignee/email`.
                public var email: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/assignee/events_url`.
                public var eventsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/assignee/followers_url`.
                public var followersUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/assignee/following_url`.
                public var followingUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/assignee/gists_url`.
                public var gistsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/assignee/gravatar_id`.
                public var gravatarId: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/assignee/html_url`.
                public var htmlUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/assignee/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/assignee/login`.
                public var login: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/assignee/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/assignee/node_id`.
                public var nodeId: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/assignee/organizations_url`.
                public var organizationsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/assignee/received_events_url`.
                public var receivedEventsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/assignee/repos_url`.
                public var reposUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/assignee/site_admin`.
                public var siteAdmin: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/assignee/starred_url`.
                public var starredUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/assignee/subscriptions_url`.
                public var subscriptionsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/assignee/type`.
                @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case bot = "Bot"
                    case user = "User"
                    case organization = "Organization"
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/assignee/type`.
                public var _type: Components.Schemas.WebhookIssuesAssigned.AssigneePayload._TypePayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/assignee/url`.
                public var url: Swift.String?
                /// Creates a new `AssigneePayload`.
                ///
                /// - Parameters:
                ///   - avatarUrl:
                ///   - deleted:
                ///   - email:
                ///   - eventsUrl:
                ///   - followersUrl:
                ///   - followingUrl:
                ///   - gistsUrl:
                ///   - gravatarId:
                ///   - htmlUrl:
                ///   - id:
                ///   - login:
                ///   - name:
                ///   - nodeId:
                ///   - organizationsUrl:
                ///   - receivedEventsUrl:
                ///   - reposUrl:
                ///   - siteAdmin:
                ///   - starredUrl:
                ///   - subscriptionsUrl:
                ///   - _type:
                ///   - url:
                public init(
                    avatarUrl: Swift.String? = nil,
                    deleted: Swift.Bool? = nil,
                    email: Swift.String? = nil,
                    eventsUrl: Swift.String? = nil,
                    followersUrl: Swift.String? = nil,
                    followingUrl: Swift.String? = nil,
                    gistsUrl: Swift.String? = nil,
                    gravatarId: Swift.String? = nil,
                    htmlUrl: Swift.String? = nil,
                    id: Swift.Int,
                    login: Swift.String,
                    name: Swift.String? = nil,
                    nodeId: Swift.String? = nil,
                    organizationsUrl: Swift.String? = nil,
                    receivedEventsUrl: Swift.String? = nil,
                    reposUrl: Swift.String? = nil,
                    siteAdmin: Swift.Bool? = nil,
                    starredUrl: Swift.String? = nil,
                    subscriptionsUrl: Swift.String? = nil,
                    _type: Components.Schemas.WebhookIssuesAssigned.AssigneePayload._TypePayload? = nil,
                    url: Swift.String? = nil
                ) {
                    self.avatarUrl = avatarUrl
                    self.deleted = deleted
                    self.email = email
                    self.eventsUrl = eventsUrl
                    self.followersUrl = followersUrl
                    self.followingUrl = followingUrl
                    self.gistsUrl = gistsUrl
                    self.gravatarId = gravatarId
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.login = login
                    self.name = name
                    self.nodeId = nodeId
                    self.organizationsUrl = organizationsUrl
                    self.receivedEventsUrl = receivedEventsUrl
                    self.reposUrl = reposUrl
                    self.siteAdmin = siteAdmin
                    self.starredUrl = starredUrl
                    self.subscriptionsUrl = subscriptionsUrl
                    self._type = _type
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case avatarUrl = "avatar_url"
                    case deleted
                    case email
                    case eventsUrl = "events_url"
                    case followersUrl = "followers_url"
                    case followingUrl = "following_url"
                    case gistsUrl = "gists_url"
                    case gravatarId = "gravatar_id"
                    case htmlUrl = "html_url"
                    case id
                    case login
                    case name
                    case nodeId = "node_id"
                    case organizationsUrl = "organizations_url"
                    case receivedEventsUrl = "received_events_url"
                    case reposUrl = "repos_url"
                    case siteAdmin = "site_admin"
                    case starredUrl = "starred_url"
                    case subscriptionsUrl = "subscriptions_url"
                    case _type = "type"
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/assignee`.
            public var assignee: Components.Schemas.WebhookIssuesAssigned.AssigneePayload?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue`.
            public struct IssuePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/active_lock_reason`.
                @frozen public enum ActiveLockReasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case resolved = "resolved"
                    case offTopic = "off-topic"
                    case tooHeated = "too heated"
                    case spam = "spam"
                    case _empty_ = ""
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/active_lock_reason`.
                public var activeLockReason: Components.Schemas.WebhookIssuesAssigned.IssuePayload.ActiveLockReasonPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/assignee`.
                public struct AssigneePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/assignee/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/assignee/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/assignee/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/assignee/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/assignee/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/assignee/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/assignee/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/assignee/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/assignee/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/assignee/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/assignee/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/assignee/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/assignee/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/assignee/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/assignee/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/assignee/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/assignee/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/assignee/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/assignee/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/assignee/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                        case mannequin = "Mannequin"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/assignee/type`.
                    public var _type: Components.Schemas.WebhookIssuesAssigned.IssuePayload.AssigneePayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/assignee/url`.
                    public var url: Swift.String?
                    /// Creates a new `AssigneePayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookIssuesAssigned.IssuePayload.AssigneePayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/assignee`.
                public var assignee: Components.Schemas.WebhookIssuesAssigned.IssuePayload.AssigneePayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/AssigneesPayload`.
                public struct AssigneesPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/AssigneesPayload/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/AssigneesPayload/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/AssigneesPayload/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/AssigneesPayload/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/AssigneesPayload/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/AssigneesPayload/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/AssigneesPayload/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/AssigneesPayload/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/AssigneesPayload/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/AssigneesPayload/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/AssigneesPayload/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/AssigneesPayload/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/AssigneesPayload/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/AssigneesPayload/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/AssigneesPayload/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/AssigneesPayload/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/AssigneesPayload/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/AssigneesPayload/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/AssigneesPayload/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/AssigneesPayload/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                        case mannequin = "Mannequin"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/AssigneesPayload/type`.
                    public var _type: Components.Schemas.WebhookIssuesAssigned.IssuePayload.AssigneesPayloadPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/AssigneesPayload/url`.
                    public var url: Swift.String?
                    /// Creates a new `AssigneesPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookIssuesAssigned.IssuePayload.AssigneesPayloadPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/assignees`.
                public typealias AssigneesPayload = [Components.Schemas.WebhookIssuesAssigned.IssuePayload.AssigneesPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/assignees`.
                public var assignees: Components.Schemas.WebhookIssuesAssigned.IssuePayload.AssigneesPayload
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/author_association`.
                @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case collaborator = "COLLABORATOR"
                    case contributor = "CONTRIBUTOR"
                    case firstTimer = "FIRST_TIMER"
                    case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                    case mannequin = "MANNEQUIN"
                    case member = "MEMBER"
                    case none = "NONE"
                    case owner = "OWNER"
                }
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/author_association`.
                public var authorAssociation: Components.Schemas.WebhookIssuesAssigned.IssuePayload.AuthorAssociationPayload
                /// Contents of the issue
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/body`.
                public var body: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/closed_at`.
                public var closedAt: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/comments`.
                public var comments: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/comments_url`.
                public var commentsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/created_at`.
                public var createdAt: Foundation.Date
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/draft`.
                public var draft: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/events_url`.
                public var eventsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/html_url`.
                public var htmlUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/LabelsPayload`.
                public struct LabelsPayloadPayload: Codable, Hashable, Sendable {
                    /// 6-character hex code, without the leading #, identifying the color
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/LabelsPayload/color`.
                    public var color: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/LabelsPayload/default`.
                    public var _default: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/LabelsPayload/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/LabelsPayload/id`.
                    public var id: Swift.Int
                    /// The name of the label.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/LabelsPayload/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/LabelsPayload/node_id`.
                    public var nodeId: Swift.String
                    /// URL for the label
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/LabelsPayload/url`.
                    public var url: Swift.String
                    /// Creates a new `LabelsPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - color: 6-character hex code, without the leading #, identifying the color
                    ///   - _default:
                    ///   - description:
                    ///   - id:
                    ///   - name: The name of the label.
                    ///   - nodeId:
                    ///   - url: URL for the label
                    public init(
                        color: Swift.String,
                        _default: Swift.Bool,
                        description: Swift.String? = nil,
                        id: Swift.Int,
                        name: Swift.String,
                        nodeId: Swift.String,
                        url: Swift.String
                    ) {
                        self.color = color
                        self._default = _default
                        self.description = description
                        self.id = id
                        self.name = name
                        self.nodeId = nodeId
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case color
                        case _default = "default"
                        case description
                        case id
                        case name
                        case nodeId = "node_id"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/labels`.
                public typealias LabelsPayload = [Components.Schemas.WebhookIssuesAssigned.IssuePayload.LabelsPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/labels`.
                public var labels: Components.Schemas.WebhookIssuesAssigned.IssuePayload.LabelsPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/labels_url`.
                public var labelsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/locked`.
                public var locked: Swift.Bool?
                /// A collection of related issues and pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone`.
                public struct MilestonePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/closed_at`.
                    public var closedAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/closed_issues`.
                    public var closedIssues: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/created_at`.
                    public var createdAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/creator`.
                    public struct CreatorPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/creator/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/creator/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/creator/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/creator/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/creator/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/creator/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/creator/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/creator/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/creator/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/creator/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/creator/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/creator/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/creator/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/creator/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/creator/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/creator/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/creator/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/creator/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/creator/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/creator/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                            case mannequin = "Mannequin"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/creator/type`.
                        public var _type: Components.Schemas.WebhookIssuesAssigned.IssuePayload.MilestonePayload.CreatorPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/creator/url`.
                        public var url: Swift.String?
                        /// Creates a new `CreatorPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesAssigned.IssuePayload.MilestonePayload.CreatorPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/creator`.
                    public var creator: Components.Schemas.WebhookIssuesAssigned.IssuePayload.MilestonePayload.CreatorPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/due_on`.
                    public var dueOn: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/html_url`.
                    public var htmlUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/labels_url`.
                    public var labelsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/node_id`.
                    public var nodeId: Swift.String
                    /// The number of the milestone.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/number`.
                    public var number: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/open_issues`.
                    public var openIssues: Swift.Int
                    /// The state of the milestone.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/state`.
                    @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case closed = "closed"
                    }
                    /// The state of the milestone.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/state`.
                    public var state: Components.Schemas.WebhookIssuesAssigned.IssuePayload.MilestonePayload.StatePayload
                    /// The title of the milestone.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/title`.
                    public var title: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/updated_at`.
                    public var updatedAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone/url`.
                    public var url: Swift.String
                    /// Creates a new `MilestonePayload`.
                    ///
                    /// - Parameters:
                    ///   - closedAt:
                    ///   - closedIssues:
                    ///   - createdAt:
                    ///   - creator:
                    ///   - description:
                    ///   - dueOn:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - labelsUrl:
                    ///   - nodeId:
                    ///   - number: The number of the milestone.
                    ///   - openIssues:
                    ///   - state: The state of the milestone.
                    ///   - title: The title of the milestone.
                    ///   - updatedAt:
                    ///   - url:
                    public init(
                        closedAt: Foundation.Date? = nil,
                        closedIssues: Swift.Int,
                        createdAt: Foundation.Date,
                        creator: Components.Schemas.WebhookIssuesAssigned.IssuePayload.MilestonePayload.CreatorPayload? = nil,
                        description: Swift.String? = nil,
                        dueOn: Foundation.Date? = nil,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        labelsUrl: Swift.String,
                        nodeId: Swift.String,
                        number: Swift.Int,
                        openIssues: Swift.Int,
                        state: Components.Schemas.WebhookIssuesAssigned.IssuePayload.MilestonePayload.StatePayload,
                        title: Swift.String,
                        updatedAt: Foundation.Date,
                        url: Swift.String
                    ) {
                        self.closedAt = closedAt
                        self.closedIssues = closedIssues
                        self.createdAt = createdAt
                        self.creator = creator
                        self.description = description
                        self.dueOn = dueOn
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.labelsUrl = labelsUrl
                        self.nodeId = nodeId
                        self.number = number
                        self.openIssues = openIssues
                        self.state = state
                        self.title = title
                        self.updatedAt = updatedAt
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case closedAt = "closed_at"
                        case closedIssues = "closed_issues"
                        case createdAt = "created_at"
                        case creator
                        case description
                        case dueOn = "due_on"
                        case htmlUrl = "html_url"
                        case id
                        case labelsUrl = "labels_url"
                        case nodeId = "node_id"
                        case number
                        case openIssues = "open_issues"
                        case state
                        case title
                        case updatedAt = "updated_at"
                        case url
                    }
                }
                /// A collection of related issues and pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/milestone`.
                public var milestone: Components.Schemas.WebhookIssuesAssigned.IssuePayload.MilestonePayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/number`.
                public var number: Swift.Int
                /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app`.
                public struct PerformedViaGithubAppPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/created_at`.
                    public var createdAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/EventsPayload`.
                    @frozen public enum EventsPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case branchProtectionRule = "branch_protection_rule"
                        case checkRun = "check_run"
                        case checkSuite = "check_suite"
                        case codeScanningAlert = "code_scanning_alert"
                        case commitComment = "commit_comment"
                        case contentReference = "content_reference"
                        case create = "create"
                        case delete = "delete"
                        case deployment = "deployment"
                        case deploymentReview = "deployment_review"
                        case deploymentStatus = "deployment_status"
                        case deployKey = "deploy_key"
                        case discussion = "discussion"
                        case discussionComment = "discussion_comment"
                        case fork = "fork"
                        case gollum = "gollum"
                        case issues = "issues"
                        case issueComment = "issue_comment"
                        case label = "label"
                        case member = "member"
                        case membership = "membership"
                        case milestone = "milestone"
                        case organization = "organization"
                        case orgBlock = "org_block"
                        case pageBuild = "page_build"
                        case project = "project"
                        case projectCard = "project_card"
                        case projectColumn = "project_column"
                        case _public = "public"
                        case pullRequest = "pull_request"
                        case pullRequestReview = "pull_request_review"
                        case pullRequestReviewComment = "pull_request_review_comment"
                        case push = "push"
                        case registryPackage = "registry_package"
                        case release = "release"
                        case repository = "repository"
                        case repositoryDispatch = "repository_dispatch"
                        case secretScanningAlert = "secret_scanning_alert"
                        case star = "star"
                        case status = "status"
                        case team = "team"
                        case teamAdd = "team_add"
                        case watch = "watch"
                        case workflowDispatch = "workflow_dispatch"
                        case workflowRun = "workflow_run"
                        case reminder = "reminder"
                        case pullRequestReviewThread = "pull_request_review_thread"
                    }
                    /// The list of events for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/events`.
                    public typealias EventsPayload = [Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.EventsPayloadPayload]
                    /// The list of events for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/events`.
                    public var events: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.EventsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/external_url`.
                    public var externalUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/html_url`.
                    public var htmlUrl: Swift.String
                    /// Unique identifier of the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/id`.
                    public var id: Swift.Int?
                    /// The name of the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/owner`.
                    public struct OwnerPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/owner/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/owner/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/owner/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/owner/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/owner/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/owner/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/owner/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/owner/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/owner/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/owner/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/owner/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/owner/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/owner/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/owner/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/owner/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/owner/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/owner/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/owner/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/owner/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/owner/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/owner/type`.
                        public var _type: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/owner/url`.
                        public var url: Swift.String?
                        /// Creates a new `OwnerPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/owner`.
                    public var owner: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.OwnerPayload?
                    /// The set of permissions for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions`.
                    public struct PermissionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/actions`.
                        @frozen public enum ActionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/actions`.
                        public var actions: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/administration`.
                        @frozen public enum AdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/administration`.
                        public var administration: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/checks`.
                        @frozen public enum ChecksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/checks`.
                        public var checks: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/content_references`.
                        @frozen public enum ContentReferencesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/content_references`.
                        public var contentReferences: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/contents`.
                        @frozen public enum ContentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/contents`.
                        public var contents: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/deployments`.
                        @frozen public enum DeploymentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/deployments`.
                        public var deployments: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/discussions`.
                        @frozen public enum DiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/discussions`.
                        public var discussions: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/emails`.
                        @frozen public enum EmailsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/emails`.
                        public var emails: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/environments`.
                        @frozen public enum EnvironmentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/environments`.
                        public var environments: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/issues`.
                        @frozen public enum IssuesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/issues`.
                        public var issues: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/keys`.
                        @frozen public enum KeysPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/keys`.
                        public var keys: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/members`.
                        @frozen public enum MembersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/members`.
                        public var members: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/metadata`.
                        @frozen public enum MetadataPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/metadata`.
                        public var metadata: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/organization_administration`.
                        @frozen public enum OrganizationAdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/organization_administration`.
                        public var organizationAdministration: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/organization_hooks`.
                        @frozen public enum OrganizationHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/organization_hooks`.
                        public var organizationHooks: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/organization_packages`.
                        @frozen public enum OrganizationPackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/organization_packages`.
                        public var organizationPackages: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/organization_plan`.
                        @frozen public enum OrganizationPlanPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/organization_plan`.
                        public var organizationPlan: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/organization_projects`.
                        @frozen public enum OrganizationProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                            case admin = "admin"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/organization_projects`.
                        public var organizationProjects: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/organization_secrets`.
                        @frozen public enum OrganizationSecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/organization_secrets`.
                        public var organizationSecrets: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/organization_self_hosted_runners`.
                        @frozen public enum OrganizationSelfHostedRunnersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/organization_self_hosted_runners`.
                        public var organizationSelfHostedRunners: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/organization_user_blocking`.
                        @frozen public enum OrganizationUserBlockingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/organization_user_blocking`.
                        public var organizationUserBlocking: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/packages`.
                        @frozen public enum PackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/packages`.
                        public var packages: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/pages`.
                        @frozen public enum PagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/pages`.
                        public var pages: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/pull_requests`.
                        @frozen public enum PullRequestsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/pull_requests`.
                        public var pullRequests: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/repository_hooks`.
                        @frozen public enum RepositoryHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/repository_hooks`.
                        public var repositoryHooks: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/repository_projects`.
                        @frozen public enum RepositoryProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/repository_projects`.
                        public var repositoryProjects: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/secret_scanning_alerts`.
                        @frozen public enum SecretScanningAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/secret_scanning_alerts`.
                        public var secretScanningAlerts: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/secrets`.
                        @frozen public enum SecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/secrets`.
                        public var secrets: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/security_events`.
                        @frozen public enum SecurityEventsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/security_events`.
                        public var securityEvents: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/security_scanning_alert`.
                        @frozen public enum SecurityScanningAlertPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/security_scanning_alert`.
                        public var securityScanningAlert: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/single_file`.
                        @frozen public enum SingleFilePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/single_file`.
                        public var singleFile: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/statuses`.
                        @frozen public enum StatusesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/statuses`.
                        public var statuses: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/team_discussions`.
                        @frozen public enum TeamDiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/team_discussions`.
                        public var teamDiscussions: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/vulnerability_alerts`.
                        @frozen public enum VulnerabilityAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/vulnerability_alerts`.
                        public var vulnerabilityAlerts: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/workflows`.
                        @frozen public enum WorkflowsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions/workflows`.
                        public var workflows: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload?
                        /// Creates a new `PermissionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - actions:
                        ///   - administration:
                        ///   - checks:
                        ///   - contentReferences:
                        ///   - contents:
                        ///   - deployments:
                        ///   - discussions:
                        ///   - emails:
                        ///   - environments:
                        ///   - issues:
                        ///   - keys:
                        ///   - members:
                        ///   - metadata:
                        ///   - organizationAdministration:
                        ///   - organizationHooks:
                        ///   - organizationPackages:
                        ///   - organizationPlan:
                        ///   - organizationProjects:
                        ///   - organizationSecrets:
                        ///   - organizationSelfHostedRunners:
                        ///   - organizationUserBlocking:
                        ///   - packages:
                        ///   - pages:
                        ///   - pullRequests:
                        ///   - repositoryHooks:
                        ///   - repositoryProjects:
                        ///   - secretScanningAlerts:
                        ///   - secrets:
                        ///   - securityEvents:
                        ///   - securityScanningAlert:
                        ///   - singleFile:
                        ///   - statuses:
                        ///   - teamDiscussions:
                        ///   - vulnerabilityAlerts:
                        ///   - workflows:
                        public init(
                            actions: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload? = nil,
                            administration: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload? = nil,
                            checks: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload? = nil,
                            contentReferences: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload? = nil,
                            contents: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload? = nil,
                            deployments: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload? = nil,
                            discussions: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload? = nil,
                            emails: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload? = nil,
                            environments: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload? = nil,
                            issues: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload? = nil,
                            keys: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload? = nil,
                            members: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload? = nil,
                            metadata: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload? = nil,
                            organizationAdministration: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload? = nil,
                            organizationHooks: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload? = nil,
                            organizationPackages: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload? = nil,
                            organizationPlan: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload? = nil,
                            organizationProjects: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload? = nil,
                            organizationSecrets: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload? = nil,
                            organizationSelfHostedRunners: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload? = nil,
                            organizationUserBlocking: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload? = nil,
                            packages: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload? = nil,
                            pages: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload? = nil,
                            pullRequests: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload? = nil,
                            repositoryHooks: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload? = nil,
                            repositoryProjects: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload? = nil,
                            secretScanningAlerts: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload? = nil,
                            secrets: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload? = nil,
                            securityEvents: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload? = nil,
                            securityScanningAlert: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload? = nil,
                            singleFile: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload? = nil,
                            statuses: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload? = nil,
                            teamDiscussions: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload? = nil,
                            vulnerabilityAlerts: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload? = nil,
                            workflows: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload? = nil
                        ) {
                            self.actions = actions
                            self.administration = administration
                            self.checks = checks
                            self.contentReferences = contentReferences
                            self.contents = contents
                            self.deployments = deployments
                            self.discussions = discussions
                            self.emails = emails
                            self.environments = environments
                            self.issues = issues
                            self.keys = keys
                            self.members = members
                            self.metadata = metadata
                            self.organizationAdministration = organizationAdministration
                            self.organizationHooks = organizationHooks
                            self.organizationPackages = organizationPackages
                            self.organizationPlan = organizationPlan
                            self.organizationProjects = organizationProjects
                            self.organizationSecrets = organizationSecrets
                            self.organizationSelfHostedRunners = organizationSelfHostedRunners
                            self.organizationUserBlocking = organizationUserBlocking
                            self.packages = packages
                            self.pages = pages
                            self.pullRequests = pullRequests
                            self.repositoryHooks = repositoryHooks
                            self.repositoryProjects = repositoryProjects
                            self.secretScanningAlerts = secretScanningAlerts
                            self.secrets = secrets
                            self.securityEvents = securityEvents
                            self.securityScanningAlert = securityScanningAlert
                            self.singleFile = singleFile
                            self.statuses = statuses
                            self.teamDiscussions = teamDiscussions
                            self.vulnerabilityAlerts = vulnerabilityAlerts
                            self.workflows = workflows
                        }
                        public enum CodingKeys: String, CodingKey {
                            case actions
                            case administration
                            case checks
                            case contentReferences = "content_references"
                            case contents
                            case deployments
                            case discussions
                            case emails
                            case environments
                            case issues
                            case keys
                            case members
                            case metadata
                            case organizationAdministration = "organization_administration"
                            case organizationHooks = "organization_hooks"
                            case organizationPackages = "organization_packages"
                            case organizationPlan = "organization_plan"
                            case organizationProjects = "organization_projects"
                            case organizationSecrets = "organization_secrets"
                            case organizationSelfHostedRunners = "organization_self_hosted_runners"
                            case organizationUserBlocking = "organization_user_blocking"
                            case packages
                            case pages
                            case pullRequests = "pull_requests"
                            case repositoryHooks = "repository_hooks"
                            case repositoryProjects = "repository_projects"
                            case secretScanningAlerts = "secret_scanning_alerts"
                            case secrets
                            case securityEvents = "security_events"
                            case securityScanningAlert = "security_scanning_alert"
                            case singleFile = "single_file"
                            case statuses
                            case teamDiscussions = "team_discussions"
                            case vulnerabilityAlerts = "vulnerability_alerts"
                            case workflows
                        }
                    }
                    /// The set of permissions for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/permissions`.
                    public var permissions: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload?
                    /// The slug name of the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/slug`.
                    public var slug: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app/updated_at`.
                    public var updatedAt: Foundation.Date?
                    /// Creates a new `PerformedViaGithubAppPayload`.
                    ///
                    /// - Parameters:
                    ///   - createdAt:
                    ///   - description:
                    ///   - events: The list of events for the GitHub app
                    ///   - externalUrl:
                    ///   - htmlUrl:
                    ///   - id: Unique identifier of the GitHub app
                    ///   - name: The name of the GitHub app
                    ///   - nodeId:
                    ///   - owner:
                    ///   - permissions: The set of permissions for the GitHub app
                    ///   - slug: The slug name of the GitHub app
                    ///   - updatedAt:
                    public init(
                        createdAt: Foundation.Date? = nil,
                        description: Swift.String? = nil,
                        events: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.EventsPayload? = nil,
                        externalUrl: Swift.String? = nil,
                        htmlUrl: Swift.String,
                        id: Swift.Int? = nil,
                        name: Swift.String,
                        nodeId: Swift.String,
                        owner: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.OwnerPayload? = nil,
                        permissions: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload? = nil,
                        slug: Swift.String? = nil,
                        updatedAt: Foundation.Date? = nil
                    ) {
                        self.createdAt = createdAt
                        self.description = description
                        self.events = events
                        self.externalUrl = externalUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.name = name
                        self.nodeId = nodeId
                        self.owner = owner
                        self.permissions = permissions
                        self.slug = slug
                        self.updatedAt = updatedAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case createdAt = "created_at"
                        case description
                        case events
                        case externalUrl = "external_url"
                        case htmlUrl = "html_url"
                        case id
                        case name
                        case nodeId = "node_id"
                        case owner
                        case permissions
                        case slug
                        case updatedAt = "updated_at"
                    }
                }
                /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/performed_via_github_app`.
                public var performedViaGithubApp: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/pull_request`.
                public struct PullRequestPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/pull_request/diff_url`.
                    public var diffUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/pull_request/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/pull_request/merged_at`.
                    public var mergedAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/pull_request/patch_url`.
                    public var patchUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/pull_request/url`.
                    public var url: Swift.String?
                    /// Creates a new `PullRequestPayload`.
                    ///
                    /// - Parameters:
                    ///   - diffUrl:
                    ///   - htmlUrl:
                    ///   - mergedAt:
                    ///   - patchUrl:
                    ///   - url:
                    public init(
                        diffUrl: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        mergedAt: Foundation.Date? = nil,
                        patchUrl: Swift.String? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.diffUrl = diffUrl
                        self.htmlUrl = htmlUrl
                        self.mergedAt = mergedAt
                        self.patchUrl = patchUrl
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case diffUrl = "diff_url"
                        case htmlUrl = "html_url"
                        case mergedAt = "merged_at"
                        case patchUrl = "patch_url"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/pull_request`.
                public var pullRequest: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PullRequestPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/reactions`.
                public struct ReactionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/reactions/+1`.
                    public var _plus_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/reactions/-1`.
                    public var _hyphen_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/reactions/confused`.
                    public var confused: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/reactions/eyes`.
                    public var eyes: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/reactions/heart`.
                    public var heart: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/reactions/hooray`.
                    public var hooray: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/reactions/laugh`.
                    public var laugh: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/reactions/rocket`.
                    public var rocket: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/reactions/total_count`.
                    public var totalCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/reactions/url`.
                    public var url: Swift.String
                    /// Creates a new `ReactionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - _plus_1:
                    ///   - _hyphen_1:
                    ///   - confused:
                    ///   - eyes:
                    ///   - heart:
                    ///   - hooray:
                    ///   - laugh:
                    ///   - rocket:
                    ///   - totalCount:
                    ///   - url:
                    public init(
                        _plus_1: Swift.Int,
                        _hyphen_1: Swift.Int,
                        confused: Swift.Int,
                        eyes: Swift.Int,
                        heart: Swift.Int,
                        hooray: Swift.Int,
                        laugh: Swift.Int,
                        rocket: Swift.Int,
                        totalCount: Swift.Int,
                        url: Swift.String
                    ) {
                        self._plus_1 = _plus_1
                        self._hyphen_1 = _hyphen_1
                        self.confused = confused
                        self.eyes = eyes
                        self.heart = heart
                        self.hooray = hooray
                        self.laugh = laugh
                        self.rocket = rocket
                        self.totalCount = totalCount
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _plus_1 = "+1"
                        case _hyphen_1 = "-1"
                        case confused
                        case eyes
                        case heart
                        case hooray
                        case laugh
                        case rocket
                        case totalCount = "total_count"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/reactions`.
                public var reactions: Components.Schemas.WebhookIssuesAssigned.IssuePayload.ReactionsPayload
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/repository_url`.
                public var repositoryUrl: Swift.String
                /// State of the issue; either 'open' or 'closed'
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/state`.
                @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case open = "open"
                    case closed = "closed"
                }
                /// State of the issue; either 'open' or 'closed'
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/state`.
                public var state: Components.Schemas.WebhookIssuesAssigned.IssuePayload.StatePayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/state_reason`.
                public var stateReason: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/timeline_url`.
                public var timelineUrl: Swift.String?
                /// Title of the issue
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/title`.
                public var title: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/updated_at`.
                public var updatedAt: Foundation.Date
                /// URL for the issue
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/user`.
                public struct UserPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/user/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/user/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/user/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/user/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/user/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/user/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/user/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/user/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/user/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/user/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/user/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/user/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/user/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/user/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/user/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/user/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/user/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/user/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/user/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/user/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                        case mannequin = "Mannequin"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/user/type`.
                    public var _type: Components.Schemas.WebhookIssuesAssigned.IssuePayload.UserPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/user/url`.
                    public var url: Swift.String?
                    /// Creates a new `UserPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookIssuesAssigned.IssuePayload.UserPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue/user`.
                public var user: Components.Schemas.WebhookIssuesAssigned.IssuePayload.UserPayload?
                /// Creates a new `IssuePayload`.
                ///
                /// - Parameters:
                ///   - activeLockReason:
                ///   - assignee:
                ///   - assignees:
                ///   - authorAssociation: How the author is associated with the repository.
                ///   - body: Contents of the issue
                ///   - closedAt:
                ///   - comments:
                ///   - commentsUrl:
                ///   - createdAt:
                ///   - draft:
                ///   - eventsUrl:
                ///   - htmlUrl:
                ///   - id:
                ///   - labels:
                ///   - labelsUrl:
                ///   - locked:
                ///   - milestone: A collection of related issues and pull requests.
                ///   - nodeId:
                ///   - number:
                ///   - performedViaGithubApp: GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                ///   - pullRequest:
                ///   - reactions:
                ///   - repositoryUrl:
                ///   - state: State of the issue; either 'open' or 'closed'
                ///   - stateReason:
                ///   - timelineUrl:
                ///   - title: Title of the issue
                ///   - updatedAt:
                ///   - url: URL for the issue
                ///   - user:
                public init(
                    activeLockReason: Components.Schemas.WebhookIssuesAssigned.IssuePayload.ActiveLockReasonPayload? = nil,
                    assignee: Components.Schemas.WebhookIssuesAssigned.IssuePayload.AssigneePayload? = nil,
                    assignees: Components.Schemas.WebhookIssuesAssigned.IssuePayload.AssigneesPayload,
                    authorAssociation: Components.Schemas.WebhookIssuesAssigned.IssuePayload.AuthorAssociationPayload,
                    body: Swift.String? = nil,
                    closedAt: Foundation.Date? = nil,
                    comments: Swift.Int,
                    commentsUrl: Swift.String,
                    createdAt: Foundation.Date,
                    draft: Swift.Bool? = nil,
                    eventsUrl: Swift.String,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    labels: Components.Schemas.WebhookIssuesAssigned.IssuePayload.LabelsPayload? = nil,
                    labelsUrl: Swift.String,
                    locked: Swift.Bool? = nil,
                    milestone: Components.Schemas.WebhookIssuesAssigned.IssuePayload.MilestonePayload? = nil,
                    nodeId: Swift.String,
                    number: Swift.Int,
                    performedViaGithubApp: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PerformedViaGithubAppPayload? = nil,
                    pullRequest: Components.Schemas.WebhookIssuesAssigned.IssuePayload.PullRequestPayload? = nil,
                    reactions: Components.Schemas.WebhookIssuesAssigned.IssuePayload.ReactionsPayload,
                    repositoryUrl: Swift.String,
                    state: Components.Schemas.WebhookIssuesAssigned.IssuePayload.StatePayload? = nil,
                    stateReason: Swift.String? = nil,
                    timelineUrl: Swift.String? = nil,
                    title: Swift.String,
                    updatedAt: Foundation.Date,
                    url: Swift.String,
                    user: Components.Schemas.WebhookIssuesAssigned.IssuePayload.UserPayload? = nil
                ) {
                    self.activeLockReason = activeLockReason
                    self.assignee = assignee
                    self.assignees = assignees
                    self.authorAssociation = authorAssociation
                    self.body = body
                    self.closedAt = closedAt
                    self.comments = comments
                    self.commentsUrl = commentsUrl
                    self.createdAt = createdAt
                    self.draft = draft
                    self.eventsUrl = eventsUrl
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.labels = labels
                    self.labelsUrl = labelsUrl
                    self.locked = locked
                    self.milestone = milestone
                    self.nodeId = nodeId
                    self.number = number
                    self.performedViaGithubApp = performedViaGithubApp
                    self.pullRequest = pullRequest
                    self.reactions = reactions
                    self.repositoryUrl = repositoryUrl
                    self.state = state
                    self.stateReason = stateReason
                    self.timelineUrl = timelineUrl
                    self.title = title
                    self.updatedAt = updatedAt
                    self.url = url
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case activeLockReason = "active_lock_reason"
                    case assignee
                    case assignees
                    case authorAssociation = "author_association"
                    case body
                    case closedAt = "closed_at"
                    case comments
                    case commentsUrl = "comments_url"
                    case createdAt = "created_at"
                    case draft
                    case eventsUrl = "events_url"
                    case htmlUrl = "html_url"
                    case id
                    case labels
                    case labelsUrl = "labels_url"
                    case locked
                    case milestone
                    case nodeId = "node_id"
                    case number
                    case performedViaGithubApp = "performed_via_github_app"
                    case pullRequest = "pull_request"
                    case reactions
                    case repositoryUrl = "repository_url"
                    case state
                    case stateReason = "state_reason"
                    case timelineUrl = "timeline_url"
                    case title
                    case updatedAt = "updated_at"
                    case url
                    case user
                }
            }
            /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/issue`.
            public var issue: Components.Schemas.WebhookIssuesAssigned.IssuePayload
            /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-issues-assigned/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Creates a new `WebhookIssuesAssigned`.
            ///
            /// - Parameters:
            ///   - action: The action that was performed.
            ///   - assignee:
            ///   - enterprise:
            ///   - installation:
            ///   - issue: The [issue](https://docs.github.com/en/rest/reference/issues) itself.
            ///   - organization:
            ///   - repository:
            ///   - sender:
            public init(
                action: Components.Schemas.WebhookIssuesAssigned.ActionPayload,
                assignee: Components.Schemas.WebhookIssuesAssigned.AssigneePayload? = nil,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                issue: Components.Schemas.WebhookIssuesAssigned.IssuePayload,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser
            ) {
                self.action = action
                self.assignee = assignee
                self.enterprise = enterprise
                self.installation = installation
                self.issue = issue
                self.organization = organization
                self.repository = repository
                self.sender = sender
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case assignee
                case enterprise
                case installation
                case issue
                case organization
                case repository
                case sender
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed`.
        public struct WebhookIssuesClosed: Codable, Hashable, Sendable {
            /// The action that was performed.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case closed = "closed"
            }
            /// The action that was performed.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/action`.
            public var action: Components.Schemas.WebhookIssuesClosed.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue`.
            public struct IssuePayload: Codable, Hashable, Sendable {
                /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/active_lock_reason`.
                    @frozen public enum ActiveLockReasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case resolved = "resolved"
                        case offTopic = "off-topic"
                        case tooHeated = "too heated"
                        case spam = "spam"
                        case _empty_ = ""
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/active_lock_reason`.
                    public var activeLockReason: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.ActiveLockReasonPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/assignee`.
                    public struct AssigneePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/assignee/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/assignee/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/assignee/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/assignee/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/assignee/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/assignee/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/assignee/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/assignee/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/assignee/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/assignee/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/assignee/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/assignee/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/assignee/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/assignee/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/assignee/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/assignee/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/assignee/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/assignee/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/assignee/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/assignee/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                            case mannequin = "Mannequin"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/assignee/type`.
                        public var _type: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.AssigneePayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/assignee/url`.
                        public var url: Swift.String?
                        /// Creates a new `AssigneePayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.AssigneePayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/assignee`.
                    public var assignee: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.AssigneePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/AssigneesPayload`.
                    public struct AssigneesPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/AssigneesPayload/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/AssigneesPayload/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/AssigneesPayload/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/AssigneesPayload/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/AssigneesPayload/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/AssigneesPayload/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/AssigneesPayload/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/AssigneesPayload/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/AssigneesPayload/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/AssigneesPayload/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/AssigneesPayload/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/AssigneesPayload/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/AssigneesPayload/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/AssigneesPayload/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/AssigneesPayload/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/AssigneesPayload/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/AssigneesPayload/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/AssigneesPayload/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/AssigneesPayload/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/AssigneesPayload/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                            case mannequin = "Mannequin"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/AssigneesPayload/type`.
                        public var _type: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.AssigneesPayloadPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/AssigneesPayload/url`.
                        public var url: Swift.String?
                        /// Creates a new `AssigneesPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.AssigneesPayloadPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/assignees`.
                    public typealias AssigneesPayload = [Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.AssigneesPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/assignees`.
                    public var assignees: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.AssigneesPayload
                    /// How the author is associated with the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/author_association`.
                    @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case collaborator = "COLLABORATOR"
                        case contributor = "CONTRIBUTOR"
                        case firstTimer = "FIRST_TIMER"
                        case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                        case mannequin = "MANNEQUIN"
                        case member = "MEMBER"
                        case none = "NONE"
                        case owner = "OWNER"
                    }
                    /// How the author is associated with the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/author_association`.
                    public var authorAssociation: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.AuthorAssociationPayload
                    /// Contents of the issue
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/body`.
                    public var body: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/closed_at`.
                    public var closedAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/comments`.
                    public var comments: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/comments_url`.
                    public var commentsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/created_at`.
                    public var createdAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/draft`.
                    public var draft: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/events_url`.
                    public var eventsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/html_url`.
                    public var htmlUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/LabelsPayload`.
                    public struct LabelsPayloadPayload: Codable, Hashable, Sendable {
                        /// 6-character hex code, without the leading #, identifying the color
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/LabelsPayload/color`.
                        public var color: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/LabelsPayload/default`.
                        public var _default: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/LabelsPayload/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/LabelsPayload/id`.
                        public var id: Swift.Int
                        /// The name of the label.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/LabelsPayload/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/LabelsPayload/node_id`.
                        public var nodeId: Swift.String
                        /// URL for the label
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/LabelsPayload/url`.
                        public var url: Swift.String
                        /// Creates a new `LabelsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - color: 6-character hex code, without the leading #, identifying the color
                        ///   - _default:
                        ///   - description:
                        ///   - id:
                        ///   - name: The name of the label.
                        ///   - nodeId:
                        ///   - url: URL for the label
                        public init(
                            color: Swift.String,
                            _default: Swift.Bool,
                            description: Swift.String? = nil,
                            id: Swift.Int,
                            name: Swift.String,
                            nodeId: Swift.String,
                            url: Swift.String
                        ) {
                            self.color = color
                            self._default = _default
                            self.description = description
                            self.id = id
                            self.name = name
                            self.nodeId = nodeId
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case color
                            case _default = "default"
                            case description
                            case id
                            case name
                            case nodeId = "node_id"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/labels`.
                    public typealias LabelsPayload = [Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.LabelsPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/labels`.
                    public var labels: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.LabelsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/labels_url`.
                    public var labelsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/locked`.
                    public var locked: Swift.Bool?
                    /// A collection of related issues and pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone`.
                    public struct MilestonePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/closed_at`.
                        public var closedAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/closed_issues`.
                        public var closedIssues: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/created_at`.
                        public var createdAt: Foundation.Date
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/creator`.
                        public struct CreatorPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/creator/avatar_url`.
                            public var avatarUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/creator/deleted`.
                            public var deleted: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/creator/email`.
                            public var email: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/creator/events_url`.
                            public var eventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/creator/followers_url`.
                            public var followersUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/creator/following_url`.
                            public var followingUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/creator/gists_url`.
                            public var gistsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/creator/gravatar_id`.
                            public var gravatarId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/creator/html_url`.
                            public var htmlUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/creator/id`.
                            public var id: Swift.Int
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/creator/login`.
                            public var login: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/creator/name`.
                            public var name: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/creator/node_id`.
                            public var nodeId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/creator/organizations_url`.
                            public var organizationsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/creator/received_events_url`.
                            public var receivedEventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/creator/repos_url`.
                            public var reposUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/creator/site_admin`.
                            public var siteAdmin: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/creator/starred_url`.
                            public var starredUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/creator/subscriptions_url`.
                            public var subscriptionsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/creator/type`.
                            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case bot = "Bot"
                                case user = "User"
                                case organization = "Organization"
                                case mannequin = "Mannequin"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/creator/type`.
                            public var _type: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload._TypePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/creator/url`.
                            public var url: Swift.String?
                            /// Creates a new `CreatorPayload`.
                            ///
                            /// - Parameters:
                            ///   - avatarUrl:
                            ///   - deleted:
                            ///   - email:
                            ///   - eventsUrl:
                            ///   - followersUrl:
                            ///   - followingUrl:
                            ///   - gistsUrl:
                            ///   - gravatarId:
                            ///   - htmlUrl:
                            ///   - id:
                            ///   - login:
                            ///   - name:
                            ///   - nodeId:
                            ///   - organizationsUrl:
                            ///   - receivedEventsUrl:
                            ///   - reposUrl:
                            ///   - siteAdmin:
                            ///   - starredUrl:
                            ///   - subscriptionsUrl:
                            ///   - _type:
                            ///   - url:
                            public init(
                                avatarUrl: Swift.String? = nil,
                                deleted: Swift.Bool? = nil,
                                email: Swift.String? = nil,
                                eventsUrl: Swift.String? = nil,
                                followersUrl: Swift.String? = nil,
                                followingUrl: Swift.String? = nil,
                                gistsUrl: Swift.String? = nil,
                                gravatarId: Swift.String? = nil,
                                htmlUrl: Swift.String? = nil,
                                id: Swift.Int,
                                login: Swift.String,
                                name: Swift.String? = nil,
                                nodeId: Swift.String? = nil,
                                organizationsUrl: Swift.String? = nil,
                                receivedEventsUrl: Swift.String? = nil,
                                reposUrl: Swift.String? = nil,
                                siteAdmin: Swift.Bool? = nil,
                                starredUrl: Swift.String? = nil,
                                subscriptionsUrl: Swift.String? = nil,
                                _type: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload._TypePayload? = nil,
                                url: Swift.String? = nil
                            ) {
                                self.avatarUrl = avatarUrl
                                self.deleted = deleted
                                self.email = email
                                self.eventsUrl = eventsUrl
                                self.followersUrl = followersUrl
                                self.followingUrl = followingUrl
                                self.gistsUrl = gistsUrl
                                self.gravatarId = gravatarId
                                self.htmlUrl = htmlUrl
                                self.id = id
                                self.login = login
                                self.name = name
                                self.nodeId = nodeId
                                self.organizationsUrl = organizationsUrl
                                self.receivedEventsUrl = receivedEventsUrl
                                self.reposUrl = reposUrl
                                self.siteAdmin = siteAdmin
                                self.starredUrl = starredUrl
                                self.subscriptionsUrl = subscriptionsUrl
                                self._type = _type
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case avatarUrl = "avatar_url"
                                case deleted
                                case email
                                case eventsUrl = "events_url"
                                case followersUrl = "followers_url"
                                case followingUrl = "following_url"
                                case gistsUrl = "gists_url"
                                case gravatarId = "gravatar_id"
                                case htmlUrl = "html_url"
                                case id
                                case login
                                case name
                                case nodeId = "node_id"
                                case organizationsUrl = "organizations_url"
                                case receivedEventsUrl = "received_events_url"
                                case reposUrl = "repos_url"
                                case siteAdmin = "site_admin"
                                case starredUrl = "starred_url"
                                case subscriptionsUrl = "subscriptions_url"
                                case _type = "type"
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/creator`.
                        public var creator: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/due_on`.
                        public var dueOn: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/html_url`.
                        public var htmlUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/labels_url`.
                        public var labelsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/node_id`.
                        public var nodeId: Swift.String
                        /// The number of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/number`.
                        public var number: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/open_issues`.
                        public var openIssues: Swift.Int
                        /// The state of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/state`.
                        @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case open = "open"
                            case closed = "closed"
                        }
                        /// The state of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/state`.
                        public var state: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.MilestonePayload.StatePayload
                        /// The title of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/title`.
                        public var title: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/updated_at`.
                        public var updatedAt: Foundation.Date
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone/url`.
                        public var url: Swift.String
                        /// Creates a new `MilestonePayload`.
                        ///
                        /// - Parameters:
                        ///   - closedAt:
                        ///   - closedIssues:
                        ///   - createdAt:
                        ///   - creator:
                        ///   - description:
                        ///   - dueOn:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - labelsUrl:
                        ///   - nodeId:
                        ///   - number: The number of the milestone.
                        ///   - openIssues:
                        ///   - state: The state of the milestone.
                        ///   - title: The title of the milestone.
                        ///   - updatedAt:
                        ///   - url:
                        public init(
                            closedAt: Foundation.Date? = nil,
                            closedIssues: Swift.Int,
                            createdAt: Foundation.Date,
                            creator: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload? = nil,
                            description: Swift.String? = nil,
                            dueOn: Foundation.Date? = nil,
                            htmlUrl: Swift.String,
                            id: Swift.Int,
                            labelsUrl: Swift.String,
                            nodeId: Swift.String,
                            number: Swift.Int,
                            openIssues: Swift.Int,
                            state: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.MilestonePayload.StatePayload,
                            title: Swift.String,
                            updatedAt: Foundation.Date,
                            url: Swift.String
                        ) {
                            self.closedAt = closedAt
                            self.closedIssues = closedIssues
                            self.createdAt = createdAt
                            self.creator = creator
                            self.description = description
                            self.dueOn = dueOn
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.labelsUrl = labelsUrl
                            self.nodeId = nodeId
                            self.number = number
                            self.openIssues = openIssues
                            self.state = state
                            self.title = title
                            self.updatedAt = updatedAt
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case closedAt = "closed_at"
                            case closedIssues = "closed_issues"
                            case createdAt = "created_at"
                            case creator
                            case description
                            case dueOn = "due_on"
                            case htmlUrl = "html_url"
                            case id
                            case labelsUrl = "labels_url"
                            case nodeId = "node_id"
                            case number
                            case openIssues = "open_issues"
                            case state
                            case title
                            case updatedAt = "updated_at"
                            case url
                        }
                    }
                    /// A collection of related issues and pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/milestone`.
                    public var milestone: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.MilestonePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/number`.
                    public var number: Swift.Int
                    /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app`.
                    public struct PerformedViaGithubAppPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/created_at`.
                        public var createdAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/EventsPayload`.
                        @frozen public enum EventsPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case branchProtectionRule = "branch_protection_rule"
                            case checkRun = "check_run"
                            case checkSuite = "check_suite"
                            case codeScanningAlert = "code_scanning_alert"
                            case commitComment = "commit_comment"
                            case contentReference = "content_reference"
                            case create = "create"
                            case delete = "delete"
                            case deployment = "deployment"
                            case deploymentReview = "deployment_review"
                            case deploymentStatus = "deployment_status"
                            case deployKey = "deploy_key"
                            case discussion = "discussion"
                            case discussionComment = "discussion_comment"
                            case fork = "fork"
                            case gollum = "gollum"
                            case issues = "issues"
                            case issueComment = "issue_comment"
                            case label = "label"
                            case member = "member"
                            case membership = "membership"
                            case milestone = "milestone"
                            case organization = "organization"
                            case orgBlock = "org_block"
                            case pageBuild = "page_build"
                            case project = "project"
                            case projectCard = "project_card"
                            case projectColumn = "project_column"
                            case _public = "public"
                            case pullRequest = "pull_request"
                            case pullRequestReview = "pull_request_review"
                            case pullRequestReviewComment = "pull_request_review_comment"
                            case push = "push"
                            case registryPackage = "registry_package"
                            case release = "release"
                            case repository = "repository"
                            case repositoryDispatch = "repository_dispatch"
                            case secretScanningAlert = "secret_scanning_alert"
                            case star = "star"
                            case status = "status"
                            case team = "team"
                            case teamAdd = "team_add"
                            case watch = "watch"
                            case workflowDispatch = "workflow_dispatch"
                            case workflowRun = "workflow_run"
                            case securityAndAnalysis = "security_and_analysis"
                            case reminder = "reminder"
                            case pullRequestReviewThread = "pull_request_review_thread"
                        }
                        /// The list of events for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/events`.
                        public typealias EventsPayload = [Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.EventsPayloadPayload]
                        /// The list of events for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/events`.
                        public var events: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.EventsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/external_url`.
                        public var externalUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/html_url`.
                        public var htmlUrl: Swift.String
                        /// Unique identifier of the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/id`.
                        public var id: Swift.Int?
                        /// The name of the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/node_id`.
                        public var nodeId: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/owner`.
                        public struct OwnerPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/owner/avatar_url`.
                            public var avatarUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/owner/deleted`.
                            public var deleted: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/owner/email`.
                            public var email: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/owner/events_url`.
                            public var eventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/owner/followers_url`.
                            public var followersUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/owner/following_url`.
                            public var followingUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/owner/gists_url`.
                            public var gistsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/owner/gravatar_id`.
                            public var gravatarId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/owner/html_url`.
                            public var htmlUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/owner/id`.
                            public var id: Swift.Int
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/owner/login`.
                            public var login: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/owner/name`.
                            public var name: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/owner/node_id`.
                            public var nodeId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/owner/organizations_url`.
                            public var organizationsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/owner/received_events_url`.
                            public var receivedEventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/owner/repos_url`.
                            public var reposUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/owner/site_admin`.
                            public var siteAdmin: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/owner/starred_url`.
                            public var starredUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/owner/subscriptions_url`.
                            public var subscriptionsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/owner/type`.
                            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case bot = "Bot"
                                case user = "User"
                                case organization = "Organization"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/owner/type`.
                            public var _type: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/owner/url`.
                            public var url: Swift.String?
                            /// Creates a new `OwnerPayload`.
                            ///
                            /// - Parameters:
                            ///   - avatarUrl:
                            ///   - deleted:
                            ///   - email:
                            ///   - eventsUrl:
                            ///   - followersUrl:
                            ///   - followingUrl:
                            ///   - gistsUrl:
                            ///   - gravatarId:
                            ///   - htmlUrl:
                            ///   - id:
                            ///   - login:
                            ///   - name:
                            ///   - nodeId:
                            ///   - organizationsUrl:
                            ///   - receivedEventsUrl:
                            ///   - reposUrl:
                            ///   - siteAdmin:
                            ///   - starredUrl:
                            ///   - subscriptionsUrl:
                            ///   - _type:
                            ///   - url:
                            public init(
                                avatarUrl: Swift.String? = nil,
                                deleted: Swift.Bool? = nil,
                                email: Swift.String? = nil,
                                eventsUrl: Swift.String? = nil,
                                followersUrl: Swift.String? = nil,
                                followingUrl: Swift.String? = nil,
                                gistsUrl: Swift.String? = nil,
                                gravatarId: Swift.String? = nil,
                                htmlUrl: Swift.String? = nil,
                                id: Swift.Int,
                                login: Swift.String,
                                name: Swift.String? = nil,
                                nodeId: Swift.String? = nil,
                                organizationsUrl: Swift.String? = nil,
                                receivedEventsUrl: Swift.String? = nil,
                                reposUrl: Swift.String? = nil,
                                siteAdmin: Swift.Bool? = nil,
                                starredUrl: Swift.String? = nil,
                                subscriptionsUrl: Swift.String? = nil,
                                _type: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload? = nil,
                                url: Swift.String? = nil
                            ) {
                                self.avatarUrl = avatarUrl
                                self.deleted = deleted
                                self.email = email
                                self.eventsUrl = eventsUrl
                                self.followersUrl = followersUrl
                                self.followingUrl = followingUrl
                                self.gistsUrl = gistsUrl
                                self.gravatarId = gravatarId
                                self.htmlUrl = htmlUrl
                                self.id = id
                                self.login = login
                                self.name = name
                                self.nodeId = nodeId
                                self.organizationsUrl = organizationsUrl
                                self.receivedEventsUrl = receivedEventsUrl
                                self.reposUrl = reposUrl
                                self.siteAdmin = siteAdmin
                                self.starredUrl = starredUrl
                                self.subscriptionsUrl = subscriptionsUrl
                                self._type = _type
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case avatarUrl = "avatar_url"
                                case deleted
                                case email
                                case eventsUrl = "events_url"
                                case followersUrl = "followers_url"
                                case followingUrl = "following_url"
                                case gistsUrl = "gists_url"
                                case gravatarId = "gravatar_id"
                                case htmlUrl = "html_url"
                                case id
                                case login
                                case name
                                case nodeId = "node_id"
                                case organizationsUrl = "organizations_url"
                                case receivedEventsUrl = "received_events_url"
                                case reposUrl = "repos_url"
                                case siteAdmin = "site_admin"
                                case starredUrl = "starred_url"
                                case subscriptionsUrl = "subscriptions_url"
                                case _type = "type"
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/owner`.
                        public var owner: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload?
                        /// The set of permissions for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions`.
                        public struct PermissionsPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/actions`.
                            @frozen public enum ActionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/actions`.
                            public var actions: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/administration`.
                            @frozen public enum AdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/administration`.
                            public var administration: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/checks`.
                            @frozen public enum ChecksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/checks`.
                            public var checks: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/content_references`.
                            @frozen public enum ContentReferencesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/content_references`.
                            public var contentReferences: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/contents`.
                            @frozen public enum ContentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/contents`.
                            public var contents: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/deployments`.
                            @frozen public enum DeploymentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/deployments`.
                            public var deployments: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/discussions`.
                            @frozen public enum DiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/discussions`.
                            public var discussions: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/emails`.
                            @frozen public enum EmailsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/emails`.
                            public var emails: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/environments`.
                            @frozen public enum EnvironmentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/environments`.
                            public var environments: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/issues`.
                            @frozen public enum IssuesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/issues`.
                            public var issues: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/keys`.
                            @frozen public enum KeysPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/keys`.
                            public var keys: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/members`.
                            @frozen public enum MembersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/members`.
                            public var members: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/metadata`.
                            @frozen public enum MetadataPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/metadata`.
                            public var metadata: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/organization_administration`.
                            @frozen public enum OrganizationAdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/organization_administration`.
                            public var organizationAdministration: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/organization_hooks`.
                            @frozen public enum OrganizationHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/organization_hooks`.
                            public var organizationHooks: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/organization_packages`.
                            @frozen public enum OrganizationPackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/organization_packages`.
                            public var organizationPackages: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/organization_plan`.
                            @frozen public enum OrganizationPlanPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/organization_plan`.
                            public var organizationPlan: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/organization_projects`.
                            @frozen public enum OrganizationProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                                case admin = "admin"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/organization_projects`.
                            public var organizationProjects: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/organization_secrets`.
                            @frozen public enum OrganizationSecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/organization_secrets`.
                            public var organizationSecrets: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/organization_self_hosted_runners`.
                            @frozen public enum OrganizationSelfHostedRunnersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/organization_self_hosted_runners`.
                            public var organizationSelfHostedRunners: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/organization_user_blocking`.
                            @frozen public enum OrganizationUserBlockingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/organization_user_blocking`.
                            public var organizationUserBlocking: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/packages`.
                            @frozen public enum PackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/packages`.
                            public var packages: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/pages`.
                            @frozen public enum PagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/pages`.
                            public var pages: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/pull_requests`.
                            @frozen public enum PullRequestsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/pull_requests`.
                            public var pullRequests: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/repository_hooks`.
                            @frozen public enum RepositoryHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/repository_hooks`.
                            public var repositoryHooks: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/repository_projects`.
                            @frozen public enum RepositoryProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/repository_projects`.
                            public var repositoryProjects: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/secret_scanning_alerts`.
                            @frozen public enum SecretScanningAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/secret_scanning_alerts`.
                            public var secretScanningAlerts: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/secrets`.
                            @frozen public enum SecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/secrets`.
                            public var secrets: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/security_events`.
                            @frozen public enum SecurityEventsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/security_events`.
                            public var securityEvents: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/security_scanning_alert`.
                            @frozen public enum SecurityScanningAlertPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/security_scanning_alert`.
                            public var securityScanningAlert: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/single_file`.
                            @frozen public enum SingleFilePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/single_file`.
                            public var singleFile: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/statuses`.
                            @frozen public enum StatusesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/statuses`.
                            public var statuses: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/team_discussions`.
                            @frozen public enum TeamDiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/team_discussions`.
                            public var teamDiscussions: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/vulnerability_alerts`.
                            @frozen public enum VulnerabilityAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/vulnerability_alerts`.
                            public var vulnerabilityAlerts: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/workflows`.
                            @frozen public enum WorkflowsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions/workflows`.
                            public var workflows: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload?
                            /// Creates a new `PermissionsPayload`.
                            ///
                            /// - Parameters:
                            ///   - actions:
                            ///   - administration:
                            ///   - checks:
                            ///   - contentReferences:
                            ///   - contents:
                            ///   - deployments:
                            ///   - discussions:
                            ///   - emails:
                            ///   - environments:
                            ///   - issues:
                            ///   - keys:
                            ///   - members:
                            ///   - metadata:
                            ///   - organizationAdministration:
                            ///   - organizationHooks:
                            ///   - organizationPackages:
                            ///   - organizationPlan:
                            ///   - organizationProjects:
                            ///   - organizationSecrets:
                            ///   - organizationSelfHostedRunners:
                            ///   - organizationUserBlocking:
                            ///   - packages:
                            ///   - pages:
                            ///   - pullRequests:
                            ///   - repositoryHooks:
                            ///   - repositoryProjects:
                            ///   - secretScanningAlerts:
                            ///   - secrets:
                            ///   - securityEvents:
                            ///   - securityScanningAlert:
                            ///   - singleFile:
                            ///   - statuses:
                            ///   - teamDiscussions:
                            ///   - vulnerabilityAlerts:
                            ///   - workflows:
                            public init(
                                actions: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload? = nil,
                                administration: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload? = nil,
                                checks: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload? = nil,
                                contentReferences: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload? = nil,
                                contents: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload? = nil,
                                deployments: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload? = nil,
                                discussions: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload? = nil,
                                emails: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload? = nil,
                                environments: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload? = nil,
                                issues: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload? = nil,
                                keys: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload? = nil,
                                members: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload? = nil,
                                metadata: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload? = nil,
                                organizationAdministration: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload? = nil,
                                organizationHooks: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload? = nil,
                                organizationPackages: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload? = nil,
                                organizationPlan: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload? = nil,
                                organizationProjects: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload? = nil,
                                organizationSecrets: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload? = nil,
                                organizationSelfHostedRunners: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload? = nil,
                                organizationUserBlocking: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload? = nil,
                                packages: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload? = nil,
                                pages: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload? = nil,
                                pullRequests: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload? = nil,
                                repositoryHooks: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload? = nil,
                                repositoryProjects: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload? = nil,
                                secretScanningAlerts: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload? = nil,
                                secrets: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload? = nil,
                                securityEvents: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload? = nil,
                                securityScanningAlert: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload? = nil,
                                singleFile: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload? = nil,
                                statuses: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload? = nil,
                                teamDiscussions: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload? = nil,
                                vulnerabilityAlerts: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload? = nil,
                                workflows: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload? = nil
                            ) {
                                self.actions = actions
                                self.administration = administration
                                self.checks = checks
                                self.contentReferences = contentReferences
                                self.contents = contents
                                self.deployments = deployments
                                self.discussions = discussions
                                self.emails = emails
                                self.environments = environments
                                self.issues = issues
                                self.keys = keys
                                self.members = members
                                self.metadata = metadata
                                self.organizationAdministration = organizationAdministration
                                self.organizationHooks = organizationHooks
                                self.organizationPackages = organizationPackages
                                self.organizationPlan = organizationPlan
                                self.organizationProjects = organizationProjects
                                self.organizationSecrets = organizationSecrets
                                self.organizationSelfHostedRunners = organizationSelfHostedRunners
                                self.organizationUserBlocking = organizationUserBlocking
                                self.packages = packages
                                self.pages = pages
                                self.pullRequests = pullRequests
                                self.repositoryHooks = repositoryHooks
                                self.repositoryProjects = repositoryProjects
                                self.secretScanningAlerts = secretScanningAlerts
                                self.secrets = secrets
                                self.securityEvents = securityEvents
                                self.securityScanningAlert = securityScanningAlert
                                self.singleFile = singleFile
                                self.statuses = statuses
                                self.teamDiscussions = teamDiscussions
                                self.vulnerabilityAlerts = vulnerabilityAlerts
                                self.workflows = workflows
                            }
                            public enum CodingKeys: String, CodingKey {
                                case actions
                                case administration
                                case checks
                                case contentReferences = "content_references"
                                case contents
                                case deployments
                                case discussions
                                case emails
                                case environments
                                case issues
                                case keys
                                case members
                                case metadata
                                case organizationAdministration = "organization_administration"
                                case organizationHooks = "organization_hooks"
                                case organizationPackages = "organization_packages"
                                case organizationPlan = "organization_plan"
                                case organizationProjects = "organization_projects"
                                case organizationSecrets = "organization_secrets"
                                case organizationSelfHostedRunners = "organization_self_hosted_runners"
                                case organizationUserBlocking = "organization_user_blocking"
                                case packages
                                case pages
                                case pullRequests = "pull_requests"
                                case repositoryHooks = "repository_hooks"
                                case repositoryProjects = "repository_projects"
                                case secretScanningAlerts = "secret_scanning_alerts"
                                case secrets
                                case securityEvents = "security_events"
                                case securityScanningAlert = "security_scanning_alert"
                                case singleFile = "single_file"
                                case statuses
                                case teamDiscussions = "team_discussions"
                                case vulnerabilityAlerts = "vulnerability_alerts"
                                case workflows
                            }
                        }
                        /// The set of permissions for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/permissions`.
                        public var permissions: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload?
                        /// The slug name of the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/slug`.
                        public var slug: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app/updated_at`.
                        public var updatedAt: Foundation.Date?
                        /// Creates a new `PerformedViaGithubAppPayload`.
                        ///
                        /// - Parameters:
                        ///   - createdAt:
                        ///   - description:
                        ///   - events: The list of events for the GitHub app
                        ///   - externalUrl:
                        ///   - htmlUrl:
                        ///   - id: Unique identifier of the GitHub app
                        ///   - name: The name of the GitHub app
                        ///   - nodeId:
                        ///   - owner:
                        ///   - permissions: The set of permissions for the GitHub app
                        ///   - slug: The slug name of the GitHub app
                        ///   - updatedAt:
                        public init(
                            createdAt: Foundation.Date? = nil,
                            description: Swift.String? = nil,
                            events: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.EventsPayload? = nil,
                            externalUrl: Swift.String? = nil,
                            htmlUrl: Swift.String,
                            id: Swift.Int? = nil,
                            name: Swift.String,
                            nodeId: Swift.String,
                            owner: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload? = nil,
                            permissions: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload? = nil,
                            slug: Swift.String? = nil,
                            updatedAt: Foundation.Date? = nil
                        ) {
                            self.createdAt = createdAt
                            self.description = description
                            self.events = events
                            self.externalUrl = externalUrl
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.name = name
                            self.nodeId = nodeId
                            self.owner = owner
                            self.permissions = permissions
                            self.slug = slug
                            self.updatedAt = updatedAt
                        }
                        public enum CodingKeys: String, CodingKey {
                            case createdAt = "created_at"
                            case description
                            case events
                            case externalUrl = "external_url"
                            case htmlUrl = "html_url"
                            case id
                            case name
                            case nodeId = "node_id"
                            case owner
                            case permissions
                            case slug
                            case updatedAt = "updated_at"
                        }
                    }
                    /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/performed_via_github_app`.
                    public var performedViaGithubApp: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/pull_request`.
                    public struct PullRequestPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/pull_request/diff_url`.
                        public var diffUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/pull_request/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/pull_request/merged_at`.
                        public var mergedAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/pull_request/patch_url`.
                        public var patchUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/pull_request/url`.
                        public var url: Swift.String?
                        /// Creates a new `PullRequestPayload`.
                        ///
                        /// - Parameters:
                        ///   - diffUrl:
                        ///   - htmlUrl:
                        ///   - mergedAt:
                        ///   - patchUrl:
                        ///   - url:
                        public init(
                            diffUrl: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            mergedAt: Foundation.Date? = nil,
                            patchUrl: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.diffUrl = diffUrl
                            self.htmlUrl = htmlUrl
                            self.mergedAt = mergedAt
                            self.patchUrl = patchUrl
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case diffUrl = "diff_url"
                            case htmlUrl = "html_url"
                            case mergedAt = "merged_at"
                            case patchUrl = "patch_url"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/pull_request`.
                    public var pullRequest: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PullRequestPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/reactions`.
                    public struct ReactionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/reactions/+1`.
                        public var _plus_1: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/reactions/-1`.
                        public var _hyphen_1: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/reactions/confused`.
                        public var confused: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/reactions/eyes`.
                        public var eyes: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/reactions/heart`.
                        public var heart: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/reactions/hooray`.
                        public var hooray: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/reactions/laugh`.
                        public var laugh: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/reactions/rocket`.
                        public var rocket: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/reactions/total_count`.
                        public var totalCount: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/reactions/url`.
                        public var url: Swift.String
                        /// Creates a new `ReactionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - _plus_1:
                        ///   - _hyphen_1:
                        ///   - confused:
                        ///   - eyes:
                        ///   - heart:
                        ///   - hooray:
                        ///   - laugh:
                        ///   - rocket:
                        ///   - totalCount:
                        ///   - url:
                        public init(
                            _plus_1: Swift.Int,
                            _hyphen_1: Swift.Int,
                            confused: Swift.Int,
                            eyes: Swift.Int,
                            heart: Swift.Int,
                            hooray: Swift.Int,
                            laugh: Swift.Int,
                            rocket: Swift.Int,
                            totalCount: Swift.Int,
                            url: Swift.String
                        ) {
                            self._plus_1 = _plus_1
                            self._hyphen_1 = _hyphen_1
                            self.confused = confused
                            self.eyes = eyes
                            self.heart = heart
                            self.hooray = hooray
                            self.laugh = laugh
                            self.rocket = rocket
                            self.totalCount = totalCount
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _plus_1 = "+1"
                            case _hyphen_1 = "-1"
                            case confused
                            case eyes
                            case heart
                            case hooray
                            case laugh
                            case rocket
                            case totalCount = "total_count"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/reactions`.
                    public var reactions: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.ReactionsPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/repository_url`.
                    public var repositoryUrl: Swift.String
                    /// State of the issue; either 'open' or 'closed'
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/state`.
                    @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case closed = "closed"
                    }
                    /// State of the issue; either 'open' or 'closed'
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/state`.
                    public var state: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.StatePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/state_reason`.
                    public var stateReason: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/timeline_url`.
                    public var timelineUrl: Swift.String?
                    /// Title of the issue
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/title`.
                    public var title: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/updated_at`.
                    public var updatedAt: Foundation.Date
                    /// URL for the issue
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/url`.
                    public var url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/user`.
                    public struct UserPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/user/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/user/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/user/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/user/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/user/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/user/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/user/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/user/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/user/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/user/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/user/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/user/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/user/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/user/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/user/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/user/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/user/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/user/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/user/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/user/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                            case mannequin = "Mannequin"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/user/type`.
                        public var _type: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.UserPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/user/url`.
                        public var url: Swift.String?
                        /// Creates a new `UserPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.UserPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1/user`.
                    public var user: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.UserPayload?
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - activeLockReason:
                    ///   - assignee:
                    ///   - assignees:
                    ///   - authorAssociation: How the author is associated with the repository.
                    ///   - body: Contents of the issue
                    ///   - closedAt:
                    ///   - comments:
                    ///   - commentsUrl:
                    ///   - createdAt:
                    ///   - draft:
                    ///   - eventsUrl:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - labels:
                    ///   - labelsUrl:
                    ///   - locked:
                    ///   - milestone: A collection of related issues and pull requests.
                    ///   - nodeId:
                    ///   - number:
                    ///   - performedViaGithubApp: GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                    ///   - pullRequest:
                    ///   - reactions:
                    ///   - repositoryUrl:
                    ///   - state: State of the issue; either 'open' or 'closed'
                    ///   - stateReason:
                    ///   - timelineUrl:
                    ///   - title: Title of the issue
                    ///   - updatedAt:
                    ///   - url: URL for the issue
                    ///   - user:
                    public init(
                        activeLockReason: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.ActiveLockReasonPayload? = nil,
                        assignee: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.AssigneePayload? = nil,
                        assignees: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.AssigneesPayload,
                        authorAssociation: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.AuthorAssociationPayload,
                        body: Swift.String? = nil,
                        closedAt: Foundation.Date? = nil,
                        comments: Swift.Int,
                        commentsUrl: Swift.String,
                        createdAt: Foundation.Date,
                        draft: Swift.Bool? = nil,
                        eventsUrl: Swift.String,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        labels: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.LabelsPayload? = nil,
                        labelsUrl: Swift.String,
                        locked: Swift.Bool? = nil,
                        milestone: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.MilestonePayload? = nil,
                        nodeId: Swift.String,
                        number: Swift.Int,
                        performedViaGithubApp: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PerformedViaGithubAppPayload? = nil,
                        pullRequest: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.PullRequestPayload? = nil,
                        reactions: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.ReactionsPayload,
                        repositoryUrl: Swift.String,
                        state: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.StatePayload? = nil,
                        stateReason: Swift.String? = nil,
                        timelineUrl: Swift.String? = nil,
                        title: Swift.String,
                        updatedAt: Foundation.Date,
                        url: Swift.String,
                        user: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload.UserPayload? = nil
                    ) {
                        self.activeLockReason = activeLockReason
                        self.assignee = assignee
                        self.assignees = assignees
                        self.authorAssociation = authorAssociation
                        self.body = body
                        self.closedAt = closedAt
                        self.comments = comments
                        self.commentsUrl = commentsUrl
                        self.createdAt = createdAt
                        self.draft = draft
                        self.eventsUrl = eventsUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.labels = labels
                        self.labelsUrl = labelsUrl
                        self.locked = locked
                        self.milestone = milestone
                        self.nodeId = nodeId
                        self.number = number
                        self.performedViaGithubApp = performedViaGithubApp
                        self.pullRequest = pullRequest
                        self.reactions = reactions
                        self.repositoryUrl = repositoryUrl
                        self.state = state
                        self.stateReason = stateReason
                        self.timelineUrl = timelineUrl
                        self.title = title
                        self.updatedAt = updatedAt
                        self.url = url
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case activeLockReason = "active_lock_reason"
                        case assignee
                        case assignees
                        case authorAssociation = "author_association"
                        case body
                        case closedAt = "closed_at"
                        case comments
                        case commentsUrl = "comments_url"
                        case createdAt = "created_at"
                        case draft
                        case eventsUrl = "events_url"
                        case htmlUrl = "html_url"
                        case id
                        case labels
                        case labelsUrl = "labels_url"
                        case locked
                        case milestone
                        case nodeId = "node_id"
                        case number
                        case performedViaGithubApp = "performed_via_github_app"
                        case pullRequest = "pull_request"
                        case reactions
                        case repositoryUrl = "repository_url"
                        case state
                        case stateReason = "state_reason"
                        case timelineUrl = "timeline_url"
                        case title
                        case updatedAt = "updated_at"
                        case url
                        case user
                    }
                }
                /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value1`.
                public var value1: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/active_lock_reason`.
                    public var activeLockReason: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/assignee`.
                    public var assignee: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/assignees`.
                    public var assignees: [OpenAPIRuntime.OpenAPIObjectContainer?]?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/author_association`.
                    public var authorAssociation: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/body`.
                    public var body: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/closed_at`.
                    public var closedAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/comments`.
                    public var comments: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/comments_url`.
                    public var commentsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/created_at`.
                    public var createdAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/id`.
                    public var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/labels`.
                    public var labels: [OpenAPIRuntime.OpenAPIObjectContainer?]?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/labels_url`.
                    public var labelsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/locked`.
                    public var locked: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/milestone`.
                    public var milestone: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/number`.
                    public var number: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/performed_via_github_app`.
                    public var performedViaGithubApp: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/reactions`.
                    public struct ReactionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/reactions/+1`.
                        public var _plus_1: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/reactions/-1`.
                        public var _hyphen_1: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/reactions/confused`.
                        public var confused: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/reactions/eyes`.
                        public var eyes: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/reactions/heart`.
                        public var heart: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/reactions/hooray`.
                        public var hooray: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/reactions/laugh`.
                        public var laugh: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/reactions/rocket`.
                        public var rocket: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/reactions/total_count`.
                        public var totalCount: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/reactions/url`.
                        public var url: Swift.String?
                        /// Creates a new `ReactionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - _plus_1:
                        ///   - _hyphen_1:
                        ///   - confused:
                        ///   - eyes:
                        ///   - heart:
                        ///   - hooray:
                        ///   - laugh:
                        ///   - rocket:
                        ///   - totalCount:
                        ///   - url:
                        public init(
                            _plus_1: Swift.Int? = nil,
                            _hyphen_1: Swift.Int? = nil,
                            confused: Swift.Int? = nil,
                            eyes: Swift.Int? = nil,
                            heart: Swift.Int? = nil,
                            hooray: Swift.Int? = nil,
                            laugh: Swift.Int? = nil,
                            rocket: Swift.Int? = nil,
                            totalCount: Swift.Int? = nil,
                            url: Swift.String? = nil
                        ) {
                            self._plus_1 = _plus_1
                            self._hyphen_1 = _hyphen_1
                            self.confused = confused
                            self.eyes = eyes
                            self.heart = heart
                            self.hooray = hooray
                            self.laugh = laugh
                            self.rocket = rocket
                            self.totalCount = totalCount
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _plus_1 = "+1"
                            case _hyphen_1 = "-1"
                            case confused
                            case eyes
                            case heart
                            case hooray
                            case laugh
                            case rocket
                            case totalCount = "total_count"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/reactions`.
                    public var reactions: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value2Payload.ReactionsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/repository_url`.
                    public var repositoryUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/state`.
                    @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case closed = "closed"
                        case open = "open"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/state`.
                    public var state: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value2Payload.StatePayload
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/timeline_url`.
                    public var timelineUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/title`.
                    public var title: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/updated_at`.
                    public var updatedAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/url`.
                    public var url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/user`.
                    public struct UserPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/user/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/user/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/user/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/user/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/user/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/user/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/user/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/user/id`.
                        public var id: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/user/login`.
                        public var login: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/user/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/user/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/user/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/user/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/user/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/user/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/user/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/user/type`.
                        public var _type: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/user/url`.
                        public var url: Swift.String?
                        /// Creates a new `UserPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int? = nil,
                            login: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2/user`.
                    public var user: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value2Payload.UserPayload?
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - activeLockReason:
                    ///   - assignee:
                    ///   - assignees:
                    ///   - authorAssociation:
                    ///   - body:
                    ///   - closedAt:
                    ///   - comments:
                    ///   - commentsUrl:
                    ///   - createdAt:
                    ///   - eventsUrl:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - labels:
                    ///   - labelsUrl:
                    ///   - locked:
                    ///   - milestone:
                    ///   - nodeId:
                    ///   - number:
                    ///   - performedViaGithubApp:
                    ///   - reactions:
                    ///   - repositoryUrl:
                    ///   - state:
                    ///   - timelineUrl:
                    ///   - title:
                    ///   - updatedAt:
                    ///   - url:
                    ///   - user:
                    public init(
                        activeLockReason: Swift.String? = nil,
                        assignee: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                        assignees: [OpenAPIRuntime.OpenAPIObjectContainer?]? = nil,
                        authorAssociation: Swift.String? = nil,
                        body: Swift.String? = nil,
                        closedAt: Swift.String? = nil,
                        comments: Swift.Int? = nil,
                        commentsUrl: Swift.String? = nil,
                        createdAt: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int? = nil,
                        labels: [OpenAPIRuntime.OpenAPIObjectContainer?]? = nil,
                        labelsUrl: Swift.String? = nil,
                        locked: Swift.Bool? = nil,
                        milestone: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                        nodeId: Swift.String? = nil,
                        number: Swift.Int? = nil,
                        performedViaGithubApp: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                        reactions: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value2Payload.ReactionsPayload? = nil,
                        repositoryUrl: Swift.String? = nil,
                        state: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value2Payload.StatePayload,
                        timelineUrl: Swift.String? = nil,
                        title: Swift.String? = nil,
                        updatedAt: Swift.String? = nil,
                        url: Swift.String? = nil,
                        user: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value2Payload.UserPayload? = nil
                    ) {
                        self.activeLockReason = activeLockReason
                        self.assignee = assignee
                        self.assignees = assignees
                        self.authorAssociation = authorAssociation
                        self.body = body
                        self.closedAt = closedAt
                        self.comments = comments
                        self.commentsUrl = commentsUrl
                        self.createdAt = createdAt
                        self.eventsUrl = eventsUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.labels = labels
                        self.labelsUrl = labelsUrl
                        self.locked = locked
                        self.milestone = milestone
                        self.nodeId = nodeId
                        self.number = number
                        self.performedViaGithubApp = performedViaGithubApp
                        self.reactions = reactions
                        self.repositoryUrl = repositoryUrl
                        self.state = state
                        self.timelineUrl = timelineUrl
                        self.title = title
                        self.updatedAt = updatedAt
                        self.url = url
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case activeLockReason = "active_lock_reason"
                        case assignee
                        case assignees
                        case authorAssociation = "author_association"
                        case body
                        case closedAt = "closed_at"
                        case comments
                        case commentsUrl = "comments_url"
                        case createdAt = "created_at"
                        case eventsUrl = "events_url"
                        case htmlUrl = "html_url"
                        case id
                        case labels
                        case labelsUrl = "labels_url"
                        case locked
                        case milestone
                        case nodeId = "node_id"
                        case number
                        case performedViaGithubApp = "performed_via_github_app"
                        case reactions
                        case repositoryUrl = "repository_url"
                        case state
                        case timelineUrl = "timeline_url"
                        case title
                        case updatedAt = "updated_at"
                        case url
                        case user
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue/value2`.
                public var value2: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value2Payload
                /// Creates a new `IssuePayload`.
                ///
                /// - Parameters:
                ///   - value1: The [issue](https://docs.github.com/en/rest/reference/issues) itself.
                ///   - value2:
                public init(
                    value1: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value1Payload,
                    value2: Components.Schemas.WebhookIssuesClosed.IssuePayload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/issue`.
            public var issue: Components.Schemas.WebhookIssuesClosed.IssuePayload
            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-issues-closed/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Creates a new `WebhookIssuesClosed`.
            ///
            /// - Parameters:
            ///   - action: The action that was performed.
            ///   - enterprise:
            ///   - installation:
            ///   - issue: The [issue](https://docs.github.com/en/rest/reference/issues) itself.
            ///   - organization:
            ///   - repository:
            ///   - sender:
            public init(
                action: Components.Schemas.WebhookIssuesClosed.ActionPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                issue: Components.Schemas.WebhookIssuesClosed.IssuePayload,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser
            ) {
                self.action = action
                self.enterprise = enterprise
                self.installation = installation
                self.issue = issue
                self.organization = organization
                self.repository = repository
                self.sender = sender
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case enterprise
                case installation
                case issue
                case organization
                case repository
                case sender
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted`.
        public struct WebhookIssuesDeleted: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case deleted = "deleted"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/action`.
            public var action: Components.Schemas.WebhookIssuesDeleted.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue`.
            public struct IssuePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/active_lock_reason`.
                @frozen public enum ActiveLockReasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case resolved = "resolved"
                    case offTopic = "off-topic"
                    case tooHeated = "too heated"
                    case spam = "spam"
                    case _empty_ = ""
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/active_lock_reason`.
                public var activeLockReason: Components.Schemas.WebhookIssuesDeleted.IssuePayload.ActiveLockReasonPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/assignee`.
                public struct AssigneePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/assignee/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/assignee/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/assignee/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/assignee/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/assignee/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/assignee/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/assignee/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/assignee/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/assignee/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/assignee/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/assignee/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/assignee/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/assignee/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/assignee/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/assignee/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/assignee/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/assignee/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/assignee/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/assignee/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/assignee/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/assignee/type`.
                    public var _type: Components.Schemas.WebhookIssuesDeleted.IssuePayload.AssigneePayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/assignee/url`.
                    public var url: Swift.String?
                    /// Creates a new `AssigneePayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookIssuesDeleted.IssuePayload.AssigneePayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/assignee`.
                public var assignee: Components.Schemas.WebhookIssuesDeleted.IssuePayload.AssigneePayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/AssigneesPayload`.
                public struct AssigneesPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/AssigneesPayload/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/AssigneesPayload/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/AssigneesPayload/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/AssigneesPayload/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/AssigneesPayload/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/AssigneesPayload/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/AssigneesPayload/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/AssigneesPayload/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/AssigneesPayload/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/AssigneesPayload/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/AssigneesPayload/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/AssigneesPayload/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/AssigneesPayload/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/AssigneesPayload/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/AssigneesPayload/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/AssigneesPayload/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/AssigneesPayload/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/AssigneesPayload/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/AssigneesPayload/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/AssigneesPayload/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/AssigneesPayload/type`.
                    public var _type: Components.Schemas.WebhookIssuesDeleted.IssuePayload.AssigneesPayloadPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/AssigneesPayload/url`.
                    public var url: Swift.String?
                    /// Creates a new `AssigneesPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookIssuesDeleted.IssuePayload.AssigneesPayloadPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/assignees`.
                public typealias AssigneesPayload = [Components.Schemas.WebhookIssuesDeleted.IssuePayload.AssigneesPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/assignees`.
                public var assignees: Components.Schemas.WebhookIssuesDeleted.IssuePayload.AssigneesPayload
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/author_association`.
                @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case collaborator = "COLLABORATOR"
                    case contributor = "CONTRIBUTOR"
                    case firstTimer = "FIRST_TIMER"
                    case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                    case mannequin = "MANNEQUIN"
                    case member = "MEMBER"
                    case none = "NONE"
                    case owner = "OWNER"
                }
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/author_association`.
                public var authorAssociation: Components.Schemas.WebhookIssuesDeleted.IssuePayload.AuthorAssociationPayload
                /// Contents of the issue
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/body`.
                public var body: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/closed_at`.
                public var closedAt: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/comments`.
                public var comments: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/comments_url`.
                public var commentsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/created_at`.
                public var createdAt: Foundation.Date
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/draft`.
                public var draft: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/events_url`.
                public var eventsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/html_url`.
                public var htmlUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/LabelsPayload`.
                public struct LabelsPayloadPayload: Codable, Hashable, Sendable {
                    /// 6-character hex code, without the leading #, identifying the color
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/LabelsPayload/color`.
                    public var color: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/LabelsPayload/default`.
                    public var _default: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/LabelsPayload/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/LabelsPayload/id`.
                    public var id: Swift.Int
                    /// The name of the label.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/LabelsPayload/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/LabelsPayload/node_id`.
                    public var nodeId: Swift.String
                    /// URL for the label
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/LabelsPayload/url`.
                    public var url: Swift.String
                    /// Creates a new `LabelsPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - color: 6-character hex code, without the leading #, identifying the color
                    ///   - _default:
                    ///   - description:
                    ///   - id:
                    ///   - name: The name of the label.
                    ///   - nodeId:
                    ///   - url: URL for the label
                    public init(
                        color: Swift.String,
                        _default: Swift.Bool,
                        description: Swift.String? = nil,
                        id: Swift.Int,
                        name: Swift.String,
                        nodeId: Swift.String,
                        url: Swift.String
                    ) {
                        self.color = color
                        self._default = _default
                        self.description = description
                        self.id = id
                        self.name = name
                        self.nodeId = nodeId
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case color
                        case _default = "default"
                        case description
                        case id
                        case name
                        case nodeId = "node_id"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/labels`.
                public typealias LabelsPayload = [Components.Schemas.WebhookIssuesDeleted.IssuePayload.LabelsPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/labels`.
                public var labels: Components.Schemas.WebhookIssuesDeleted.IssuePayload.LabelsPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/labels_url`.
                public var labelsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/locked`.
                public var locked: Swift.Bool?
                /// A collection of related issues and pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone`.
                public struct MilestonePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/closed_at`.
                    public var closedAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/closed_issues`.
                    public var closedIssues: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/created_at`.
                    public var createdAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/creator`.
                    public struct CreatorPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/creator/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/creator/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/creator/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/creator/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/creator/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/creator/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/creator/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/creator/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/creator/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/creator/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/creator/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/creator/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/creator/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/creator/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/creator/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/creator/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/creator/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/creator/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/creator/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/creator/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/creator/type`.
                        public var _type: Components.Schemas.WebhookIssuesDeleted.IssuePayload.MilestonePayload.CreatorPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/creator/url`.
                        public var url: Swift.String?
                        /// Creates a new `CreatorPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesDeleted.IssuePayload.MilestonePayload.CreatorPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/creator`.
                    public var creator: Components.Schemas.WebhookIssuesDeleted.IssuePayload.MilestonePayload.CreatorPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/due_on`.
                    public var dueOn: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/html_url`.
                    public var htmlUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/labels_url`.
                    public var labelsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/node_id`.
                    public var nodeId: Swift.String
                    /// The number of the milestone.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/number`.
                    public var number: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/open_issues`.
                    public var openIssues: Swift.Int
                    /// The state of the milestone.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/state`.
                    @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case closed = "closed"
                    }
                    /// The state of the milestone.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/state`.
                    public var state: Components.Schemas.WebhookIssuesDeleted.IssuePayload.MilestonePayload.StatePayload
                    /// The title of the milestone.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/title`.
                    public var title: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/updated_at`.
                    public var updatedAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone/url`.
                    public var url: Swift.String
                    /// Creates a new `MilestonePayload`.
                    ///
                    /// - Parameters:
                    ///   - closedAt:
                    ///   - closedIssues:
                    ///   - createdAt:
                    ///   - creator:
                    ///   - description:
                    ///   - dueOn:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - labelsUrl:
                    ///   - nodeId:
                    ///   - number: The number of the milestone.
                    ///   - openIssues:
                    ///   - state: The state of the milestone.
                    ///   - title: The title of the milestone.
                    ///   - updatedAt:
                    ///   - url:
                    public init(
                        closedAt: Foundation.Date? = nil,
                        closedIssues: Swift.Int,
                        createdAt: Foundation.Date,
                        creator: Components.Schemas.WebhookIssuesDeleted.IssuePayload.MilestonePayload.CreatorPayload? = nil,
                        description: Swift.String? = nil,
                        dueOn: Foundation.Date? = nil,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        labelsUrl: Swift.String,
                        nodeId: Swift.String,
                        number: Swift.Int,
                        openIssues: Swift.Int,
                        state: Components.Schemas.WebhookIssuesDeleted.IssuePayload.MilestonePayload.StatePayload,
                        title: Swift.String,
                        updatedAt: Foundation.Date,
                        url: Swift.String
                    ) {
                        self.closedAt = closedAt
                        self.closedIssues = closedIssues
                        self.createdAt = createdAt
                        self.creator = creator
                        self.description = description
                        self.dueOn = dueOn
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.labelsUrl = labelsUrl
                        self.nodeId = nodeId
                        self.number = number
                        self.openIssues = openIssues
                        self.state = state
                        self.title = title
                        self.updatedAt = updatedAt
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case closedAt = "closed_at"
                        case closedIssues = "closed_issues"
                        case createdAt = "created_at"
                        case creator
                        case description
                        case dueOn = "due_on"
                        case htmlUrl = "html_url"
                        case id
                        case labelsUrl = "labels_url"
                        case nodeId = "node_id"
                        case number
                        case openIssues = "open_issues"
                        case state
                        case title
                        case updatedAt = "updated_at"
                        case url
                    }
                }
                /// A collection of related issues and pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/milestone`.
                public var milestone: Components.Schemas.WebhookIssuesDeleted.IssuePayload.MilestonePayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/number`.
                public var number: Swift.Int
                /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app`.
                public struct PerformedViaGithubAppPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/created_at`.
                    public var createdAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/EventsPayload`.
                    @frozen public enum EventsPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case branchProtectionRule = "branch_protection_rule"
                        case checkRun = "check_run"
                        case checkSuite = "check_suite"
                        case codeScanningAlert = "code_scanning_alert"
                        case commitComment = "commit_comment"
                        case contentReference = "content_reference"
                        case create = "create"
                        case delete = "delete"
                        case deployment = "deployment"
                        case deploymentReview = "deployment_review"
                        case deploymentStatus = "deployment_status"
                        case deployKey = "deploy_key"
                        case discussion = "discussion"
                        case discussionComment = "discussion_comment"
                        case fork = "fork"
                        case gollum = "gollum"
                        case issues = "issues"
                        case issueComment = "issue_comment"
                        case label = "label"
                        case member = "member"
                        case membership = "membership"
                        case milestone = "milestone"
                        case organization = "organization"
                        case orgBlock = "org_block"
                        case pageBuild = "page_build"
                        case project = "project"
                        case projectCard = "project_card"
                        case projectColumn = "project_column"
                        case _public = "public"
                        case pullRequest = "pull_request"
                        case pullRequestReview = "pull_request_review"
                        case pullRequestReviewComment = "pull_request_review_comment"
                        case push = "push"
                        case registryPackage = "registry_package"
                        case release = "release"
                        case repository = "repository"
                        case repositoryDispatch = "repository_dispatch"
                        case secretScanningAlert = "secret_scanning_alert"
                        case star = "star"
                        case status = "status"
                        case team = "team"
                        case teamAdd = "team_add"
                        case watch = "watch"
                        case workflowDispatch = "workflow_dispatch"
                        case workflowRun = "workflow_run"
                        case reminder = "reminder"
                    }
                    /// The list of events for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/events`.
                    public typealias EventsPayload = [Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.EventsPayloadPayload]
                    /// The list of events for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/events`.
                    public var events: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.EventsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/external_url`.
                    public var externalUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/html_url`.
                    public var htmlUrl: Swift.String
                    /// Unique identifier of the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/id`.
                    public var id: Swift.Int?
                    /// The name of the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/owner`.
                    public struct OwnerPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/owner/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/owner/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/owner/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/owner/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/owner/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/owner/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/owner/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/owner/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/owner/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/owner/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/owner/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/owner/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/owner/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/owner/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/owner/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/owner/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/owner/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/owner/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/owner/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/owner/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/owner/type`.
                        public var _type: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/owner/url`.
                        public var url: Swift.String?
                        /// Creates a new `OwnerPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/owner`.
                    public var owner: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.OwnerPayload?
                    /// The set of permissions for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions`.
                    public struct PermissionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/actions`.
                        @frozen public enum ActionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/actions`.
                        public var actions: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/administration`.
                        @frozen public enum AdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/administration`.
                        public var administration: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/checks`.
                        @frozen public enum ChecksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/checks`.
                        public var checks: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/content_references`.
                        @frozen public enum ContentReferencesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/content_references`.
                        public var contentReferences: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/contents`.
                        @frozen public enum ContentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/contents`.
                        public var contents: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/deployments`.
                        @frozen public enum DeploymentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/deployments`.
                        public var deployments: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/discussions`.
                        @frozen public enum DiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/discussions`.
                        public var discussions: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/emails`.
                        @frozen public enum EmailsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/emails`.
                        public var emails: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/environments`.
                        @frozen public enum EnvironmentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/environments`.
                        public var environments: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/issues`.
                        @frozen public enum IssuesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/issues`.
                        public var issues: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/keys`.
                        @frozen public enum KeysPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/keys`.
                        public var keys: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/members`.
                        @frozen public enum MembersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/members`.
                        public var members: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/metadata`.
                        @frozen public enum MetadataPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/metadata`.
                        public var metadata: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/organization_administration`.
                        @frozen public enum OrganizationAdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/organization_administration`.
                        public var organizationAdministration: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/organization_hooks`.
                        @frozen public enum OrganizationHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/organization_hooks`.
                        public var organizationHooks: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/organization_packages`.
                        @frozen public enum OrganizationPackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/organization_packages`.
                        public var organizationPackages: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/organization_plan`.
                        @frozen public enum OrganizationPlanPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/organization_plan`.
                        public var organizationPlan: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/organization_projects`.
                        @frozen public enum OrganizationProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/organization_projects`.
                        public var organizationProjects: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/organization_secrets`.
                        @frozen public enum OrganizationSecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/organization_secrets`.
                        public var organizationSecrets: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/organization_self_hosted_runners`.
                        @frozen public enum OrganizationSelfHostedRunnersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/organization_self_hosted_runners`.
                        public var organizationSelfHostedRunners: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/organization_user_blocking`.
                        @frozen public enum OrganizationUserBlockingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/organization_user_blocking`.
                        public var organizationUserBlocking: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/packages`.
                        @frozen public enum PackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/packages`.
                        public var packages: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/pages`.
                        @frozen public enum PagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/pages`.
                        public var pages: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/pull_requests`.
                        @frozen public enum PullRequestsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/pull_requests`.
                        public var pullRequests: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/repository_hooks`.
                        @frozen public enum RepositoryHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/repository_hooks`.
                        public var repositoryHooks: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/repository_projects`.
                        @frozen public enum RepositoryProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/repository_projects`.
                        public var repositoryProjects: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/secret_scanning_alerts`.
                        @frozen public enum SecretScanningAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/secret_scanning_alerts`.
                        public var secretScanningAlerts: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/secrets`.
                        @frozen public enum SecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/secrets`.
                        public var secrets: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/security_events`.
                        @frozen public enum SecurityEventsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/security_events`.
                        public var securityEvents: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/security_scanning_alert`.
                        @frozen public enum SecurityScanningAlertPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/security_scanning_alert`.
                        public var securityScanningAlert: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/single_file`.
                        @frozen public enum SingleFilePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/single_file`.
                        public var singleFile: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/statuses`.
                        @frozen public enum StatusesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/statuses`.
                        public var statuses: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/team_discussions`.
                        @frozen public enum TeamDiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/team_discussions`.
                        public var teamDiscussions: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/vulnerability_alerts`.
                        @frozen public enum VulnerabilityAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/vulnerability_alerts`.
                        public var vulnerabilityAlerts: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/workflows`.
                        @frozen public enum WorkflowsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions/workflows`.
                        public var workflows: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload?
                        /// Creates a new `PermissionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - actions:
                        ///   - administration:
                        ///   - checks:
                        ///   - contentReferences:
                        ///   - contents:
                        ///   - deployments:
                        ///   - discussions:
                        ///   - emails:
                        ///   - environments:
                        ///   - issues:
                        ///   - keys:
                        ///   - members:
                        ///   - metadata:
                        ///   - organizationAdministration:
                        ///   - organizationHooks:
                        ///   - organizationPackages:
                        ///   - organizationPlan:
                        ///   - organizationProjects:
                        ///   - organizationSecrets:
                        ///   - organizationSelfHostedRunners:
                        ///   - organizationUserBlocking:
                        ///   - packages:
                        ///   - pages:
                        ///   - pullRequests:
                        ///   - repositoryHooks:
                        ///   - repositoryProjects:
                        ///   - secretScanningAlerts:
                        ///   - secrets:
                        ///   - securityEvents:
                        ///   - securityScanningAlert:
                        ///   - singleFile:
                        ///   - statuses:
                        ///   - teamDiscussions:
                        ///   - vulnerabilityAlerts:
                        ///   - workflows:
                        public init(
                            actions: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload? = nil,
                            administration: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload? = nil,
                            checks: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload? = nil,
                            contentReferences: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload? = nil,
                            contents: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload? = nil,
                            deployments: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload? = nil,
                            discussions: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload? = nil,
                            emails: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload? = nil,
                            environments: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload? = nil,
                            issues: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload? = nil,
                            keys: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload? = nil,
                            members: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload? = nil,
                            metadata: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload? = nil,
                            organizationAdministration: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload? = nil,
                            organizationHooks: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload? = nil,
                            organizationPackages: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload? = nil,
                            organizationPlan: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload? = nil,
                            organizationProjects: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload? = nil,
                            organizationSecrets: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload? = nil,
                            organizationSelfHostedRunners: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload? = nil,
                            organizationUserBlocking: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload? = nil,
                            packages: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload? = nil,
                            pages: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload? = nil,
                            pullRequests: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload? = nil,
                            repositoryHooks: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload? = nil,
                            repositoryProjects: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload? = nil,
                            secretScanningAlerts: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload? = nil,
                            secrets: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload? = nil,
                            securityEvents: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload? = nil,
                            securityScanningAlert: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload? = nil,
                            singleFile: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload? = nil,
                            statuses: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload? = nil,
                            teamDiscussions: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload? = nil,
                            vulnerabilityAlerts: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload? = nil,
                            workflows: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload? = nil
                        ) {
                            self.actions = actions
                            self.administration = administration
                            self.checks = checks
                            self.contentReferences = contentReferences
                            self.contents = contents
                            self.deployments = deployments
                            self.discussions = discussions
                            self.emails = emails
                            self.environments = environments
                            self.issues = issues
                            self.keys = keys
                            self.members = members
                            self.metadata = metadata
                            self.organizationAdministration = organizationAdministration
                            self.organizationHooks = organizationHooks
                            self.organizationPackages = organizationPackages
                            self.organizationPlan = organizationPlan
                            self.organizationProjects = organizationProjects
                            self.organizationSecrets = organizationSecrets
                            self.organizationSelfHostedRunners = organizationSelfHostedRunners
                            self.organizationUserBlocking = organizationUserBlocking
                            self.packages = packages
                            self.pages = pages
                            self.pullRequests = pullRequests
                            self.repositoryHooks = repositoryHooks
                            self.repositoryProjects = repositoryProjects
                            self.secretScanningAlerts = secretScanningAlerts
                            self.secrets = secrets
                            self.securityEvents = securityEvents
                            self.securityScanningAlert = securityScanningAlert
                            self.singleFile = singleFile
                            self.statuses = statuses
                            self.teamDiscussions = teamDiscussions
                            self.vulnerabilityAlerts = vulnerabilityAlerts
                            self.workflows = workflows
                        }
                        public enum CodingKeys: String, CodingKey {
                            case actions
                            case administration
                            case checks
                            case contentReferences = "content_references"
                            case contents
                            case deployments
                            case discussions
                            case emails
                            case environments
                            case issues
                            case keys
                            case members
                            case metadata
                            case organizationAdministration = "organization_administration"
                            case organizationHooks = "organization_hooks"
                            case organizationPackages = "organization_packages"
                            case organizationPlan = "organization_plan"
                            case organizationProjects = "organization_projects"
                            case organizationSecrets = "organization_secrets"
                            case organizationSelfHostedRunners = "organization_self_hosted_runners"
                            case organizationUserBlocking = "organization_user_blocking"
                            case packages
                            case pages
                            case pullRequests = "pull_requests"
                            case repositoryHooks = "repository_hooks"
                            case repositoryProjects = "repository_projects"
                            case secretScanningAlerts = "secret_scanning_alerts"
                            case secrets
                            case securityEvents = "security_events"
                            case securityScanningAlert = "security_scanning_alert"
                            case singleFile = "single_file"
                            case statuses
                            case teamDiscussions = "team_discussions"
                            case vulnerabilityAlerts = "vulnerability_alerts"
                            case workflows
                        }
                    }
                    /// The set of permissions for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/permissions`.
                    public var permissions: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload?
                    /// The slug name of the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/slug`.
                    public var slug: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app/updated_at`.
                    public var updatedAt: Foundation.Date?
                    /// Creates a new `PerformedViaGithubAppPayload`.
                    ///
                    /// - Parameters:
                    ///   - createdAt:
                    ///   - description:
                    ///   - events: The list of events for the GitHub app
                    ///   - externalUrl:
                    ///   - htmlUrl:
                    ///   - id: Unique identifier of the GitHub app
                    ///   - name: The name of the GitHub app
                    ///   - nodeId:
                    ///   - owner:
                    ///   - permissions: The set of permissions for the GitHub app
                    ///   - slug: The slug name of the GitHub app
                    ///   - updatedAt:
                    public init(
                        createdAt: Foundation.Date? = nil,
                        description: Swift.String? = nil,
                        events: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.EventsPayload? = nil,
                        externalUrl: Swift.String? = nil,
                        htmlUrl: Swift.String,
                        id: Swift.Int? = nil,
                        name: Swift.String,
                        nodeId: Swift.String,
                        owner: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.OwnerPayload? = nil,
                        permissions: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload? = nil,
                        slug: Swift.String? = nil,
                        updatedAt: Foundation.Date? = nil
                    ) {
                        self.createdAt = createdAt
                        self.description = description
                        self.events = events
                        self.externalUrl = externalUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.name = name
                        self.nodeId = nodeId
                        self.owner = owner
                        self.permissions = permissions
                        self.slug = slug
                        self.updatedAt = updatedAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case createdAt = "created_at"
                        case description
                        case events
                        case externalUrl = "external_url"
                        case htmlUrl = "html_url"
                        case id
                        case name
                        case nodeId = "node_id"
                        case owner
                        case permissions
                        case slug
                        case updatedAt = "updated_at"
                    }
                }
                /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/performed_via_github_app`.
                public var performedViaGithubApp: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/pull_request`.
                public struct PullRequestPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/pull_request/diff_url`.
                    public var diffUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/pull_request/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/pull_request/merged_at`.
                    public var mergedAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/pull_request/patch_url`.
                    public var patchUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/pull_request/url`.
                    public var url: Swift.String?
                    /// Creates a new `PullRequestPayload`.
                    ///
                    /// - Parameters:
                    ///   - diffUrl:
                    ///   - htmlUrl:
                    ///   - mergedAt:
                    ///   - patchUrl:
                    ///   - url:
                    public init(
                        diffUrl: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        mergedAt: Foundation.Date? = nil,
                        patchUrl: Swift.String? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.diffUrl = diffUrl
                        self.htmlUrl = htmlUrl
                        self.mergedAt = mergedAt
                        self.patchUrl = patchUrl
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case diffUrl = "diff_url"
                        case htmlUrl = "html_url"
                        case mergedAt = "merged_at"
                        case patchUrl = "patch_url"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/pull_request`.
                public var pullRequest: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PullRequestPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/reactions`.
                public struct ReactionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/reactions/+1`.
                    public var _plus_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/reactions/-1`.
                    public var _hyphen_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/reactions/confused`.
                    public var confused: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/reactions/eyes`.
                    public var eyes: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/reactions/heart`.
                    public var heart: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/reactions/hooray`.
                    public var hooray: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/reactions/laugh`.
                    public var laugh: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/reactions/rocket`.
                    public var rocket: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/reactions/total_count`.
                    public var totalCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/reactions/url`.
                    public var url: Swift.String
                    /// Creates a new `ReactionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - _plus_1:
                    ///   - _hyphen_1:
                    ///   - confused:
                    ///   - eyes:
                    ///   - heart:
                    ///   - hooray:
                    ///   - laugh:
                    ///   - rocket:
                    ///   - totalCount:
                    ///   - url:
                    public init(
                        _plus_1: Swift.Int,
                        _hyphen_1: Swift.Int,
                        confused: Swift.Int,
                        eyes: Swift.Int,
                        heart: Swift.Int,
                        hooray: Swift.Int,
                        laugh: Swift.Int,
                        rocket: Swift.Int,
                        totalCount: Swift.Int,
                        url: Swift.String
                    ) {
                        self._plus_1 = _plus_1
                        self._hyphen_1 = _hyphen_1
                        self.confused = confused
                        self.eyes = eyes
                        self.heart = heart
                        self.hooray = hooray
                        self.laugh = laugh
                        self.rocket = rocket
                        self.totalCount = totalCount
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _plus_1 = "+1"
                        case _hyphen_1 = "-1"
                        case confused
                        case eyes
                        case heart
                        case hooray
                        case laugh
                        case rocket
                        case totalCount = "total_count"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/reactions`.
                public var reactions: Components.Schemas.WebhookIssuesDeleted.IssuePayload.ReactionsPayload
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/repository_url`.
                public var repositoryUrl: Swift.String
                /// State of the issue; either 'open' or 'closed'
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/state`.
                @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case open = "open"
                    case closed = "closed"
                }
                /// State of the issue; either 'open' or 'closed'
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/state`.
                public var state: Components.Schemas.WebhookIssuesDeleted.IssuePayload.StatePayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/state_reason`.
                public var stateReason: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/timeline_url`.
                public var timelineUrl: Swift.String?
                /// Title of the issue
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/title`.
                public var title: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/updated_at`.
                public var updatedAt: Foundation.Date
                /// URL for the issue
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/user`.
                public struct UserPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/user/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/user/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/user/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/user/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/user/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/user/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/user/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/user/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/user/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/user/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/user/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/user/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/user/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/user/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/user/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/user/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/user/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/user/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/user/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/user/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/user/type`.
                    public var _type: Components.Schemas.WebhookIssuesDeleted.IssuePayload.UserPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/user/url`.
                    public var url: Swift.String?
                    /// Creates a new `UserPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookIssuesDeleted.IssuePayload.UserPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue/user`.
                public var user: Components.Schemas.WebhookIssuesDeleted.IssuePayload.UserPayload?
                /// Creates a new `IssuePayload`.
                ///
                /// - Parameters:
                ///   - activeLockReason:
                ///   - assignee:
                ///   - assignees:
                ///   - authorAssociation: How the author is associated with the repository.
                ///   - body: Contents of the issue
                ///   - closedAt:
                ///   - comments:
                ///   - commentsUrl:
                ///   - createdAt:
                ///   - draft:
                ///   - eventsUrl:
                ///   - htmlUrl:
                ///   - id:
                ///   - labels:
                ///   - labelsUrl:
                ///   - locked:
                ///   - milestone: A collection of related issues and pull requests.
                ///   - nodeId:
                ///   - number:
                ///   - performedViaGithubApp: GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                ///   - pullRequest:
                ///   - reactions:
                ///   - repositoryUrl:
                ///   - state: State of the issue; either 'open' or 'closed'
                ///   - stateReason:
                ///   - timelineUrl:
                ///   - title: Title of the issue
                ///   - updatedAt:
                ///   - url: URL for the issue
                ///   - user:
                public init(
                    activeLockReason: Components.Schemas.WebhookIssuesDeleted.IssuePayload.ActiveLockReasonPayload? = nil,
                    assignee: Components.Schemas.WebhookIssuesDeleted.IssuePayload.AssigneePayload? = nil,
                    assignees: Components.Schemas.WebhookIssuesDeleted.IssuePayload.AssigneesPayload,
                    authorAssociation: Components.Schemas.WebhookIssuesDeleted.IssuePayload.AuthorAssociationPayload,
                    body: Swift.String? = nil,
                    closedAt: Foundation.Date? = nil,
                    comments: Swift.Int,
                    commentsUrl: Swift.String,
                    createdAt: Foundation.Date,
                    draft: Swift.Bool? = nil,
                    eventsUrl: Swift.String,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    labels: Components.Schemas.WebhookIssuesDeleted.IssuePayload.LabelsPayload? = nil,
                    labelsUrl: Swift.String,
                    locked: Swift.Bool? = nil,
                    milestone: Components.Schemas.WebhookIssuesDeleted.IssuePayload.MilestonePayload? = nil,
                    nodeId: Swift.String,
                    number: Swift.Int,
                    performedViaGithubApp: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PerformedViaGithubAppPayload? = nil,
                    pullRequest: Components.Schemas.WebhookIssuesDeleted.IssuePayload.PullRequestPayload? = nil,
                    reactions: Components.Schemas.WebhookIssuesDeleted.IssuePayload.ReactionsPayload,
                    repositoryUrl: Swift.String,
                    state: Components.Schemas.WebhookIssuesDeleted.IssuePayload.StatePayload? = nil,
                    stateReason: Swift.String? = nil,
                    timelineUrl: Swift.String? = nil,
                    title: Swift.String,
                    updatedAt: Foundation.Date,
                    url: Swift.String,
                    user: Components.Schemas.WebhookIssuesDeleted.IssuePayload.UserPayload? = nil
                ) {
                    self.activeLockReason = activeLockReason
                    self.assignee = assignee
                    self.assignees = assignees
                    self.authorAssociation = authorAssociation
                    self.body = body
                    self.closedAt = closedAt
                    self.comments = comments
                    self.commentsUrl = commentsUrl
                    self.createdAt = createdAt
                    self.draft = draft
                    self.eventsUrl = eventsUrl
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.labels = labels
                    self.labelsUrl = labelsUrl
                    self.locked = locked
                    self.milestone = milestone
                    self.nodeId = nodeId
                    self.number = number
                    self.performedViaGithubApp = performedViaGithubApp
                    self.pullRequest = pullRequest
                    self.reactions = reactions
                    self.repositoryUrl = repositoryUrl
                    self.state = state
                    self.stateReason = stateReason
                    self.timelineUrl = timelineUrl
                    self.title = title
                    self.updatedAt = updatedAt
                    self.url = url
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case activeLockReason = "active_lock_reason"
                    case assignee
                    case assignees
                    case authorAssociation = "author_association"
                    case body
                    case closedAt = "closed_at"
                    case comments
                    case commentsUrl = "comments_url"
                    case createdAt = "created_at"
                    case draft
                    case eventsUrl = "events_url"
                    case htmlUrl = "html_url"
                    case id
                    case labels
                    case labelsUrl = "labels_url"
                    case locked
                    case milestone
                    case nodeId = "node_id"
                    case number
                    case performedViaGithubApp = "performed_via_github_app"
                    case pullRequest = "pull_request"
                    case reactions
                    case repositoryUrl = "repository_url"
                    case state
                    case stateReason = "state_reason"
                    case timelineUrl = "timeline_url"
                    case title
                    case updatedAt = "updated_at"
                    case url
                    case user
                }
            }
            /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/issue`.
            public var issue: Components.Schemas.WebhookIssuesDeleted.IssuePayload
            /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-issues-deleted/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Creates a new `WebhookIssuesDeleted`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - enterprise:
            ///   - installation:
            ///   - issue: The [issue](https://docs.github.com/en/rest/reference/issues) itself.
            ///   - organization:
            ///   - repository:
            ///   - sender:
            public init(
                action: Components.Schemas.WebhookIssuesDeleted.ActionPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                issue: Components.Schemas.WebhookIssuesDeleted.IssuePayload,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser
            ) {
                self.action = action
                self.enterprise = enterprise
                self.installation = installation
                self.issue = issue
                self.organization = organization
                self.repository = repository
                self.sender = sender
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case enterprise
                case installation
                case issue
                case organization
                case repository
                case sender
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned`.
        public struct WebhookIssuesDemilestoned: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case demilestoned = "demilestoned"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/action`.
            public var action: Components.Schemas.WebhookIssuesDemilestoned.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue`.
            public struct IssuePayload: Codable, Hashable, Sendable {
                /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/active_lock_reason`.
                    @frozen public enum ActiveLockReasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case resolved = "resolved"
                        case offTopic = "off-topic"
                        case tooHeated = "too heated"
                        case spam = "spam"
                        case _empty_ = ""
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/active_lock_reason`.
                    public var activeLockReason: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.ActiveLockReasonPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/assignee`.
                    public struct AssigneePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/assignee/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/assignee/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/assignee/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/assignee/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/assignee/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/assignee/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/assignee/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/assignee/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/assignee/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/assignee/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/assignee/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/assignee/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/assignee/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/assignee/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/assignee/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/assignee/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/assignee/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/assignee/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/assignee/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/assignee/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                            case mannequin = "Mannequin"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/assignee/type`.
                        public var _type: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.AssigneePayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/assignee/url`.
                        public var url: Swift.String?
                        /// Creates a new `AssigneePayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.AssigneePayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/assignee`.
                    public var assignee: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.AssigneePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/AssigneesPayload`.
                    public struct AssigneesPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/AssigneesPayload/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/AssigneesPayload/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/AssigneesPayload/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/AssigneesPayload/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/AssigneesPayload/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/AssigneesPayload/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/AssigneesPayload/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/AssigneesPayload/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/AssigneesPayload/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/AssigneesPayload/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/AssigneesPayload/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/AssigneesPayload/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/AssigneesPayload/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/AssigneesPayload/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/AssigneesPayload/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/AssigneesPayload/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/AssigneesPayload/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/AssigneesPayload/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/AssigneesPayload/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/AssigneesPayload/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                            case mannequin = "Mannequin"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/AssigneesPayload/type`.
                        public var _type: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.AssigneesPayloadPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/AssigneesPayload/url`.
                        public var url: Swift.String?
                        /// Creates a new `AssigneesPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.AssigneesPayloadPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/assignees`.
                    public typealias AssigneesPayload = [Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.AssigneesPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/assignees`.
                    public var assignees: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.AssigneesPayload
                    /// How the author is associated with the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/author_association`.
                    @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case collaborator = "COLLABORATOR"
                        case contributor = "CONTRIBUTOR"
                        case firstTimer = "FIRST_TIMER"
                        case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                        case mannequin = "MANNEQUIN"
                        case member = "MEMBER"
                        case none = "NONE"
                        case owner = "OWNER"
                    }
                    /// How the author is associated with the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/author_association`.
                    public var authorAssociation: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.AuthorAssociationPayload
                    /// Contents of the issue
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/body`.
                    public var body: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/closed_at`.
                    public var closedAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/comments`.
                    public var comments: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/comments_url`.
                    public var commentsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/created_at`.
                    public var createdAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/draft`.
                    public var draft: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/events_url`.
                    public var eventsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/html_url`.
                    public var htmlUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/LabelsPayload`.
                    public struct LabelsPayloadPayload: Codable, Hashable, Sendable {
                        /// 6-character hex code, without the leading #, identifying the color
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/LabelsPayload/color`.
                        public var color: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/LabelsPayload/default`.
                        public var _default: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/LabelsPayload/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/LabelsPayload/id`.
                        public var id: Swift.Int
                        /// The name of the label.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/LabelsPayload/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/LabelsPayload/node_id`.
                        public var nodeId: Swift.String
                        /// URL for the label
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/LabelsPayload/url`.
                        public var url: Swift.String
                        /// Creates a new `LabelsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - color: 6-character hex code, without the leading #, identifying the color
                        ///   - _default:
                        ///   - description:
                        ///   - id:
                        ///   - name: The name of the label.
                        ///   - nodeId:
                        ///   - url: URL for the label
                        public init(
                            color: Swift.String,
                            _default: Swift.Bool,
                            description: Swift.String? = nil,
                            id: Swift.Int,
                            name: Swift.String,
                            nodeId: Swift.String,
                            url: Swift.String
                        ) {
                            self.color = color
                            self._default = _default
                            self.description = description
                            self.id = id
                            self.name = name
                            self.nodeId = nodeId
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case color
                            case _default = "default"
                            case description
                            case id
                            case name
                            case nodeId = "node_id"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/labels`.
                    public typealias LabelsPayload = [Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.LabelsPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/labels`.
                    public var labels: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.LabelsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/labels_url`.
                    public var labelsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/locked`.
                    public var locked: Swift.Bool?
                    /// A collection of related issues and pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone`.
                    public struct MilestonePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/closed_at`.
                        public var closedAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/closed_issues`.
                        public var closedIssues: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/created_at`.
                        public var createdAt: Foundation.Date
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/creator`.
                        public struct CreatorPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/creator/avatar_url`.
                            public var avatarUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/creator/deleted`.
                            public var deleted: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/creator/email`.
                            public var email: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/creator/events_url`.
                            public var eventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/creator/followers_url`.
                            public var followersUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/creator/following_url`.
                            public var followingUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/creator/gists_url`.
                            public var gistsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/creator/gravatar_id`.
                            public var gravatarId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/creator/html_url`.
                            public var htmlUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/creator/id`.
                            public var id: Swift.Int
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/creator/login`.
                            public var login: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/creator/name`.
                            public var name: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/creator/node_id`.
                            public var nodeId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/creator/organizations_url`.
                            public var organizationsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/creator/received_events_url`.
                            public var receivedEventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/creator/repos_url`.
                            public var reposUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/creator/site_admin`.
                            public var siteAdmin: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/creator/starred_url`.
                            public var starredUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/creator/subscriptions_url`.
                            public var subscriptionsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/creator/type`.
                            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case bot = "Bot"
                                case user = "User"
                                case organization = "Organization"
                                case mannequin = "Mannequin"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/creator/type`.
                            public var _type: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload._TypePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/creator/url`.
                            public var url: Swift.String?
                            /// Creates a new `CreatorPayload`.
                            ///
                            /// - Parameters:
                            ///   - avatarUrl:
                            ///   - deleted:
                            ///   - email:
                            ///   - eventsUrl:
                            ///   - followersUrl:
                            ///   - followingUrl:
                            ///   - gistsUrl:
                            ///   - gravatarId:
                            ///   - htmlUrl:
                            ///   - id:
                            ///   - login:
                            ///   - name:
                            ///   - nodeId:
                            ///   - organizationsUrl:
                            ///   - receivedEventsUrl:
                            ///   - reposUrl:
                            ///   - siteAdmin:
                            ///   - starredUrl:
                            ///   - subscriptionsUrl:
                            ///   - _type:
                            ///   - url:
                            public init(
                                avatarUrl: Swift.String? = nil,
                                deleted: Swift.Bool? = nil,
                                email: Swift.String? = nil,
                                eventsUrl: Swift.String? = nil,
                                followersUrl: Swift.String? = nil,
                                followingUrl: Swift.String? = nil,
                                gistsUrl: Swift.String? = nil,
                                gravatarId: Swift.String? = nil,
                                htmlUrl: Swift.String? = nil,
                                id: Swift.Int,
                                login: Swift.String,
                                name: Swift.String? = nil,
                                nodeId: Swift.String? = nil,
                                organizationsUrl: Swift.String? = nil,
                                receivedEventsUrl: Swift.String? = nil,
                                reposUrl: Swift.String? = nil,
                                siteAdmin: Swift.Bool? = nil,
                                starredUrl: Swift.String? = nil,
                                subscriptionsUrl: Swift.String? = nil,
                                _type: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload._TypePayload? = nil,
                                url: Swift.String? = nil
                            ) {
                                self.avatarUrl = avatarUrl
                                self.deleted = deleted
                                self.email = email
                                self.eventsUrl = eventsUrl
                                self.followersUrl = followersUrl
                                self.followingUrl = followingUrl
                                self.gistsUrl = gistsUrl
                                self.gravatarId = gravatarId
                                self.htmlUrl = htmlUrl
                                self.id = id
                                self.login = login
                                self.name = name
                                self.nodeId = nodeId
                                self.organizationsUrl = organizationsUrl
                                self.receivedEventsUrl = receivedEventsUrl
                                self.reposUrl = reposUrl
                                self.siteAdmin = siteAdmin
                                self.starredUrl = starredUrl
                                self.subscriptionsUrl = subscriptionsUrl
                                self._type = _type
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case avatarUrl = "avatar_url"
                                case deleted
                                case email
                                case eventsUrl = "events_url"
                                case followersUrl = "followers_url"
                                case followingUrl = "following_url"
                                case gistsUrl = "gists_url"
                                case gravatarId = "gravatar_id"
                                case htmlUrl = "html_url"
                                case id
                                case login
                                case name
                                case nodeId = "node_id"
                                case organizationsUrl = "organizations_url"
                                case receivedEventsUrl = "received_events_url"
                                case reposUrl = "repos_url"
                                case siteAdmin = "site_admin"
                                case starredUrl = "starred_url"
                                case subscriptionsUrl = "subscriptions_url"
                                case _type = "type"
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/creator`.
                        public var creator: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/due_on`.
                        public var dueOn: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/html_url`.
                        public var htmlUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/labels_url`.
                        public var labelsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/node_id`.
                        public var nodeId: Swift.String
                        /// The number of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/number`.
                        public var number: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/open_issues`.
                        public var openIssues: Swift.Int
                        /// The state of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/state`.
                        @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case open = "open"
                            case closed = "closed"
                        }
                        /// The state of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/state`.
                        public var state: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.MilestonePayload.StatePayload
                        /// The title of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/title`.
                        public var title: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/updated_at`.
                        public var updatedAt: Foundation.Date
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone/url`.
                        public var url: Swift.String
                        /// Creates a new `MilestonePayload`.
                        ///
                        /// - Parameters:
                        ///   - closedAt:
                        ///   - closedIssues:
                        ///   - createdAt:
                        ///   - creator:
                        ///   - description:
                        ///   - dueOn:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - labelsUrl:
                        ///   - nodeId:
                        ///   - number: The number of the milestone.
                        ///   - openIssues:
                        ///   - state: The state of the milestone.
                        ///   - title: The title of the milestone.
                        ///   - updatedAt:
                        ///   - url:
                        public init(
                            closedAt: Foundation.Date? = nil,
                            closedIssues: Swift.Int,
                            createdAt: Foundation.Date,
                            creator: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload? = nil,
                            description: Swift.String? = nil,
                            dueOn: Foundation.Date? = nil,
                            htmlUrl: Swift.String,
                            id: Swift.Int,
                            labelsUrl: Swift.String,
                            nodeId: Swift.String,
                            number: Swift.Int,
                            openIssues: Swift.Int,
                            state: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.MilestonePayload.StatePayload,
                            title: Swift.String,
                            updatedAt: Foundation.Date,
                            url: Swift.String
                        ) {
                            self.closedAt = closedAt
                            self.closedIssues = closedIssues
                            self.createdAt = createdAt
                            self.creator = creator
                            self.description = description
                            self.dueOn = dueOn
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.labelsUrl = labelsUrl
                            self.nodeId = nodeId
                            self.number = number
                            self.openIssues = openIssues
                            self.state = state
                            self.title = title
                            self.updatedAt = updatedAt
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case closedAt = "closed_at"
                            case closedIssues = "closed_issues"
                            case createdAt = "created_at"
                            case creator
                            case description
                            case dueOn = "due_on"
                            case htmlUrl = "html_url"
                            case id
                            case labelsUrl = "labels_url"
                            case nodeId = "node_id"
                            case number
                            case openIssues = "open_issues"
                            case state
                            case title
                            case updatedAt = "updated_at"
                            case url
                        }
                    }
                    /// A collection of related issues and pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/milestone`.
                    public var milestone: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.MilestonePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/number`.
                    public var number: Swift.Int
                    /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app`.
                    public struct PerformedViaGithubAppPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/created_at`.
                        public var createdAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/EventsPayload`.
                        @frozen public enum EventsPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case branchProtectionRule = "branch_protection_rule"
                            case checkRun = "check_run"
                            case checkSuite = "check_suite"
                            case codeScanningAlert = "code_scanning_alert"
                            case commitComment = "commit_comment"
                            case contentReference = "content_reference"
                            case create = "create"
                            case delete = "delete"
                            case deployment = "deployment"
                            case deploymentReview = "deployment_review"
                            case deploymentStatus = "deployment_status"
                            case deployKey = "deploy_key"
                            case discussion = "discussion"
                            case discussionComment = "discussion_comment"
                            case fork = "fork"
                            case gollum = "gollum"
                            case issues = "issues"
                            case issueComment = "issue_comment"
                            case label = "label"
                            case member = "member"
                            case membership = "membership"
                            case milestone = "milestone"
                            case organization = "organization"
                            case orgBlock = "org_block"
                            case pageBuild = "page_build"
                            case project = "project"
                            case projectCard = "project_card"
                            case projectColumn = "project_column"
                            case _public = "public"
                            case pullRequest = "pull_request"
                            case pullRequestReview = "pull_request_review"
                            case pullRequestReviewComment = "pull_request_review_comment"
                            case push = "push"
                            case registryPackage = "registry_package"
                            case release = "release"
                            case repository = "repository"
                            case repositoryDispatch = "repository_dispatch"
                            case secretScanningAlert = "secret_scanning_alert"
                            case star = "star"
                            case status = "status"
                            case team = "team"
                            case teamAdd = "team_add"
                            case watch = "watch"
                            case workflowDispatch = "workflow_dispatch"
                            case workflowRun = "workflow_run"
                        }
                        /// The list of events for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/events`.
                        public typealias EventsPayload = [Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.EventsPayloadPayload]
                        /// The list of events for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/events`.
                        public var events: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.EventsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/external_url`.
                        public var externalUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/html_url`.
                        public var htmlUrl: Swift.String
                        /// Unique identifier of the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/id`.
                        public var id: Swift.Int?
                        /// The name of the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/node_id`.
                        public var nodeId: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/owner`.
                        public struct OwnerPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/owner/avatar_url`.
                            public var avatarUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/owner/deleted`.
                            public var deleted: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/owner/email`.
                            public var email: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/owner/events_url`.
                            public var eventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/owner/followers_url`.
                            public var followersUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/owner/following_url`.
                            public var followingUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/owner/gists_url`.
                            public var gistsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/owner/gravatar_id`.
                            public var gravatarId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/owner/html_url`.
                            public var htmlUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/owner/id`.
                            public var id: Swift.Int
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/owner/login`.
                            public var login: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/owner/name`.
                            public var name: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/owner/node_id`.
                            public var nodeId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/owner/organizations_url`.
                            public var organizationsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/owner/received_events_url`.
                            public var receivedEventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/owner/repos_url`.
                            public var reposUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/owner/site_admin`.
                            public var siteAdmin: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/owner/starred_url`.
                            public var starredUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/owner/subscriptions_url`.
                            public var subscriptionsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/owner/type`.
                            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case bot = "Bot"
                                case user = "User"
                                case organization = "Organization"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/owner/type`.
                            public var _type: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/owner/url`.
                            public var url: Swift.String?
                            /// Creates a new `OwnerPayload`.
                            ///
                            /// - Parameters:
                            ///   - avatarUrl:
                            ///   - deleted:
                            ///   - email:
                            ///   - eventsUrl:
                            ///   - followersUrl:
                            ///   - followingUrl:
                            ///   - gistsUrl:
                            ///   - gravatarId:
                            ///   - htmlUrl:
                            ///   - id:
                            ///   - login:
                            ///   - name:
                            ///   - nodeId:
                            ///   - organizationsUrl:
                            ///   - receivedEventsUrl:
                            ///   - reposUrl:
                            ///   - siteAdmin:
                            ///   - starredUrl:
                            ///   - subscriptionsUrl:
                            ///   - _type:
                            ///   - url:
                            public init(
                                avatarUrl: Swift.String? = nil,
                                deleted: Swift.Bool? = nil,
                                email: Swift.String? = nil,
                                eventsUrl: Swift.String? = nil,
                                followersUrl: Swift.String? = nil,
                                followingUrl: Swift.String? = nil,
                                gistsUrl: Swift.String? = nil,
                                gravatarId: Swift.String? = nil,
                                htmlUrl: Swift.String? = nil,
                                id: Swift.Int,
                                login: Swift.String,
                                name: Swift.String? = nil,
                                nodeId: Swift.String? = nil,
                                organizationsUrl: Swift.String? = nil,
                                receivedEventsUrl: Swift.String? = nil,
                                reposUrl: Swift.String? = nil,
                                siteAdmin: Swift.Bool? = nil,
                                starredUrl: Swift.String? = nil,
                                subscriptionsUrl: Swift.String? = nil,
                                _type: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload? = nil,
                                url: Swift.String? = nil
                            ) {
                                self.avatarUrl = avatarUrl
                                self.deleted = deleted
                                self.email = email
                                self.eventsUrl = eventsUrl
                                self.followersUrl = followersUrl
                                self.followingUrl = followingUrl
                                self.gistsUrl = gistsUrl
                                self.gravatarId = gravatarId
                                self.htmlUrl = htmlUrl
                                self.id = id
                                self.login = login
                                self.name = name
                                self.nodeId = nodeId
                                self.organizationsUrl = organizationsUrl
                                self.receivedEventsUrl = receivedEventsUrl
                                self.reposUrl = reposUrl
                                self.siteAdmin = siteAdmin
                                self.starredUrl = starredUrl
                                self.subscriptionsUrl = subscriptionsUrl
                                self._type = _type
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case avatarUrl = "avatar_url"
                                case deleted
                                case email
                                case eventsUrl = "events_url"
                                case followersUrl = "followers_url"
                                case followingUrl = "following_url"
                                case gistsUrl = "gists_url"
                                case gravatarId = "gravatar_id"
                                case htmlUrl = "html_url"
                                case id
                                case login
                                case name
                                case nodeId = "node_id"
                                case organizationsUrl = "organizations_url"
                                case receivedEventsUrl = "received_events_url"
                                case reposUrl = "repos_url"
                                case siteAdmin = "site_admin"
                                case starredUrl = "starred_url"
                                case subscriptionsUrl = "subscriptions_url"
                                case _type = "type"
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/owner`.
                        public var owner: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload?
                        /// The set of permissions for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions`.
                        public struct PermissionsPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/actions`.
                            @frozen public enum ActionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/actions`.
                            public var actions: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/administration`.
                            @frozen public enum AdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/administration`.
                            public var administration: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/checks`.
                            @frozen public enum ChecksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/checks`.
                            public var checks: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/content_references`.
                            @frozen public enum ContentReferencesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/content_references`.
                            public var contentReferences: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/contents`.
                            @frozen public enum ContentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/contents`.
                            public var contents: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/deployments`.
                            @frozen public enum DeploymentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/deployments`.
                            public var deployments: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/discussions`.
                            @frozen public enum DiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/discussions`.
                            public var discussions: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/emails`.
                            @frozen public enum EmailsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/emails`.
                            public var emails: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/environments`.
                            @frozen public enum EnvironmentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/environments`.
                            public var environments: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/issues`.
                            @frozen public enum IssuesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/issues`.
                            public var issues: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/keys`.
                            @frozen public enum KeysPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/keys`.
                            public var keys: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/members`.
                            @frozen public enum MembersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/members`.
                            public var members: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/metadata`.
                            @frozen public enum MetadataPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/metadata`.
                            public var metadata: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/organization_administration`.
                            @frozen public enum OrganizationAdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/organization_administration`.
                            public var organizationAdministration: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/organization_hooks`.
                            @frozen public enum OrganizationHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/organization_hooks`.
                            public var organizationHooks: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/organization_packages`.
                            @frozen public enum OrganizationPackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/organization_packages`.
                            public var organizationPackages: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/organization_plan`.
                            @frozen public enum OrganizationPlanPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/organization_plan`.
                            public var organizationPlan: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/organization_projects`.
                            @frozen public enum OrganizationProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                                case admin = "admin"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/organization_projects`.
                            public var organizationProjects: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/organization_secrets`.
                            @frozen public enum OrganizationSecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/organization_secrets`.
                            public var organizationSecrets: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/organization_self_hosted_runners`.
                            @frozen public enum OrganizationSelfHostedRunnersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/organization_self_hosted_runners`.
                            public var organizationSelfHostedRunners: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/organization_user_blocking`.
                            @frozen public enum OrganizationUserBlockingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/organization_user_blocking`.
                            public var organizationUserBlocking: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/packages`.
                            @frozen public enum PackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/packages`.
                            public var packages: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/pages`.
                            @frozen public enum PagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/pages`.
                            public var pages: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/pull_requests`.
                            @frozen public enum PullRequestsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/pull_requests`.
                            public var pullRequests: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/repository_hooks`.
                            @frozen public enum RepositoryHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/repository_hooks`.
                            public var repositoryHooks: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/repository_projects`.
                            @frozen public enum RepositoryProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/repository_projects`.
                            public var repositoryProjects: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/secret_scanning_alerts`.
                            @frozen public enum SecretScanningAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/secret_scanning_alerts`.
                            public var secretScanningAlerts: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/secrets`.
                            @frozen public enum SecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/secrets`.
                            public var secrets: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/security_events`.
                            @frozen public enum SecurityEventsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/security_events`.
                            public var securityEvents: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/security_scanning_alert`.
                            @frozen public enum SecurityScanningAlertPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/security_scanning_alert`.
                            public var securityScanningAlert: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/single_file`.
                            @frozen public enum SingleFilePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/single_file`.
                            public var singleFile: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/statuses`.
                            @frozen public enum StatusesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/statuses`.
                            public var statuses: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/team_discussions`.
                            @frozen public enum TeamDiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/team_discussions`.
                            public var teamDiscussions: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/vulnerability_alerts`.
                            @frozen public enum VulnerabilityAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/vulnerability_alerts`.
                            public var vulnerabilityAlerts: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/workflows`.
                            @frozen public enum WorkflowsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions/workflows`.
                            public var workflows: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload?
                            /// Creates a new `PermissionsPayload`.
                            ///
                            /// - Parameters:
                            ///   - actions:
                            ///   - administration:
                            ///   - checks:
                            ///   - contentReferences:
                            ///   - contents:
                            ///   - deployments:
                            ///   - discussions:
                            ///   - emails:
                            ///   - environments:
                            ///   - issues:
                            ///   - keys:
                            ///   - members:
                            ///   - metadata:
                            ///   - organizationAdministration:
                            ///   - organizationHooks:
                            ///   - organizationPackages:
                            ///   - organizationPlan:
                            ///   - organizationProjects:
                            ///   - organizationSecrets:
                            ///   - organizationSelfHostedRunners:
                            ///   - organizationUserBlocking:
                            ///   - packages:
                            ///   - pages:
                            ///   - pullRequests:
                            ///   - repositoryHooks:
                            ///   - repositoryProjects:
                            ///   - secretScanningAlerts:
                            ///   - secrets:
                            ///   - securityEvents:
                            ///   - securityScanningAlert:
                            ///   - singleFile:
                            ///   - statuses:
                            ///   - teamDiscussions:
                            ///   - vulnerabilityAlerts:
                            ///   - workflows:
                            public init(
                                actions: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload? = nil,
                                administration: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload? = nil,
                                checks: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload? = nil,
                                contentReferences: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload? = nil,
                                contents: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload? = nil,
                                deployments: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload? = nil,
                                discussions: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload? = nil,
                                emails: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload? = nil,
                                environments: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload? = nil,
                                issues: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload? = nil,
                                keys: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload? = nil,
                                members: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload? = nil,
                                metadata: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload? = nil,
                                organizationAdministration: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload? = nil,
                                organizationHooks: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload? = nil,
                                organizationPackages: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload? = nil,
                                organizationPlan: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload? = nil,
                                organizationProjects: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload? = nil,
                                organizationSecrets: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload? = nil,
                                organizationSelfHostedRunners: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload? = nil,
                                organizationUserBlocking: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload? = nil,
                                packages: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload? = nil,
                                pages: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload? = nil,
                                pullRequests: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload? = nil,
                                repositoryHooks: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload? = nil,
                                repositoryProjects: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload? = nil,
                                secretScanningAlerts: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload? = nil,
                                secrets: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload? = nil,
                                securityEvents: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload? = nil,
                                securityScanningAlert: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload? = nil,
                                singleFile: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload? = nil,
                                statuses: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload? = nil,
                                teamDiscussions: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload? = nil,
                                vulnerabilityAlerts: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload? = nil,
                                workflows: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload? = nil
                            ) {
                                self.actions = actions
                                self.administration = administration
                                self.checks = checks
                                self.contentReferences = contentReferences
                                self.contents = contents
                                self.deployments = deployments
                                self.discussions = discussions
                                self.emails = emails
                                self.environments = environments
                                self.issues = issues
                                self.keys = keys
                                self.members = members
                                self.metadata = metadata
                                self.organizationAdministration = organizationAdministration
                                self.organizationHooks = organizationHooks
                                self.organizationPackages = organizationPackages
                                self.organizationPlan = organizationPlan
                                self.organizationProjects = organizationProjects
                                self.organizationSecrets = organizationSecrets
                                self.organizationSelfHostedRunners = organizationSelfHostedRunners
                                self.organizationUserBlocking = organizationUserBlocking
                                self.packages = packages
                                self.pages = pages
                                self.pullRequests = pullRequests
                                self.repositoryHooks = repositoryHooks
                                self.repositoryProjects = repositoryProjects
                                self.secretScanningAlerts = secretScanningAlerts
                                self.secrets = secrets
                                self.securityEvents = securityEvents
                                self.securityScanningAlert = securityScanningAlert
                                self.singleFile = singleFile
                                self.statuses = statuses
                                self.teamDiscussions = teamDiscussions
                                self.vulnerabilityAlerts = vulnerabilityAlerts
                                self.workflows = workflows
                            }
                            public enum CodingKeys: String, CodingKey {
                                case actions
                                case administration
                                case checks
                                case contentReferences = "content_references"
                                case contents
                                case deployments
                                case discussions
                                case emails
                                case environments
                                case issues
                                case keys
                                case members
                                case metadata
                                case organizationAdministration = "organization_administration"
                                case organizationHooks = "organization_hooks"
                                case organizationPackages = "organization_packages"
                                case organizationPlan = "organization_plan"
                                case organizationProjects = "organization_projects"
                                case organizationSecrets = "organization_secrets"
                                case organizationSelfHostedRunners = "organization_self_hosted_runners"
                                case organizationUserBlocking = "organization_user_blocking"
                                case packages
                                case pages
                                case pullRequests = "pull_requests"
                                case repositoryHooks = "repository_hooks"
                                case repositoryProjects = "repository_projects"
                                case secretScanningAlerts = "secret_scanning_alerts"
                                case secrets
                                case securityEvents = "security_events"
                                case securityScanningAlert = "security_scanning_alert"
                                case singleFile = "single_file"
                                case statuses
                                case teamDiscussions = "team_discussions"
                                case vulnerabilityAlerts = "vulnerability_alerts"
                                case workflows
                            }
                        }
                        /// The set of permissions for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/permissions`.
                        public var permissions: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload?
                        /// The slug name of the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/slug`.
                        public var slug: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app/updated_at`.
                        public var updatedAt: Foundation.Date?
                        /// Creates a new `PerformedViaGithubAppPayload`.
                        ///
                        /// - Parameters:
                        ///   - createdAt:
                        ///   - description:
                        ///   - events: The list of events for the GitHub app
                        ///   - externalUrl:
                        ///   - htmlUrl:
                        ///   - id: Unique identifier of the GitHub app
                        ///   - name: The name of the GitHub app
                        ///   - nodeId:
                        ///   - owner:
                        ///   - permissions: The set of permissions for the GitHub app
                        ///   - slug: The slug name of the GitHub app
                        ///   - updatedAt:
                        public init(
                            createdAt: Foundation.Date? = nil,
                            description: Swift.String? = nil,
                            events: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.EventsPayload? = nil,
                            externalUrl: Swift.String? = nil,
                            htmlUrl: Swift.String,
                            id: Swift.Int? = nil,
                            name: Swift.String,
                            nodeId: Swift.String,
                            owner: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload? = nil,
                            permissions: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload? = nil,
                            slug: Swift.String? = nil,
                            updatedAt: Foundation.Date? = nil
                        ) {
                            self.createdAt = createdAt
                            self.description = description
                            self.events = events
                            self.externalUrl = externalUrl
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.name = name
                            self.nodeId = nodeId
                            self.owner = owner
                            self.permissions = permissions
                            self.slug = slug
                            self.updatedAt = updatedAt
                        }
                        public enum CodingKeys: String, CodingKey {
                            case createdAt = "created_at"
                            case description
                            case events
                            case externalUrl = "external_url"
                            case htmlUrl = "html_url"
                            case id
                            case name
                            case nodeId = "node_id"
                            case owner
                            case permissions
                            case slug
                            case updatedAt = "updated_at"
                        }
                    }
                    /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/performed_via_github_app`.
                    public var performedViaGithubApp: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/pull_request`.
                    public struct PullRequestPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/pull_request/diff_url`.
                        public var diffUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/pull_request/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/pull_request/merged_at`.
                        public var mergedAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/pull_request/patch_url`.
                        public var patchUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/pull_request/url`.
                        public var url: Swift.String?
                        /// Creates a new `PullRequestPayload`.
                        ///
                        /// - Parameters:
                        ///   - diffUrl:
                        ///   - htmlUrl:
                        ///   - mergedAt:
                        ///   - patchUrl:
                        ///   - url:
                        public init(
                            diffUrl: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            mergedAt: Foundation.Date? = nil,
                            patchUrl: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.diffUrl = diffUrl
                            self.htmlUrl = htmlUrl
                            self.mergedAt = mergedAt
                            self.patchUrl = patchUrl
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case diffUrl = "diff_url"
                            case htmlUrl = "html_url"
                            case mergedAt = "merged_at"
                            case patchUrl = "patch_url"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/pull_request`.
                    public var pullRequest: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PullRequestPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/reactions`.
                    public struct ReactionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/reactions/+1`.
                        public var _plus_1: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/reactions/-1`.
                        public var _hyphen_1: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/reactions/confused`.
                        public var confused: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/reactions/eyes`.
                        public var eyes: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/reactions/heart`.
                        public var heart: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/reactions/hooray`.
                        public var hooray: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/reactions/laugh`.
                        public var laugh: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/reactions/rocket`.
                        public var rocket: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/reactions/total_count`.
                        public var totalCount: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/reactions/url`.
                        public var url: Swift.String
                        /// Creates a new `ReactionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - _plus_1:
                        ///   - _hyphen_1:
                        ///   - confused:
                        ///   - eyes:
                        ///   - heart:
                        ///   - hooray:
                        ///   - laugh:
                        ///   - rocket:
                        ///   - totalCount:
                        ///   - url:
                        public init(
                            _plus_1: Swift.Int,
                            _hyphen_1: Swift.Int,
                            confused: Swift.Int,
                            eyes: Swift.Int,
                            heart: Swift.Int,
                            hooray: Swift.Int,
                            laugh: Swift.Int,
                            rocket: Swift.Int,
                            totalCount: Swift.Int,
                            url: Swift.String
                        ) {
                            self._plus_1 = _plus_1
                            self._hyphen_1 = _hyphen_1
                            self.confused = confused
                            self.eyes = eyes
                            self.heart = heart
                            self.hooray = hooray
                            self.laugh = laugh
                            self.rocket = rocket
                            self.totalCount = totalCount
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _plus_1 = "+1"
                            case _hyphen_1 = "-1"
                            case confused
                            case eyes
                            case heart
                            case hooray
                            case laugh
                            case rocket
                            case totalCount = "total_count"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/reactions`.
                    public var reactions: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.ReactionsPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/repository_url`.
                    public var repositoryUrl: Swift.String
                    /// State of the issue; either 'open' or 'closed'
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/state`.
                    @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case closed = "closed"
                    }
                    /// State of the issue; either 'open' or 'closed'
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/state`.
                    public var state: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.StatePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/state_reason`.
                    public var stateReason: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/timeline_url`.
                    public var timelineUrl: Swift.String?
                    /// Title of the issue
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/title`.
                    public var title: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/updated_at`.
                    public var updatedAt: Foundation.Date
                    /// URL for the issue
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/url`.
                    public var url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/user`.
                    public struct UserPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/user/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/user/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/user/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/user/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/user/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/user/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/user/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/user/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/user/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/user/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/user/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/user/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/user/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/user/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/user/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/user/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/user/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/user/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/user/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/user/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                            case mannequin = "Mannequin"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/user/type`.
                        public var _type: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.UserPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/user/url`.
                        public var url: Swift.String?
                        /// Creates a new `UserPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.UserPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1/user`.
                    public var user: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.UserPayload?
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - activeLockReason:
                    ///   - assignee:
                    ///   - assignees:
                    ///   - authorAssociation: How the author is associated with the repository.
                    ///   - body: Contents of the issue
                    ///   - closedAt:
                    ///   - comments:
                    ///   - commentsUrl:
                    ///   - createdAt:
                    ///   - draft:
                    ///   - eventsUrl:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - labels:
                    ///   - labelsUrl:
                    ///   - locked:
                    ///   - milestone: A collection of related issues and pull requests.
                    ///   - nodeId:
                    ///   - number:
                    ///   - performedViaGithubApp: GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                    ///   - pullRequest:
                    ///   - reactions:
                    ///   - repositoryUrl:
                    ///   - state: State of the issue; either 'open' or 'closed'
                    ///   - stateReason:
                    ///   - timelineUrl:
                    ///   - title: Title of the issue
                    ///   - updatedAt:
                    ///   - url: URL for the issue
                    ///   - user:
                    public init(
                        activeLockReason: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.ActiveLockReasonPayload? = nil,
                        assignee: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.AssigneePayload? = nil,
                        assignees: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.AssigneesPayload,
                        authorAssociation: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.AuthorAssociationPayload,
                        body: Swift.String? = nil,
                        closedAt: Foundation.Date? = nil,
                        comments: Swift.Int,
                        commentsUrl: Swift.String,
                        createdAt: Foundation.Date,
                        draft: Swift.Bool? = nil,
                        eventsUrl: Swift.String,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        labels: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.LabelsPayload? = nil,
                        labelsUrl: Swift.String,
                        locked: Swift.Bool? = nil,
                        milestone: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.MilestonePayload? = nil,
                        nodeId: Swift.String,
                        number: Swift.Int,
                        performedViaGithubApp: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload? = nil,
                        pullRequest: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.PullRequestPayload? = nil,
                        reactions: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.ReactionsPayload,
                        repositoryUrl: Swift.String,
                        state: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.StatePayload? = nil,
                        stateReason: Swift.String? = nil,
                        timelineUrl: Swift.String? = nil,
                        title: Swift.String,
                        updatedAt: Foundation.Date,
                        url: Swift.String,
                        user: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload.UserPayload? = nil
                    ) {
                        self.activeLockReason = activeLockReason
                        self.assignee = assignee
                        self.assignees = assignees
                        self.authorAssociation = authorAssociation
                        self.body = body
                        self.closedAt = closedAt
                        self.comments = comments
                        self.commentsUrl = commentsUrl
                        self.createdAt = createdAt
                        self.draft = draft
                        self.eventsUrl = eventsUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.labels = labels
                        self.labelsUrl = labelsUrl
                        self.locked = locked
                        self.milestone = milestone
                        self.nodeId = nodeId
                        self.number = number
                        self.performedViaGithubApp = performedViaGithubApp
                        self.pullRequest = pullRequest
                        self.reactions = reactions
                        self.repositoryUrl = repositoryUrl
                        self.state = state
                        self.stateReason = stateReason
                        self.timelineUrl = timelineUrl
                        self.title = title
                        self.updatedAt = updatedAt
                        self.url = url
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case activeLockReason = "active_lock_reason"
                        case assignee
                        case assignees
                        case authorAssociation = "author_association"
                        case body
                        case closedAt = "closed_at"
                        case comments
                        case commentsUrl = "comments_url"
                        case createdAt = "created_at"
                        case draft
                        case eventsUrl = "events_url"
                        case htmlUrl = "html_url"
                        case id
                        case labels
                        case labelsUrl = "labels_url"
                        case locked
                        case milestone
                        case nodeId = "node_id"
                        case number
                        case performedViaGithubApp = "performed_via_github_app"
                        case pullRequest = "pull_request"
                        case reactions
                        case repositoryUrl = "repository_url"
                        case state
                        case stateReason = "state_reason"
                        case timelineUrl = "timeline_url"
                        case title
                        case updatedAt = "updated_at"
                        case url
                        case user
                    }
                }
                /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value1`.
                public var value1: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/active_lock_reason`.
                    public var activeLockReason: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/assignee`.
                    public var assignee: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/assignees`.
                    public var assignees: [OpenAPIRuntime.OpenAPIObjectContainer?]?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/author_association`.
                    public var authorAssociation: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/body`.
                    public var body: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/closed_at`.
                    public var closedAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/comments`.
                    public var comments: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/comments_url`.
                    public var commentsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/created_at`.
                    public var createdAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/id`.
                    public var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/labels`.
                    public var labels: [OpenAPIRuntime.OpenAPIObjectContainer?]?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/labels_url`.
                    public var labelsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/locked`.
                    public var locked: Swift.Bool?
                    /// A collection of related issues and pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone`.
                    public struct MilestonePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/closed_at`.
                        public var closedAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/closed_issues`.
                        public var closedIssues: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/created_at`.
                        public var createdAt: Foundation.Date
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/creator`.
                        public struct CreatorPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/creator/avatar_url`.
                            public var avatarUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/creator/deleted`.
                            public var deleted: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/creator/email`.
                            public var email: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/creator/events_url`.
                            public var eventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/creator/followers_url`.
                            public var followersUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/creator/following_url`.
                            public var followingUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/creator/gists_url`.
                            public var gistsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/creator/gravatar_id`.
                            public var gravatarId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/creator/html_url`.
                            public var htmlUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/creator/id`.
                            public var id: Swift.Int
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/creator/login`.
                            public var login: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/creator/name`.
                            public var name: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/creator/node_id`.
                            public var nodeId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/creator/organizations_url`.
                            public var organizationsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/creator/received_events_url`.
                            public var receivedEventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/creator/repos_url`.
                            public var reposUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/creator/site_admin`.
                            public var siteAdmin: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/creator/starred_url`.
                            public var starredUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/creator/subscriptions_url`.
                            public var subscriptionsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/creator/type`.
                            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case bot = "Bot"
                                case user = "User"
                                case organization = "Organization"
                                case mannequin = "Mannequin"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/creator/type`.
                            public var _type: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value2Payload.MilestonePayload.CreatorPayload._TypePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/creator/url`.
                            public var url: Swift.String?
                            /// Creates a new `CreatorPayload`.
                            ///
                            /// - Parameters:
                            ///   - avatarUrl:
                            ///   - deleted:
                            ///   - email:
                            ///   - eventsUrl:
                            ///   - followersUrl:
                            ///   - followingUrl:
                            ///   - gistsUrl:
                            ///   - gravatarId:
                            ///   - htmlUrl:
                            ///   - id:
                            ///   - login:
                            ///   - name:
                            ///   - nodeId:
                            ///   - organizationsUrl:
                            ///   - receivedEventsUrl:
                            ///   - reposUrl:
                            ///   - siteAdmin:
                            ///   - starredUrl:
                            ///   - subscriptionsUrl:
                            ///   - _type:
                            ///   - url:
                            public init(
                                avatarUrl: Swift.String? = nil,
                                deleted: Swift.Bool? = nil,
                                email: Swift.String? = nil,
                                eventsUrl: Swift.String? = nil,
                                followersUrl: Swift.String? = nil,
                                followingUrl: Swift.String? = nil,
                                gistsUrl: Swift.String? = nil,
                                gravatarId: Swift.String? = nil,
                                htmlUrl: Swift.String? = nil,
                                id: Swift.Int,
                                login: Swift.String,
                                name: Swift.String? = nil,
                                nodeId: Swift.String? = nil,
                                organizationsUrl: Swift.String? = nil,
                                receivedEventsUrl: Swift.String? = nil,
                                reposUrl: Swift.String? = nil,
                                siteAdmin: Swift.Bool? = nil,
                                starredUrl: Swift.String? = nil,
                                subscriptionsUrl: Swift.String? = nil,
                                _type: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value2Payload.MilestonePayload.CreatorPayload._TypePayload? = nil,
                                url: Swift.String? = nil
                            ) {
                                self.avatarUrl = avatarUrl
                                self.deleted = deleted
                                self.email = email
                                self.eventsUrl = eventsUrl
                                self.followersUrl = followersUrl
                                self.followingUrl = followingUrl
                                self.gistsUrl = gistsUrl
                                self.gravatarId = gravatarId
                                self.htmlUrl = htmlUrl
                                self.id = id
                                self.login = login
                                self.name = name
                                self.nodeId = nodeId
                                self.organizationsUrl = organizationsUrl
                                self.receivedEventsUrl = receivedEventsUrl
                                self.reposUrl = reposUrl
                                self.siteAdmin = siteAdmin
                                self.starredUrl = starredUrl
                                self.subscriptionsUrl = subscriptionsUrl
                                self._type = _type
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case avatarUrl = "avatar_url"
                                case deleted
                                case email
                                case eventsUrl = "events_url"
                                case followersUrl = "followers_url"
                                case followingUrl = "following_url"
                                case gistsUrl = "gists_url"
                                case gravatarId = "gravatar_id"
                                case htmlUrl = "html_url"
                                case id
                                case login
                                case name
                                case nodeId = "node_id"
                                case organizationsUrl = "organizations_url"
                                case receivedEventsUrl = "received_events_url"
                                case reposUrl = "repos_url"
                                case siteAdmin = "site_admin"
                                case starredUrl = "starred_url"
                                case subscriptionsUrl = "subscriptions_url"
                                case _type = "type"
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/creator`.
                        public var creator: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value2Payload.MilestonePayload.CreatorPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/due_on`.
                        public var dueOn: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/html_url`.
                        public var htmlUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/labels_url`.
                        public var labelsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/node_id`.
                        public var nodeId: Swift.String
                        /// The number of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/number`.
                        public var number: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/open_issues`.
                        public var openIssues: Swift.Int
                        /// The state of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/state`.
                        @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case open = "open"
                            case closed = "closed"
                        }
                        /// The state of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/state`.
                        public var state: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value2Payload.MilestonePayload.StatePayload
                        /// The title of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/title`.
                        public var title: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/updated_at`.
                        public var updatedAt: Foundation.Date
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone/url`.
                        public var url: Swift.String
                        /// Creates a new `MilestonePayload`.
                        ///
                        /// - Parameters:
                        ///   - closedAt:
                        ///   - closedIssues:
                        ///   - createdAt:
                        ///   - creator:
                        ///   - description:
                        ///   - dueOn:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - labelsUrl:
                        ///   - nodeId:
                        ///   - number: The number of the milestone.
                        ///   - openIssues:
                        ///   - state: The state of the milestone.
                        ///   - title: The title of the milestone.
                        ///   - updatedAt:
                        ///   - url:
                        public init(
                            closedAt: Foundation.Date? = nil,
                            closedIssues: Swift.Int,
                            createdAt: Foundation.Date,
                            creator: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value2Payload.MilestonePayload.CreatorPayload? = nil,
                            description: Swift.String? = nil,
                            dueOn: Foundation.Date? = nil,
                            htmlUrl: Swift.String,
                            id: Swift.Int,
                            labelsUrl: Swift.String,
                            nodeId: Swift.String,
                            number: Swift.Int,
                            openIssues: Swift.Int,
                            state: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value2Payload.MilestonePayload.StatePayload,
                            title: Swift.String,
                            updatedAt: Foundation.Date,
                            url: Swift.String
                        ) {
                            self.closedAt = closedAt
                            self.closedIssues = closedIssues
                            self.createdAt = createdAt
                            self.creator = creator
                            self.description = description
                            self.dueOn = dueOn
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.labelsUrl = labelsUrl
                            self.nodeId = nodeId
                            self.number = number
                            self.openIssues = openIssues
                            self.state = state
                            self.title = title
                            self.updatedAt = updatedAt
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case closedAt = "closed_at"
                            case closedIssues = "closed_issues"
                            case createdAt = "created_at"
                            case creator
                            case description
                            case dueOn = "due_on"
                            case htmlUrl = "html_url"
                            case id
                            case labelsUrl = "labels_url"
                            case nodeId = "node_id"
                            case number
                            case openIssues = "open_issues"
                            case state
                            case title
                            case updatedAt = "updated_at"
                            case url
                        }
                    }
                    /// A collection of related issues and pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/milestone`.
                    public var milestone: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value2Payload.MilestonePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/number`.
                    public var number: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/performed_via_github_app`.
                    public var performedViaGithubApp: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/reactions`.
                    public struct ReactionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/reactions/+1`.
                        public var _plus_1: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/reactions/-1`.
                        public var _hyphen_1: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/reactions/confused`.
                        public var confused: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/reactions/eyes`.
                        public var eyes: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/reactions/heart`.
                        public var heart: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/reactions/hooray`.
                        public var hooray: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/reactions/laugh`.
                        public var laugh: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/reactions/rocket`.
                        public var rocket: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/reactions/total_count`.
                        public var totalCount: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/reactions/url`.
                        public var url: Swift.String?
                        /// Creates a new `ReactionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - _plus_1:
                        ///   - _hyphen_1:
                        ///   - confused:
                        ///   - eyes:
                        ///   - heart:
                        ///   - hooray:
                        ///   - laugh:
                        ///   - rocket:
                        ///   - totalCount:
                        ///   - url:
                        public init(
                            _plus_1: Swift.Int? = nil,
                            _hyphen_1: Swift.Int? = nil,
                            confused: Swift.Int? = nil,
                            eyes: Swift.Int? = nil,
                            heart: Swift.Int? = nil,
                            hooray: Swift.Int? = nil,
                            laugh: Swift.Int? = nil,
                            rocket: Swift.Int? = nil,
                            totalCount: Swift.Int? = nil,
                            url: Swift.String? = nil
                        ) {
                            self._plus_1 = _plus_1
                            self._hyphen_1 = _hyphen_1
                            self.confused = confused
                            self.eyes = eyes
                            self.heart = heart
                            self.hooray = hooray
                            self.laugh = laugh
                            self.rocket = rocket
                            self.totalCount = totalCount
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _plus_1 = "+1"
                            case _hyphen_1 = "-1"
                            case confused
                            case eyes
                            case heart
                            case hooray
                            case laugh
                            case rocket
                            case totalCount = "total_count"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/reactions`.
                    public var reactions: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value2Payload.ReactionsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/repository_url`.
                    public var repositoryUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/state`.
                    public var state: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/timeline_url`.
                    public var timelineUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/title`.
                    public var title: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/updated_at`.
                    public var updatedAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/url`.
                    public var url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/user`.
                    public struct UserPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/user/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/user/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/user/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/user/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/user/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/user/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/user/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/user/id`.
                        public var id: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/user/login`.
                        public var login: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/user/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/user/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/user/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/user/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/user/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/user/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/user/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/user/type`.
                        public var _type: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/user/url`.
                        public var url: Swift.String?
                        /// Creates a new `UserPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int? = nil,
                            login: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2/user`.
                    public var user: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value2Payload.UserPayload?
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - activeLockReason:
                    ///   - assignee:
                    ///   - assignees:
                    ///   - authorAssociation:
                    ///   - body:
                    ///   - closedAt:
                    ///   - comments:
                    ///   - commentsUrl:
                    ///   - createdAt:
                    ///   - eventsUrl:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - labels:
                    ///   - labelsUrl:
                    ///   - locked:
                    ///   - milestone: A collection of related issues and pull requests.
                    ///   - nodeId:
                    ///   - number:
                    ///   - performedViaGithubApp:
                    ///   - reactions:
                    ///   - repositoryUrl:
                    ///   - state:
                    ///   - timelineUrl:
                    ///   - title:
                    ///   - updatedAt:
                    ///   - url:
                    ///   - user:
                    public init(
                        activeLockReason: Swift.String? = nil,
                        assignee: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                        assignees: [OpenAPIRuntime.OpenAPIObjectContainer?]? = nil,
                        authorAssociation: Swift.String? = nil,
                        body: Swift.String? = nil,
                        closedAt: Swift.String? = nil,
                        comments: Swift.Int? = nil,
                        commentsUrl: Swift.String? = nil,
                        createdAt: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int? = nil,
                        labels: [OpenAPIRuntime.OpenAPIObjectContainer?]? = nil,
                        labelsUrl: Swift.String? = nil,
                        locked: Swift.Bool? = nil,
                        milestone: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value2Payload.MilestonePayload? = nil,
                        nodeId: Swift.String? = nil,
                        number: Swift.Int? = nil,
                        performedViaGithubApp: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                        reactions: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value2Payload.ReactionsPayload? = nil,
                        repositoryUrl: Swift.String? = nil,
                        state: Swift.String? = nil,
                        timelineUrl: Swift.String? = nil,
                        title: Swift.String? = nil,
                        updatedAt: Swift.String? = nil,
                        url: Swift.String? = nil,
                        user: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value2Payload.UserPayload? = nil
                    ) {
                        self.activeLockReason = activeLockReason
                        self.assignee = assignee
                        self.assignees = assignees
                        self.authorAssociation = authorAssociation
                        self.body = body
                        self.closedAt = closedAt
                        self.comments = comments
                        self.commentsUrl = commentsUrl
                        self.createdAt = createdAt
                        self.eventsUrl = eventsUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.labels = labels
                        self.labelsUrl = labelsUrl
                        self.locked = locked
                        self.milestone = milestone
                        self.nodeId = nodeId
                        self.number = number
                        self.performedViaGithubApp = performedViaGithubApp
                        self.reactions = reactions
                        self.repositoryUrl = repositoryUrl
                        self.state = state
                        self.timelineUrl = timelineUrl
                        self.title = title
                        self.updatedAt = updatedAt
                        self.url = url
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case activeLockReason = "active_lock_reason"
                        case assignee
                        case assignees
                        case authorAssociation = "author_association"
                        case body
                        case closedAt = "closed_at"
                        case comments
                        case commentsUrl = "comments_url"
                        case createdAt = "created_at"
                        case eventsUrl = "events_url"
                        case htmlUrl = "html_url"
                        case id
                        case labels
                        case labelsUrl = "labels_url"
                        case locked
                        case milestone
                        case nodeId = "node_id"
                        case number
                        case performedViaGithubApp = "performed_via_github_app"
                        case reactions
                        case repositoryUrl = "repository_url"
                        case state
                        case timelineUrl = "timeline_url"
                        case title
                        case updatedAt = "updated_at"
                        case url
                        case user
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue/value2`.
                public var value2: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value2Payload
                /// Creates a new `IssuePayload`.
                ///
                /// - Parameters:
                ///   - value1: The [issue](https://docs.github.com/en/rest/reference/issues) itself.
                ///   - value2:
                public init(
                    value1: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value1Payload,
                    value2: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/issue`.
            public var issue: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload
            /// A collection of related issues and pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone`.
            public struct MilestonePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/closed_at`.
                public var closedAt: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/closed_issues`.
                public var closedIssues: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/created_at`.
                public var createdAt: Foundation.Date
                /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/creator`.
                public struct CreatorPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/creator/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/creator/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/creator/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/creator/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/creator/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/creator/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/creator/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/creator/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/creator/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/creator/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/creator/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/creator/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/creator/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/creator/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/creator/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/creator/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/creator/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/creator/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/creator/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/creator/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                        case mannequin = "Mannequin"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/creator/type`.
                    public var _type: Components.Schemas.WebhookIssuesDemilestoned.MilestonePayload.CreatorPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/creator/url`.
                    public var url: Swift.String?
                    /// Creates a new `CreatorPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookIssuesDemilestoned.MilestonePayload.CreatorPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/creator`.
                public var creator: Components.Schemas.WebhookIssuesDemilestoned.MilestonePayload.CreatorPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/description`.
                public var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/due_on`.
                public var dueOn: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/html_url`.
                public var htmlUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/labels_url`.
                public var labelsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/node_id`.
                public var nodeId: Swift.String
                /// The number of the milestone.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/number`.
                public var number: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/open_issues`.
                public var openIssues: Swift.Int
                /// The state of the milestone.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/state`.
                @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case open = "open"
                    case closed = "closed"
                }
                /// The state of the milestone.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/state`.
                public var state: Components.Schemas.WebhookIssuesDemilestoned.MilestonePayload.StatePayload
                /// The title of the milestone.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/title`.
                public var title: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/updated_at`.
                public var updatedAt: Foundation.Date
                /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone/url`.
                public var url: Swift.String
                /// Creates a new `MilestonePayload`.
                ///
                /// - Parameters:
                ///   - closedAt:
                ///   - closedIssues:
                ///   - createdAt:
                ///   - creator:
                ///   - description:
                ///   - dueOn:
                ///   - htmlUrl:
                ///   - id:
                ///   - labelsUrl:
                ///   - nodeId:
                ///   - number: The number of the milestone.
                ///   - openIssues:
                ///   - state: The state of the milestone.
                ///   - title: The title of the milestone.
                ///   - updatedAt:
                ///   - url:
                public init(
                    closedAt: Foundation.Date? = nil,
                    closedIssues: Swift.Int,
                    createdAt: Foundation.Date,
                    creator: Components.Schemas.WebhookIssuesDemilestoned.MilestonePayload.CreatorPayload? = nil,
                    description: Swift.String? = nil,
                    dueOn: Foundation.Date? = nil,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    labelsUrl: Swift.String,
                    nodeId: Swift.String,
                    number: Swift.Int,
                    openIssues: Swift.Int,
                    state: Components.Schemas.WebhookIssuesDemilestoned.MilestonePayload.StatePayload,
                    title: Swift.String,
                    updatedAt: Foundation.Date,
                    url: Swift.String
                ) {
                    self.closedAt = closedAt
                    self.closedIssues = closedIssues
                    self.createdAt = createdAt
                    self.creator = creator
                    self.description = description
                    self.dueOn = dueOn
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.labelsUrl = labelsUrl
                    self.nodeId = nodeId
                    self.number = number
                    self.openIssues = openIssues
                    self.state = state
                    self.title = title
                    self.updatedAt = updatedAt
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case closedAt = "closed_at"
                    case closedIssues = "closed_issues"
                    case createdAt = "created_at"
                    case creator
                    case description
                    case dueOn = "due_on"
                    case htmlUrl = "html_url"
                    case id
                    case labelsUrl = "labels_url"
                    case nodeId = "node_id"
                    case number
                    case openIssues = "open_issues"
                    case state
                    case title
                    case updatedAt = "updated_at"
                    case url
                }
            }
            /// A collection of related issues and pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/milestone`.
            public var milestone: Components.Schemas.WebhookIssuesDemilestoned.MilestonePayload?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-issues-demilestoned/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Creates a new `WebhookIssuesDemilestoned`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - enterprise:
            ///   - installation:
            ///   - issue:
            ///   - milestone: A collection of related issues and pull requests.
            ///   - organization:
            ///   - repository:
            ///   - sender:
            public init(
                action: Components.Schemas.WebhookIssuesDemilestoned.ActionPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                issue: Components.Schemas.WebhookIssuesDemilestoned.IssuePayload,
                milestone: Components.Schemas.WebhookIssuesDemilestoned.MilestonePayload? = nil,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser
            ) {
                self.action = action
                self.enterprise = enterprise
                self.installation = installation
                self.issue = issue
                self.milestone = milestone
                self.organization = organization
                self.repository = repository
                self.sender = sender
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case enterprise
                case installation
                case issue
                case milestone
                case organization
                case repository
                case sender
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited`.
        public struct WebhookIssuesEdited: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case edited = "edited"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/action`.
            public var action: Components.Schemas.WebhookIssuesEdited.ActionPayload
            /// The changes to the issue.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/changes`.
            public struct ChangesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/changes/body`.
                public struct BodyPayload: Codable, Hashable, Sendable {
                    /// The previous version of the body.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/changes/body/from`.
                    public var from: Swift.String
                    /// Creates a new `BodyPayload`.
                    ///
                    /// - Parameters:
                    ///   - from: The previous version of the body.
                    public init(from: Swift.String) {
                        self.from = from
                    }
                    public enum CodingKeys: String, CodingKey {
                        case from
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/changes/body`.
                public var body: Components.Schemas.WebhookIssuesEdited.ChangesPayload.BodyPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/changes/title`.
                public struct TitlePayload: Codable, Hashable, Sendable {
                    /// The previous version of the title.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/changes/title/from`.
                    public var from: Swift.String
                    /// Creates a new `TitlePayload`.
                    ///
                    /// - Parameters:
                    ///   - from: The previous version of the title.
                    public init(from: Swift.String) {
                        self.from = from
                    }
                    public enum CodingKeys: String, CodingKey {
                        case from
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/changes/title`.
                public var title: Components.Schemas.WebhookIssuesEdited.ChangesPayload.TitlePayload?
                /// Creates a new `ChangesPayload`.
                ///
                /// - Parameters:
                ///   - body:
                ///   - title:
                public init(
                    body: Components.Schemas.WebhookIssuesEdited.ChangesPayload.BodyPayload? = nil,
                    title: Components.Schemas.WebhookIssuesEdited.ChangesPayload.TitlePayload? = nil
                ) {
                    self.body = body
                    self.title = title
                }
                public enum CodingKeys: String, CodingKey {
                    case body
                    case title
                }
            }
            /// The changes to the issue.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/changes`.
            public var changes: Components.Schemas.WebhookIssuesEdited.ChangesPayload
            /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue`.
            public struct IssuePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/active_lock_reason`.
                @frozen public enum ActiveLockReasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case resolved = "resolved"
                    case offTopic = "off-topic"
                    case tooHeated = "too heated"
                    case spam = "spam"
                    case _empty_ = ""
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/active_lock_reason`.
                public var activeLockReason: Components.Schemas.WebhookIssuesEdited.IssuePayload.ActiveLockReasonPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/assignee`.
                public struct AssigneePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/assignee/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/assignee/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/assignee/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/assignee/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/assignee/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/assignee/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/assignee/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/assignee/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/assignee/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/assignee/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/assignee/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/assignee/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/assignee/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/assignee/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/assignee/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/assignee/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/assignee/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/assignee/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/assignee/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/assignee/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                        case mannequin = "Mannequin"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/assignee/type`.
                    public var _type: Components.Schemas.WebhookIssuesEdited.IssuePayload.AssigneePayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/assignee/url`.
                    public var url: Swift.String?
                    /// Creates a new `AssigneePayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookIssuesEdited.IssuePayload.AssigneePayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/assignee`.
                public var assignee: Components.Schemas.WebhookIssuesEdited.IssuePayload.AssigneePayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/AssigneesPayload`.
                public struct AssigneesPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/AssigneesPayload/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/AssigneesPayload/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/AssigneesPayload/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/AssigneesPayload/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/AssigneesPayload/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/AssigneesPayload/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/AssigneesPayload/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/AssigneesPayload/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/AssigneesPayload/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/AssigneesPayload/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/AssigneesPayload/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/AssigneesPayload/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/AssigneesPayload/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/AssigneesPayload/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/AssigneesPayload/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/AssigneesPayload/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/AssigneesPayload/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/AssigneesPayload/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/AssigneesPayload/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/AssigneesPayload/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                        case mannequin = "Mannequin"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/AssigneesPayload/type`.
                    public var _type: Components.Schemas.WebhookIssuesEdited.IssuePayload.AssigneesPayloadPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/AssigneesPayload/url`.
                    public var url: Swift.String?
                    /// Creates a new `AssigneesPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookIssuesEdited.IssuePayload.AssigneesPayloadPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/assignees`.
                public typealias AssigneesPayload = [Components.Schemas.WebhookIssuesEdited.IssuePayload.AssigneesPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/assignees`.
                public var assignees: Components.Schemas.WebhookIssuesEdited.IssuePayload.AssigneesPayload
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/author_association`.
                @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case collaborator = "COLLABORATOR"
                    case contributor = "CONTRIBUTOR"
                    case firstTimer = "FIRST_TIMER"
                    case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                    case mannequin = "MANNEQUIN"
                    case member = "MEMBER"
                    case none = "NONE"
                    case owner = "OWNER"
                }
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/author_association`.
                public var authorAssociation: Components.Schemas.WebhookIssuesEdited.IssuePayload.AuthorAssociationPayload
                /// Contents of the issue
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/body`.
                public var body: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/closed_at`.
                public var closedAt: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/comments`.
                public var comments: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/comments_url`.
                public var commentsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/created_at`.
                public var createdAt: Foundation.Date
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/draft`.
                public var draft: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/events_url`.
                public var eventsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/html_url`.
                public var htmlUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/LabelsPayload`.
                public struct LabelsPayloadPayload: Codable, Hashable, Sendable {
                    /// 6-character hex code, without the leading #, identifying the color
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/LabelsPayload/color`.
                    public var color: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/LabelsPayload/default`.
                    public var _default: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/LabelsPayload/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/LabelsPayload/id`.
                    public var id: Swift.Int
                    /// The name of the label.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/LabelsPayload/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/LabelsPayload/node_id`.
                    public var nodeId: Swift.String
                    /// URL for the label
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/LabelsPayload/url`.
                    public var url: Swift.String
                    /// Creates a new `LabelsPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - color: 6-character hex code, without the leading #, identifying the color
                    ///   - _default:
                    ///   - description:
                    ///   - id:
                    ///   - name: The name of the label.
                    ///   - nodeId:
                    ///   - url: URL for the label
                    public init(
                        color: Swift.String,
                        _default: Swift.Bool,
                        description: Swift.String? = nil,
                        id: Swift.Int,
                        name: Swift.String,
                        nodeId: Swift.String,
                        url: Swift.String
                    ) {
                        self.color = color
                        self._default = _default
                        self.description = description
                        self.id = id
                        self.name = name
                        self.nodeId = nodeId
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case color
                        case _default = "default"
                        case description
                        case id
                        case name
                        case nodeId = "node_id"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/labels`.
                public typealias LabelsPayload = [Components.Schemas.WebhookIssuesEdited.IssuePayload.LabelsPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/labels`.
                public var labels: Components.Schemas.WebhookIssuesEdited.IssuePayload.LabelsPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/labels_url`.
                public var labelsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/locked`.
                public var locked: Swift.Bool?
                /// A collection of related issues and pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone`.
                public struct MilestonePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/closed_at`.
                    public var closedAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/closed_issues`.
                    public var closedIssues: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/created_at`.
                    public var createdAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/creator`.
                    public struct CreatorPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/creator/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/creator/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/creator/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/creator/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/creator/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/creator/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/creator/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/creator/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/creator/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/creator/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/creator/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/creator/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/creator/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/creator/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/creator/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/creator/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/creator/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/creator/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/creator/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/creator/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                            case mannequin = "Mannequin"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/creator/type`.
                        public var _type: Components.Schemas.WebhookIssuesEdited.IssuePayload.MilestonePayload.CreatorPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/creator/url`.
                        public var url: Swift.String?
                        /// Creates a new `CreatorPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesEdited.IssuePayload.MilestonePayload.CreatorPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/creator`.
                    public var creator: Components.Schemas.WebhookIssuesEdited.IssuePayload.MilestonePayload.CreatorPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/due_on`.
                    public var dueOn: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/html_url`.
                    public var htmlUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/labels_url`.
                    public var labelsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/node_id`.
                    public var nodeId: Swift.String
                    /// The number of the milestone.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/number`.
                    public var number: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/open_issues`.
                    public var openIssues: Swift.Int
                    /// The state of the milestone.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/state`.
                    @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case closed = "closed"
                    }
                    /// The state of the milestone.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/state`.
                    public var state: Components.Schemas.WebhookIssuesEdited.IssuePayload.MilestonePayload.StatePayload
                    /// The title of the milestone.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/title`.
                    public var title: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/updated_at`.
                    public var updatedAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone/url`.
                    public var url: Swift.String
                    /// Creates a new `MilestonePayload`.
                    ///
                    /// - Parameters:
                    ///   - closedAt:
                    ///   - closedIssues:
                    ///   - createdAt:
                    ///   - creator:
                    ///   - description:
                    ///   - dueOn:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - labelsUrl:
                    ///   - nodeId:
                    ///   - number: The number of the milestone.
                    ///   - openIssues:
                    ///   - state: The state of the milestone.
                    ///   - title: The title of the milestone.
                    ///   - updatedAt:
                    ///   - url:
                    public init(
                        closedAt: Foundation.Date? = nil,
                        closedIssues: Swift.Int,
                        createdAt: Foundation.Date,
                        creator: Components.Schemas.WebhookIssuesEdited.IssuePayload.MilestonePayload.CreatorPayload? = nil,
                        description: Swift.String? = nil,
                        dueOn: Foundation.Date? = nil,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        labelsUrl: Swift.String,
                        nodeId: Swift.String,
                        number: Swift.Int,
                        openIssues: Swift.Int,
                        state: Components.Schemas.WebhookIssuesEdited.IssuePayload.MilestonePayload.StatePayload,
                        title: Swift.String,
                        updatedAt: Foundation.Date,
                        url: Swift.String
                    ) {
                        self.closedAt = closedAt
                        self.closedIssues = closedIssues
                        self.createdAt = createdAt
                        self.creator = creator
                        self.description = description
                        self.dueOn = dueOn
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.labelsUrl = labelsUrl
                        self.nodeId = nodeId
                        self.number = number
                        self.openIssues = openIssues
                        self.state = state
                        self.title = title
                        self.updatedAt = updatedAt
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case closedAt = "closed_at"
                        case closedIssues = "closed_issues"
                        case createdAt = "created_at"
                        case creator
                        case description
                        case dueOn = "due_on"
                        case htmlUrl = "html_url"
                        case id
                        case labelsUrl = "labels_url"
                        case nodeId = "node_id"
                        case number
                        case openIssues = "open_issues"
                        case state
                        case title
                        case updatedAt = "updated_at"
                        case url
                    }
                }
                /// A collection of related issues and pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/milestone`.
                public var milestone: Components.Schemas.WebhookIssuesEdited.IssuePayload.MilestonePayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/number`.
                public var number: Swift.Int
                /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app`.
                public struct PerformedViaGithubAppPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/created_at`.
                    public var createdAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/EventsPayload`.
                    @frozen public enum EventsPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case branchProtectionRule = "branch_protection_rule"
                        case checkRun = "check_run"
                        case checkSuite = "check_suite"
                        case codeScanningAlert = "code_scanning_alert"
                        case commitComment = "commit_comment"
                        case contentReference = "content_reference"
                        case create = "create"
                        case delete = "delete"
                        case deployment = "deployment"
                        case deploymentReview = "deployment_review"
                        case deploymentStatus = "deployment_status"
                        case deployKey = "deploy_key"
                        case discussion = "discussion"
                        case discussionComment = "discussion_comment"
                        case fork = "fork"
                        case gollum = "gollum"
                        case issues = "issues"
                        case issueComment = "issue_comment"
                        case label = "label"
                        case member = "member"
                        case membership = "membership"
                        case milestone = "milestone"
                        case organization = "organization"
                        case orgBlock = "org_block"
                        case pageBuild = "page_build"
                        case project = "project"
                        case projectCard = "project_card"
                        case projectColumn = "project_column"
                        case _public = "public"
                        case pullRequest = "pull_request"
                        case pullRequestReview = "pull_request_review"
                        case pullRequestReviewComment = "pull_request_review_comment"
                        case push = "push"
                        case registryPackage = "registry_package"
                        case release = "release"
                        case repository = "repository"
                        case repositoryDispatch = "repository_dispatch"
                        case secretScanningAlert = "secret_scanning_alert"
                        case star = "star"
                        case status = "status"
                        case team = "team"
                        case teamAdd = "team_add"
                        case watch = "watch"
                        case workflowDispatch = "workflow_dispatch"
                        case workflowRun = "workflow_run"
                        case securityAndAnalysis = "security_and_analysis"
                        case pullRequestReviewThread = "pull_request_review_thread"
                        case reminder = "reminder"
                    }
                    /// The list of events for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/events`.
                    public typealias EventsPayload = [Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.EventsPayloadPayload]
                    /// The list of events for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/events`.
                    public var events: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.EventsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/external_url`.
                    public var externalUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/html_url`.
                    public var htmlUrl: Swift.String
                    /// Unique identifier of the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/id`.
                    public var id: Swift.Int?
                    /// The name of the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/owner`.
                    public struct OwnerPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/owner/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/owner/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/owner/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/owner/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/owner/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/owner/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/owner/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/owner/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/owner/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/owner/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/owner/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/owner/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/owner/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/owner/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/owner/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/owner/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/owner/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/owner/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/owner/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/owner/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/owner/type`.
                        public var _type: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/owner/url`.
                        public var url: Swift.String?
                        /// Creates a new `OwnerPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/owner`.
                    public var owner: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.OwnerPayload?
                    /// The set of permissions for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions`.
                    public struct PermissionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/actions`.
                        @frozen public enum ActionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/actions`.
                        public var actions: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/administration`.
                        @frozen public enum AdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/administration`.
                        public var administration: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/checks`.
                        @frozen public enum ChecksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/checks`.
                        public var checks: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/content_references`.
                        @frozen public enum ContentReferencesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/content_references`.
                        public var contentReferences: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/contents`.
                        @frozen public enum ContentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/contents`.
                        public var contents: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/deployments`.
                        @frozen public enum DeploymentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/deployments`.
                        public var deployments: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/discussions`.
                        @frozen public enum DiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/discussions`.
                        public var discussions: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/emails`.
                        @frozen public enum EmailsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/emails`.
                        public var emails: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/environments`.
                        @frozen public enum EnvironmentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/environments`.
                        public var environments: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/issues`.
                        @frozen public enum IssuesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/issues`.
                        public var issues: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/keys`.
                        @frozen public enum KeysPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/keys`.
                        public var keys: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/members`.
                        @frozen public enum MembersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/members`.
                        public var members: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/metadata`.
                        @frozen public enum MetadataPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/metadata`.
                        public var metadata: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/organization_administration`.
                        @frozen public enum OrganizationAdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/organization_administration`.
                        public var organizationAdministration: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/organization_hooks`.
                        @frozen public enum OrganizationHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/organization_hooks`.
                        public var organizationHooks: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/organization_packages`.
                        @frozen public enum OrganizationPackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/organization_packages`.
                        public var organizationPackages: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/organization_plan`.
                        @frozen public enum OrganizationPlanPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/organization_plan`.
                        public var organizationPlan: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/organization_projects`.
                        @frozen public enum OrganizationProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                            case admin = "admin"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/organization_projects`.
                        public var organizationProjects: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/organization_secrets`.
                        @frozen public enum OrganizationSecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/organization_secrets`.
                        public var organizationSecrets: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/organization_self_hosted_runners`.
                        @frozen public enum OrganizationSelfHostedRunnersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/organization_self_hosted_runners`.
                        public var organizationSelfHostedRunners: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/organization_user_blocking`.
                        @frozen public enum OrganizationUserBlockingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/organization_user_blocking`.
                        public var organizationUserBlocking: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/packages`.
                        @frozen public enum PackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/packages`.
                        public var packages: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/pages`.
                        @frozen public enum PagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/pages`.
                        public var pages: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/pull_requests`.
                        @frozen public enum PullRequestsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/pull_requests`.
                        public var pullRequests: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/repository_hooks`.
                        @frozen public enum RepositoryHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/repository_hooks`.
                        public var repositoryHooks: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/repository_projects`.
                        @frozen public enum RepositoryProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/repository_projects`.
                        public var repositoryProjects: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/secret_scanning_alerts`.
                        @frozen public enum SecretScanningAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/secret_scanning_alerts`.
                        public var secretScanningAlerts: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/secrets`.
                        @frozen public enum SecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/secrets`.
                        public var secrets: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/security_events`.
                        @frozen public enum SecurityEventsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/security_events`.
                        public var securityEvents: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/security_scanning_alert`.
                        @frozen public enum SecurityScanningAlertPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/security_scanning_alert`.
                        public var securityScanningAlert: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/single_file`.
                        @frozen public enum SingleFilePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/single_file`.
                        public var singleFile: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/statuses`.
                        @frozen public enum StatusesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/statuses`.
                        public var statuses: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/team_discussions`.
                        @frozen public enum TeamDiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/team_discussions`.
                        public var teamDiscussions: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/vulnerability_alerts`.
                        @frozen public enum VulnerabilityAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/vulnerability_alerts`.
                        public var vulnerabilityAlerts: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/workflows`.
                        @frozen public enum WorkflowsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions/workflows`.
                        public var workflows: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload?
                        /// Creates a new `PermissionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - actions:
                        ///   - administration:
                        ///   - checks:
                        ///   - contentReferences:
                        ///   - contents:
                        ///   - deployments:
                        ///   - discussions:
                        ///   - emails:
                        ///   - environments:
                        ///   - issues:
                        ///   - keys:
                        ///   - members:
                        ///   - metadata:
                        ///   - organizationAdministration:
                        ///   - organizationHooks:
                        ///   - organizationPackages:
                        ///   - organizationPlan:
                        ///   - organizationProjects:
                        ///   - organizationSecrets:
                        ///   - organizationSelfHostedRunners:
                        ///   - organizationUserBlocking:
                        ///   - packages:
                        ///   - pages:
                        ///   - pullRequests:
                        ///   - repositoryHooks:
                        ///   - repositoryProjects:
                        ///   - secretScanningAlerts:
                        ///   - secrets:
                        ///   - securityEvents:
                        ///   - securityScanningAlert:
                        ///   - singleFile:
                        ///   - statuses:
                        ///   - teamDiscussions:
                        ///   - vulnerabilityAlerts:
                        ///   - workflows:
                        public init(
                            actions: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload? = nil,
                            administration: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload? = nil,
                            checks: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload? = nil,
                            contentReferences: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload? = nil,
                            contents: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload? = nil,
                            deployments: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload? = nil,
                            discussions: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload? = nil,
                            emails: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload? = nil,
                            environments: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload? = nil,
                            issues: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload? = nil,
                            keys: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload? = nil,
                            members: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload? = nil,
                            metadata: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload? = nil,
                            organizationAdministration: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload? = nil,
                            organizationHooks: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload? = nil,
                            organizationPackages: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload? = nil,
                            organizationPlan: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload? = nil,
                            organizationProjects: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload? = nil,
                            organizationSecrets: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload? = nil,
                            organizationSelfHostedRunners: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload? = nil,
                            organizationUserBlocking: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload? = nil,
                            packages: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload? = nil,
                            pages: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload? = nil,
                            pullRequests: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload? = nil,
                            repositoryHooks: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload? = nil,
                            repositoryProjects: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload? = nil,
                            secretScanningAlerts: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload? = nil,
                            secrets: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload? = nil,
                            securityEvents: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload? = nil,
                            securityScanningAlert: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload? = nil,
                            singleFile: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload? = nil,
                            statuses: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload? = nil,
                            teamDiscussions: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload? = nil,
                            vulnerabilityAlerts: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload? = nil,
                            workflows: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload? = nil
                        ) {
                            self.actions = actions
                            self.administration = administration
                            self.checks = checks
                            self.contentReferences = contentReferences
                            self.contents = contents
                            self.deployments = deployments
                            self.discussions = discussions
                            self.emails = emails
                            self.environments = environments
                            self.issues = issues
                            self.keys = keys
                            self.members = members
                            self.metadata = metadata
                            self.organizationAdministration = organizationAdministration
                            self.organizationHooks = organizationHooks
                            self.organizationPackages = organizationPackages
                            self.organizationPlan = organizationPlan
                            self.organizationProjects = organizationProjects
                            self.organizationSecrets = organizationSecrets
                            self.organizationSelfHostedRunners = organizationSelfHostedRunners
                            self.organizationUserBlocking = organizationUserBlocking
                            self.packages = packages
                            self.pages = pages
                            self.pullRequests = pullRequests
                            self.repositoryHooks = repositoryHooks
                            self.repositoryProjects = repositoryProjects
                            self.secretScanningAlerts = secretScanningAlerts
                            self.secrets = secrets
                            self.securityEvents = securityEvents
                            self.securityScanningAlert = securityScanningAlert
                            self.singleFile = singleFile
                            self.statuses = statuses
                            self.teamDiscussions = teamDiscussions
                            self.vulnerabilityAlerts = vulnerabilityAlerts
                            self.workflows = workflows
                        }
                        public enum CodingKeys: String, CodingKey {
                            case actions
                            case administration
                            case checks
                            case contentReferences = "content_references"
                            case contents
                            case deployments
                            case discussions
                            case emails
                            case environments
                            case issues
                            case keys
                            case members
                            case metadata
                            case organizationAdministration = "organization_administration"
                            case organizationHooks = "organization_hooks"
                            case organizationPackages = "organization_packages"
                            case organizationPlan = "organization_plan"
                            case organizationProjects = "organization_projects"
                            case organizationSecrets = "organization_secrets"
                            case organizationSelfHostedRunners = "organization_self_hosted_runners"
                            case organizationUserBlocking = "organization_user_blocking"
                            case packages
                            case pages
                            case pullRequests = "pull_requests"
                            case repositoryHooks = "repository_hooks"
                            case repositoryProjects = "repository_projects"
                            case secretScanningAlerts = "secret_scanning_alerts"
                            case secrets
                            case securityEvents = "security_events"
                            case securityScanningAlert = "security_scanning_alert"
                            case singleFile = "single_file"
                            case statuses
                            case teamDiscussions = "team_discussions"
                            case vulnerabilityAlerts = "vulnerability_alerts"
                            case workflows
                        }
                    }
                    /// The set of permissions for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/permissions`.
                    public var permissions: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload?
                    /// The slug name of the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/slug`.
                    public var slug: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app/updated_at`.
                    public var updatedAt: Foundation.Date?
                    /// Creates a new `PerformedViaGithubAppPayload`.
                    ///
                    /// - Parameters:
                    ///   - createdAt:
                    ///   - description:
                    ///   - events: The list of events for the GitHub app
                    ///   - externalUrl:
                    ///   - htmlUrl:
                    ///   - id: Unique identifier of the GitHub app
                    ///   - name: The name of the GitHub app
                    ///   - nodeId:
                    ///   - owner:
                    ///   - permissions: The set of permissions for the GitHub app
                    ///   - slug: The slug name of the GitHub app
                    ///   - updatedAt:
                    public init(
                        createdAt: Foundation.Date? = nil,
                        description: Swift.String? = nil,
                        events: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.EventsPayload? = nil,
                        externalUrl: Swift.String? = nil,
                        htmlUrl: Swift.String,
                        id: Swift.Int? = nil,
                        name: Swift.String,
                        nodeId: Swift.String,
                        owner: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.OwnerPayload? = nil,
                        permissions: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload? = nil,
                        slug: Swift.String? = nil,
                        updatedAt: Foundation.Date? = nil
                    ) {
                        self.createdAt = createdAt
                        self.description = description
                        self.events = events
                        self.externalUrl = externalUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.name = name
                        self.nodeId = nodeId
                        self.owner = owner
                        self.permissions = permissions
                        self.slug = slug
                        self.updatedAt = updatedAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case createdAt = "created_at"
                        case description
                        case events
                        case externalUrl = "external_url"
                        case htmlUrl = "html_url"
                        case id
                        case name
                        case nodeId = "node_id"
                        case owner
                        case permissions
                        case slug
                        case updatedAt = "updated_at"
                    }
                }
                /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/performed_via_github_app`.
                public var performedViaGithubApp: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/pull_request`.
                public struct PullRequestPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/pull_request/diff_url`.
                    public var diffUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/pull_request/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/pull_request/merged_at`.
                    public var mergedAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/pull_request/patch_url`.
                    public var patchUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/pull_request/url`.
                    public var url: Swift.String?
                    /// Creates a new `PullRequestPayload`.
                    ///
                    /// - Parameters:
                    ///   - diffUrl:
                    ///   - htmlUrl:
                    ///   - mergedAt:
                    ///   - patchUrl:
                    ///   - url:
                    public init(
                        diffUrl: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        mergedAt: Foundation.Date? = nil,
                        patchUrl: Swift.String? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.diffUrl = diffUrl
                        self.htmlUrl = htmlUrl
                        self.mergedAt = mergedAt
                        self.patchUrl = patchUrl
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case diffUrl = "diff_url"
                        case htmlUrl = "html_url"
                        case mergedAt = "merged_at"
                        case patchUrl = "patch_url"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/pull_request`.
                public var pullRequest: Components.Schemas.WebhookIssuesEdited.IssuePayload.PullRequestPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/reactions`.
                public struct ReactionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/reactions/+1`.
                    public var _plus_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/reactions/-1`.
                    public var _hyphen_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/reactions/confused`.
                    public var confused: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/reactions/eyes`.
                    public var eyes: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/reactions/heart`.
                    public var heart: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/reactions/hooray`.
                    public var hooray: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/reactions/laugh`.
                    public var laugh: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/reactions/rocket`.
                    public var rocket: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/reactions/total_count`.
                    public var totalCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/reactions/url`.
                    public var url: Swift.String
                    /// Creates a new `ReactionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - _plus_1:
                    ///   - _hyphen_1:
                    ///   - confused:
                    ///   - eyes:
                    ///   - heart:
                    ///   - hooray:
                    ///   - laugh:
                    ///   - rocket:
                    ///   - totalCount:
                    ///   - url:
                    public init(
                        _plus_1: Swift.Int,
                        _hyphen_1: Swift.Int,
                        confused: Swift.Int,
                        eyes: Swift.Int,
                        heart: Swift.Int,
                        hooray: Swift.Int,
                        laugh: Swift.Int,
                        rocket: Swift.Int,
                        totalCount: Swift.Int,
                        url: Swift.String
                    ) {
                        self._plus_1 = _plus_1
                        self._hyphen_1 = _hyphen_1
                        self.confused = confused
                        self.eyes = eyes
                        self.heart = heart
                        self.hooray = hooray
                        self.laugh = laugh
                        self.rocket = rocket
                        self.totalCount = totalCount
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _plus_1 = "+1"
                        case _hyphen_1 = "-1"
                        case confused
                        case eyes
                        case heart
                        case hooray
                        case laugh
                        case rocket
                        case totalCount = "total_count"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/reactions`.
                public var reactions: Components.Schemas.WebhookIssuesEdited.IssuePayload.ReactionsPayload
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/repository_url`.
                public var repositoryUrl: Swift.String
                /// State of the issue; either 'open' or 'closed'
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/state`.
                @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case open = "open"
                    case closed = "closed"
                }
                /// State of the issue; either 'open' or 'closed'
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/state`.
                public var state: Components.Schemas.WebhookIssuesEdited.IssuePayload.StatePayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/state_reason`.
                public var stateReason: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/timeline_url`.
                public var timelineUrl: Swift.String?
                /// Title of the issue
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/title`.
                public var title: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/updated_at`.
                public var updatedAt: Foundation.Date
                /// URL for the issue
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/user`.
                public struct UserPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/user/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/user/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/user/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/user/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/user/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/user/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/user/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/user/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/user/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/user/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/user/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/user/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/user/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/user/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/user/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/user/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/user/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/user/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/user/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/user/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                        case mannequin = "Mannequin"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/user/type`.
                    public var _type: Components.Schemas.WebhookIssuesEdited.IssuePayload.UserPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/user/url`.
                    public var url: Swift.String?
                    /// Creates a new `UserPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookIssuesEdited.IssuePayload.UserPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue/user`.
                public var user: Components.Schemas.WebhookIssuesEdited.IssuePayload.UserPayload?
                /// Creates a new `IssuePayload`.
                ///
                /// - Parameters:
                ///   - activeLockReason:
                ///   - assignee:
                ///   - assignees:
                ///   - authorAssociation: How the author is associated with the repository.
                ///   - body: Contents of the issue
                ///   - closedAt:
                ///   - comments:
                ///   - commentsUrl:
                ///   - createdAt:
                ///   - draft:
                ///   - eventsUrl:
                ///   - htmlUrl:
                ///   - id:
                ///   - labels:
                ///   - labelsUrl:
                ///   - locked:
                ///   - milestone: A collection of related issues and pull requests.
                ///   - nodeId:
                ///   - number:
                ///   - performedViaGithubApp: GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                ///   - pullRequest:
                ///   - reactions:
                ///   - repositoryUrl:
                ///   - state: State of the issue; either 'open' or 'closed'
                ///   - stateReason:
                ///   - timelineUrl:
                ///   - title: Title of the issue
                ///   - updatedAt:
                ///   - url: URL for the issue
                ///   - user:
                public init(
                    activeLockReason: Components.Schemas.WebhookIssuesEdited.IssuePayload.ActiveLockReasonPayload? = nil,
                    assignee: Components.Schemas.WebhookIssuesEdited.IssuePayload.AssigneePayload? = nil,
                    assignees: Components.Schemas.WebhookIssuesEdited.IssuePayload.AssigneesPayload,
                    authorAssociation: Components.Schemas.WebhookIssuesEdited.IssuePayload.AuthorAssociationPayload,
                    body: Swift.String? = nil,
                    closedAt: Foundation.Date? = nil,
                    comments: Swift.Int,
                    commentsUrl: Swift.String,
                    createdAt: Foundation.Date,
                    draft: Swift.Bool? = nil,
                    eventsUrl: Swift.String,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    labels: Components.Schemas.WebhookIssuesEdited.IssuePayload.LabelsPayload? = nil,
                    labelsUrl: Swift.String,
                    locked: Swift.Bool? = nil,
                    milestone: Components.Schemas.WebhookIssuesEdited.IssuePayload.MilestonePayload? = nil,
                    nodeId: Swift.String,
                    number: Swift.Int,
                    performedViaGithubApp: Components.Schemas.WebhookIssuesEdited.IssuePayload.PerformedViaGithubAppPayload? = nil,
                    pullRequest: Components.Schemas.WebhookIssuesEdited.IssuePayload.PullRequestPayload? = nil,
                    reactions: Components.Schemas.WebhookIssuesEdited.IssuePayload.ReactionsPayload,
                    repositoryUrl: Swift.String,
                    state: Components.Schemas.WebhookIssuesEdited.IssuePayload.StatePayload? = nil,
                    stateReason: Swift.String? = nil,
                    timelineUrl: Swift.String? = nil,
                    title: Swift.String,
                    updatedAt: Foundation.Date,
                    url: Swift.String,
                    user: Components.Schemas.WebhookIssuesEdited.IssuePayload.UserPayload? = nil
                ) {
                    self.activeLockReason = activeLockReason
                    self.assignee = assignee
                    self.assignees = assignees
                    self.authorAssociation = authorAssociation
                    self.body = body
                    self.closedAt = closedAt
                    self.comments = comments
                    self.commentsUrl = commentsUrl
                    self.createdAt = createdAt
                    self.draft = draft
                    self.eventsUrl = eventsUrl
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.labels = labels
                    self.labelsUrl = labelsUrl
                    self.locked = locked
                    self.milestone = milestone
                    self.nodeId = nodeId
                    self.number = number
                    self.performedViaGithubApp = performedViaGithubApp
                    self.pullRequest = pullRequest
                    self.reactions = reactions
                    self.repositoryUrl = repositoryUrl
                    self.state = state
                    self.stateReason = stateReason
                    self.timelineUrl = timelineUrl
                    self.title = title
                    self.updatedAt = updatedAt
                    self.url = url
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case activeLockReason = "active_lock_reason"
                    case assignee
                    case assignees
                    case authorAssociation = "author_association"
                    case body
                    case closedAt = "closed_at"
                    case comments
                    case commentsUrl = "comments_url"
                    case createdAt = "created_at"
                    case draft
                    case eventsUrl = "events_url"
                    case htmlUrl = "html_url"
                    case id
                    case labels
                    case labelsUrl = "labels_url"
                    case locked
                    case milestone
                    case nodeId = "node_id"
                    case number
                    case performedViaGithubApp = "performed_via_github_app"
                    case pullRequest = "pull_request"
                    case reactions
                    case repositoryUrl = "repository_url"
                    case state
                    case stateReason = "state_reason"
                    case timelineUrl = "timeline_url"
                    case title
                    case updatedAt = "updated_at"
                    case url
                    case user
                }
            }
            /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/issue`.
            public var issue: Components.Schemas.WebhookIssuesEdited.IssuePayload
            /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/label`.
            public struct LabelPayload: Codable, Hashable, Sendable {
                /// 6-character hex code, without the leading #, identifying the color
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/label/color`.
                public var color: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/label/default`.
                public var _default: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/label/description`.
                public var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/label/id`.
                public var id: Swift.Int
                /// The name of the label.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/label/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/label/node_id`.
                public var nodeId: Swift.String
                /// URL for the label
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/label/url`.
                public var url: Swift.String
                /// Creates a new `LabelPayload`.
                ///
                /// - Parameters:
                ///   - color: 6-character hex code, without the leading #, identifying the color
                ///   - _default:
                ///   - description:
                ///   - id:
                ///   - name: The name of the label.
                ///   - nodeId:
                ///   - url: URL for the label
                public init(
                    color: Swift.String,
                    _default: Swift.Bool,
                    description: Swift.String? = nil,
                    id: Swift.Int,
                    name: Swift.String,
                    nodeId: Swift.String,
                    url: Swift.String
                ) {
                    self.color = color
                    self._default = _default
                    self.description = description
                    self.id = id
                    self.name = name
                    self.nodeId = nodeId
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case color
                    case _default = "default"
                    case description
                    case id
                    case name
                    case nodeId = "node_id"
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/label`.
            public var label: Components.Schemas.WebhookIssuesEdited.LabelPayload?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-issues-edited/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Creates a new `WebhookIssuesEdited`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - changes: The changes to the issue.
            ///   - enterprise:
            ///   - installation:
            ///   - issue: The [issue](https://docs.github.com/en/rest/reference/issues) itself.
            ///   - label:
            ///   - organization:
            ///   - repository:
            ///   - sender:
            public init(
                action: Components.Schemas.WebhookIssuesEdited.ActionPayload,
                changes: Components.Schemas.WebhookIssuesEdited.ChangesPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                issue: Components.Schemas.WebhookIssuesEdited.IssuePayload,
                label: Components.Schemas.WebhookIssuesEdited.LabelPayload? = nil,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser
            ) {
                self.action = action
                self.changes = changes
                self.enterprise = enterprise
                self.installation = installation
                self.issue = issue
                self.label = label
                self.organization = organization
                self.repository = repository
                self.sender = sender
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case changes
                case enterprise
                case installation
                case issue
                case label
                case organization
                case repository
                case sender
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled`.
        public struct WebhookIssuesLabeled: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case labeled = "labeled"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/action`.
            public var action: Components.Schemas.WebhookIssuesLabeled.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue`.
            public struct IssuePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/active_lock_reason`.
                @frozen public enum ActiveLockReasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case resolved = "resolved"
                    case offTopic = "off-topic"
                    case tooHeated = "too heated"
                    case spam = "spam"
                    case _empty_ = ""
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/active_lock_reason`.
                public var activeLockReason: Components.Schemas.WebhookIssuesLabeled.IssuePayload.ActiveLockReasonPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/assignee`.
                public struct AssigneePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/assignee/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/assignee/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/assignee/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/assignee/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/assignee/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/assignee/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/assignee/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/assignee/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/assignee/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/assignee/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/assignee/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/assignee/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/assignee/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/assignee/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/assignee/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/assignee/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/assignee/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/assignee/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/assignee/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/assignee/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                        case mannequin = "Mannequin"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/assignee/type`.
                    public var _type: Components.Schemas.WebhookIssuesLabeled.IssuePayload.AssigneePayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/assignee/url`.
                    public var url: Swift.String?
                    /// Creates a new `AssigneePayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookIssuesLabeled.IssuePayload.AssigneePayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/assignee`.
                public var assignee: Components.Schemas.WebhookIssuesLabeled.IssuePayload.AssigneePayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/AssigneesPayload`.
                public struct AssigneesPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/AssigneesPayload/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/AssigneesPayload/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/AssigneesPayload/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/AssigneesPayload/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/AssigneesPayload/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/AssigneesPayload/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/AssigneesPayload/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/AssigneesPayload/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/AssigneesPayload/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/AssigneesPayload/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/AssigneesPayload/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/AssigneesPayload/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/AssigneesPayload/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/AssigneesPayload/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/AssigneesPayload/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/AssigneesPayload/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/AssigneesPayload/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/AssigneesPayload/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/AssigneesPayload/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/AssigneesPayload/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                        case mannequin = "Mannequin"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/AssigneesPayload/type`.
                    public var _type: Components.Schemas.WebhookIssuesLabeled.IssuePayload.AssigneesPayloadPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/AssigneesPayload/url`.
                    public var url: Swift.String?
                    /// Creates a new `AssigneesPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookIssuesLabeled.IssuePayload.AssigneesPayloadPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/assignees`.
                public typealias AssigneesPayload = [Components.Schemas.WebhookIssuesLabeled.IssuePayload.AssigneesPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/assignees`.
                public var assignees: Components.Schemas.WebhookIssuesLabeled.IssuePayload.AssigneesPayload
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/author_association`.
                @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case collaborator = "COLLABORATOR"
                    case contributor = "CONTRIBUTOR"
                    case firstTimer = "FIRST_TIMER"
                    case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                    case mannequin = "MANNEQUIN"
                    case member = "MEMBER"
                    case none = "NONE"
                    case owner = "OWNER"
                }
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/author_association`.
                public var authorAssociation: Components.Schemas.WebhookIssuesLabeled.IssuePayload.AuthorAssociationPayload
                /// Contents of the issue
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/body`.
                public var body: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/closed_at`.
                public var closedAt: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/comments`.
                public var comments: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/comments_url`.
                public var commentsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/created_at`.
                public var createdAt: Foundation.Date
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/draft`.
                public var draft: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/events_url`.
                public var eventsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/html_url`.
                public var htmlUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/LabelsPayload`.
                public struct LabelsPayloadPayload: Codable, Hashable, Sendable {
                    /// 6-character hex code, without the leading #, identifying the color
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/LabelsPayload/color`.
                    public var color: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/LabelsPayload/default`.
                    public var _default: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/LabelsPayload/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/LabelsPayload/id`.
                    public var id: Swift.Int
                    /// The name of the label.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/LabelsPayload/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/LabelsPayload/node_id`.
                    public var nodeId: Swift.String
                    /// URL for the label
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/LabelsPayload/url`.
                    public var url: Swift.String
                    /// Creates a new `LabelsPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - color: 6-character hex code, without the leading #, identifying the color
                    ///   - _default:
                    ///   - description:
                    ///   - id:
                    ///   - name: The name of the label.
                    ///   - nodeId:
                    ///   - url: URL for the label
                    public init(
                        color: Swift.String,
                        _default: Swift.Bool,
                        description: Swift.String? = nil,
                        id: Swift.Int,
                        name: Swift.String,
                        nodeId: Swift.String,
                        url: Swift.String
                    ) {
                        self.color = color
                        self._default = _default
                        self.description = description
                        self.id = id
                        self.name = name
                        self.nodeId = nodeId
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case color
                        case _default = "default"
                        case description
                        case id
                        case name
                        case nodeId = "node_id"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/labels`.
                public typealias LabelsPayload = [Components.Schemas.WebhookIssuesLabeled.IssuePayload.LabelsPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/labels`.
                public var labels: Components.Schemas.WebhookIssuesLabeled.IssuePayload.LabelsPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/labels_url`.
                public var labelsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/locked`.
                public var locked: Swift.Bool?
                /// A collection of related issues and pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone`.
                public struct MilestonePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/closed_at`.
                    public var closedAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/closed_issues`.
                    public var closedIssues: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/created_at`.
                    public var createdAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/creator`.
                    public struct CreatorPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/creator/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/creator/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/creator/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/creator/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/creator/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/creator/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/creator/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/creator/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/creator/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/creator/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/creator/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/creator/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/creator/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/creator/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/creator/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/creator/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/creator/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/creator/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/creator/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/creator/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                            case mannequin = "Mannequin"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/creator/type`.
                        public var _type: Components.Schemas.WebhookIssuesLabeled.IssuePayload.MilestonePayload.CreatorPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/creator/url`.
                        public var url: Swift.String?
                        /// Creates a new `CreatorPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesLabeled.IssuePayload.MilestonePayload.CreatorPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/creator`.
                    public var creator: Components.Schemas.WebhookIssuesLabeled.IssuePayload.MilestonePayload.CreatorPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/due_on`.
                    public var dueOn: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/html_url`.
                    public var htmlUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/labels_url`.
                    public var labelsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/node_id`.
                    public var nodeId: Swift.String
                    /// The number of the milestone.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/number`.
                    public var number: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/open_issues`.
                    public var openIssues: Swift.Int
                    /// The state of the milestone.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/state`.
                    @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case closed = "closed"
                    }
                    /// The state of the milestone.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/state`.
                    public var state: Components.Schemas.WebhookIssuesLabeled.IssuePayload.MilestonePayload.StatePayload
                    /// The title of the milestone.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/title`.
                    public var title: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/updated_at`.
                    public var updatedAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone/url`.
                    public var url: Swift.String
                    /// Creates a new `MilestonePayload`.
                    ///
                    /// - Parameters:
                    ///   - closedAt:
                    ///   - closedIssues:
                    ///   - createdAt:
                    ///   - creator:
                    ///   - description:
                    ///   - dueOn:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - labelsUrl:
                    ///   - nodeId:
                    ///   - number: The number of the milestone.
                    ///   - openIssues:
                    ///   - state: The state of the milestone.
                    ///   - title: The title of the milestone.
                    ///   - updatedAt:
                    ///   - url:
                    public init(
                        closedAt: Foundation.Date? = nil,
                        closedIssues: Swift.Int,
                        createdAt: Foundation.Date,
                        creator: Components.Schemas.WebhookIssuesLabeled.IssuePayload.MilestonePayload.CreatorPayload? = nil,
                        description: Swift.String? = nil,
                        dueOn: Foundation.Date? = nil,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        labelsUrl: Swift.String,
                        nodeId: Swift.String,
                        number: Swift.Int,
                        openIssues: Swift.Int,
                        state: Components.Schemas.WebhookIssuesLabeled.IssuePayload.MilestonePayload.StatePayload,
                        title: Swift.String,
                        updatedAt: Foundation.Date,
                        url: Swift.String
                    ) {
                        self.closedAt = closedAt
                        self.closedIssues = closedIssues
                        self.createdAt = createdAt
                        self.creator = creator
                        self.description = description
                        self.dueOn = dueOn
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.labelsUrl = labelsUrl
                        self.nodeId = nodeId
                        self.number = number
                        self.openIssues = openIssues
                        self.state = state
                        self.title = title
                        self.updatedAt = updatedAt
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case closedAt = "closed_at"
                        case closedIssues = "closed_issues"
                        case createdAt = "created_at"
                        case creator
                        case description
                        case dueOn = "due_on"
                        case htmlUrl = "html_url"
                        case id
                        case labelsUrl = "labels_url"
                        case nodeId = "node_id"
                        case number
                        case openIssues = "open_issues"
                        case state
                        case title
                        case updatedAt = "updated_at"
                        case url
                    }
                }
                /// A collection of related issues and pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/milestone`.
                public var milestone: Components.Schemas.WebhookIssuesLabeled.IssuePayload.MilestonePayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/number`.
                public var number: Swift.Int
                /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app`.
                public struct PerformedViaGithubAppPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/created_at`.
                    public var createdAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/EventsPayload`.
                    @frozen public enum EventsPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case branchProtectionRule = "branch_protection_rule"
                        case checkRun = "check_run"
                        case checkSuite = "check_suite"
                        case codeScanningAlert = "code_scanning_alert"
                        case commitComment = "commit_comment"
                        case contentReference = "content_reference"
                        case create = "create"
                        case delete = "delete"
                        case deployment = "deployment"
                        case deploymentReview = "deployment_review"
                        case deploymentStatus = "deployment_status"
                        case deployKey = "deploy_key"
                        case discussion = "discussion"
                        case discussionComment = "discussion_comment"
                        case fork = "fork"
                        case gollum = "gollum"
                        case issues = "issues"
                        case issueComment = "issue_comment"
                        case label = "label"
                        case member = "member"
                        case membership = "membership"
                        case milestone = "milestone"
                        case organization = "organization"
                        case orgBlock = "org_block"
                        case pageBuild = "page_build"
                        case project = "project"
                        case projectCard = "project_card"
                        case projectColumn = "project_column"
                        case _public = "public"
                        case pullRequest = "pull_request"
                        case pullRequestReview = "pull_request_review"
                        case pullRequestReviewComment = "pull_request_review_comment"
                        case push = "push"
                        case registryPackage = "registry_package"
                        case release = "release"
                        case repository = "repository"
                        case repositoryDispatch = "repository_dispatch"
                        case secretScanningAlert = "secret_scanning_alert"
                        case star = "star"
                        case status = "status"
                        case team = "team"
                        case teamAdd = "team_add"
                        case watch = "watch"
                        case workflowDispatch = "workflow_dispatch"
                        case workflowRun = "workflow_run"
                        case pullRequestReviewThread = "pull_request_review_thread"
                        case reminder = "reminder"
                    }
                    /// The list of events for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/events`.
                    public typealias EventsPayload = [Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.EventsPayloadPayload]
                    /// The list of events for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/events`.
                    public var events: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.EventsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/external_url`.
                    public var externalUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/html_url`.
                    public var htmlUrl: Swift.String
                    /// Unique identifier of the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/id`.
                    public var id: Swift.Int?
                    /// The name of the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/owner`.
                    public struct OwnerPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/owner/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/owner/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/owner/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/owner/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/owner/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/owner/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/owner/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/owner/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/owner/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/owner/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/owner/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/owner/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/owner/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/owner/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/owner/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/owner/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/owner/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/owner/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/owner/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/owner/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/owner/type`.
                        public var _type: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/owner/url`.
                        public var url: Swift.String?
                        /// Creates a new `OwnerPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/owner`.
                    public var owner: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.OwnerPayload?
                    /// The set of permissions for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions`.
                    public struct PermissionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/actions`.
                        @frozen public enum ActionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/actions`.
                        public var actions: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/administration`.
                        @frozen public enum AdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/administration`.
                        public var administration: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/checks`.
                        @frozen public enum ChecksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/checks`.
                        public var checks: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/content_references`.
                        @frozen public enum ContentReferencesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/content_references`.
                        public var contentReferences: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/contents`.
                        @frozen public enum ContentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/contents`.
                        public var contents: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/deployments`.
                        @frozen public enum DeploymentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/deployments`.
                        public var deployments: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/discussions`.
                        @frozen public enum DiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/discussions`.
                        public var discussions: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/emails`.
                        @frozen public enum EmailsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/emails`.
                        public var emails: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/environments`.
                        @frozen public enum EnvironmentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/environments`.
                        public var environments: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/issues`.
                        @frozen public enum IssuesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/issues`.
                        public var issues: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/keys`.
                        @frozen public enum KeysPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/keys`.
                        public var keys: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/members`.
                        @frozen public enum MembersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/members`.
                        public var members: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/metadata`.
                        @frozen public enum MetadataPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/metadata`.
                        public var metadata: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/organization_administration`.
                        @frozen public enum OrganizationAdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/organization_administration`.
                        public var organizationAdministration: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/organization_hooks`.
                        @frozen public enum OrganizationHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/organization_hooks`.
                        public var organizationHooks: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/organization_packages`.
                        @frozen public enum OrganizationPackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/organization_packages`.
                        public var organizationPackages: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/organization_plan`.
                        @frozen public enum OrganizationPlanPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/organization_plan`.
                        public var organizationPlan: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/organization_projects`.
                        @frozen public enum OrganizationProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                            case admin = "admin"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/organization_projects`.
                        public var organizationProjects: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/organization_secrets`.
                        @frozen public enum OrganizationSecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/organization_secrets`.
                        public var organizationSecrets: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/organization_self_hosted_runners`.
                        @frozen public enum OrganizationSelfHostedRunnersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/organization_self_hosted_runners`.
                        public var organizationSelfHostedRunners: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/organization_user_blocking`.
                        @frozen public enum OrganizationUserBlockingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/organization_user_blocking`.
                        public var organizationUserBlocking: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/packages`.
                        @frozen public enum PackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/packages`.
                        public var packages: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/pages`.
                        @frozen public enum PagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/pages`.
                        public var pages: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/pull_requests`.
                        @frozen public enum PullRequestsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/pull_requests`.
                        public var pullRequests: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/repository_hooks`.
                        @frozen public enum RepositoryHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/repository_hooks`.
                        public var repositoryHooks: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/repository_projects`.
                        @frozen public enum RepositoryProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/repository_projects`.
                        public var repositoryProjects: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/secret_scanning_alerts`.
                        @frozen public enum SecretScanningAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/secret_scanning_alerts`.
                        public var secretScanningAlerts: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/secrets`.
                        @frozen public enum SecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/secrets`.
                        public var secrets: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/security_events`.
                        @frozen public enum SecurityEventsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/security_events`.
                        public var securityEvents: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/security_scanning_alert`.
                        @frozen public enum SecurityScanningAlertPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/security_scanning_alert`.
                        public var securityScanningAlert: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/single_file`.
                        @frozen public enum SingleFilePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/single_file`.
                        public var singleFile: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/statuses`.
                        @frozen public enum StatusesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/statuses`.
                        public var statuses: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/team_discussions`.
                        @frozen public enum TeamDiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/team_discussions`.
                        public var teamDiscussions: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/vulnerability_alerts`.
                        @frozen public enum VulnerabilityAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/vulnerability_alerts`.
                        public var vulnerabilityAlerts: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/workflows`.
                        @frozen public enum WorkflowsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions/workflows`.
                        public var workflows: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload?
                        /// Creates a new `PermissionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - actions:
                        ///   - administration:
                        ///   - checks:
                        ///   - contentReferences:
                        ///   - contents:
                        ///   - deployments:
                        ///   - discussions:
                        ///   - emails:
                        ///   - environments:
                        ///   - issues:
                        ///   - keys:
                        ///   - members:
                        ///   - metadata:
                        ///   - organizationAdministration:
                        ///   - organizationHooks:
                        ///   - organizationPackages:
                        ///   - organizationPlan:
                        ///   - organizationProjects:
                        ///   - organizationSecrets:
                        ///   - organizationSelfHostedRunners:
                        ///   - organizationUserBlocking:
                        ///   - packages:
                        ///   - pages:
                        ///   - pullRequests:
                        ///   - repositoryHooks:
                        ///   - repositoryProjects:
                        ///   - secretScanningAlerts:
                        ///   - secrets:
                        ///   - securityEvents:
                        ///   - securityScanningAlert:
                        ///   - singleFile:
                        ///   - statuses:
                        ///   - teamDiscussions:
                        ///   - vulnerabilityAlerts:
                        ///   - workflows:
                        public init(
                            actions: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload? = nil,
                            administration: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload? = nil,
                            checks: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload? = nil,
                            contentReferences: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload? = nil,
                            contents: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload? = nil,
                            deployments: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload? = nil,
                            discussions: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload? = nil,
                            emails: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload? = nil,
                            environments: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload? = nil,
                            issues: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload? = nil,
                            keys: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload? = nil,
                            members: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload? = nil,
                            metadata: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload? = nil,
                            organizationAdministration: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload? = nil,
                            organizationHooks: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload? = nil,
                            organizationPackages: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload? = nil,
                            organizationPlan: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload? = nil,
                            organizationProjects: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload? = nil,
                            organizationSecrets: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload? = nil,
                            organizationSelfHostedRunners: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload? = nil,
                            organizationUserBlocking: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload? = nil,
                            packages: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload? = nil,
                            pages: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload? = nil,
                            pullRequests: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload? = nil,
                            repositoryHooks: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload? = nil,
                            repositoryProjects: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload? = nil,
                            secretScanningAlerts: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload? = nil,
                            secrets: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload? = nil,
                            securityEvents: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload? = nil,
                            securityScanningAlert: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload? = nil,
                            singleFile: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload? = nil,
                            statuses: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload? = nil,
                            teamDiscussions: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload? = nil,
                            vulnerabilityAlerts: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload? = nil,
                            workflows: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload? = nil
                        ) {
                            self.actions = actions
                            self.administration = administration
                            self.checks = checks
                            self.contentReferences = contentReferences
                            self.contents = contents
                            self.deployments = deployments
                            self.discussions = discussions
                            self.emails = emails
                            self.environments = environments
                            self.issues = issues
                            self.keys = keys
                            self.members = members
                            self.metadata = metadata
                            self.organizationAdministration = organizationAdministration
                            self.organizationHooks = organizationHooks
                            self.organizationPackages = organizationPackages
                            self.organizationPlan = organizationPlan
                            self.organizationProjects = organizationProjects
                            self.organizationSecrets = organizationSecrets
                            self.organizationSelfHostedRunners = organizationSelfHostedRunners
                            self.organizationUserBlocking = organizationUserBlocking
                            self.packages = packages
                            self.pages = pages
                            self.pullRequests = pullRequests
                            self.repositoryHooks = repositoryHooks
                            self.repositoryProjects = repositoryProjects
                            self.secretScanningAlerts = secretScanningAlerts
                            self.secrets = secrets
                            self.securityEvents = securityEvents
                            self.securityScanningAlert = securityScanningAlert
                            self.singleFile = singleFile
                            self.statuses = statuses
                            self.teamDiscussions = teamDiscussions
                            self.vulnerabilityAlerts = vulnerabilityAlerts
                            self.workflows = workflows
                        }
                        public enum CodingKeys: String, CodingKey {
                            case actions
                            case administration
                            case checks
                            case contentReferences = "content_references"
                            case contents
                            case deployments
                            case discussions
                            case emails
                            case environments
                            case issues
                            case keys
                            case members
                            case metadata
                            case organizationAdministration = "organization_administration"
                            case organizationHooks = "organization_hooks"
                            case organizationPackages = "organization_packages"
                            case organizationPlan = "organization_plan"
                            case organizationProjects = "organization_projects"
                            case organizationSecrets = "organization_secrets"
                            case organizationSelfHostedRunners = "organization_self_hosted_runners"
                            case organizationUserBlocking = "organization_user_blocking"
                            case packages
                            case pages
                            case pullRequests = "pull_requests"
                            case repositoryHooks = "repository_hooks"
                            case repositoryProjects = "repository_projects"
                            case secretScanningAlerts = "secret_scanning_alerts"
                            case secrets
                            case securityEvents = "security_events"
                            case securityScanningAlert = "security_scanning_alert"
                            case singleFile = "single_file"
                            case statuses
                            case teamDiscussions = "team_discussions"
                            case vulnerabilityAlerts = "vulnerability_alerts"
                            case workflows
                        }
                    }
                    /// The set of permissions for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/permissions`.
                    public var permissions: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload?
                    /// The slug name of the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/slug`.
                    public var slug: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app/updated_at`.
                    public var updatedAt: Foundation.Date?
                    /// Creates a new `PerformedViaGithubAppPayload`.
                    ///
                    /// - Parameters:
                    ///   - createdAt:
                    ///   - description:
                    ///   - events: The list of events for the GitHub app
                    ///   - externalUrl:
                    ///   - htmlUrl:
                    ///   - id: Unique identifier of the GitHub app
                    ///   - name: The name of the GitHub app
                    ///   - nodeId:
                    ///   - owner:
                    ///   - permissions: The set of permissions for the GitHub app
                    ///   - slug: The slug name of the GitHub app
                    ///   - updatedAt:
                    public init(
                        createdAt: Foundation.Date? = nil,
                        description: Swift.String? = nil,
                        events: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.EventsPayload? = nil,
                        externalUrl: Swift.String? = nil,
                        htmlUrl: Swift.String,
                        id: Swift.Int? = nil,
                        name: Swift.String,
                        nodeId: Swift.String,
                        owner: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.OwnerPayload? = nil,
                        permissions: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload? = nil,
                        slug: Swift.String? = nil,
                        updatedAt: Foundation.Date? = nil
                    ) {
                        self.createdAt = createdAt
                        self.description = description
                        self.events = events
                        self.externalUrl = externalUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.name = name
                        self.nodeId = nodeId
                        self.owner = owner
                        self.permissions = permissions
                        self.slug = slug
                        self.updatedAt = updatedAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case createdAt = "created_at"
                        case description
                        case events
                        case externalUrl = "external_url"
                        case htmlUrl = "html_url"
                        case id
                        case name
                        case nodeId = "node_id"
                        case owner
                        case permissions
                        case slug
                        case updatedAt = "updated_at"
                    }
                }
                /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/performed_via_github_app`.
                public var performedViaGithubApp: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/pull_request`.
                public struct PullRequestPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/pull_request/diff_url`.
                    public var diffUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/pull_request/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/pull_request/merged_at`.
                    public var mergedAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/pull_request/patch_url`.
                    public var patchUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/pull_request/url`.
                    public var url: Swift.String?
                    /// Creates a new `PullRequestPayload`.
                    ///
                    /// - Parameters:
                    ///   - diffUrl:
                    ///   - htmlUrl:
                    ///   - mergedAt:
                    ///   - patchUrl:
                    ///   - url:
                    public init(
                        diffUrl: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        mergedAt: Foundation.Date? = nil,
                        patchUrl: Swift.String? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.diffUrl = diffUrl
                        self.htmlUrl = htmlUrl
                        self.mergedAt = mergedAt
                        self.patchUrl = patchUrl
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case diffUrl = "diff_url"
                        case htmlUrl = "html_url"
                        case mergedAt = "merged_at"
                        case patchUrl = "patch_url"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/pull_request`.
                public var pullRequest: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PullRequestPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/reactions`.
                public struct ReactionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/reactions/+1`.
                    public var _plus_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/reactions/-1`.
                    public var _hyphen_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/reactions/confused`.
                    public var confused: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/reactions/eyes`.
                    public var eyes: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/reactions/heart`.
                    public var heart: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/reactions/hooray`.
                    public var hooray: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/reactions/laugh`.
                    public var laugh: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/reactions/rocket`.
                    public var rocket: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/reactions/total_count`.
                    public var totalCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/reactions/url`.
                    public var url: Swift.String
                    /// Creates a new `ReactionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - _plus_1:
                    ///   - _hyphen_1:
                    ///   - confused:
                    ///   - eyes:
                    ///   - heart:
                    ///   - hooray:
                    ///   - laugh:
                    ///   - rocket:
                    ///   - totalCount:
                    ///   - url:
                    public init(
                        _plus_1: Swift.Int,
                        _hyphen_1: Swift.Int,
                        confused: Swift.Int,
                        eyes: Swift.Int,
                        heart: Swift.Int,
                        hooray: Swift.Int,
                        laugh: Swift.Int,
                        rocket: Swift.Int,
                        totalCount: Swift.Int,
                        url: Swift.String
                    ) {
                        self._plus_1 = _plus_1
                        self._hyphen_1 = _hyphen_1
                        self.confused = confused
                        self.eyes = eyes
                        self.heart = heart
                        self.hooray = hooray
                        self.laugh = laugh
                        self.rocket = rocket
                        self.totalCount = totalCount
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _plus_1 = "+1"
                        case _hyphen_1 = "-1"
                        case confused
                        case eyes
                        case heart
                        case hooray
                        case laugh
                        case rocket
                        case totalCount = "total_count"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/reactions`.
                public var reactions: Components.Schemas.WebhookIssuesLabeled.IssuePayload.ReactionsPayload
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/repository_url`.
                public var repositoryUrl: Swift.String
                /// State of the issue; either 'open' or 'closed'
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/state`.
                @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case open = "open"
                    case closed = "closed"
                }
                /// State of the issue; either 'open' or 'closed'
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/state`.
                public var state: Components.Schemas.WebhookIssuesLabeled.IssuePayload.StatePayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/state_reason`.
                public var stateReason: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/timeline_url`.
                public var timelineUrl: Swift.String?
                /// Title of the issue
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/title`.
                public var title: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/updated_at`.
                public var updatedAt: Foundation.Date
                /// URL for the issue
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/user`.
                public struct UserPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/user/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/user/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/user/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/user/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/user/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/user/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/user/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/user/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/user/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/user/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/user/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/user/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/user/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/user/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/user/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/user/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/user/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/user/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/user/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/user/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                        case mannequin = "Mannequin"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/user/type`.
                    public var _type: Components.Schemas.WebhookIssuesLabeled.IssuePayload.UserPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/user/url`.
                    public var url: Swift.String?
                    /// Creates a new `UserPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookIssuesLabeled.IssuePayload.UserPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue/user`.
                public var user: Components.Schemas.WebhookIssuesLabeled.IssuePayload.UserPayload?
                /// Creates a new `IssuePayload`.
                ///
                /// - Parameters:
                ///   - activeLockReason:
                ///   - assignee:
                ///   - assignees:
                ///   - authorAssociation: How the author is associated with the repository.
                ///   - body: Contents of the issue
                ///   - closedAt:
                ///   - comments:
                ///   - commentsUrl:
                ///   - createdAt:
                ///   - draft:
                ///   - eventsUrl:
                ///   - htmlUrl:
                ///   - id:
                ///   - labels:
                ///   - labelsUrl:
                ///   - locked:
                ///   - milestone: A collection of related issues and pull requests.
                ///   - nodeId:
                ///   - number:
                ///   - performedViaGithubApp: GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                ///   - pullRequest:
                ///   - reactions:
                ///   - repositoryUrl:
                ///   - state: State of the issue; either 'open' or 'closed'
                ///   - stateReason:
                ///   - timelineUrl:
                ///   - title: Title of the issue
                ///   - updatedAt:
                ///   - url: URL for the issue
                ///   - user:
                public init(
                    activeLockReason: Components.Schemas.WebhookIssuesLabeled.IssuePayload.ActiveLockReasonPayload? = nil,
                    assignee: Components.Schemas.WebhookIssuesLabeled.IssuePayload.AssigneePayload? = nil,
                    assignees: Components.Schemas.WebhookIssuesLabeled.IssuePayload.AssigneesPayload,
                    authorAssociation: Components.Schemas.WebhookIssuesLabeled.IssuePayload.AuthorAssociationPayload,
                    body: Swift.String? = nil,
                    closedAt: Foundation.Date? = nil,
                    comments: Swift.Int,
                    commentsUrl: Swift.String,
                    createdAt: Foundation.Date,
                    draft: Swift.Bool? = nil,
                    eventsUrl: Swift.String,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    labels: Components.Schemas.WebhookIssuesLabeled.IssuePayload.LabelsPayload? = nil,
                    labelsUrl: Swift.String,
                    locked: Swift.Bool? = nil,
                    milestone: Components.Schemas.WebhookIssuesLabeled.IssuePayload.MilestonePayload? = nil,
                    nodeId: Swift.String,
                    number: Swift.Int,
                    performedViaGithubApp: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PerformedViaGithubAppPayload? = nil,
                    pullRequest: Components.Schemas.WebhookIssuesLabeled.IssuePayload.PullRequestPayload? = nil,
                    reactions: Components.Schemas.WebhookIssuesLabeled.IssuePayload.ReactionsPayload,
                    repositoryUrl: Swift.String,
                    state: Components.Schemas.WebhookIssuesLabeled.IssuePayload.StatePayload? = nil,
                    stateReason: Swift.String? = nil,
                    timelineUrl: Swift.String? = nil,
                    title: Swift.String,
                    updatedAt: Foundation.Date,
                    url: Swift.String,
                    user: Components.Schemas.WebhookIssuesLabeled.IssuePayload.UserPayload? = nil
                ) {
                    self.activeLockReason = activeLockReason
                    self.assignee = assignee
                    self.assignees = assignees
                    self.authorAssociation = authorAssociation
                    self.body = body
                    self.closedAt = closedAt
                    self.comments = comments
                    self.commentsUrl = commentsUrl
                    self.createdAt = createdAt
                    self.draft = draft
                    self.eventsUrl = eventsUrl
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.labels = labels
                    self.labelsUrl = labelsUrl
                    self.locked = locked
                    self.milestone = milestone
                    self.nodeId = nodeId
                    self.number = number
                    self.performedViaGithubApp = performedViaGithubApp
                    self.pullRequest = pullRequest
                    self.reactions = reactions
                    self.repositoryUrl = repositoryUrl
                    self.state = state
                    self.stateReason = stateReason
                    self.timelineUrl = timelineUrl
                    self.title = title
                    self.updatedAt = updatedAt
                    self.url = url
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case activeLockReason = "active_lock_reason"
                    case assignee
                    case assignees
                    case authorAssociation = "author_association"
                    case body
                    case closedAt = "closed_at"
                    case comments
                    case commentsUrl = "comments_url"
                    case createdAt = "created_at"
                    case draft
                    case eventsUrl = "events_url"
                    case htmlUrl = "html_url"
                    case id
                    case labels
                    case labelsUrl = "labels_url"
                    case locked
                    case milestone
                    case nodeId = "node_id"
                    case number
                    case performedViaGithubApp = "performed_via_github_app"
                    case pullRequest = "pull_request"
                    case reactions
                    case repositoryUrl = "repository_url"
                    case state
                    case stateReason = "state_reason"
                    case timelineUrl = "timeline_url"
                    case title
                    case updatedAt = "updated_at"
                    case url
                    case user
                }
            }
            /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/issue`.
            public var issue: Components.Schemas.WebhookIssuesLabeled.IssuePayload
            /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/label`.
            public struct LabelPayload: Codable, Hashable, Sendable {
                /// 6-character hex code, without the leading #, identifying the color
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/label/color`.
                public var color: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/label/default`.
                public var _default: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/label/description`.
                public var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/label/id`.
                public var id: Swift.Int
                /// The name of the label.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/label/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/label/node_id`.
                public var nodeId: Swift.String
                /// URL for the label
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/label/url`.
                public var url: Swift.String
                /// Creates a new `LabelPayload`.
                ///
                /// - Parameters:
                ///   - color: 6-character hex code, without the leading #, identifying the color
                ///   - _default:
                ///   - description:
                ///   - id:
                ///   - name: The name of the label.
                ///   - nodeId:
                ///   - url: URL for the label
                public init(
                    color: Swift.String,
                    _default: Swift.Bool,
                    description: Swift.String? = nil,
                    id: Swift.Int,
                    name: Swift.String,
                    nodeId: Swift.String,
                    url: Swift.String
                ) {
                    self.color = color
                    self._default = _default
                    self.description = description
                    self.id = id
                    self.name = name
                    self.nodeId = nodeId
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case color
                    case _default = "default"
                    case description
                    case id
                    case name
                    case nodeId = "node_id"
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/label`.
            public var label: Components.Schemas.WebhookIssuesLabeled.LabelPayload?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-issues-labeled/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Creates a new `WebhookIssuesLabeled`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - enterprise:
            ///   - installation:
            ///   - issue: The [issue](https://docs.github.com/en/rest/reference/issues) itself.
            ///   - label:
            ///   - organization:
            ///   - repository:
            ///   - sender:
            public init(
                action: Components.Schemas.WebhookIssuesLabeled.ActionPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                issue: Components.Schemas.WebhookIssuesLabeled.IssuePayload,
                label: Components.Schemas.WebhookIssuesLabeled.LabelPayload? = nil,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser
            ) {
                self.action = action
                self.enterprise = enterprise
                self.installation = installation
                self.issue = issue
                self.label = label
                self.organization = organization
                self.repository = repository
                self.sender = sender
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case enterprise
                case installation
                case issue
                case label
                case organization
                case repository
                case sender
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked`.
        public struct WebhookIssuesLocked: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case locked = "locked"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/action`.
            public var action: Components.Schemas.WebhookIssuesLocked.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue`.
            public struct IssuePayload: Codable, Hashable, Sendable {
                /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/active_lock_reason`.
                    @frozen public enum ActiveLockReasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case resolved = "resolved"
                        case offTopic = "off-topic"
                        case tooHeated = "too heated"
                        case spam = "spam"
                        case _empty_ = ""
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/active_lock_reason`.
                    public var activeLockReason: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.ActiveLockReasonPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/assignee`.
                    public struct AssigneePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/assignee/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/assignee/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/assignee/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/assignee/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/assignee/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/assignee/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/assignee/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/assignee/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/assignee/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/assignee/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/assignee/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/assignee/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/assignee/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/assignee/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/assignee/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/assignee/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/assignee/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/assignee/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/assignee/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/assignee/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/assignee/type`.
                        public var _type: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.AssigneePayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/assignee/url`.
                        public var url: Swift.String?
                        /// Creates a new `AssigneePayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.AssigneePayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/assignee`.
                    public var assignee: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.AssigneePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/AssigneesPayload`.
                    public struct AssigneesPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/AssigneesPayload/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/AssigneesPayload/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/AssigneesPayload/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/AssigneesPayload/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/AssigneesPayload/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/AssigneesPayload/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/AssigneesPayload/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/AssigneesPayload/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/AssigneesPayload/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/AssigneesPayload/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/AssigneesPayload/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/AssigneesPayload/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/AssigneesPayload/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/AssigneesPayload/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/AssigneesPayload/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/AssigneesPayload/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/AssigneesPayload/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/AssigneesPayload/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/AssigneesPayload/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/AssigneesPayload/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/AssigneesPayload/type`.
                        public var _type: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.AssigneesPayloadPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/AssigneesPayload/url`.
                        public var url: Swift.String?
                        /// Creates a new `AssigneesPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.AssigneesPayloadPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/assignees`.
                    public typealias AssigneesPayload = [Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.AssigneesPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/assignees`.
                    public var assignees: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.AssigneesPayload
                    /// How the author is associated with the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/author_association`.
                    @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case collaborator = "COLLABORATOR"
                        case contributor = "CONTRIBUTOR"
                        case firstTimer = "FIRST_TIMER"
                        case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                        case mannequin = "MANNEQUIN"
                        case member = "MEMBER"
                        case none = "NONE"
                        case owner = "OWNER"
                    }
                    /// How the author is associated with the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/author_association`.
                    public var authorAssociation: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.AuthorAssociationPayload
                    /// Contents of the issue
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/body`.
                    public var body: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/closed_at`.
                    public var closedAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/comments`.
                    public var comments: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/comments_url`.
                    public var commentsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/created_at`.
                    public var createdAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/draft`.
                    public var draft: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/events_url`.
                    public var eventsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/html_url`.
                    public var htmlUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/LabelsPayload`.
                    public struct LabelsPayloadPayload: Codable, Hashable, Sendable {
                        /// 6-character hex code, without the leading #, identifying the color
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/LabelsPayload/color`.
                        public var color: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/LabelsPayload/default`.
                        public var _default: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/LabelsPayload/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/LabelsPayload/id`.
                        public var id: Swift.Int
                        /// The name of the label.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/LabelsPayload/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/LabelsPayload/node_id`.
                        public var nodeId: Swift.String
                        /// URL for the label
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/LabelsPayload/url`.
                        public var url: Swift.String
                        /// Creates a new `LabelsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - color: 6-character hex code, without the leading #, identifying the color
                        ///   - _default:
                        ///   - description:
                        ///   - id:
                        ///   - name: The name of the label.
                        ///   - nodeId:
                        ///   - url: URL for the label
                        public init(
                            color: Swift.String,
                            _default: Swift.Bool,
                            description: Swift.String? = nil,
                            id: Swift.Int,
                            name: Swift.String,
                            nodeId: Swift.String,
                            url: Swift.String
                        ) {
                            self.color = color
                            self._default = _default
                            self.description = description
                            self.id = id
                            self.name = name
                            self.nodeId = nodeId
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case color
                            case _default = "default"
                            case description
                            case id
                            case name
                            case nodeId = "node_id"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/labels`.
                    public typealias LabelsPayload = [Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.LabelsPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/labels`.
                    public var labels: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.LabelsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/labels_url`.
                    public var labelsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/locked`.
                    public var locked: Swift.Bool?
                    /// A collection of related issues and pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone`.
                    public struct MilestonePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/closed_at`.
                        public var closedAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/closed_issues`.
                        public var closedIssues: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/created_at`.
                        public var createdAt: Foundation.Date
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/creator`.
                        public struct CreatorPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/creator/avatar_url`.
                            public var avatarUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/creator/deleted`.
                            public var deleted: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/creator/email`.
                            public var email: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/creator/events_url`.
                            public var eventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/creator/followers_url`.
                            public var followersUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/creator/following_url`.
                            public var followingUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/creator/gists_url`.
                            public var gistsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/creator/gravatar_id`.
                            public var gravatarId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/creator/html_url`.
                            public var htmlUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/creator/id`.
                            public var id: Swift.Int
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/creator/login`.
                            public var login: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/creator/name`.
                            public var name: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/creator/node_id`.
                            public var nodeId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/creator/organizations_url`.
                            public var organizationsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/creator/received_events_url`.
                            public var receivedEventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/creator/repos_url`.
                            public var reposUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/creator/site_admin`.
                            public var siteAdmin: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/creator/starred_url`.
                            public var starredUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/creator/subscriptions_url`.
                            public var subscriptionsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/creator/type`.
                            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case bot = "Bot"
                                case user = "User"
                                case organization = "Organization"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/creator/type`.
                            public var _type: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload._TypePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/creator/url`.
                            public var url: Swift.String?
                            /// Creates a new `CreatorPayload`.
                            ///
                            /// - Parameters:
                            ///   - avatarUrl:
                            ///   - deleted:
                            ///   - email:
                            ///   - eventsUrl:
                            ///   - followersUrl:
                            ///   - followingUrl:
                            ///   - gistsUrl:
                            ///   - gravatarId:
                            ///   - htmlUrl:
                            ///   - id:
                            ///   - login:
                            ///   - name:
                            ///   - nodeId:
                            ///   - organizationsUrl:
                            ///   - receivedEventsUrl:
                            ///   - reposUrl:
                            ///   - siteAdmin:
                            ///   - starredUrl:
                            ///   - subscriptionsUrl:
                            ///   - _type:
                            ///   - url:
                            public init(
                                avatarUrl: Swift.String? = nil,
                                deleted: Swift.Bool? = nil,
                                email: Swift.String? = nil,
                                eventsUrl: Swift.String? = nil,
                                followersUrl: Swift.String? = nil,
                                followingUrl: Swift.String? = nil,
                                gistsUrl: Swift.String? = nil,
                                gravatarId: Swift.String? = nil,
                                htmlUrl: Swift.String? = nil,
                                id: Swift.Int,
                                login: Swift.String,
                                name: Swift.String? = nil,
                                nodeId: Swift.String? = nil,
                                organizationsUrl: Swift.String? = nil,
                                receivedEventsUrl: Swift.String? = nil,
                                reposUrl: Swift.String? = nil,
                                siteAdmin: Swift.Bool? = nil,
                                starredUrl: Swift.String? = nil,
                                subscriptionsUrl: Swift.String? = nil,
                                _type: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload._TypePayload? = nil,
                                url: Swift.String? = nil
                            ) {
                                self.avatarUrl = avatarUrl
                                self.deleted = deleted
                                self.email = email
                                self.eventsUrl = eventsUrl
                                self.followersUrl = followersUrl
                                self.followingUrl = followingUrl
                                self.gistsUrl = gistsUrl
                                self.gravatarId = gravatarId
                                self.htmlUrl = htmlUrl
                                self.id = id
                                self.login = login
                                self.name = name
                                self.nodeId = nodeId
                                self.organizationsUrl = organizationsUrl
                                self.receivedEventsUrl = receivedEventsUrl
                                self.reposUrl = reposUrl
                                self.siteAdmin = siteAdmin
                                self.starredUrl = starredUrl
                                self.subscriptionsUrl = subscriptionsUrl
                                self._type = _type
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case avatarUrl = "avatar_url"
                                case deleted
                                case email
                                case eventsUrl = "events_url"
                                case followersUrl = "followers_url"
                                case followingUrl = "following_url"
                                case gistsUrl = "gists_url"
                                case gravatarId = "gravatar_id"
                                case htmlUrl = "html_url"
                                case id
                                case login
                                case name
                                case nodeId = "node_id"
                                case organizationsUrl = "organizations_url"
                                case receivedEventsUrl = "received_events_url"
                                case reposUrl = "repos_url"
                                case siteAdmin = "site_admin"
                                case starredUrl = "starred_url"
                                case subscriptionsUrl = "subscriptions_url"
                                case _type = "type"
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/creator`.
                        public var creator: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/due_on`.
                        public var dueOn: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/html_url`.
                        public var htmlUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/labels_url`.
                        public var labelsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/node_id`.
                        public var nodeId: Swift.String
                        /// The number of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/number`.
                        public var number: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/open_issues`.
                        public var openIssues: Swift.Int
                        /// The state of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/state`.
                        @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case open = "open"
                            case closed = "closed"
                        }
                        /// The state of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/state`.
                        public var state: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.MilestonePayload.StatePayload
                        /// The title of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/title`.
                        public var title: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/updated_at`.
                        public var updatedAt: Foundation.Date
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone/url`.
                        public var url: Swift.String
                        /// Creates a new `MilestonePayload`.
                        ///
                        /// - Parameters:
                        ///   - closedAt:
                        ///   - closedIssues:
                        ///   - createdAt:
                        ///   - creator:
                        ///   - description:
                        ///   - dueOn:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - labelsUrl:
                        ///   - nodeId:
                        ///   - number: The number of the milestone.
                        ///   - openIssues:
                        ///   - state: The state of the milestone.
                        ///   - title: The title of the milestone.
                        ///   - updatedAt:
                        ///   - url:
                        public init(
                            closedAt: Foundation.Date? = nil,
                            closedIssues: Swift.Int,
                            createdAt: Foundation.Date,
                            creator: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload? = nil,
                            description: Swift.String? = nil,
                            dueOn: Foundation.Date? = nil,
                            htmlUrl: Swift.String,
                            id: Swift.Int,
                            labelsUrl: Swift.String,
                            nodeId: Swift.String,
                            number: Swift.Int,
                            openIssues: Swift.Int,
                            state: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.MilestonePayload.StatePayload,
                            title: Swift.String,
                            updatedAt: Foundation.Date,
                            url: Swift.String
                        ) {
                            self.closedAt = closedAt
                            self.closedIssues = closedIssues
                            self.createdAt = createdAt
                            self.creator = creator
                            self.description = description
                            self.dueOn = dueOn
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.labelsUrl = labelsUrl
                            self.nodeId = nodeId
                            self.number = number
                            self.openIssues = openIssues
                            self.state = state
                            self.title = title
                            self.updatedAt = updatedAt
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case closedAt = "closed_at"
                            case closedIssues = "closed_issues"
                            case createdAt = "created_at"
                            case creator
                            case description
                            case dueOn = "due_on"
                            case htmlUrl = "html_url"
                            case id
                            case labelsUrl = "labels_url"
                            case nodeId = "node_id"
                            case number
                            case openIssues = "open_issues"
                            case state
                            case title
                            case updatedAt = "updated_at"
                            case url
                        }
                    }
                    /// A collection of related issues and pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/milestone`.
                    public var milestone: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.MilestonePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/number`.
                    public var number: Swift.Int
                    /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app`.
                    public struct PerformedViaGithubAppPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/created_at`.
                        public var createdAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/EventsPayload`.
                        @frozen public enum EventsPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case branchProtectionRule = "branch_protection_rule"
                            case checkRun = "check_run"
                            case checkSuite = "check_suite"
                            case codeScanningAlert = "code_scanning_alert"
                            case commitComment = "commit_comment"
                            case contentReference = "content_reference"
                            case create = "create"
                            case delete = "delete"
                            case deployment = "deployment"
                            case deploymentReview = "deployment_review"
                            case deploymentStatus = "deployment_status"
                            case deployKey = "deploy_key"
                            case discussion = "discussion"
                            case discussionComment = "discussion_comment"
                            case fork = "fork"
                            case gollum = "gollum"
                            case issues = "issues"
                            case issueComment = "issue_comment"
                            case label = "label"
                            case member = "member"
                            case membership = "membership"
                            case milestone = "milestone"
                            case organization = "organization"
                            case orgBlock = "org_block"
                            case pageBuild = "page_build"
                            case project = "project"
                            case projectCard = "project_card"
                            case projectColumn = "project_column"
                            case _public = "public"
                            case pullRequest = "pull_request"
                            case pullRequestReview = "pull_request_review"
                            case pullRequestReviewComment = "pull_request_review_comment"
                            case push = "push"
                            case registryPackage = "registry_package"
                            case release = "release"
                            case repository = "repository"
                            case repositoryDispatch = "repository_dispatch"
                            case secretScanningAlert = "secret_scanning_alert"
                            case star = "star"
                            case status = "status"
                            case team = "team"
                            case teamAdd = "team_add"
                            case watch = "watch"
                            case workflowDispatch = "workflow_dispatch"
                            case workflowRun = "workflow_run"
                            case reminder = "reminder"
                            case securityAndAnalysis = "security_and_analysis"
                        }
                        /// The list of events for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/events`.
                        public typealias EventsPayload = [Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.EventsPayloadPayload]
                        /// The list of events for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/events`.
                        public var events: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.EventsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/external_url`.
                        public var externalUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/html_url`.
                        public var htmlUrl: Swift.String
                        /// Unique identifier of the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/id`.
                        public var id: Swift.Int?
                        /// The name of the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/node_id`.
                        public var nodeId: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/owner`.
                        public struct OwnerPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/owner/avatar_url`.
                            public var avatarUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/owner/deleted`.
                            public var deleted: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/owner/email`.
                            public var email: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/owner/events_url`.
                            public var eventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/owner/followers_url`.
                            public var followersUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/owner/following_url`.
                            public var followingUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/owner/gists_url`.
                            public var gistsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/owner/gravatar_id`.
                            public var gravatarId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/owner/html_url`.
                            public var htmlUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/owner/id`.
                            public var id: Swift.Int
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/owner/login`.
                            public var login: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/owner/name`.
                            public var name: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/owner/node_id`.
                            public var nodeId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/owner/organizations_url`.
                            public var organizationsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/owner/received_events_url`.
                            public var receivedEventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/owner/repos_url`.
                            public var reposUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/owner/site_admin`.
                            public var siteAdmin: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/owner/starred_url`.
                            public var starredUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/owner/subscriptions_url`.
                            public var subscriptionsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/owner/type`.
                            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case bot = "Bot"
                                case user = "User"
                                case organization = "Organization"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/owner/type`.
                            public var _type: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/owner/url`.
                            public var url: Swift.String?
                            /// Creates a new `OwnerPayload`.
                            ///
                            /// - Parameters:
                            ///   - avatarUrl:
                            ///   - deleted:
                            ///   - email:
                            ///   - eventsUrl:
                            ///   - followersUrl:
                            ///   - followingUrl:
                            ///   - gistsUrl:
                            ///   - gravatarId:
                            ///   - htmlUrl:
                            ///   - id:
                            ///   - login:
                            ///   - name:
                            ///   - nodeId:
                            ///   - organizationsUrl:
                            ///   - receivedEventsUrl:
                            ///   - reposUrl:
                            ///   - siteAdmin:
                            ///   - starredUrl:
                            ///   - subscriptionsUrl:
                            ///   - _type:
                            ///   - url:
                            public init(
                                avatarUrl: Swift.String? = nil,
                                deleted: Swift.Bool? = nil,
                                email: Swift.String? = nil,
                                eventsUrl: Swift.String? = nil,
                                followersUrl: Swift.String? = nil,
                                followingUrl: Swift.String? = nil,
                                gistsUrl: Swift.String? = nil,
                                gravatarId: Swift.String? = nil,
                                htmlUrl: Swift.String? = nil,
                                id: Swift.Int,
                                login: Swift.String,
                                name: Swift.String? = nil,
                                nodeId: Swift.String? = nil,
                                organizationsUrl: Swift.String? = nil,
                                receivedEventsUrl: Swift.String? = nil,
                                reposUrl: Swift.String? = nil,
                                siteAdmin: Swift.Bool? = nil,
                                starredUrl: Swift.String? = nil,
                                subscriptionsUrl: Swift.String? = nil,
                                _type: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload? = nil,
                                url: Swift.String? = nil
                            ) {
                                self.avatarUrl = avatarUrl
                                self.deleted = deleted
                                self.email = email
                                self.eventsUrl = eventsUrl
                                self.followersUrl = followersUrl
                                self.followingUrl = followingUrl
                                self.gistsUrl = gistsUrl
                                self.gravatarId = gravatarId
                                self.htmlUrl = htmlUrl
                                self.id = id
                                self.login = login
                                self.name = name
                                self.nodeId = nodeId
                                self.organizationsUrl = organizationsUrl
                                self.receivedEventsUrl = receivedEventsUrl
                                self.reposUrl = reposUrl
                                self.siteAdmin = siteAdmin
                                self.starredUrl = starredUrl
                                self.subscriptionsUrl = subscriptionsUrl
                                self._type = _type
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case avatarUrl = "avatar_url"
                                case deleted
                                case email
                                case eventsUrl = "events_url"
                                case followersUrl = "followers_url"
                                case followingUrl = "following_url"
                                case gistsUrl = "gists_url"
                                case gravatarId = "gravatar_id"
                                case htmlUrl = "html_url"
                                case id
                                case login
                                case name
                                case nodeId = "node_id"
                                case organizationsUrl = "organizations_url"
                                case receivedEventsUrl = "received_events_url"
                                case reposUrl = "repos_url"
                                case siteAdmin = "site_admin"
                                case starredUrl = "starred_url"
                                case subscriptionsUrl = "subscriptions_url"
                                case _type = "type"
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/owner`.
                        public var owner: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload?
                        /// The set of permissions for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions`.
                        public struct PermissionsPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/actions`.
                            @frozen public enum ActionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/actions`.
                            public var actions: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/administration`.
                            @frozen public enum AdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/administration`.
                            public var administration: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/checks`.
                            @frozen public enum ChecksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/checks`.
                            public var checks: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/content_references`.
                            @frozen public enum ContentReferencesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/content_references`.
                            public var contentReferences: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/contents`.
                            @frozen public enum ContentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/contents`.
                            public var contents: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/deployments`.
                            @frozen public enum DeploymentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/deployments`.
                            public var deployments: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/discussions`.
                            @frozen public enum DiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/discussions`.
                            public var discussions: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/emails`.
                            @frozen public enum EmailsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/emails`.
                            public var emails: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/environments`.
                            @frozen public enum EnvironmentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/environments`.
                            public var environments: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/issues`.
                            @frozen public enum IssuesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/issues`.
                            public var issues: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/keys`.
                            @frozen public enum KeysPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/keys`.
                            public var keys: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/members`.
                            @frozen public enum MembersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/members`.
                            public var members: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/metadata`.
                            @frozen public enum MetadataPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/metadata`.
                            public var metadata: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/organization_administration`.
                            @frozen public enum OrganizationAdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/organization_administration`.
                            public var organizationAdministration: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/organization_hooks`.
                            @frozen public enum OrganizationHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/organization_hooks`.
                            public var organizationHooks: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/organization_packages`.
                            @frozen public enum OrganizationPackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/organization_packages`.
                            public var organizationPackages: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/organization_plan`.
                            @frozen public enum OrganizationPlanPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/organization_plan`.
                            public var organizationPlan: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/organization_projects`.
                            @frozen public enum OrganizationProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/organization_projects`.
                            public var organizationProjects: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/organization_secrets`.
                            @frozen public enum OrganizationSecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/organization_secrets`.
                            public var organizationSecrets: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/organization_self_hosted_runners`.
                            @frozen public enum OrganizationSelfHostedRunnersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/organization_self_hosted_runners`.
                            public var organizationSelfHostedRunners: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/organization_user_blocking`.
                            @frozen public enum OrganizationUserBlockingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/organization_user_blocking`.
                            public var organizationUserBlocking: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/packages`.
                            @frozen public enum PackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/packages`.
                            public var packages: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/pages`.
                            @frozen public enum PagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/pages`.
                            public var pages: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/pull_requests`.
                            @frozen public enum PullRequestsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/pull_requests`.
                            public var pullRequests: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/repository_hooks`.
                            @frozen public enum RepositoryHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/repository_hooks`.
                            public var repositoryHooks: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/repository_projects`.
                            @frozen public enum RepositoryProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/repository_projects`.
                            public var repositoryProjects: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/secret_scanning_alerts`.
                            @frozen public enum SecretScanningAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/secret_scanning_alerts`.
                            public var secretScanningAlerts: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/secrets`.
                            @frozen public enum SecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/secrets`.
                            public var secrets: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/security_events`.
                            @frozen public enum SecurityEventsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/security_events`.
                            public var securityEvents: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/security_scanning_alert`.
                            @frozen public enum SecurityScanningAlertPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/security_scanning_alert`.
                            public var securityScanningAlert: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/single_file`.
                            @frozen public enum SingleFilePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/single_file`.
                            public var singleFile: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/statuses`.
                            @frozen public enum StatusesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/statuses`.
                            public var statuses: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/team_discussions`.
                            @frozen public enum TeamDiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/team_discussions`.
                            public var teamDiscussions: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/vulnerability_alerts`.
                            @frozen public enum VulnerabilityAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/vulnerability_alerts`.
                            public var vulnerabilityAlerts: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/workflows`.
                            @frozen public enum WorkflowsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions/workflows`.
                            public var workflows: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload?
                            /// Creates a new `PermissionsPayload`.
                            ///
                            /// - Parameters:
                            ///   - actions:
                            ///   - administration:
                            ///   - checks:
                            ///   - contentReferences:
                            ///   - contents:
                            ///   - deployments:
                            ///   - discussions:
                            ///   - emails:
                            ///   - environments:
                            ///   - issues:
                            ///   - keys:
                            ///   - members:
                            ///   - metadata:
                            ///   - organizationAdministration:
                            ///   - organizationHooks:
                            ///   - organizationPackages:
                            ///   - organizationPlan:
                            ///   - organizationProjects:
                            ///   - organizationSecrets:
                            ///   - organizationSelfHostedRunners:
                            ///   - organizationUserBlocking:
                            ///   - packages:
                            ///   - pages:
                            ///   - pullRequests:
                            ///   - repositoryHooks:
                            ///   - repositoryProjects:
                            ///   - secretScanningAlerts:
                            ///   - secrets:
                            ///   - securityEvents:
                            ///   - securityScanningAlert:
                            ///   - singleFile:
                            ///   - statuses:
                            ///   - teamDiscussions:
                            ///   - vulnerabilityAlerts:
                            ///   - workflows:
                            public init(
                                actions: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload? = nil,
                                administration: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload? = nil,
                                checks: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload? = nil,
                                contentReferences: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload? = nil,
                                contents: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload? = nil,
                                deployments: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload? = nil,
                                discussions: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload? = nil,
                                emails: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload? = nil,
                                environments: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload? = nil,
                                issues: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload? = nil,
                                keys: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload? = nil,
                                members: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload? = nil,
                                metadata: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload? = nil,
                                organizationAdministration: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload? = nil,
                                organizationHooks: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload? = nil,
                                organizationPackages: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload? = nil,
                                organizationPlan: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload? = nil,
                                organizationProjects: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload? = nil,
                                organizationSecrets: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload? = nil,
                                organizationSelfHostedRunners: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload? = nil,
                                organizationUserBlocking: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload? = nil,
                                packages: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload? = nil,
                                pages: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload? = nil,
                                pullRequests: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload? = nil,
                                repositoryHooks: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload? = nil,
                                repositoryProjects: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload? = nil,
                                secretScanningAlerts: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload? = nil,
                                secrets: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload? = nil,
                                securityEvents: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload? = nil,
                                securityScanningAlert: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload? = nil,
                                singleFile: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload? = nil,
                                statuses: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload? = nil,
                                teamDiscussions: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload? = nil,
                                vulnerabilityAlerts: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload? = nil,
                                workflows: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload? = nil
                            ) {
                                self.actions = actions
                                self.administration = administration
                                self.checks = checks
                                self.contentReferences = contentReferences
                                self.contents = contents
                                self.deployments = deployments
                                self.discussions = discussions
                                self.emails = emails
                                self.environments = environments
                                self.issues = issues
                                self.keys = keys
                                self.members = members
                                self.metadata = metadata
                                self.organizationAdministration = organizationAdministration
                                self.organizationHooks = organizationHooks
                                self.organizationPackages = organizationPackages
                                self.organizationPlan = organizationPlan
                                self.organizationProjects = organizationProjects
                                self.organizationSecrets = organizationSecrets
                                self.organizationSelfHostedRunners = organizationSelfHostedRunners
                                self.organizationUserBlocking = organizationUserBlocking
                                self.packages = packages
                                self.pages = pages
                                self.pullRequests = pullRequests
                                self.repositoryHooks = repositoryHooks
                                self.repositoryProjects = repositoryProjects
                                self.secretScanningAlerts = secretScanningAlerts
                                self.secrets = secrets
                                self.securityEvents = securityEvents
                                self.securityScanningAlert = securityScanningAlert
                                self.singleFile = singleFile
                                self.statuses = statuses
                                self.teamDiscussions = teamDiscussions
                                self.vulnerabilityAlerts = vulnerabilityAlerts
                                self.workflows = workflows
                            }
                            public enum CodingKeys: String, CodingKey {
                                case actions
                                case administration
                                case checks
                                case contentReferences = "content_references"
                                case contents
                                case deployments
                                case discussions
                                case emails
                                case environments
                                case issues
                                case keys
                                case members
                                case metadata
                                case organizationAdministration = "organization_administration"
                                case organizationHooks = "organization_hooks"
                                case organizationPackages = "organization_packages"
                                case organizationPlan = "organization_plan"
                                case organizationProjects = "organization_projects"
                                case organizationSecrets = "organization_secrets"
                                case organizationSelfHostedRunners = "organization_self_hosted_runners"
                                case organizationUserBlocking = "organization_user_blocking"
                                case packages
                                case pages
                                case pullRequests = "pull_requests"
                                case repositoryHooks = "repository_hooks"
                                case repositoryProjects = "repository_projects"
                                case secretScanningAlerts = "secret_scanning_alerts"
                                case secrets
                                case securityEvents = "security_events"
                                case securityScanningAlert = "security_scanning_alert"
                                case singleFile = "single_file"
                                case statuses
                                case teamDiscussions = "team_discussions"
                                case vulnerabilityAlerts = "vulnerability_alerts"
                                case workflows
                            }
                        }
                        /// The set of permissions for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/permissions`.
                        public var permissions: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload?
                        /// The slug name of the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/slug`.
                        public var slug: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app/updated_at`.
                        public var updatedAt: Foundation.Date?
                        /// Creates a new `PerformedViaGithubAppPayload`.
                        ///
                        /// - Parameters:
                        ///   - createdAt:
                        ///   - description:
                        ///   - events: The list of events for the GitHub app
                        ///   - externalUrl:
                        ///   - htmlUrl:
                        ///   - id: Unique identifier of the GitHub app
                        ///   - name: The name of the GitHub app
                        ///   - nodeId:
                        ///   - owner:
                        ///   - permissions: The set of permissions for the GitHub app
                        ///   - slug: The slug name of the GitHub app
                        ///   - updatedAt:
                        public init(
                            createdAt: Foundation.Date? = nil,
                            description: Swift.String? = nil,
                            events: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.EventsPayload? = nil,
                            externalUrl: Swift.String? = nil,
                            htmlUrl: Swift.String,
                            id: Swift.Int? = nil,
                            name: Swift.String,
                            nodeId: Swift.String,
                            owner: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload? = nil,
                            permissions: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload? = nil,
                            slug: Swift.String? = nil,
                            updatedAt: Foundation.Date? = nil
                        ) {
                            self.createdAt = createdAt
                            self.description = description
                            self.events = events
                            self.externalUrl = externalUrl
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.name = name
                            self.nodeId = nodeId
                            self.owner = owner
                            self.permissions = permissions
                            self.slug = slug
                            self.updatedAt = updatedAt
                        }
                        public enum CodingKeys: String, CodingKey {
                            case createdAt = "created_at"
                            case description
                            case events
                            case externalUrl = "external_url"
                            case htmlUrl = "html_url"
                            case id
                            case name
                            case nodeId = "node_id"
                            case owner
                            case permissions
                            case slug
                            case updatedAt = "updated_at"
                        }
                    }
                    /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/performed_via_github_app`.
                    public var performedViaGithubApp: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/pull_request`.
                    public struct PullRequestPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/pull_request/diff_url`.
                        public var diffUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/pull_request/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/pull_request/merged_at`.
                        public var mergedAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/pull_request/patch_url`.
                        public var patchUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/pull_request/url`.
                        public var url: Swift.String?
                        /// Creates a new `PullRequestPayload`.
                        ///
                        /// - Parameters:
                        ///   - diffUrl:
                        ///   - htmlUrl:
                        ///   - mergedAt:
                        ///   - patchUrl:
                        ///   - url:
                        public init(
                            diffUrl: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            mergedAt: Foundation.Date? = nil,
                            patchUrl: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.diffUrl = diffUrl
                            self.htmlUrl = htmlUrl
                            self.mergedAt = mergedAt
                            self.patchUrl = patchUrl
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case diffUrl = "diff_url"
                            case htmlUrl = "html_url"
                            case mergedAt = "merged_at"
                            case patchUrl = "patch_url"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/pull_request`.
                    public var pullRequest: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PullRequestPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/reactions`.
                    public struct ReactionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/reactions/+1`.
                        public var _plus_1: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/reactions/-1`.
                        public var _hyphen_1: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/reactions/confused`.
                        public var confused: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/reactions/eyes`.
                        public var eyes: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/reactions/heart`.
                        public var heart: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/reactions/hooray`.
                        public var hooray: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/reactions/laugh`.
                        public var laugh: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/reactions/rocket`.
                        public var rocket: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/reactions/total_count`.
                        public var totalCount: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/reactions/url`.
                        public var url: Swift.String
                        /// Creates a new `ReactionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - _plus_1:
                        ///   - _hyphen_1:
                        ///   - confused:
                        ///   - eyes:
                        ///   - heart:
                        ///   - hooray:
                        ///   - laugh:
                        ///   - rocket:
                        ///   - totalCount:
                        ///   - url:
                        public init(
                            _plus_1: Swift.Int,
                            _hyphen_1: Swift.Int,
                            confused: Swift.Int,
                            eyes: Swift.Int,
                            heart: Swift.Int,
                            hooray: Swift.Int,
                            laugh: Swift.Int,
                            rocket: Swift.Int,
                            totalCount: Swift.Int,
                            url: Swift.String
                        ) {
                            self._plus_1 = _plus_1
                            self._hyphen_1 = _hyphen_1
                            self.confused = confused
                            self.eyes = eyes
                            self.heart = heart
                            self.hooray = hooray
                            self.laugh = laugh
                            self.rocket = rocket
                            self.totalCount = totalCount
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _plus_1 = "+1"
                            case _hyphen_1 = "-1"
                            case confused
                            case eyes
                            case heart
                            case hooray
                            case laugh
                            case rocket
                            case totalCount = "total_count"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/reactions`.
                    public var reactions: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.ReactionsPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/repository_url`.
                    public var repositoryUrl: Swift.String
                    /// State of the issue; either 'open' or 'closed'
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/state`.
                    @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case closed = "closed"
                    }
                    /// State of the issue; either 'open' or 'closed'
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/state`.
                    public var state: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.StatePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/state_reason`.
                    public var stateReason: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/timeline_url`.
                    public var timelineUrl: Swift.String?
                    /// Title of the issue
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/title`.
                    public var title: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/updated_at`.
                    public var updatedAt: Foundation.Date
                    /// URL for the issue
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/url`.
                    public var url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/user`.
                    public struct UserPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/user/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/user/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/user/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/user/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/user/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/user/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/user/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/user/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/user/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/user/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/user/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/user/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/user/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/user/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/user/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/user/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/user/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/user/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/user/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/user/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/user/type`.
                        public var _type: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.UserPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/user/url`.
                        public var url: Swift.String?
                        /// Creates a new `UserPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.UserPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1/user`.
                    public var user: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.UserPayload?
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - activeLockReason:
                    ///   - assignee:
                    ///   - assignees:
                    ///   - authorAssociation: How the author is associated with the repository.
                    ///   - body: Contents of the issue
                    ///   - closedAt:
                    ///   - comments:
                    ///   - commentsUrl:
                    ///   - createdAt:
                    ///   - draft:
                    ///   - eventsUrl:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - labels:
                    ///   - labelsUrl:
                    ///   - locked:
                    ///   - milestone: A collection of related issues and pull requests.
                    ///   - nodeId:
                    ///   - number:
                    ///   - performedViaGithubApp: GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                    ///   - pullRequest:
                    ///   - reactions:
                    ///   - repositoryUrl:
                    ///   - state: State of the issue; either 'open' or 'closed'
                    ///   - stateReason:
                    ///   - timelineUrl:
                    ///   - title: Title of the issue
                    ///   - updatedAt:
                    ///   - url: URL for the issue
                    ///   - user:
                    public init(
                        activeLockReason: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.ActiveLockReasonPayload? = nil,
                        assignee: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.AssigneePayload? = nil,
                        assignees: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.AssigneesPayload,
                        authorAssociation: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.AuthorAssociationPayload,
                        body: Swift.String? = nil,
                        closedAt: Foundation.Date? = nil,
                        comments: Swift.Int,
                        commentsUrl: Swift.String,
                        createdAt: Foundation.Date,
                        draft: Swift.Bool? = nil,
                        eventsUrl: Swift.String,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        labels: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.LabelsPayload? = nil,
                        labelsUrl: Swift.String,
                        locked: Swift.Bool? = nil,
                        milestone: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.MilestonePayload? = nil,
                        nodeId: Swift.String,
                        number: Swift.Int,
                        performedViaGithubApp: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload? = nil,
                        pullRequest: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.PullRequestPayload? = nil,
                        reactions: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.ReactionsPayload,
                        repositoryUrl: Swift.String,
                        state: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.StatePayload? = nil,
                        stateReason: Swift.String? = nil,
                        timelineUrl: Swift.String? = nil,
                        title: Swift.String,
                        updatedAt: Foundation.Date,
                        url: Swift.String,
                        user: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload.UserPayload? = nil
                    ) {
                        self.activeLockReason = activeLockReason
                        self.assignee = assignee
                        self.assignees = assignees
                        self.authorAssociation = authorAssociation
                        self.body = body
                        self.closedAt = closedAt
                        self.comments = comments
                        self.commentsUrl = commentsUrl
                        self.createdAt = createdAt
                        self.draft = draft
                        self.eventsUrl = eventsUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.labels = labels
                        self.labelsUrl = labelsUrl
                        self.locked = locked
                        self.milestone = milestone
                        self.nodeId = nodeId
                        self.number = number
                        self.performedViaGithubApp = performedViaGithubApp
                        self.pullRequest = pullRequest
                        self.reactions = reactions
                        self.repositoryUrl = repositoryUrl
                        self.state = state
                        self.stateReason = stateReason
                        self.timelineUrl = timelineUrl
                        self.title = title
                        self.updatedAt = updatedAt
                        self.url = url
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case activeLockReason = "active_lock_reason"
                        case assignee
                        case assignees
                        case authorAssociation = "author_association"
                        case body
                        case closedAt = "closed_at"
                        case comments
                        case commentsUrl = "comments_url"
                        case createdAt = "created_at"
                        case draft
                        case eventsUrl = "events_url"
                        case htmlUrl = "html_url"
                        case id
                        case labels
                        case labelsUrl = "labels_url"
                        case locked
                        case milestone
                        case nodeId = "node_id"
                        case number
                        case performedViaGithubApp = "performed_via_github_app"
                        case pullRequest = "pull_request"
                        case reactions
                        case repositoryUrl = "repository_url"
                        case state
                        case stateReason = "state_reason"
                        case timelineUrl = "timeline_url"
                        case title
                        case updatedAt = "updated_at"
                        case url
                        case user
                    }
                }
                /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value1`.
                public var value1: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/active_lock_reason`.
                    @frozen public enum ActiveLockReasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case resolved = "resolved"
                        case offTopic = "off-topic"
                        case tooHeated = "too heated"
                        case spam = "spam"
                        case _empty_ = ""
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/active_lock_reason`.
                    public var activeLockReason: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value2Payload.ActiveLockReasonPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/assignee`.
                    public var assignee: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/assignees`.
                    public var assignees: [OpenAPIRuntime.OpenAPIObjectContainer?]?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/author_association`.
                    public var authorAssociation: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/body`.
                    public var body: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/closed_at`.
                    public var closedAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/comments`.
                    public var comments: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/comments_url`.
                    public var commentsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/created_at`.
                    public var createdAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/id`.
                    public var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/labels`.
                    public var labels: [OpenAPIRuntime.OpenAPIObjectContainer?]?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/labels_url`.
                    public var labelsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/locked`.
                    public var locked: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/milestone`.
                    public var milestone: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/number`.
                    public var number: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/performed_via_github_app`.
                    public var performedViaGithubApp: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/reactions`.
                    public struct ReactionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/reactions/+1`.
                        public var _plus_1: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/reactions/-1`.
                        public var _hyphen_1: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/reactions/confused`.
                        public var confused: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/reactions/eyes`.
                        public var eyes: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/reactions/heart`.
                        public var heart: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/reactions/hooray`.
                        public var hooray: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/reactions/laugh`.
                        public var laugh: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/reactions/rocket`.
                        public var rocket: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/reactions/total_count`.
                        public var totalCount: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/reactions/url`.
                        public var url: Swift.String?
                        /// Creates a new `ReactionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - _plus_1:
                        ///   - _hyphen_1:
                        ///   - confused:
                        ///   - eyes:
                        ///   - heart:
                        ///   - hooray:
                        ///   - laugh:
                        ///   - rocket:
                        ///   - totalCount:
                        ///   - url:
                        public init(
                            _plus_1: Swift.Int? = nil,
                            _hyphen_1: Swift.Int? = nil,
                            confused: Swift.Int? = nil,
                            eyes: Swift.Int? = nil,
                            heart: Swift.Int? = nil,
                            hooray: Swift.Int? = nil,
                            laugh: Swift.Int? = nil,
                            rocket: Swift.Int? = nil,
                            totalCount: Swift.Int? = nil,
                            url: Swift.String? = nil
                        ) {
                            self._plus_1 = _plus_1
                            self._hyphen_1 = _hyphen_1
                            self.confused = confused
                            self.eyes = eyes
                            self.heart = heart
                            self.hooray = hooray
                            self.laugh = laugh
                            self.rocket = rocket
                            self.totalCount = totalCount
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _plus_1 = "+1"
                            case _hyphen_1 = "-1"
                            case confused
                            case eyes
                            case heart
                            case hooray
                            case laugh
                            case rocket
                            case totalCount = "total_count"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/reactions`.
                    public var reactions: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value2Payload.ReactionsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/repository_url`.
                    public var repositoryUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/state`.
                    public var state: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/timeline_url`.
                    public var timelineUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/title`.
                    public var title: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/updated_at`.
                    public var updatedAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/url`.
                    public var url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/user`.
                    public struct UserPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/user/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/user/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/user/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/user/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/user/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/user/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/user/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/user/id`.
                        public var id: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/user/login`.
                        public var login: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/user/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/user/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/user/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/user/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/user/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/user/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/user/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/user/type`.
                        public var _type: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/user/url`.
                        public var url: Swift.String?
                        /// Creates a new `UserPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int? = nil,
                            login: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2/user`.
                    public var user: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value2Payload.UserPayload?
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - activeLockReason:
                    ///   - assignee:
                    ///   - assignees:
                    ///   - authorAssociation:
                    ///   - body:
                    ///   - closedAt:
                    ///   - comments:
                    ///   - commentsUrl:
                    ///   - createdAt:
                    ///   - eventsUrl:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - labels:
                    ///   - labelsUrl:
                    ///   - locked:
                    ///   - milestone:
                    ///   - nodeId:
                    ///   - number:
                    ///   - performedViaGithubApp:
                    ///   - reactions:
                    ///   - repositoryUrl:
                    ///   - state:
                    ///   - timelineUrl:
                    ///   - title:
                    ///   - updatedAt:
                    ///   - url:
                    ///   - user:
                    public init(
                        activeLockReason: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value2Payload.ActiveLockReasonPayload? = nil,
                        assignee: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                        assignees: [OpenAPIRuntime.OpenAPIObjectContainer?]? = nil,
                        authorAssociation: Swift.String? = nil,
                        body: Swift.String? = nil,
                        closedAt: Swift.String? = nil,
                        comments: Swift.Int? = nil,
                        commentsUrl: Swift.String? = nil,
                        createdAt: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int? = nil,
                        labels: [OpenAPIRuntime.OpenAPIObjectContainer?]? = nil,
                        labelsUrl: Swift.String? = nil,
                        locked: Swift.Bool,
                        milestone: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                        nodeId: Swift.String? = nil,
                        number: Swift.Int? = nil,
                        performedViaGithubApp: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                        reactions: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value2Payload.ReactionsPayload? = nil,
                        repositoryUrl: Swift.String? = nil,
                        state: Swift.String? = nil,
                        timelineUrl: Swift.String? = nil,
                        title: Swift.String? = nil,
                        updatedAt: Swift.String? = nil,
                        url: Swift.String? = nil,
                        user: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value2Payload.UserPayload? = nil
                    ) {
                        self.activeLockReason = activeLockReason
                        self.assignee = assignee
                        self.assignees = assignees
                        self.authorAssociation = authorAssociation
                        self.body = body
                        self.closedAt = closedAt
                        self.comments = comments
                        self.commentsUrl = commentsUrl
                        self.createdAt = createdAt
                        self.eventsUrl = eventsUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.labels = labels
                        self.labelsUrl = labelsUrl
                        self.locked = locked
                        self.milestone = milestone
                        self.nodeId = nodeId
                        self.number = number
                        self.performedViaGithubApp = performedViaGithubApp
                        self.reactions = reactions
                        self.repositoryUrl = repositoryUrl
                        self.state = state
                        self.timelineUrl = timelineUrl
                        self.title = title
                        self.updatedAt = updatedAt
                        self.url = url
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case activeLockReason = "active_lock_reason"
                        case assignee
                        case assignees
                        case authorAssociation = "author_association"
                        case body
                        case closedAt = "closed_at"
                        case comments
                        case commentsUrl = "comments_url"
                        case createdAt = "created_at"
                        case eventsUrl = "events_url"
                        case htmlUrl = "html_url"
                        case id
                        case labels
                        case labelsUrl = "labels_url"
                        case locked
                        case milestone
                        case nodeId = "node_id"
                        case number
                        case performedViaGithubApp = "performed_via_github_app"
                        case reactions
                        case repositoryUrl = "repository_url"
                        case state
                        case timelineUrl = "timeline_url"
                        case title
                        case updatedAt = "updated_at"
                        case url
                        case user
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue/value2`.
                public var value2: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value2Payload
                /// Creates a new `IssuePayload`.
                ///
                /// - Parameters:
                ///   - value1: The [issue](https://docs.github.com/en/rest/reference/issues) itself.
                ///   - value2:
                public init(
                    value1: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value1Payload,
                    value2: Components.Schemas.WebhookIssuesLocked.IssuePayload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/issue`.
            public var issue: Components.Schemas.WebhookIssuesLocked.IssuePayload
            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-issues-locked/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Creates a new `WebhookIssuesLocked`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - enterprise:
            ///   - installation:
            ///   - issue:
            ///   - organization:
            ///   - repository:
            ///   - sender:
            public init(
                action: Components.Schemas.WebhookIssuesLocked.ActionPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                issue: Components.Schemas.WebhookIssuesLocked.IssuePayload,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser
            ) {
                self.action = action
                self.enterprise = enterprise
                self.installation = installation
                self.issue = issue
                self.organization = organization
                self.repository = repository
                self.sender = sender
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case enterprise
                case installation
                case issue
                case organization
                case repository
                case sender
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned`.
        public struct WebhookIssuesMilestoned: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case milestoned = "milestoned"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/action`.
            public var action: Components.Schemas.WebhookIssuesMilestoned.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue`.
            public struct IssuePayload: Codable, Hashable, Sendable {
                /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/active_lock_reason`.
                    @frozen public enum ActiveLockReasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case resolved = "resolved"
                        case offTopic = "off-topic"
                        case tooHeated = "too heated"
                        case spam = "spam"
                        case _empty_ = ""
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/active_lock_reason`.
                    public var activeLockReason: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.ActiveLockReasonPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/assignee`.
                    public struct AssigneePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/assignee/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/assignee/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/assignee/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/assignee/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/assignee/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/assignee/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/assignee/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/assignee/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/assignee/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/assignee/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/assignee/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/assignee/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/assignee/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/assignee/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/assignee/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/assignee/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/assignee/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/assignee/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/assignee/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/assignee/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/assignee/type`.
                        public var _type: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.AssigneePayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/assignee/url`.
                        public var url: Swift.String?
                        /// Creates a new `AssigneePayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.AssigneePayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/assignee`.
                    public var assignee: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.AssigneePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/AssigneesPayload`.
                    public struct AssigneesPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/AssigneesPayload/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/AssigneesPayload/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/AssigneesPayload/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/AssigneesPayload/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/AssigneesPayload/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/AssigneesPayload/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/AssigneesPayload/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/AssigneesPayload/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/AssigneesPayload/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/AssigneesPayload/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/AssigneesPayload/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/AssigneesPayload/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/AssigneesPayload/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/AssigneesPayload/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/AssigneesPayload/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/AssigneesPayload/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/AssigneesPayload/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/AssigneesPayload/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/AssigneesPayload/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/AssigneesPayload/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/AssigneesPayload/type`.
                        public var _type: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.AssigneesPayloadPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/AssigneesPayload/url`.
                        public var url: Swift.String?
                        /// Creates a new `AssigneesPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.AssigneesPayloadPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/assignees`.
                    public typealias AssigneesPayload = [Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.AssigneesPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/assignees`.
                    public var assignees: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.AssigneesPayload
                    /// How the author is associated with the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/author_association`.
                    @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case collaborator = "COLLABORATOR"
                        case contributor = "CONTRIBUTOR"
                        case firstTimer = "FIRST_TIMER"
                        case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                        case mannequin = "MANNEQUIN"
                        case member = "MEMBER"
                        case none = "NONE"
                        case owner = "OWNER"
                    }
                    /// How the author is associated with the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/author_association`.
                    public var authorAssociation: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.AuthorAssociationPayload
                    /// Contents of the issue
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/body`.
                    public var body: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/closed_at`.
                    public var closedAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/comments`.
                    public var comments: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/comments_url`.
                    public var commentsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/created_at`.
                    public var createdAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/draft`.
                    public var draft: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/events_url`.
                    public var eventsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/html_url`.
                    public var htmlUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/LabelsPayload`.
                    public struct LabelsPayloadPayload: Codable, Hashable, Sendable {
                        /// 6-character hex code, without the leading #, identifying the color
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/LabelsPayload/color`.
                        public var color: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/LabelsPayload/default`.
                        public var _default: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/LabelsPayload/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/LabelsPayload/id`.
                        public var id: Swift.Int
                        /// The name of the label.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/LabelsPayload/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/LabelsPayload/node_id`.
                        public var nodeId: Swift.String
                        /// URL for the label
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/LabelsPayload/url`.
                        public var url: Swift.String
                        /// Creates a new `LabelsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - color: 6-character hex code, without the leading #, identifying the color
                        ///   - _default:
                        ///   - description:
                        ///   - id:
                        ///   - name: The name of the label.
                        ///   - nodeId:
                        ///   - url: URL for the label
                        public init(
                            color: Swift.String,
                            _default: Swift.Bool,
                            description: Swift.String? = nil,
                            id: Swift.Int,
                            name: Swift.String,
                            nodeId: Swift.String,
                            url: Swift.String
                        ) {
                            self.color = color
                            self._default = _default
                            self.description = description
                            self.id = id
                            self.name = name
                            self.nodeId = nodeId
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case color
                            case _default = "default"
                            case description
                            case id
                            case name
                            case nodeId = "node_id"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/labels`.
                    public typealias LabelsPayload = [Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.LabelsPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/labels`.
                    public var labels: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.LabelsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/labels_url`.
                    public var labelsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/locked`.
                    public var locked: Swift.Bool?
                    /// A collection of related issues and pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone`.
                    public struct MilestonePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/closed_at`.
                        public var closedAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/closed_issues`.
                        public var closedIssues: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/created_at`.
                        public var createdAt: Foundation.Date
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/creator`.
                        public struct CreatorPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/creator/avatar_url`.
                            public var avatarUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/creator/deleted`.
                            public var deleted: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/creator/email`.
                            public var email: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/creator/events_url`.
                            public var eventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/creator/followers_url`.
                            public var followersUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/creator/following_url`.
                            public var followingUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/creator/gists_url`.
                            public var gistsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/creator/gravatar_id`.
                            public var gravatarId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/creator/html_url`.
                            public var htmlUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/creator/id`.
                            public var id: Swift.Int
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/creator/login`.
                            public var login: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/creator/name`.
                            public var name: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/creator/node_id`.
                            public var nodeId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/creator/organizations_url`.
                            public var organizationsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/creator/received_events_url`.
                            public var receivedEventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/creator/repos_url`.
                            public var reposUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/creator/site_admin`.
                            public var siteAdmin: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/creator/starred_url`.
                            public var starredUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/creator/subscriptions_url`.
                            public var subscriptionsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/creator/type`.
                            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case bot = "Bot"
                                case user = "User"
                                case organization = "Organization"
                                case mannequin = "Mannequin"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/creator/type`.
                            public var _type: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload._TypePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/creator/url`.
                            public var url: Swift.String?
                            /// Creates a new `CreatorPayload`.
                            ///
                            /// - Parameters:
                            ///   - avatarUrl:
                            ///   - deleted:
                            ///   - email:
                            ///   - eventsUrl:
                            ///   - followersUrl:
                            ///   - followingUrl:
                            ///   - gistsUrl:
                            ///   - gravatarId:
                            ///   - htmlUrl:
                            ///   - id:
                            ///   - login:
                            ///   - name:
                            ///   - nodeId:
                            ///   - organizationsUrl:
                            ///   - receivedEventsUrl:
                            ///   - reposUrl:
                            ///   - siteAdmin:
                            ///   - starredUrl:
                            ///   - subscriptionsUrl:
                            ///   - _type:
                            ///   - url:
                            public init(
                                avatarUrl: Swift.String? = nil,
                                deleted: Swift.Bool? = nil,
                                email: Swift.String? = nil,
                                eventsUrl: Swift.String? = nil,
                                followersUrl: Swift.String? = nil,
                                followingUrl: Swift.String? = nil,
                                gistsUrl: Swift.String? = nil,
                                gravatarId: Swift.String? = nil,
                                htmlUrl: Swift.String? = nil,
                                id: Swift.Int,
                                login: Swift.String,
                                name: Swift.String? = nil,
                                nodeId: Swift.String? = nil,
                                organizationsUrl: Swift.String? = nil,
                                receivedEventsUrl: Swift.String? = nil,
                                reposUrl: Swift.String? = nil,
                                siteAdmin: Swift.Bool? = nil,
                                starredUrl: Swift.String? = nil,
                                subscriptionsUrl: Swift.String? = nil,
                                _type: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload._TypePayload? = nil,
                                url: Swift.String? = nil
                            ) {
                                self.avatarUrl = avatarUrl
                                self.deleted = deleted
                                self.email = email
                                self.eventsUrl = eventsUrl
                                self.followersUrl = followersUrl
                                self.followingUrl = followingUrl
                                self.gistsUrl = gistsUrl
                                self.gravatarId = gravatarId
                                self.htmlUrl = htmlUrl
                                self.id = id
                                self.login = login
                                self.name = name
                                self.nodeId = nodeId
                                self.organizationsUrl = organizationsUrl
                                self.receivedEventsUrl = receivedEventsUrl
                                self.reposUrl = reposUrl
                                self.siteAdmin = siteAdmin
                                self.starredUrl = starredUrl
                                self.subscriptionsUrl = subscriptionsUrl
                                self._type = _type
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case avatarUrl = "avatar_url"
                                case deleted
                                case email
                                case eventsUrl = "events_url"
                                case followersUrl = "followers_url"
                                case followingUrl = "following_url"
                                case gistsUrl = "gists_url"
                                case gravatarId = "gravatar_id"
                                case htmlUrl = "html_url"
                                case id
                                case login
                                case name
                                case nodeId = "node_id"
                                case organizationsUrl = "organizations_url"
                                case receivedEventsUrl = "received_events_url"
                                case reposUrl = "repos_url"
                                case siteAdmin = "site_admin"
                                case starredUrl = "starred_url"
                                case subscriptionsUrl = "subscriptions_url"
                                case _type = "type"
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/creator`.
                        public var creator: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/due_on`.
                        public var dueOn: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/html_url`.
                        public var htmlUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/labels_url`.
                        public var labelsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/node_id`.
                        public var nodeId: Swift.String
                        /// The number of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/number`.
                        public var number: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/open_issues`.
                        public var openIssues: Swift.Int
                        /// The state of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/state`.
                        @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case open = "open"
                            case closed = "closed"
                        }
                        /// The state of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/state`.
                        public var state: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.MilestonePayload.StatePayload
                        /// The title of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/title`.
                        public var title: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/updated_at`.
                        public var updatedAt: Foundation.Date
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone/url`.
                        public var url: Swift.String
                        /// Creates a new `MilestonePayload`.
                        ///
                        /// - Parameters:
                        ///   - closedAt:
                        ///   - closedIssues:
                        ///   - createdAt:
                        ///   - creator:
                        ///   - description:
                        ///   - dueOn:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - labelsUrl:
                        ///   - nodeId:
                        ///   - number: The number of the milestone.
                        ///   - openIssues:
                        ///   - state: The state of the milestone.
                        ///   - title: The title of the milestone.
                        ///   - updatedAt:
                        ///   - url:
                        public init(
                            closedAt: Foundation.Date? = nil,
                            closedIssues: Swift.Int,
                            createdAt: Foundation.Date,
                            creator: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload? = nil,
                            description: Swift.String? = nil,
                            dueOn: Foundation.Date? = nil,
                            htmlUrl: Swift.String,
                            id: Swift.Int,
                            labelsUrl: Swift.String,
                            nodeId: Swift.String,
                            number: Swift.Int,
                            openIssues: Swift.Int,
                            state: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.MilestonePayload.StatePayload,
                            title: Swift.String,
                            updatedAt: Foundation.Date,
                            url: Swift.String
                        ) {
                            self.closedAt = closedAt
                            self.closedIssues = closedIssues
                            self.createdAt = createdAt
                            self.creator = creator
                            self.description = description
                            self.dueOn = dueOn
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.labelsUrl = labelsUrl
                            self.nodeId = nodeId
                            self.number = number
                            self.openIssues = openIssues
                            self.state = state
                            self.title = title
                            self.updatedAt = updatedAt
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case closedAt = "closed_at"
                            case closedIssues = "closed_issues"
                            case createdAt = "created_at"
                            case creator
                            case description
                            case dueOn = "due_on"
                            case htmlUrl = "html_url"
                            case id
                            case labelsUrl = "labels_url"
                            case nodeId = "node_id"
                            case number
                            case openIssues = "open_issues"
                            case state
                            case title
                            case updatedAt = "updated_at"
                            case url
                        }
                    }
                    /// A collection of related issues and pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/milestone`.
                    public var milestone: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.MilestonePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/number`.
                    public var number: Swift.Int
                    /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app`.
                    public struct PerformedViaGithubAppPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/created_at`.
                        public var createdAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/EventsPayload`.
                        @frozen public enum EventsPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case branchProtectionRule = "branch_protection_rule"
                            case checkRun = "check_run"
                            case checkSuite = "check_suite"
                            case codeScanningAlert = "code_scanning_alert"
                            case commitComment = "commit_comment"
                            case contentReference = "content_reference"
                            case create = "create"
                            case delete = "delete"
                            case deployment = "deployment"
                            case deploymentReview = "deployment_review"
                            case deploymentStatus = "deployment_status"
                            case deployKey = "deploy_key"
                            case discussion = "discussion"
                            case discussionComment = "discussion_comment"
                            case fork = "fork"
                            case gollum = "gollum"
                            case issues = "issues"
                            case issueComment = "issue_comment"
                            case label = "label"
                            case member = "member"
                            case membership = "membership"
                            case milestone = "milestone"
                            case organization = "organization"
                            case orgBlock = "org_block"
                            case pageBuild = "page_build"
                            case project = "project"
                            case projectCard = "project_card"
                            case projectColumn = "project_column"
                            case _public = "public"
                            case pullRequest = "pull_request"
                            case pullRequestReview = "pull_request_review"
                            case pullRequestReviewComment = "pull_request_review_comment"
                            case push = "push"
                            case registryPackage = "registry_package"
                            case release = "release"
                            case repository = "repository"
                            case repositoryDispatch = "repository_dispatch"
                            case secretScanningAlert = "secret_scanning_alert"
                            case star = "star"
                            case status = "status"
                            case team = "team"
                            case teamAdd = "team_add"
                            case watch = "watch"
                            case workflowDispatch = "workflow_dispatch"
                            case workflowRun = "workflow_run"
                            case reminder = "reminder"
                        }
                        /// The list of events for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/events`.
                        public typealias EventsPayload = [Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.EventsPayloadPayload]
                        /// The list of events for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/events`.
                        public var events: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.EventsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/external_url`.
                        public var externalUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/html_url`.
                        public var htmlUrl: Swift.String
                        /// Unique identifier of the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/id`.
                        public var id: Swift.Int?
                        /// The name of the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/node_id`.
                        public var nodeId: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/owner`.
                        public struct OwnerPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/owner/avatar_url`.
                            public var avatarUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/owner/deleted`.
                            public var deleted: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/owner/email`.
                            public var email: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/owner/events_url`.
                            public var eventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/owner/followers_url`.
                            public var followersUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/owner/following_url`.
                            public var followingUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/owner/gists_url`.
                            public var gistsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/owner/gravatar_id`.
                            public var gravatarId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/owner/html_url`.
                            public var htmlUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/owner/id`.
                            public var id: Swift.Int
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/owner/login`.
                            public var login: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/owner/name`.
                            public var name: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/owner/node_id`.
                            public var nodeId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/owner/organizations_url`.
                            public var organizationsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/owner/received_events_url`.
                            public var receivedEventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/owner/repos_url`.
                            public var reposUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/owner/site_admin`.
                            public var siteAdmin: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/owner/starred_url`.
                            public var starredUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/owner/subscriptions_url`.
                            public var subscriptionsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/owner/type`.
                            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case bot = "Bot"
                                case user = "User"
                                case organization = "Organization"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/owner/type`.
                            public var _type: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/owner/url`.
                            public var url: Swift.String?
                            /// Creates a new `OwnerPayload`.
                            ///
                            /// - Parameters:
                            ///   - avatarUrl:
                            ///   - deleted:
                            ///   - email:
                            ///   - eventsUrl:
                            ///   - followersUrl:
                            ///   - followingUrl:
                            ///   - gistsUrl:
                            ///   - gravatarId:
                            ///   - htmlUrl:
                            ///   - id:
                            ///   - login:
                            ///   - name:
                            ///   - nodeId:
                            ///   - organizationsUrl:
                            ///   - receivedEventsUrl:
                            ///   - reposUrl:
                            ///   - siteAdmin:
                            ///   - starredUrl:
                            ///   - subscriptionsUrl:
                            ///   - _type:
                            ///   - url:
                            public init(
                                avatarUrl: Swift.String? = nil,
                                deleted: Swift.Bool? = nil,
                                email: Swift.String? = nil,
                                eventsUrl: Swift.String? = nil,
                                followersUrl: Swift.String? = nil,
                                followingUrl: Swift.String? = nil,
                                gistsUrl: Swift.String? = nil,
                                gravatarId: Swift.String? = nil,
                                htmlUrl: Swift.String? = nil,
                                id: Swift.Int,
                                login: Swift.String,
                                name: Swift.String? = nil,
                                nodeId: Swift.String? = nil,
                                organizationsUrl: Swift.String? = nil,
                                receivedEventsUrl: Swift.String? = nil,
                                reposUrl: Swift.String? = nil,
                                siteAdmin: Swift.Bool? = nil,
                                starredUrl: Swift.String? = nil,
                                subscriptionsUrl: Swift.String? = nil,
                                _type: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload? = nil,
                                url: Swift.String? = nil
                            ) {
                                self.avatarUrl = avatarUrl
                                self.deleted = deleted
                                self.email = email
                                self.eventsUrl = eventsUrl
                                self.followersUrl = followersUrl
                                self.followingUrl = followingUrl
                                self.gistsUrl = gistsUrl
                                self.gravatarId = gravatarId
                                self.htmlUrl = htmlUrl
                                self.id = id
                                self.login = login
                                self.name = name
                                self.nodeId = nodeId
                                self.organizationsUrl = organizationsUrl
                                self.receivedEventsUrl = receivedEventsUrl
                                self.reposUrl = reposUrl
                                self.siteAdmin = siteAdmin
                                self.starredUrl = starredUrl
                                self.subscriptionsUrl = subscriptionsUrl
                                self._type = _type
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case avatarUrl = "avatar_url"
                                case deleted
                                case email
                                case eventsUrl = "events_url"
                                case followersUrl = "followers_url"
                                case followingUrl = "following_url"
                                case gistsUrl = "gists_url"
                                case gravatarId = "gravatar_id"
                                case htmlUrl = "html_url"
                                case id
                                case login
                                case name
                                case nodeId = "node_id"
                                case organizationsUrl = "organizations_url"
                                case receivedEventsUrl = "received_events_url"
                                case reposUrl = "repos_url"
                                case siteAdmin = "site_admin"
                                case starredUrl = "starred_url"
                                case subscriptionsUrl = "subscriptions_url"
                                case _type = "type"
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/owner`.
                        public var owner: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload?
                        /// The set of permissions for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions`.
                        public struct PermissionsPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/actions`.
                            @frozen public enum ActionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/actions`.
                            public var actions: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/administration`.
                            @frozen public enum AdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/administration`.
                            public var administration: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/checks`.
                            @frozen public enum ChecksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/checks`.
                            public var checks: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/content_references`.
                            @frozen public enum ContentReferencesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/content_references`.
                            public var contentReferences: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/contents`.
                            @frozen public enum ContentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/contents`.
                            public var contents: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/deployments`.
                            @frozen public enum DeploymentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/deployments`.
                            public var deployments: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/discussions`.
                            @frozen public enum DiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/discussions`.
                            public var discussions: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/emails`.
                            @frozen public enum EmailsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/emails`.
                            public var emails: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/environments`.
                            @frozen public enum EnvironmentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/environments`.
                            public var environments: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/issues`.
                            @frozen public enum IssuesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/issues`.
                            public var issues: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/keys`.
                            @frozen public enum KeysPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/keys`.
                            public var keys: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/members`.
                            @frozen public enum MembersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/members`.
                            public var members: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/metadata`.
                            @frozen public enum MetadataPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/metadata`.
                            public var metadata: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/organization_administration`.
                            @frozen public enum OrganizationAdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/organization_administration`.
                            public var organizationAdministration: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/organization_hooks`.
                            @frozen public enum OrganizationHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/organization_hooks`.
                            public var organizationHooks: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/organization_packages`.
                            @frozen public enum OrganizationPackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/organization_packages`.
                            public var organizationPackages: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/organization_plan`.
                            @frozen public enum OrganizationPlanPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/organization_plan`.
                            public var organizationPlan: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/organization_projects`.
                            @frozen public enum OrganizationProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                                case admin = "admin"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/organization_projects`.
                            public var organizationProjects: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/organization_secrets`.
                            @frozen public enum OrganizationSecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/organization_secrets`.
                            public var organizationSecrets: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/organization_self_hosted_runners`.
                            @frozen public enum OrganizationSelfHostedRunnersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/organization_self_hosted_runners`.
                            public var organizationSelfHostedRunners: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/organization_user_blocking`.
                            @frozen public enum OrganizationUserBlockingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/organization_user_blocking`.
                            public var organizationUserBlocking: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/packages`.
                            @frozen public enum PackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/packages`.
                            public var packages: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/pages`.
                            @frozen public enum PagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/pages`.
                            public var pages: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/pull_requests`.
                            @frozen public enum PullRequestsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/pull_requests`.
                            public var pullRequests: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/repository_hooks`.
                            @frozen public enum RepositoryHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/repository_hooks`.
                            public var repositoryHooks: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/repository_projects`.
                            @frozen public enum RepositoryProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/repository_projects`.
                            public var repositoryProjects: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/secret_scanning_alerts`.
                            @frozen public enum SecretScanningAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/secret_scanning_alerts`.
                            public var secretScanningAlerts: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/secrets`.
                            @frozen public enum SecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/secrets`.
                            public var secrets: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/security_events`.
                            @frozen public enum SecurityEventsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/security_events`.
                            public var securityEvents: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/security_scanning_alert`.
                            @frozen public enum SecurityScanningAlertPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/security_scanning_alert`.
                            public var securityScanningAlert: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/single_file`.
                            @frozen public enum SingleFilePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/single_file`.
                            public var singleFile: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/statuses`.
                            @frozen public enum StatusesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/statuses`.
                            public var statuses: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/team_discussions`.
                            @frozen public enum TeamDiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/team_discussions`.
                            public var teamDiscussions: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/vulnerability_alerts`.
                            @frozen public enum VulnerabilityAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/vulnerability_alerts`.
                            public var vulnerabilityAlerts: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/workflows`.
                            @frozen public enum WorkflowsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions/workflows`.
                            public var workflows: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload?
                            /// Creates a new `PermissionsPayload`.
                            ///
                            /// - Parameters:
                            ///   - actions:
                            ///   - administration:
                            ///   - checks:
                            ///   - contentReferences:
                            ///   - contents:
                            ///   - deployments:
                            ///   - discussions:
                            ///   - emails:
                            ///   - environments:
                            ///   - issues:
                            ///   - keys:
                            ///   - members:
                            ///   - metadata:
                            ///   - organizationAdministration:
                            ///   - organizationHooks:
                            ///   - organizationPackages:
                            ///   - organizationPlan:
                            ///   - organizationProjects:
                            ///   - organizationSecrets:
                            ///   - organizationSelfHostedRunners:
                            ///   - organizationUserBlocking:
                            ///   - packages:
                            ///   - pages:
                            ///   - pullRequests:
                            ///   - repositoryHooks:
                            ///   - repositoryProjects:
                            ///   - secretScanningAlerts:
                            ///   - secrets:
                            ///   - securityEvents:
                            ///   - securityScanningAlert:
                            ///   - singleFile:
                            ///   - statuses:
                            ///   - teamDiscussions:
                            ///   - vulnerabilityAlerts:
                            ///   - workflows:
                            public init(
                                actions: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload? = nil,
                                administration: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload? = nil,
                                checks: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload? = nil,
                                contentReferences: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload? = nil,
                                contents: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload? = nil,
                                deployments: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload? = nil,
                                discussions: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload? = nil,
                                emails: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload? = nil,
                                environments: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload? = nil,
                                issues: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload? = nil,
                                keys: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload? = nil,
                                members: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload? = nil,
                                metadata: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload? = nil,
                                organizationAdministration: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload? = nil,
                                organizationHooks: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload? = nil,
                                organizationPackages: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload? = nil,
                                organizationPlan: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload? = nil,
                                organizationProjects: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload? = nil,
                                organizationSecrets: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload? = nil,
                                organizationSelfHostedRunners: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload? = nil,
                                organizationUserBlocking: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload? = nil,
                                packages: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload? = nil,
                                pages: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload? = nil,
                                pullRequests: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload? = nil,
                                repositoryHooks: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload? = nil,
                                repositoryProjects: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload? = nil,
                                secretScanningAlerts: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload? = nil,
                                secrets: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload? = nil,
                                securityEvents: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload? = nil,
                                securityScanningAlert: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload? = nil,
                                singleFile: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload? = nil,
                                statuses: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload? = nil,
                                teamDiscussions: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload? = nil,
                                vulnerabilityAlerts: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload? = nil,
                                workflows: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload? = nil
                            ) {
                                self.actions = actions
                                self.administration = administration
                                self.checks = checks
                                self.contentReferences = contentReferences
                                self.contents = contents
                                self.deployments = deployments
                                self.discussions = discussions
                                self.emails = emails
                                self.environments = environments
                                self.issues = issues
                                self.keys = keys
                                self.members = members
                                self.metadata = metadata
                                self.organizationAdministration = organizationAdministration
                                self.organizationHooks = organizationHooks
                                self.organizationPackages = organizationPackages
                                self.organizationPlan = organizationPlan
                                self.organizationProjects = organizationProjects
                                self.organizationSecrets = organizationSecrets
                                self.organizationSelfHostedRunners = organizationSelfHostedRunners
                                self.organizationUserBlocking = organizationUserBlocking
                                self.packages = packages
                                self.pages = pages
                                self.pullRequests = pullRequests
                                self.repositoryHooks = repositoryHooks
                                self.repositoryProjects = repositoryProjects
                                self.secretScanningAlerts = secretScanningAlerts
                                self.secrets = secrets
                                self.securityEvents = securityEvents
                                self.securityScanningAlert = securityScanningAlert
                                self.singleFile = singleFile
                                self.statuses = statuses
                                self.teamDiscussions = teamDiscussions
                                self.vulnerabilityAlerts = vulnerabilityAlerts
                                self.workflows = workflows
                            }
                            public enum CodingKeys: String, CodingKey {
                                case actions
                                case administration
                                case checks
                                case contentReferences = "content_references"
                                case contents
                                case deployments
                                case discussions
                                case emails
                                case environments
                                case issues
                                case keys
                                case members
                                case metadata
                                case organizationAdministration = "organization_administration"
                                case organizationHooks = "organization_hooks"
                                case organizationPackages = "organization_packages"
                                case organizationPlan = "organization_plan"
                                case organizationProjects = "organization_projects"
                                case organizationSecrets = "organization_secrets"
                                case organizationSelfHostedRunners = "organization_self_hosted_runners"
                                case organizationUserBlocking = "organization_user_blocking"
                                case packages
                                case pages
                                case pullRequests = "pull_requests"
                                case repositoryHooks = "repository_hooks"
                                case repositoryProjects = "repository_projects"
                                case secretScanningAlerts = "secret_scanning_alerts"
                                case secrets
                                case securityEvents = "security_events"
                                case securityScanningAlert = "security_scanning_alert"
                                case singleFile = "single_file"
                                case statuses
                                case teamDiscussions = "team_discussions"
                                case vulnerabilityAlerts = "vulnerability_alerts"
                                case workflows
                            }
                        }
                        /// The set of permissions for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/permissions`.
                        public var permissions: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload?
                        /// The slug name of the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/slug`.
                        public var slug: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app/updated_at`.
                        public var updatedAt: Foundation.Date?
                        /// Creates a new `PerformedViaGithubAppPayload`.
                        ///
                        /// - Parameters:
                        ///   - createdAt:
                        ///   - description:
                        ///   - events: The list of events for the GitHub app
                        ///   - externalUrl:
                        ///   - htmlUrl:
                        ///   - id: Unique identifier of the GitHub app
                        ///   - name: The name of the GitHub app
                        ///   - nodeId:
                        ///   - owner:
                        ///   - permissions: The set of permissions for the GitHub app
                        ///   - slug: The slug name of the GitHub app
                        ///   - updatedAt:
                        public init(
                            createdAt: Foundation.Date? = nil,
                            description: Swift.String? = nil,
                            events: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.EventsPayload? = nil,
                            externalUrl: Swift.String? = nil,
                            htmlUrl: Swift.String,
                            id: Swift.Int? = nil,
                            name: Swift.String,
                            nodeId: Swift.String,
                            owner: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload? = nil,
                            permissions: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload? = nil,
                            slug: Swift.String? = nil,
                            updatedAt: Foundation.Date? = nil
                        ) {
                            self.createdAt = createdAt
                            self.description = description
                            self.events = events
                            self.externalUrl = externalUrl
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.name = name
                            self.nodeId = nodeId
                            self.owner = owner
                            self.permissions = permissions
                            self.slug = slug
                            self.updatedAt = updatedAt
                        }
                        public enum CodingKeys: String, CodingKey {
                            case createdAt = "created_at"
                            case description
                            case events
                            case externalUrl = "external_url"
                            case htmlUrl = "html_url"
                            case id
                            case name
                            case nodeId = "node_id"
                            case owner
                            case permissions
                            case slug
                            case updatedAt = "updated_at"
                        }
                    }
                    /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/performed_via_github_app`.
                    public var performedViaGithubApp: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/pull_request`.
                    public struct PullRequestPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/pull_request/diff_url`.
                        public var diffUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/pull_request/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/pull_request/merged_at`.
                        public var mergedAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/pull_request/patch_url`.
                        public var patchUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/pull_request/url`.
                        public var url: Swift.String?
                        /// Creates a new `PullRequestPayload`.
                        ///
                        /// - Parameters:
                        ///   - diffUrl:
                        ///   - htmlUrl:
                        ///   - mergedAt:
                        ///   - patchUrl:
                        ///   - url:
                        public init(
                            diffUrl: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            mergedAt: Foundation.Date? = nil,
                            patchUrl: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.diffUrl = diffUrl
                            self.htmlUrl = htmlUrl
                            self.mergedAt = mergedAt
                            self.patchUrl = patchUrl
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case diffUrl = "diff_url"
                            case htmlUrl = "html_url"
                            case mergedAt = "merged_at"
                            case patchUrl = "patch_url"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/pull_request`.
                    public var pullRequest: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PullRequestPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/reactions`.
                    public struct ReactionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/reactions/+1`.
                        public var _plus_1: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/reactions/-1`.
                        public var _hyphen_1: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/reactions/confused`.
                        public var confused: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/reactions/eyes`.
                        public var eyes: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/reactions/heart`.
                        public var heart: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/reactions/hooray`.
                        public var hooray: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/reactions/laugh`.
                        public var laugh: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/reactions/rocket`.
                        public var rocket: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/reactions/total_count`.
                        public var totalCount: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/reactions/url`.
                        public var url: Swift.String
                        /// Creates a new `ReactionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - _plus_1:
                        ///   - _hyphen_1:
                        ///   - confused:
                        ///   - eyes:
                        ///   - heart:
                        ///   - hooray:
                        ///   - laugh:
                        ///   - rocket:
                        ///   - totalCount:
                        ///   - url:
                        public init(
                            _plus_1: Swift.Int,
                            _hyphen_1: Swift.Int,
                            confused: Swift.Int,
                            eyes: Swift.Int,
                            heart: Swift.Int,
                            hooray: Swift.Int,
                            laugh: Swift.Int,
                            rocket: Swift.Int,
                            totalCount: Swift.Int,
                            url: Swift.String
                        ) {
                            self._plus_1 = _plus_1
                            self._hyphen_1 = _hyphen_1
                            self.confused = confused
                            self.eyes = eyes
                            self.heart = heart
                            self.hooray = hooray
                            self.laugh = laugh
                            self.rocket = rocket
                            self.totalCount = totalCount
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _plus_1 = "+1"
                            case _hyphen_1 = "-1"
                            case confused
                            case eyes
                            case heart
                            case hooray
                            case laugh
                            case rocket
                            case totalCount = "total_count"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/reactions`.
                    public var reactions: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.ReactionsPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/repository_url`.
                    public var repositoryUrl: Swift.String
                    /// State of the issue; either 'open' or 'closed'
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/state`.
                    @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case closed = "closed"
                    }
                    /// State of the issue; either 'open' or 'closed'
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/state`.
                    public var state: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.StatePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/state_reason`.
                    public var stateReason: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/timeline_url`.
                    public var timelineUrl: Swift.String?
                    /// Title of the issue
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/title`.
                    public var title: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/updated_at`.
                    public var updatedAt: Foundation.Date
                    /// URL for the issue
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/url`.
                    public var url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/user`.
                    public struct UserPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/user/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/user/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/user/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/user/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/user/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/user/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/user/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/user/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/user/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/user/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/user/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/user/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/user/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/user/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/user/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/user/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/user/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/user/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/user/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/user/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/user/type`.
                        public var _type: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.UserPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/user/url`.
                        public var url: Swift.String?
                        /// Creates a new `UserPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.UserPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1/user`.
                    public var user: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.UserPayload?
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - activeLockReason:
                    ///   - assignee:
                    ///   - assignees:
                    ///   - authorAssociation: How the author is associated with the repository.
                    ///   - body: Contents of the issue
                    ///   - closedAt:
                    ///   - comments:
                    ///   - commentsUrl:
                    ///   - createdAt:
                    ///   - draft:
                    ///   - eventsUrl:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - labels:
                    ///   - labelsUrl:
                    ///   - locked:
                    ///   - milestone: A collection of related issues and pull requests.
                    ///   - nodeId:
                    ///   - number:
                    ///   - performedViaGithubApp: GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                    ///   - pullRequest:
                    ///   - reactions:
                    ///   - repositoryUrl:
                    ///   - state: State of the issue; either 'open' or 'closed'
                    ///   - stateReason:
                    ///   - timelineUrl:
                    ///   - title: Title of the issue
                    ///   - updatedAt:
                    ///   - url: URL for the issue
                    ///   - user:
                    public init(
                        activeLockReason: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.ActiveLockReasonPayload? = nil,
                        assignee: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.AssigneePayload? = nil,
                        assignees: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.AssigneesPayload,
                        authorAssociation: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.AuthorAssociationPayload,
                        body: Swift.String? = nil,
                        closedAt: Foundation.Date? = nil,
                        comments: Swift.Int,
                        commentsUrl: Swift.String,
                        createdAt: Foundation.Date,
                        draft: Swift.Bool? = nil,
                        eventsUrl: Swift.String,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        labels: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.LabelsPayload? = nil,
                        labelsUrl: Swift.String,
                        locked: Swift.Bool? = nil,
                        milestone: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.MilestonePayload? = nil,
                        nodeId: Swift.String,
                        number: Swift.Int,
                        performedViaGithubApp: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PerformedViaGithubAppPayload? = nil,
                        pullRequest: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.PullRequestPayload? = nil,
                        reactions: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.ReactionsPayload,
                        repositoryUrl: Swift.String,
                        state: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.StatePayload? = nil,
                        stateReason: Swift.String? = nil,
                        timelineUrl: Swift.String? = nil,
                        title: Swift.String,
                        updatedAt: Foundation.Date,
                        url: Swift.String,
                        user: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload.UserPayload? = nil
                    ) {
                        self.activeLockReason = activeLockReason
                        self.assignee = assignee
                        self.assignees = assignees
                        self.authorAssociation = authorAssociation
                        self.body = body
                        self.closedAt = closedAt
                        self.comments = comments
                        self.commentsUrl = commentsUrl
                        self.createdAt = createdAt
                        self.draft = draft
                        self.eventsUrl = eventsUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.labels = labels
                        self.labelsUrl = labelsUrl
                        self.locked = locked
                        self.milestone = milestone
                        self.nodeId = nodeId
                        self.number = number
                        self.performedViaGithubApp = performedViaGithubApp
                        self.pullRequest = pullRequest
                        self.reactions = reactions
                        self.repositoryUrl = repositoryUrl
                        self.state = state
                        self.stateReason = stateReason
                        self.timelineUrl = timelineUrl
                        self.title = title
                        self.updatedAt = updatedAt
                        self.url = url
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case activeLockReason = "active_lock_reason"
                        case assignee
                        case assignees
                        case authorAssociation = "author_association"
                        case body
                        case closedAt = "closed_at"
                        case comments
                        case commentsUrl = "comments_url"
                        case createdAt = "created_at"
                        case draft
                        case eventsUrl = "events_url"
                        case htmlUrl = "html_url"
                        case id
                        case labels
                        case labelsUrl = "labels_url"
                        case locked
                        case milestone
                        case nodeId = "node_id"
                        case number
                        case performedViaGithubApp = "performed_via_github_app"
                        case pullRequest = "pull_request"
                        case reactions
                        case repositoryUrl = "repository_url"
                        case state
                        case stateReason = "state_reason"
                        case timelineUrl = "timeline_url"
                        case title
                        case updatedAt = "updated_at"
                        case url
                        case user
                    }
                }
                /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value1`.
                public var value1: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/active_lock_reason`.
                    public var activeLockReason: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/assignee`.
                    public var assignee: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/assignees`.
                    public var assignees: [OpenAPIRuntime.OpenAPIObjectContainer?]?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/author_association`.
                    public var authorAssociation: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/body`.
                    public var body: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/closed_at`.
                    public var closedAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/comments`.
                    public var comments: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/comments_url`.
                    public var commentsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/created_at`.
                    public var createdAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/id`.
                    public var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/labels`.
                    public var labels: [OpenAPIRuntime.OpenAPIObjectContainer?]?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/labels_url`.
                    public var labelsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/locked`.
                    public var locked: Swift.Bool?
                    /// A collection of related issues and pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone`.
                    public struct MilestonePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/closed_at`.
                        public var closedAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/closed_issues`.
                        public var closedIssues: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/created_at`.
                        public var createdAt: Foundation.Date
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/creator`.
                        public struct CreatorPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/creator/avatar_url`.
                            public var avatarUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/creator/deleted`.
                            public var deleted: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/creator/email`.
                            public var email: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/creator/events_url`.
                            public var eventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/creator/followers_url`.
                            public var followersUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/creator/following_url`.
                            public var followingUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/creator/gists_url`.
                            public var gistsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/creator/gravatar_id`.
                            public var gravatarId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/creator/html_url`.
                            public var htmlUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/creator/id`.
                            public var id: Swift.Int
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/creator/login`.
                            public var login: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/creator/name`.
                            public var name: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/creator/node_id`.
                            public var nodeId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/creator/organizations_url`.
                            public var organizationsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/creator/received_events_url`.
                            public var receivedEventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/creator/repos_url`.
                            public var reposUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/creator/site_admin`.
                            public var siteAdmin: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/creator/starred_url`.
                            public var starredUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/creator/subscriptions_url`.
                            public var subscriptionsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/creator/type`.
                            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case bot = "Bot"
                                case user = "User"
                                case organization = "Organization"
                                case mannequin = "Mannequin"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/creator/type`.
                            public var _type: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value2Payload.MilestonePayload.CreatorPayload._TypePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/creator/url`.
                            public var url: Swift.String?
                            /// Creates a new `CreatorPayload`.
                            ///
                            /// - Parameters:
                            ///   - avatarUrl:
                            ///   - deleted:
                            ///   - email:
                            ///   - eventsUrl:
                            ///   - followersUrl:
                            ///   - followingUrl:
                            ///   - gistsUrl:
                            ///   - gravatarId:
                            ///   - htmlUrl:
                            ///   - id:
                            ///   - login:
                            ///   - name:
                            ///   - nodeId:
                            ///   - organizationsUrl:
                            ///   - receivedEventsUrl:
                            ///   - reposUrl:
                            ///   - siteAdmin:
                            ///   - starredUrl:
                            ///   - subscriptionsUrl:
                            ///   - _type:
                            ///   - url:
                            public init(
                                avatarUrl: Swift.String? = nil,
                                deleted: Swift.Bool? = nil,
                                email: Swift.String? = nil,
                                eventsUrl: Swift.String? = nil,
                                followersUrl: Swift.String? = nil,
                                followingUrl: Swift.String? = nil,
                                gistsUrl: Swift.String? = nil,
                                gravatarId: Swift.String? = nil,
                                htmlUrl: Swift.String? = nil,
                                id: Swift.Int,
                                login: Swift.String,
                                name: Swift.String? = nil,
                                nodeId: Swift.String? = nil,
                                organizationsUrl: Swift.String? = nil,
                                receivedEventsUrl: Swift.String? = nil,
                                reposUrl: Swift.String? = nil,
                                siteAdmin: Swift.Bool? = nil,
                                starredUrl: Swift.String? = nil,
                                subscriptionsUrl: Swift.String? = nil,
                                _type: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value2Payload.MilestonePayload.CreatorPayload._TypePayload? = nil,
                                url: Swift.String? = nil
                            ) {
                                self.avatarUrl = avatarUrl
                                self.deleted = deleted
                                self.email = email
                                self.eventsUrl = eventsUrl
                                self.followersUrl = followersUrl
                                self.followingUrl = followingUrl
                                self.gistsUrl = gistsUrl
                                self.gravatarId = gravatarId
                                self.htmlUrl = htmlUrl
                                self.id = id
                                self.login = login
                                self.name = name
                                self.nodeId = nodeId
                                self.organizationsUrl = organizationsUrl
                                self.receivedEventsUrl = receivedEventsUrl
                                self.reposUrl = reposUrl
                                self.siteAdmin = siteAdmin
                                self.starredUrl = starredUrl
                                self.subscriptionsUrl = subscriptionsUrl
                                self._type = _type
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case avatarUrl = "avatar_url"
                                case deleted
                                case email
                                case eventsUrl = "events_url"
                                case followersUrl = "followers_url"
                                case followingUrl = "following_url"
                                case gistsUrl = "gists_url"
                                case gravatarId = "gravatar_id"
                                case htmlUrl = "html_url"
                                case id
                                case login
                                case name
                                case nodeId = "node_id"
                                case organizationsUrl = "organizations_url"
                                case receivedEventsUrl = "received_events_url"
                                case reposUrl = "repos_url"
                                case siteAdmin = "site_admin"
                                case starredUrl = "starred_url"
                                case subscriptionsUrl = "subscriptions_url"
                                case _type = "type"
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/creator`.
                        public var creator: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value2Payload.MilestonePayload.CreatorPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/due_on`.
                        public var dueOn: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/html_url`.
                        public var htmlUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/labels_url`.
                        public var labelsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/node_id`.
                        public var nodeId: Swift.String
                        /// The number of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/number`.
                        public var number: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/open_issues`.
                        public var openIssues: Swift.Int
                        /// The state of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/state`.
                        @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case open = "open"
                            case closed = "closed"
                        }
                        /// The state of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/state`.
                        public var state: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value2Payload.MilestonePayload.StatePayload
                        /// The title of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/title`.
                        public var title: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/updated_at`.
                        public var updatedAt: Foundation.Date
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone/url`.
                        public var url: Swift.String
                        /// Creates a new `MilestonePayload`.
                        ///
                        /// - Parameters:
                        ///   - closedAt:
                        ///   - closedIssues:
                        ///   - createdAt:
                        ///   - creator:
                        ///   - description:
                        ///   - dueOn:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - labelsUrl:
                        ///   - nodeId:
                        ///   - number: The number of the milestone.
                        ///   - openIssues:
                        ///   - state: The state of the milestone.
                        ///   - title: The title of the milestone.
                        ///   - updatedAt:
                        ///   - url:
                        public init(
                            closedAt: Foundation.Date? = nil,
                            closedIssues: Swift.Int,
                            createdAt: Foundation.Date,
                            creator: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value2Payload.MilestonePayload.CreatorPayload? = nil,
                            description: Swift.String? = nil,
                            dueOn: Foundation.Date? = nil,
                            htmlUrl: Swift.String,
                            id: Swift.Int,
                            labelsUrl: Swift.String,
                            nodeId: Swift.String,
                            number: Swift.Int,
                            openIssues: Swift.Int,
                            state: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value2Payload.MilestonePayload.StatePayload,
                            title: Swift.String,
                            updatedAt: Foundation.Date,
                            url: Swift.String
                        ) {
                            self.closedAt = closedAt
                            self.closedIssues = closedIssues
                            self.createdAt = createdAt
                            self.creator = creator
                            self.description = description
                            self.dueOn = dueOn
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.labelsUrl = labelsUrl
                            self.nodeId = nodeId
                            self.number = number
                            self.openIssues = openIssues
                            self.state = state
                            self.title = title
                            self.updatedAt = updatedAt
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case closedAt = "closed_at"
                            case closedIssues = "closed_issues"
                            case createdAt = "created_at"
                            case creator
                            case description
                            case dueOn = "due_on"
                            case htmlUrl = "html_url"
                            case id
                            case labelsUrl = "labels_url"
                            case nodeId = "node_id"
                            case number
                            case openIssues = "open_issues"
                            case state
                            case title
                            case updatedAt = "updated_at"
                            case url
                        }
                    }
                    /// A collection of related issues and pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/milestone`.
                    public var milestone: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value2Payload.MilestonePayload
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/number`.
                    public var number: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/performed_via_github_app`.
                    public var performedViaGithubApp: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/reactions`.
                    public struct ReactionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/reactions/+1`.
                        public var _plus_1: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/reactions/-1`.
                        public var _hyphen_1: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/reactions/confused`.
                        public var confused: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/reactions/eyes`.
                        public var eyes: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/reactions/heart`.
                        public var heart: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/reactions/hooray`.
                        public var hooray: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/reactions/laugh`.
                        public var laugh: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/reactions/rocket`.
                        public var rocket: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/reactions/total_count`.
                        public var totalCount: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/reactions/url`.
                        public var url: Swift.String?
                        /// Creates a new `ReactionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - _plus_1:
                        ///   - _hyphen_1:
                        ///   - confused:
                        ///   - eyes:
                        ///   - heart:
                        ///   - hooray:
                        ///   - laugh:
                        ///   - rocket:
                        ///   - totalCount:
                        ///   - url:
                        public init(
                            _plus_1: Swift.Int? = nil,
                            _hyphen_1: Swift.Int? = nil,
                            confused: Swift.Int? = nil,
                            eyes: Swift.Int? = nil,
                            heart: Swift.Int? = nil,
                            hooray: Swift.Int? = nil,
                            laugh: Swift.Int? = nil,
                            rocket: Swift.Int? = nil,
                            totalCount: Swift.Int? = nil,
                            url: Swift.String? = nil
                        ) {
                            self._plus_1 = _plus_1
                            self._hyphen_1 = _hyphen_1
                            self.confused = confused
                            self.eyes = eyes
                            self.heart = heart
                            self.hooray = hooray
                            self.laugh = laugh
                            self.rocket = rocket
                            self.totalCount = totalCount
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _plus_1 = "+1"
                            case _hyphen_1 = "-1"
                            case confused
                            case eyes
                            case heart
                            case hooray
                            case laugh
                            case rocket
                            case totalCount = "total_count"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/reactions`.
                    public var reactions: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value2Payload.ReactionsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/repository_url`.
                    public var repositoryUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/state`.
                    public var state: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/timeline_url`.
                    public var timelineUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/title`.
                    public var title: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/updated_at`.
                    public var updatedAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/url`.
                    public var url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/user`.
                    public struct UserPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/user/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/user/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/user/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/user/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/user/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/user/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/user/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/user/id`.
                        public var id: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/user/login`.
                        public var login: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/user/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/user/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/user/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/user/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/user/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/user/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/user/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/user/type`.
                        public var _type: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/user/url`.
                        public var url: Swift.String?
                        /// Creates a new `UserPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int? = nil,
                            login: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2/user`.
                    public var user: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value2Payload.UserPayload?
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - activeLockReason:
                    ///   - assignee:
                    ///   - assignees:
                    ///   - authorAssociation:
                    ///   - body:
                    ///   - closedAt:
                    ///   - comments:
                    ///   - commentsUrl:
                    ///   - createdAt:
                    ///   - eventsUrl:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - labels:
                    ///   - labelsUrl:
                    ///   - locked:
                    ///   - milestone: A collection of related issues and pull requests.
                    ///   - nodeId:
                    ///   - number:
                    ///   - performedViaGithubApp:
                    ///   - reactions:
                    ///   - repositoryUrl:
                    ///   - state:
                    ///   - timelineUrl:
                    ///   - title:
                    ///   - updatedAt:
                    ///   - url:
                    ///   - user:
                    public init(
                        activeLockReason: Swift.String? = nil,
                        assignee: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                        assignees: [OpenAPIRuntime.OpenAPIObjectContainer?]? = nil,
                        authorAssociation: Swift.String? = nil,
                        body: Swift.String? = nil,
                        closedAt: Swift.String? = nil,
                        comments: Swift.Int? = nil,
                        commentsUrl: Swift.String? = nil,
                        createdAt: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int? = nil,
                        labels: [OpenAPIRuntime.OpenAPIObjectContainer?]? = nil,
                        labelsUrl: Swift.String? = nil,
                        locked: Swift.Bool? = nil,
                        milestone: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value2Payload.MilestonePayload,
                        nodeId: Swift.String? = nil,
                        number: Swift.Int? = nil,
                        performedViaGithubApp: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                        reactions: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value2Payload.ReactionsPayload? = nil,
                        repositoryUrl: Swift.String? = nil,
                        state: Swift.String? = nil,
                        timelineUrl: Swift.String? = nil,
                        title: Swift.String? = nil,
                        updatedAt: Swift.String? = nil,
                        url: Swift.String? = nil,
                        user: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value2Payload.UserPayload? = nil
                    ) {
                        self.activeLockReason = activeLockReason
                        self.assignee = assignee
                        self.assignees = assignees
                        self.authorAssociation = authorAssociation
                        self.body = body
                        self.closedAt = closedAt
                        self.comments = comments
                        self.commentsUrl = commentsUrl
                        self.createdAt = createdAt
                        self.eventsUrl = eventsUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.labels = labels
                        self.labelsUrl = labelsUrl
                        self.locked = locked
                        self.milestone = milestone
                        self.nodeId = nodeId
                        self.number = number
                        self.performedViaGithubApp = performedViaGithubApp
                        self.reactions = reactions
                        self.repositoryUrl = repositoryUrl
                        self.state = state
                        self.timelineUrl = timelineUrl
                        self.title = title
                        self.updatedAt = updatedAt
                        self.url = url
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case activeLockReason = "active_lock_reason"
                        case assignee
                        case assignees
                        case authorAssociation = "author_association"
                        case body
                        case closedAt = "closed_at"
                        case comments
                        case commentsUrl = "comments_url"
                        case createdAt = "created_at"
                        case eventsUrl = "events_url"
                        case htmlUrl = "html_url"
                        case id
                        case labels
                        case labelsUrl = "labels_url"
                        case locked
                        case milestone
                        case nodeId = "node_id"
                        case number
                        case performedViaGithubApp = "performed_via_github_app"
                        case reactions
                        case repositoryUrl = "repository_url"
                        case state
                        case timelineUrl = "timeline_url"
                        case title
                        case updatedAt = "updated_at"
                        case url
                        case user
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue/value2`.
                public var value2: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value2Payload
                /// Creates a new `IssuePayload`.
                ///
                /// - Parameters:
                ///   - value1: The [issue](https://docs.github.com/en/rest/reference/issues) itself.
                ///   - value2:
                public init(
                    value1: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value1Payload,
                    value2: Components.Schemas.WebhookIssuesMilestoned.IssuePayload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/issue`.
            public var issue: Components.Schemas.WebhookIssuesMilestoned.IssuePayload
            /// A collection of related issues and pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone`.
            public struct MilestonePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/closed_at`.
                public var closedAt: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/closed_issues`.
                public var closedIssues: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/created_at`.
                public var createdAt: Foundation.Date
                /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/creator`.
                public struct CreatorPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/creator/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/creator/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/creator/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/creator/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/creator/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/creator/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/creator/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/creator/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/creator/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/creator/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/creator/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/creator/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/creator/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/creator/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/creator/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/creator/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/creator/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/creator/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/creator/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/creator/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                        case mannequin = "Mannequin"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/creator/type`.
                    public var _type: Components.Schemas.WebhookIssuesMilestoned.MilestonePayload.CreatorPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/creator/url`.
                    public var url: Swift.String?
                    /// Creates a new `CreatorPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookIssuesMilestoned.MilestonePayload.CreatorPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/creator`.
                public var creator: Components.Schemas.WebhookIssuesMilestoned.MilestonePayload.CreatorPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/description`.
                public var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/due_on`.
                public var dueOn: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/html_url`.
                public var htmlUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/labels_url`.
                public var labelsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/node_id`.
                public var nodeId: Swift.String
                /// The number of the milestone.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/number`.
                public var number: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/open_issues`.
                public var openIssues: Swift.Int
                /// The state of the milestone.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/state`.
                @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case open = "open"
                    case closed = "closed"
                }
                /// The state of the milestone.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/state`.
                public var state: Components.Schemas.WebhookIssuesMilestoned.MilestonePayload.StatePayload
                /// The title of the milestone.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/title`.
                public var title: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/updated_at`.
                public var updatedAt: Foundation.Date
                /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone/url`.
                public var url: Swift.String
                /// Creates a new `MilestonePayload`.
                ///
                /// - Parameters:
                ///   - closedAt:
                ///   - closedIssues:
                ///   - createdAt:
                ///   - creator:
                ///   - description:
                ///   - dueOn:
                ///   - htmlUrl:
                ///   - id:
                ///   - labelsUrl:
                ///   - nodeId:
                ///   - number: The number of the milestone.
                ///   - openIssues:
                ///   - state: The state of the milestone.
                ///   - title: The title of the milestone.
                ///   - updatedAt:
                ///   - url:
                public init(
                    closedAt: Foundation.Date? = nil,
                    closedIssues: Swift.Int,
                    createdAt: Foundation.Date,
                    creator: Components.Schemas.WebhookIssuesMilestoned.MilestonePayload.CreatorPayload? = nil,
                    description: Swift.String? = nil,
                    dueOn: Foundation.Date? = nil,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    labelsUrl: Swift.String,
                    nodeId: Swift.String,
                    number: Swift.Int,
                    openIssues: Swift.Int,
                    state: Components.Schemas.WebhookIssuesMilestoned.MilestonePayload.StatePayload,
                    title: Swift.String,
                    updatedAt: Foundation.Date,
                    url: Swift.String
                ) {
                    self.closedAt = closedAt
                    self.closedIssues = closedIssues
                    self.createdAt = createdAt
                    self.creator = creator
                    self.description = description
                    self.dueOn = dueOn
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.labelsUrl = labelsUrl
                    self.nodeId = nodeId
                    self.number = number
                    self.openIssues = openIssues
                    self.state = state
                    self.title = title
                    self.updatedAt = updatedAt
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case closedAt = "closed_at"
                    case closedIssues = "closed_issues"
                    case createdAt = "created_at"
                    case creator
                    case description
                    case dueOn = "due_on"
                    case htmlUrl = "html_url"
                    case id
                    case labelsUrl = "labels_url"
                    case nodeId = "node_id"
                    case number
                    case openIssues = "open_issues"
                    case state
                    case title
                    case updatedAt = "updated_at"
                    case url
                }
            }
            /// A collection of related issues and pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/milestone`.
            public var milestone: Components.Schemas.WebhookIssuesMilestoned.MilestonePayload
            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-issues-milestoned/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Creates a new `WebhookIssuesMilestoned`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - enterprise:
            ///   - installation:
            ///   - issue:
            ///   - milestone: A collection of related issues and pull requests.
            ///   - organization:
            ///   - repository:
            ///   - sender:
            public init(
                action: Components.Schemas.WebhookIssuesMilestoned.ActionPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                issue: Components.Schemas.WebhookIssuesMilestoned.IssuePayload,
                milestone: Components.Schemas.WebhookIssuesMilestoned.MilestonePayload,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser
            ) {
                self.action = action
                self.enterprise = enterprise
                self.installation = installation
                self.issue = issue
                self.milestone = milestone
                self.organization = organization
                self.repository = repository
                self.sender = sender
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case enterprise
                case installation
                case issue
                case milestone
                case organization
                case repository
                case sender
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened`.
        public struct WebhookIssuesOpened: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case opened = "opened"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/action`.
            public var action: Components.Schemas.WebhookIssuesOpened.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes`.
            public struct ChangesPayload: Codable, Hashable, Sendable {
                /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue`.
                public struct OldIssuePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/active_lock_reason`.
                    @frozen public enum ActiveLockReasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case resolved = "resolved"
                        case offTopic = "off-topic"
                        case tooHeated = "too heated"
                        case spam = "spam"
                        case _empty_ = ""
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/active_lock_reason`.
                    public var activeLockReason: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.ActiveLockReasonPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/assignee`.
                    public struct AssigneePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/assignee/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/assignee/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/assignee/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/assignee/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/assignee/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/assignee/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/assignee/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/assignee/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/assignee/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/assignee/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/assignee/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/assignee/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/assignee/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/assignee/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/assignee/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/assignee/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/assignee/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/assignee/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/assignee/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/assignee/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/assignee/type`.
                        public var _type: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.AssigneePayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/assignee/url`.
                        public var url: Swift.String?
                        /// Creates a new `AssigneePayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.AssigneePayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/assignee`.
                    public var assignee: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.AssigneePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/AssigneesPayload`.
                    public struct AssigneesPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/AssigneesPayload/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/AssigneesPayload/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/AssigneesPayload/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/AssigneesPayload/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/AssigneesPayload/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/AssigneesPayload/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/AssigneesPayload/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/AssigneesPayload/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/AssigneesPayload/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/AssigneesPayload/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/AssigneesPayload/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/AssigneesPayload/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/AssigneesPayload/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/AssigneesPayload/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/AssigneesPayload/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/AssigneesPayload/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/AssigneesPayload/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/AssigneesPayload/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/AssigneesPayload/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/AssigneesPayload/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/AssigneesPayload/type`.
                        public var _type: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.AssigneesPayloadPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/AssigneesPayload/url`.
                        public var url: Swift.String?
                        /// Creates a new `AssigneesPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.AssigneesPayloadPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/assignees`.
                    public typealias AssigneesPayload = [Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.AssigneesPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/assignees`.
                    public var assignees: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.AssigneesPayload
                    /// How the author is associated with the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/author_association`.
                    @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case collaborator = "COLLABORATOR"
                        case contributor = "CONTRIBUTOR"
                        case firstTimer = "FIRST_TIMER"
                        case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                        case mannequin = "MANNEQUIN"
                        case member = "MEMBER"
                        case none = "NONE"
                        case owner = "OWNER"
                    }
                    /// How the author is associated with the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/author_association`.
                    public var authorAssociation: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.AuthorAssociationPayload
                    /// Contents of the issue
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/body`.
                    public var body: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/closed_at`.
                    public var closedAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/comments`.
                    public var comments: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/comments_url`.
                    public var commentsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/created_at`.
                    public var createdAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/draft`.
                    public var draft: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/events_url`.
                    public var eventsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/html_url`.
                    public var htmlUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/LabelsPayload`.
                    public struct LabelsPayloadPayload: Codable, Hashable, Sendable {
                        /// 6-character hex code, without the leading #, identifying the color
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/LabelsPayload/color`.
                        public var color: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/LabelsPayload/default`.
                        public var _default: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/LabelsPayload/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/LabelsPayload/id`.
                        public var id: Swift.Int
                        /// The name of the label.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/LabelsPayload/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/LabelsPayload/node_id`.
                        public var nodeId: Swift.String
                        /// URL for the label
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/LabelsPayload/url`.
                        public var url: Swift.String
                        /// Creates a new `LabelsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - color: 6-character hex code, without the leading #, identifying the color
                        ///   - _default:
                        ///   - description:
                        ///   - id:
                        ///   - name: The name of the label.
                        ///   - nodeId:
                        ///   - url: URL for the label
                        public init(
                            color: Swift.String,
                            _default: Swift.Bool,
                            description: Swift.String? = nil,
                            id: Swift.Int,
                            name: Swift.String,
                            nodeId: Swift.String,
                            url: Swift.String
                        ) {
                            self.color = color
                            self._default = _default
                            self.description = description
                            self.id = id
                            self.name = name
                            self.nodeId = nodeId
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case color
                            case _default = "default"
                            case description
                            case id
                            case name
                            case nodeId = "node_id"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/labels`.
                    public typealias LabelsPayload = [Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.LabelsPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/labels`.
                    public var labels: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.LabelsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/labels_url`.
                    public var labelsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/locked`.
                    public var locked: Swift.Bool?
                    /// A collection of related issues and pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone`.
                    public struct MilestonePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/closed_at`.
                        public var closedAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/closed_issues`.
                        public var closedIssues: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/created_at`.
                        public var createdAt: Foundation.Date
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/creator`.
                        public struct CreatorPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/creator/avatar_url`.
                            public var avatarUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/creator/deleted`.
                            public var deleted: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/creator/email`.
                            public var email: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/creator/events_url`.
                            public var eventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/creator/followers_url`.
                            public var followersUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/creator/following_url`.
                            public var followingUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/creator/gists_url`.
                            public var gistsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/creator/gravatar_id`.
                            public var gravatarId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/creator/html_url`.
                            public var htmlUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/creator/id`.
                            public var id: Swift.Int
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/creator/login`.
                            public var login: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/creator/name`.
                            public var name: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/creator/node_id`.
                            public var nodeId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/creator/organizations_url`.
                            public var organizationsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/creator/received_events_url`.
                            public var receivedEventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/creator/repos_url`.
                            public var reposUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/creator/site_admin`.
                            public var siteAdmin: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/creator/starred_url`.
                            public var starredUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/creator/subscriptions_url`.
                            public var subscriptionsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/creator/type`.
                            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case bot = "Bot"
                                case user = "User"
                                case organization = "Organization"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/creator/type`.
                            public var _type: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.MilestonePayload.CreatorPayload._TypePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/creator/url`.
                            public var url: Swift.String?
                            /// Creates a new `CreatorPayload`.
                            ///
                            /// - Parameters:
                            ///   - avatarUrl:
                            ///   - deleted:
                            ///   - email:
                            ///   - eventsUrl:
                            ///   - followersUrl:
                            ///   - followingUrl:
                            ///   - gistsUrl:
                            ///   - gravatarId:
                            ///   - htmlUrl:
                            ///   - id:
                            ///   - login:
                            ///   - name:
                            ///   - nodeId:
                            ///   - organizationsUrl:
                            ///   - receivedEventsUrl:
                            ///   - reposUrl:
                            ///   - siteAdmin:
                            ///   - starredUrl:
                            ///   - subscriptionsUrl:
                            ///   - _type:
                            ///   - url:
                            public init(
                                avatarUrl: Swift.String? = nil,
                                deleted: Swift.Bool? = nil,
                                email: Swift.String? = nil,
                                eventsUrl: Swift.String? = nil,
                                followersUrl: Swift.String? = nil,
                                followingUrl: Swift.String? = nil,
                                gistsUrl: Swift.String? = nil,
                                gravatarId: Swift.String? = nil,
                                htmlUrl: Swift.String? = nil,
                                id: Swift.Int,
                                login: Swift.String,
                                name: Swift.String? = nil,
                                nodeId: Swift.String? = nil,
                                organizationsUrl: Swift.String? = nil,
                                receivedEventsUrl: Swift.String? = nil,
                                reposUrl: Swift.String? = nil,
                                siteAdmin: Swift.Bool? = nil,
                                starredUrl: Swift.String? = nil,
                                subscriptionsUrl: Swift.String? = nil,
                                _type: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.MilestonePayload.CreatorPayload._TypePayload? = nil,
                                url: Swift.String? = nil
                            ) {
                                self.avatarUrl = avatarUrl
                                self.deleted = deleted
                                self.email = email
                                self.eventsUrl = eventsUrl
                                self.followersUrl = followersUrl
                                self.followingUrl = followingUrl
                                self.gistsUrl = gistsUrl
                                self.gravatarId = gravatarId
                                self.htmlUrl = htmlUrl
                                self.id = id
                                self.login = login
                                self.name = name
                                self.nodeId = nodeId
                                self.organizationsUrl = organizationsUrl
                                self.receivedEventsUrl = receivedEventsUrl
                                self.reposUrl = reposUrl
                                self.siteAdmin = siteAdmin
                                self.starredUrl = starredUrl
                                self.subscriptionsUrl = subscriptionsUrl
                                self._type = _type
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case avatarUrl = "avatar_url"
                                case deleted
                                case email
                                case eventsUrl = "events_url"
                                case followersUrl = "followers_url"
                                case followingUrl = "following_url"
                                case gistsUrl = "gists_url"
                                case gravatarId = "gravatar_id"
                                case htmlUrl = "html_url"
                                case id
                                case login
                                case name
                                case nodeId = "node_id"
                                case organizationsUrl = "organizations_url"
                                case receivedEventsUrl = "received_events_url"
                                case reposUrl = "repos_url"
                                case siteAdmin = "site_admin"
                                case starredUrl = "starred_url"
                                case subscriptionsUrl = "subscriptions_url"
                                case _type = "type"
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/creator`.
                        public var creator: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.MilestonePayload.CreatorPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/due_on`.
                        public var dueOn: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/html_url`.
                        public var htmlUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/labels_url`.
                        public var labelsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/node_id`.
                        public var nodeId: Swift.String
                        /// The number of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/number`.
                        public var number: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/open_issues`.
                        public var openIssues: Swift.Int
                        /// The state of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/state`.
                        @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case open = "open"
                            case closed = "closed"
                        }
                        /// The state of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/state`.
                        public var state: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.MilestonePayload.StatePayload
                        /// The title of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/title`.
                        public var title: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/updated_at`.
                        public var updatedAt: Foundation.Date
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone/url`.
                        public var url: Swift.String
                        /// Creates a new `MilestonePayload`.
                        ///
                        /// - Parameters:
                        ///   - closedAt:
                        ///   - closedIssues:
                        ///   - createdAt:
                        ///   - creator:
                        ///   - description:
                        ///   - dueOn:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - labelsUrl:
                        ///   - nodeId:
                        ///   - number: The number of the milestone.
                        ///   - openIssues:
                        ///   - state: The state of the milestone.
                        ///   - title: The title of the milestone.
                        ///   - updatedAt:
                        ///   - url:
                        public init(
                            closedAt: Foundation.Date? = nil,
                            closedIssues: Swift.Int,
                            createdAt: Foundation.Date,
                            creator: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.MilestonePayload.CreatorPayload? = nil,
                            description: Swift.String? = nil,
                            dueOn: Foundation.Date? = nil,
                            htmlUrl: Swift.String,
                            id: Swift.Int,
                            labelsUrl: Swift.String,
                            nodeId: Swift.String,
                            number: Swift.Int,
                            openIssues: Swift.Int,
                            state: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.MilestonePayload.StatePayload,
                            title: Swift.String,
                            updatedAt: Foundation.Date,
                            url: Swift.String
                        ) {
                            self.closedAt = closedAt
                            self.closedIssues = closedIssues
                            self.createdAt = createdAt
                            self.creator = creator
                            self.description = description
                            self.dueOn = dueOn
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.labelsUrl = labelsUrl
                            self.nodeId = nodeId
                            self.number = number
                            self.openIssues = openIssues
                            self.state = state
                            self.title = title
                            self.updatedAt = updatedAt
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case closedAt = "closed_at"
                            case closedIssues = "closed_issues"
                            case createdAt = "created_at"
                            case creator
                            case description
                            case dueOn = "due_on"
                            case htmlUrl = "html_url"
                            case id
                            case labelsUrl = "labels_url"
                            case nodeId = "node_id"
                            case number
                            case openIssues = "open_issues"
                            case state
                            case title
                            case updatedAt = "updated_at"
                            case url
                        }
                    }
                    /// A collection of related issues and pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/milestone`.
                    public var milestone: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.MilestonePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/number`.
                    public var number: Swift.Int
                    /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app`.
                    public struct PerformedViaGithubAppPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/created_at`.
                        public var createdAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/EventsPayload`.
                        @frozen public enum EventsPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case branchProtectionRule = "branch_protection_rule"
                            case checkRun = "check_run"
                            case checkSuite = "check_suite"
                            case codeScanningAlert = "code_scanning_alert"
                            case commitComment = "commit_comment"
                            case contentReference = "content_reference"
                            case create = "create"
                            case delete = "delete"
                            case deployment = "deployment"
                            case deploymentReview = "deployment_review"
                            case deploymentStatus = "deployment_status"
                            case deployKey = "deploy_key"
                            case discussion = "discussion"
                            case discussionComment = "discussion_comment"
                            case fork = "fork"
                            case gollum = "gollum"
                            case issues = "issues"
                            case issueComment = "issue_comment"
                            case label = "label"
                            case member = "member"
                            case membership = "membership"
                            case milestone = "milestone"
                            case organization = "organization"
                            case orgBlock = "org_block"
                            case pageBuild = "page_build"
                            case project = "project"
                            case projectCard = "project_card"
                            case projectColumn = "project_column"
                            case _public = "public"
                            case pullRequest = "pull_request"
                            case pullRequestReview = "pull_request_review"
                            case pullRequestReviewComment = "pull_request_review_comment"
                            case push = "push"
                            case registryPackage = "registry_package"
                            case release = "release"
                            case repository = "repository"
                            case repositoryDispatch = "repository_dispatch"
                            case secretScanningAlert = "secret_scanning_alert"
                            case star = "star"
                            case status = "status"
                            case team = "team"
                            case teamAdd = "team_add"
                            case watch = "watch"
                            case workflowDispatch = "workflow_dispatch"
                            case workflowRun = "workflow_run"
                        }
                        /// The list of events for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/events`.
                        public typealias EventsPayload = [Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.EventsPayloadPayload]
                        /// The list of events for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/events`.
                        public var events: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.EventsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/external_url`.
                        public var externalUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/html_url`.
                        public var htmlUrl: Swift.String
                        /// Unique identifier of the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/id`.
                        public var id: Swift.Int?
                        /// The name of the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/node_id`.
                        public var nodeId: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/owner`.
                        public struct OwnerPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/owner/avatar_url`.
                            public var avatarUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/owner/deleted`.
                            public var deleted: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/owner/email`.
                            public var email: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/owner/events_url`.
                            public var eventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/owner/followers_url`.
                            public var followersUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/owner/following_url`.
                            public var followingUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/owner/gists_url`.
                            public var gistsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/owner/gravatar_id`.
                            public var gravatarId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/owner/html_url`.
                            public var htmlUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/owner/id`.
                            public var id: Swift.Int
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/owner/login`.
                            public var login: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/owner/name`.
                            public var name: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/owner/node_id`.
                            public var nodeId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/owner/organizations_url`.
                            public var organizationsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/owner/received_events_url`.
                            public var receivedEventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/owner/repos_url`.
                            public var reposUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/owner/site_admin`.
                            public var siteAdmin: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/owner/starred_url`.
                            public var starredUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/owner/subscriptions_url`.
                            public var subscriptionsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/owner/type`.
                            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case bot = "Bot"
                                case user = "User"
                                case organization = "Organization"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/owner/type`.
                            public var _type: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/owner/url`.
                            public var url: Swift.String?
                            /// Creates a new `OwnerPayload`.
                            ///
                            /// - Parameters:
                            ///   - avatarUrl:
                            ///   - deleted:
                            ///   - email:
                            ///   - eventsUrl:
                            ///   - followersUrl:
                            ///   - followingUrl:
                            ///   - gistsUrl:
                            ///   - gravatarId:
                            ///   - htmlUrl:
                            ///   - id:
                            ///   - login:
                            ///   - name:
                            ///   - nodeId:
                            ///   - organizationsUrl:
                            ///   - receivedEventsUrl:
                            ///   - reposUrl:
                            ///   - siteAdmin:
                            ///   - starredUrl:
                            ///   - subscriptionsUrl:
                            ///   - _type:
                            ///   - url:
                            public init(
                                avatarUrl: Swift.String? = nil,
                                deleted: Swift.Bool? = nil,
                                email: Swift.String? = nil,
                                eventsUrl: Swift.String? = nil,
                                followersUrl: Swift.String? = nil,
                                followingUrl: Swift.String? = nil,
                                gistsUrl: Swift.String? = nil,
                                gravatarId: Swift.String? = nil,
                                htmlUrl: Swift.String? = nil,
                                id: Swift.Int,
                                login: Swift.String,
                                name: Swift.String? = nil,
                                nodeId: Swift.String? = nil,
                                organizationsUrl: Swift.String? = nil,
                                receivedEventsUrl: Swift.String? = nil,
                                reposUrl: Swift.String? = nil,
                                siteAdmin: Swift.Bool? = nil,
                                starredUrl: Swift.String? = nil,
                                subscriptionsUrl: Swift.String? = nil,
                                _type: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload? = nil,
                                url: Swift.String? = nil
                            ) {
                                self.avatarUrl = avatarUrl
                                self.deleted = deleted
                                self.email = email
                                self.eventsUrl = eventsUrl
                                self.followersUrl = followersUrl
                                self.followingUrl = followingUrl
                                self.gistsUrl = gistsUrl
                                self.gravatarId = gravatarId
                                self.htmlUrl = htmlUrl
                                self.id = id
                                self.login = login
                                self.name = name
                                self.nodeId = nodeId
                                self.organizationsUrl = organizationsUrl
                                self.receivedEventsUrl = receivedEventsUrl
                                self.reposUrl = reposUrl
                                self.siteAdmin = siteAdmin
                                self.starredUrl = starredUrl
                                self.subscriptionsUrl = subscriptionsUrl
                                self._type = _type
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case avatarUrl = "avatar_url"
                                case deleted
                                case email
                                case eventsUrl = "events_url"
                                case followersUrl = "followers_url"
                                case followingUrl = "following_url"
                                case gistsUrl = "gists_url"
                                case gravatarId = "gravatar_id"
                                case htmlUrl = "html_url"
                                case id
                                case login
                                case name
                                case nodeId = "node_id"
                                case organizationsUrl = "organizations_url"
                                case receivedEventsUrl = "received_events_url"
                                case reposUrl = "repos_url"
                                case siteAdmin = "site_admin"
                                case starredUrl = "starred_url"
                                case subscriptionsUrl = "subscriptions_url"
                                case _type = "type"
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/owner`.
                        public var owner: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.OwnerPayload?
                        /// The set of permissions for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions`.
                        public struct PermissionsPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/actions`.
                            @frozen public enum ActionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/actions`.
                            public var actions: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/administration`.
                            @frozen public enum AdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/administration`.
                            public var administration: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/checks`.
                            @frozen public enum ChecksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/checks`.
                            public var checks: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/content_references`.
                            @frozen public enum ContentReferencesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/content_references`.
                            public var contentReferences: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/contents`.
                            @frozen public enum ContentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/contents`.
                            public var contents: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/deployments`.
                            @frozen public enum DeploymentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/deployments`.
                            public var deployments: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/discussions`.
                            @frozen public enum DiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/discussions`.
                            public var discussions: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/emails`.
                            @frozen public enum EmailsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/emails`.
                            public var emails: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/environments`.
                            @frozen public enum EnvironmentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/environments`.
                            public var environments: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/issues`.
                            @frozen public enum IssuesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/issues`.
                            public var issues: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/keys`.
                            @frozen public enum KeysPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/keys`.
                            public var keys: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/members`.
                            @frozen public enum MembersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/members`.
                            public var members: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/metadata`.
                            @frozen public enum MetadataPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/metadata`.
                            public var metadata: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/organization_administration`.
                            @frozen public enum OrganizationAdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/organization_administration`.
                            public var organizationAdministration: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/organization_hooks`.
                            @frozen public enum OrganizationHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/organization_hooks`.
                            public var organizationHooks: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/organization_packages`.
                            @frozen public enum OrganizationPackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/organization_packages`.
                            public var organizationPackages: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/organization_plan`.
                            @frozen public enum OrganizationPlanPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/organization_plan`.
                            public var organizationPlan: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/organization_projects`.
                            @frozen public enum OrganizationProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/organization_projects`.
                            public var organizationProjects: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/organization_secrets`.
                            @frozen public enum OrganizationSecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/organization_secrets`.
                            public var organizationSecrets: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/organization_self_hosted_runners`.
                            @frozen public enum OrganizationSelfHostedRunnersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/organization_self_hosted_runners`.
                            public var organizationSelfHostedRunners: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/organization_user_blocking`.
                            @frozen public enum OrganizationUserBlockingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/organization_user_blocking`.
                            public var organizationUserBlocking: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/packages`.
                            @frozen public enum PackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/packages`.
                            public var packages: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/pages`.
                            @frozen public enum PagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/pages`.
                            public var pages: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/pull_requests`.
                            @frozen public enum PullRequestsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/pull_requests`.
                            public var pullRequests: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/repository_hooks`.
                            @frozen public enum RepositoryHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/repository_hooks`.
                            public var repositoryHooks: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/repository_projects`.
                            @frozen public enum RepositoryProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/repository_projects`.
                            public var repositoryProjects: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/secret_scanning_alerts`.
                            @frozen public enum SecretScanningAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/secret_scanning_alerts`.
                            public var secretScanningAlerts: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/secrets`.
                            @frozen public enum SecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/secrets`.
                            public var secrets: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/security_events`.
                            @frozen public enum SecurityEventsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/security_events`.
                            public var securityEvents: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/security_scanning_alert`.
                            @frozen public enum SecurityScanningAlertPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/security_scanning_alert`.
                            public var securityScanningAlert: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/single_file`.
                            @frozen public enum SingleFilePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/single_file`.
                            public var singleFile: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/statuses`.
                            @frozen public enum StatusesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/statuses`.
                            public var statuses: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/team_discussions`.
                            @frozen public enum TeamDiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/team_discussions`.
                            public var teamDiscussions: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/vulnerability_alerts`.
                            @frozen public enum VulnerabilityAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/vulnerability_alerts`.
                            public var vulnerabilityAlerts: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/workflows`.
                            @frozen public enum WorkflowsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions/workflows`.
                            public var workflows: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload?
                            /// Creates a new `PermissionsPayload`.
                            ///
                            /// - Parameters:
                            ///   - actions:
                            ///   - administration:
                            ///   - checks:
                            ///   - contentReferences:
                            ///   - contents:
                            ///   - deployments:
                            ///   - discussions:
                            ///   - emails:
                            ///   - environments:
                            ///   - issues:
                            ///   - keys:
                            ///   - members:
                            ///   - metadata:
                            ///   - organizationAdministration:
                            ///   - organizationHooks:
                            ///   - organizationPackages:
                            ///   - organizationPlan:
                            ///   - organizationProjects:
                            ///   - organizationSecrets:
                            ///   - organizationSelfHostedRunners:
                            ///   - organizationUserBlocking:
                            ///   - packages:
                            ///   - pages:
                            ///   - pullRequests:
                            ///   - repositoryHooks:
                            ///   - repositoryProjects:
                            ///   - secretScanningAlerts:
                            ///   - secrets:
                            ///   - securityEvents:
                            ///   - securityScanningAlert:
                            ///   - singleFile:
                            ///   - statuses:
                            ///   - teamDiscussions:
                            ///   - vulnerabilityAlerts:
                            ///   - workflows:
                            public init(
                                actions: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload? = nil,
                                administration: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload? = nil,
                                checks: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload? = nil,
                                contentReferences: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload? = nil,
                                contents: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload? = nil,
                                deployments: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload? = nil,
                                discussions: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload? = nil,
                                emails: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload? = nil,
                                environments: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload? = nil,
                                issues: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload? = nil,
                                keys: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload? = nil,
                                members: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload? = nil,
                                metadata: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload? = nil,
                                organizationAdministration: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload? = nil,
                                organizationHooks: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload? = nil,
                                organizationPackages: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload? = nil,
                                organizationPlan: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload? = nil,
                                organizationProjects: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload? = nil,
                                organizationSecrets: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload? = nil,
                                organizationSelfHostedRunners: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload? = nil,
                                organizationUserBlocking: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload? = nil,
                                packages: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload? = nil,
                                pages: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload? = nil,
                                pullRequests: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload? = nil,
                                repositoryHooks: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload? = nil,
                                repositoryProjects: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload? = nil,
                                secretScanningAlerts: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload? = nil,
                                secrets: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload? = nil,
                                securityEvents: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload? = nil,
                                securityScanningAlert: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload? = nil,
                                singleFile: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload? = nil,
                                statuses: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload? = nil,
                                teamDiscussions: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload? = nil,
                                vulnerabilityAlerts: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload? = nil,
                                workflows: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload? = nil
                            ) {
                                self.actions = actions
                                self.administration = administration
                                self.checks = checks
                                self.contentReferences = contentReferences
                                self.contents = contents
                                self.deployments = deployments
                                self.discussions = discussions
                                self.emails = emails
                                self.environments = environments
                                self.issues = issues
                                self.keys = keys
                                self.members = members
                                self.metadata = metadata
                                self.organizationAdministration = organizationAdministration
                                self.organizationHooks = organizationHooks
                                self.organizationPackages = organizationPackages
                                self.organizationPlan = organizationPlan
                                self.organizationProjects = organizationProjects
                                self.organizationSecrets = organizationSecrets
                                self.organizationSelfHostedRunners = organizationSelfHostedRunners
                                self.organizationUserBlocking = organizationUserBlocking
                                self.packages = packages
                                self.pages = pages
                                self.pullRequests = pullRequests
                                self.repositoryHooks = repositoryHooks
                                self.repositoryProjects = repositoryProjects
                                self.secretScanningAlerts = secretScanningAlerts
                                self.secrets = secrets
                                self.securityEvents = securityEvents
                                self.securityScanningAlert = securityScanningAlert
                                self.singleFile = singleFile
                                self.statuses = statuses
                                self.teamDiscussions = teamDiscussions
                                self.vulnerabilityAlerts = vulnerabilityAlerts
                                self.workflows = workflows
                            }
                            public enum CodingKeys: String, CodingKey {
                                case actions
                                case administration
                                case checks
                                case contentReferences = "content_references"
                                case contents
                                case deployments
                                case discussions
                                case emails
                                case environments
                                case issues
                                case keys
                                case members
                                case metadata
                                case organizationAdministration = "organization_administration"
                                case organizationHooks = "organization_hooks"
                                case organizationPackages = "organization_packages"
                                case organizationPlan = "organization_plan"
                                case organizationProjects = "organization_projects"
                                case organizationSecrets = "organization_secrets"
                                case organizationSelfHostedRunners = "organization_self_hosted_runners"
                                case organizationUserBlocking = "organization_user_blocking"
                                case packages
                                case pages
                                case pullRequests = "pull_requests"
                                case repositoryHooks = "repository_hooks"
                                case repositoryProjects = "repository_projects"
                                case secretScanningAlerts = "secret_scanning_alerts"
                                case secrets
                                case securityEvents = "security_events"
                                case securityScanningAlert = "security_scanning_alert"
                                case singleFile = "single_file"
                                case statuses
                                case teamDiscussions = "team_discussions"
                                case vulnerabilityAlerts = "vulnerability_alerts"
                                case workflows
                            }
                        }
                        /// The set of permissions for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/permissions`.
                        public var permissions: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload?
                        /// The slug name of the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/slug`.
                        public var slug: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app/updated_at`.
                        public var updatedAt: Foundation.Date?
                        /// Creates a new `PerformedViaGithubAppPayload`.
                        ///
                        /// - Parameters:
                        ///   - createdAt:
                        ///   - description:
                        ///   - events: The list of events for the GitHub app
                        ///   - externalUrl:
                        ///   - htmlUrl:
                        ///   - id: Unique identifier of the GitHub app
                        ///   - name: The name of the GitHub app
                        ///   - nodeId:
                        ///   - owner:
                        ///   - permissions: The set of permissions for the GitHub app
                        ///   - slug: The slug name of the GitHub app
                        ///   - updatedAt:
                        public init(
                            createdAt: Foundation.Date? = nil,
                            description: Swift.String? = nil,
                            events: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.EventsPayload? = nil,
                            externalUrl: Swift.String? = nil,
                            htmlUrl: Swift.String,
                            id: Swift.Int? = nil,
                            name: Swift.String,
                            nodeId: Swift.String,
                            owner: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.OwnerPayload? = nil,
                            permissions: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload? = nil,
                            slug: Swift.String? = nil,
                            updatedAt: Foundation.Date? = nil
                        ) {
                            self.createdAt = createdAt
                            self.description = description
                            self.events = events
                            self.externalUrl = externalUrl
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.name = name
                            self.nodeId = nodeId
                            self.owner = owner
                            self.permissions = permissions
                            self.slug = slug
                            self.updatedAt = updatedAt
                        }
                        public enum CodingKeys: String, CodingKey {
                            case createdAt = "created_at"
                            case description
                            case events
                            case externalUrl = "external_url"
                            case htmlUrl = "html_url"
                            case id
                            case name
                            case nodeId = "node_id"
                            case owner
                            case permissions
                            case slug
                            case updatedAt = "updated_at"
                        }
                    }
                    /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/performed_via_github_app`.
                    public var performedViaGithubApp: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/pull_request`.
                    public struct PullRequestPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/pull_request/diff_url`.
                        public var diffUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/pull_request/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/pull_request/merged_at`.
                        public var mergedAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/pull_request/patch_url`.
                        public var patchUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/pull_request/url`.
                        public var url: Swift.String?
                        /// Creates a new `PullRequestPayload`.
                        ///
                        /// - Parameters:
                        ///   - diffUrl:
                        ///   - htmlUrl:
                        ///   - mergedAt:
                        ///   - patchUrl:
                        ///   - url:
                        public init(
                            diffUrl: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            mergedAt: Foundation.Date? = nil,
                            patchUrl: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.diffUrl = diffUrl
                            self.htmlUrl = htmlUrl
                            self.mergedAt = mergedAt
                            self.patchUrl = patchUrl
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case diffUrl = "diff_url"
                            case htmlUrl = "html_url"
                            case mergedAt = "merged_at"
                            case patchUrl = "patch_url"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/pull_request`.
                    public var pullRequest: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PullRequestPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/reactions`.
                    public struct ReactionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/reactions/+1`.
                        public var _plus_1: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/reactions/-1`.
                        public var _hyphen_1: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/reactions/confused`.
                        public var confused: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/reactions/eyes`.
                        public var eyes: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/reactions/heart`.
                        public var heart: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/reactions/hooray`.
                        public var hooray: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/reactions/laugh`.
                        public var laugh: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/reactions/rocket`.
                        public var rocket: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/reactions/total_count`.
                        public var totalCount: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/reactions/url`.
                        public var url: Swift.String
                        /// Creates a new `ReactionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - _plus_1:
                        ///   - _hyphen_1:
                        ///   - confused:
                        ///   - eyes:
                        ///   - heart:
                        ///   - hooray:
                        ///   - laugh:
                        ///   - rocket:
                        ///   - totalCount:
                        ///   - url:
                        public init(
                            _plus_1: Swift.Int,
                            _hyphen_1: Swift.Int,
                            confused: Swift.Int,
                            eyes: Swift.Int,
                            heart: Swift.Int,
                            hooray: Swift.Int,
                            laugh: Swift.Int,
                            rocket: Swift.Int,
                            totalCount: Swift.Int,
                            url: Swift.String
                        ) {
                            self._plus_1 = _plus_1
                            self._hyphen_1 = _hyphen_1
                            self.confused = confused
                            self.eyes = eyes
                            self.heart = heart
                            self.hooray = hooray
                            self.laugh = laugh
                            self.rocket = rocket
                            self.totalCount = totalCount
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _plus_1 = "+1"
                            case _hyphen_1 = "-1"
                            case confused
                            case eyes
                            case heart
                            case hooray
                            case laugh
                            case rocket
                            case totalCount = "total_count"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/reactions`.
                    public var reactions: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.ReactionsPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/repository_url`.
                    public var repositoryUrl: Swift.String
                    /// State of the issue; either 'open' or 'closed'
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/state`.
                    @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case closed = "closed"
                    }
                    /// State of the issue; either 'open' or 'closed'
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/state`.
                    public var state: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.StatePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/state_reason`.
                    public var stateReason: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/timeline_url`.
                    public var timelineUrl: Swift.String?
                    /// Title of the issue
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/title`.
                    public var title: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/updated_at`.
                    public var updatedAt: Foundation.Date
                    /// URL for the issue
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/url`.
                    public var url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/user`.
                    public struct UserPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/user/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/user/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/user/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/user/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/user/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/user/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/user/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/user/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/user/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/user/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/user/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/user/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/user/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/user/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/user/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/user/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/user/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/user/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/user/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/user/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/user/type`.
                        public var _type: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.UserPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/user/url`.
                        public var url: Swift.String?
                        /// Creates a new `UserPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.UserPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue/user`.
                    public var user: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.UserPayload?
                    /// Creates a new `OldIssuePayload`.
                    ///
                    /// - Parameters:
                    ///   - activeLockReason:
                    ///   - assignee:
                    ///   - assignees:
                    ///   - authorAssociation: How the author is associated with the repository.
                    ///   - body: Contents of the issue
                    ///   - closedAt:
                    ///   - comments:
                    ///   - commentsUrl:
                    ///   - createdAt:
                    ///   - draft:
                    ///   - eventsUrl:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - labels:
                    ///   - labelsUrl:
                    ///   - locked:
                    ///   - milestone: A collection of related issues and pull requests.
                    ///   - nodeId:
                    ///   - number:
                    ///   - performedViaGithubApp: GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                    ///   - pullRequest:
                    ///   - reactions:
                    ///   - repositoryUrl:
                    ///   - state: State of the issue; either 'open' or 'closed'
                    ///   - stateReason:
                    ///   - timelineUrl:
                    ///   - title: Title of the issue
                    ///   - updatedAt:
                    ///   - url: URL for the issue
                    ///   - user:
                    public init(
                        activeLockReason: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.ActiveLockReasonPayload? = nil,
                        assignee: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.AssigneePayload? = nil,
                        assignees: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.AssigneesPayload,
                        authorAssociation: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.AuthorAssociationPayload,
                        body: Swift.String? = nil,
                        closedAt: Foundation.Date? = nil,
                        comments: Swift.Int,
                        commentsUrl: Swift.String,
                        createdAt: Foundation.Date,
                        draft: Swift.Bool? = nil,
                        eventsUrl: Swift.String,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        labels: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.LabelsPayload? = nil,
                        labelsUrl: Swift.String,
                        locked: Swift.Bool? = nil,
                        milestone: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.MilestonePayload? = nil,
                        nodeId: Swift.String,
                        number: Swift.Int,
                        performedViaGithubApp: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PerformedViaGithubAppPayload? = nil,
                        pullRequest: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.PullRequestPayload? = nil,
                        reactions: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.ReactionsPayload,
                        repositoryUrl: Swift.String,
                        state: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.StatePayload? = nil,
                        stateReason: Swift.String? = nil,
                        timelineUrl: Swift.String? = nil,
                        title: Swift.String,
                        updatedAt: Foundation.Date,
                        url: Swift.String,
                        user: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload.UserPayload? = nil
                    ) {
                        self.activeLockReason = activeLockReason
                        self.assignee = assignee
                        self.assignees = assignees
                        self.authorAssociation = authorAssociation
                        self.body = body
                        self.closedAt = closedAt
                        self.comments = comments
                        self.commentsUrl = commentsUrl
                        self.createdAt = createdAt
                        self.draft = draft
                        self.eventsUrl = eventsUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.labels = labels
                        self.labelsUrl = labelsUrl
                        self.locked = locked
                        self.milestone = milestone
                        self.nodeId = nodeId
                        self.number = number
                        self.performedViaGithubApp = performedViaGithubApp
                        self.pullRequest = pullRequest
                        self.reactions = reactions
                        self.repositoryUrl = repositoryUrl
                        self.state = state
                        self.stateReason = stateReason
                        self.timelineUrl = timelineUrl
                        self.title = title
                        self.updatedAt = updatedAt
                        self.url = url
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case activeLockReason = "active_lock_reason"
                        case assignee
                        case assignees
                        case authorAssociation = "author_association"
                        case body
                        case closedAt = "closed_at"
                        case comments
                        case commentsUrl = "comments_url"
                        case createdAt = "created_at"
                        case draft
                        case eventsUrl = "events_url"
                        case htmlUrl = "html_url"
                        case id
                        case labels
                        case labelsUrl = "labels_url"
                        case locked
                        case milestone
                        case nodeId = "node_id"
                        case number
                        case performedViaGithubApp = "performed_via_github_app"
                        case pullRequest = "pull_request"
                        case reactions
                        case repositoryUrl = "repository_url"
                        case state
                        case stateReason = "state_reason"
                        case timelineUrl = "timeline_url"
                        case title
                        case updatedAt = "updated_at"
                        case url
                        case user
                    }
                }
                /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_issue`.
                public var oldIssue: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload?
                /// A git repository
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository`.
                public struct OldRepositoryPayload: Codable, Hashable, Sendable {
                    /// Whether to allow auto-merge for pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/allow_auto_merge`.
                    public var allowAutoMerge: Swift.Bool?
                    /// Whether to allow private forks
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/allow_forking`.
                    public var allowForking: Swift.Bool?
                    /// Whether to allow merge commits for pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/allow_merge_commit`.
                    public var allowMergeCommit: Swift.Bool?
                    /// Whether to allow rebase merges for pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/allow_rebase_merge`.
                    public var allowRebaseMerge: Swift.Bool?
                    /// Whether to allow squash merges for pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/allow_squash_merge`.
                    public var allowSquashMerge: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/allow_update_branch`.
                    public var allowUpdateBranch: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/archive_url`.
                    public var archiveUrl: Swift.String
                    /// Whether the repository is archived.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/archived`.
                    public var archived: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/assignees_url`.
                    public var assigneesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/blobs_url`.
                    public var blobsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/branches_url`.
                    public var branchesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/clone_url`.
                    public var cloneUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/collaborators_url`.
                    public var collaboratorsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/comments_url`.
                    public var commentsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/commits_url`.
                    public var commitsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/compare_url`.
                    public var compareUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/contents_url`.
                    public var contentsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/contributors_url`.
                    public var contributorsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/created_at`.
                    @frozen public enum CreatedAtPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/created_at/case1`.
                        case case1(Swift.Int)
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/created_at/case2`.
                        case case2(Foundation.Date)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/created_at`.
                    public var createdAt: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldRepositoryPayload.CreatedAtPayload
                    /// The default branch of the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/default_branch`.
                    public var defaultBranch: Swift.String
                    /// Whether to delete head branches when pull requests are merged
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/delete_branch_on_merge`.
                    public var deleteBranchOnMerge: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/deployments_url`.
                    public var deploymentsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/description`.
                    public var description: Swift.String?
                    /// Returns whether or not this repository is disabled.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/disabled`.
                    public var disabled: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/downloads_url`.
                    public var downloadsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/events_url`.
                    public var eventsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/fork`.
                    public var fork: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/forks`.
                    public var forks: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/forks_count`.
                    public var forksCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/forks_url`.
                    public var forksUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/full_name`.
                    public var fullName: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/git_commits_url`.
                    public var gitCommitsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/git_refs_url`.
                    public var gitRefsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/git_tags_url`.
                    public var gitTagsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/git_url`.
                    public var gitUrl: Swift.String
                    /// Whether downloads are enabled.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/has_downloads`.
                    public var hasDownloads: Swift.Bool
                    /// Whether issues are enabled.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/has_issues`.
                    public var hasIssues: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/has_pages`.
                    public var hasPages: Swift.Bool
                    /// Whether projects are enabled.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/has_projects`.
                    public var hasProjects: Swift.Bool
                    /// Whether the wiki is enabled.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/has_wiki`.
                    public var hasWiki: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/homepage`.
                    public var homepage: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/hooks_url`.
                    public var hooksUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/html_url`.
                    public var htmlUrl: Swift.String
                    /// Unique identifier of the repository
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/is_template`.
                    public var isTemplate: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/issue_comment_url`.
                    public var issueCommentUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/issue_events_url`.
                    public var issueEventsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/issues_url`.
                    public var issuesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/keys_url`.
                    public var keysUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/labels_url`.
                    public var labelsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/language`.
                    public var language: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/languages_url`.
                    public var languagesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/license`.
                    public struct LicensePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/license/key`.
                        public var key: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/license/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/license/node_id`.
                        public var nodeId: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/license/spdx_id`.
                        public var spdxId: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/license/url`.
                        public var url: Swift.String?
                        /// Creates a new `LicensePayload`.
                        ///
                        /// - Parameters:
                        ///   - key:
                        ///   - name:
                        ///   - nodeId:
                        ///   - spdxId:
                        ///   - url:
                        public init(
                            key: Swift.String,
                            name: Swift.String,
                            nodeId: Swift.String,
                            spdxId: Swift.String,
                            url: Swift.String? = nil
                        ) {
                            self.key = key
                            self.name = name
                            self.nodeId = nodeId
                            self.spdxId = spdxId
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case key
                            case name
                            case nodeId = "node_id"
                            case spdxId = "spdx_id"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/license`.
                    public var license: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldRepositoryPayload.LicensePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/master_branch`.
                    public var masterBranch: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/merges_url`.
                    public var mergesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/milestones_url`.
                    public var milestonesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/mirror_url`.
                    public var mirrorUrl: Swift.String?
                    /// The name of the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/notifications_url`.
                    public var notificationsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/open_issues`.
                    public var openIssues: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/open_issues_count`.
                    public var openIssuesCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/organization`.
                    public var organization: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/owner`.
                    public struct OwnerPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/owner/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/owner/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/owner/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/owner/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/owner/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/owner/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/owner/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/owner/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/owner/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/owner/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/owner/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/owner/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/owner/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/owner/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/owner/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/owner/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/owner/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/owner/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/owner/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/owner/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/owner/type`.
                        public var _type: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldRepositoryPayload.OwnerPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/owner/url`.
                        public var url: Swift.String?
                        /// Creates a new `OwnerPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldRepositoryPayload.OwnerPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/owner`.
                    public var owner: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldRepositoryPayload.OwnerPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/permissions`.
                    public struct PermissionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/permissions/admin`.
                        public var admin: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/permissions/maintain`.
                        public var maintain: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/permissions/pull`.
                        public var pull: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/permissions/push`.
                        public var push: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/permissions/triage`.
                        public var triage: Swift.Bool?
                        /// Creates a new `PermissionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - admin:
                        ///   - maintain:
                        ///   - pull:
                        ///   - push:
                        ///   - triage:
                        public init(
                            admin: Swift.Bool,
                            maintain: Swift.Bool? = nil,
                            pull: Swift.Bool,
                            push: Swift.Bool,
                            triage: Swift.Bool? = nil
                        ) {
                            self.admin = admin
                            self.maintain = maintain
                            self.pull = pull
                            self.push = push
                            self.triage = triage
                        }
                        public enum CodingKeys: String, CodingKey {
                            case admin
                            case maintain
                            case pull
                            case push
                            case triage
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/permissions`.
                    public var permissions: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldRepositoryPayload.PermissionsPayload?
                    /// Whether the repository is private or public.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/private`.
                    public var _private: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/public`.
                    public var _public: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/pulls_url`.
                    public var pullsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/pushed_at`.
                    @frozen public enum PushedAtPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/pushed_at/case1`.
                        case case1(Swift.Int)
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/pushed_at/case2`.
                        case case2(Foundation.Date)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/pushed_at`.
                    public var pushedAt: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldRepositoryPayload.PushedAtPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/releases_url`.
                    public var releasesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/role_name`.
                    public var roleName: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/size`.
                    public var size: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/ssh_url`.
                    public var sshUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/stargazers`.
                    public var stargazers: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/stargazers_count`.
                    public var stargazersCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/stargazers_url`.
                    public var stargazersUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/statuses_url`.
                    public var statusesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/subscribers_url`.
                    public var subscribersUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/subscription_url`.
                    public var subscriptionUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/svn_url`.
                    public var svnUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/tags_url`.
                    public var tagsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/teams_url`.
                    public var teamsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/topics`.
                    public var topics: [Swift.String]
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/trees_url`.
                    public var treesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/updated_at`.
                    public var updatedAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/url`.
                    public var url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/visibility`.
                    @frozen public enum VisibilityPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case _public = "public"
                        case _private = "private"
                        case _internal = "internal"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/visibility`.
                    public var visibility: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldRepositoryPayload.VisibilityPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/watchers`.
                    public var watchers: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository/watchers_count`.
                    public var watchersCount: Swift.Int
                    /// Creates a new `OldRepositoryPayload`.
                    ///
                    /// - Parameters:
                    ///   - allowAutoMerge: Whether to allow auto-merge for pull requests.
                    ///   - allowForking: Whether to allow private forks
                    ///   - allowMergeCommit: Whether to allow merge commits for pull requests.
                    ///   - allowRebaseMerge: Whether to allow rebase merges for pull requests.
                    ///   - allowSquashMerge: Whether to allow squash merges for pull requests.
                    ///   - allowUpdateBranch:
                    ///   - archiveUrl:
                    ///   - archived: Whether the repository is archived.
                    ///   - assigneesUrl:
                    ///   - blobsUrl:
                    ///   - branchesUrl:
                    ///   - cloneUrl:
                    ///   - collaboratorsUrl:
                    ///   - commentsUrl:
                    ///   - commitsUrl:
                    ///   - compareUrl:
                    ///   - contentsUrl:
                    ///   - contributorsUrl:
                    ///   - createdAt:
                    ///   - defaultBranch: The default branch of the repository.
                    ///   - deleteBranchOnMerge: Whether to delete head branches when pull requests are merged
                    ///   - deploymentsUrl:
                    ///   - description:
                    ///   - disabled: Returns whether or not this repository is disabled.
                    ///   - downloadsUrl:
                    ///   - eventsUrl:
                    ///   - fork:
                    ///   - forks:
                    ///   - forksCount:
                    ///   - forksUrl:
                    ///   - fullName:
                    ///   - gitCommitsUrl:
                    ///   - gitRefsUrl:
                    ///   - gitTagsUrl:
                    ///   - gitUrl:
                    ///   - hasDownloads: Whether downloads are enabled.
                    ///   - hasIssues: Whether issues are enabled.
                    ///   - hasPages:
                    ///   - hasProjects: Whether projects are enabled.
                    ///   - hasWiki: Whether the wiki is enabled.
                    ///   - homepage:
                    ///   - hooksUrl:
                    ///   - htmlUrl:
                    ///   - id: Unique identifier of the repository
                    ///   - isTemplate:
                    ///   - issueCommentUrl:
                    ///   - issueEventsUrl:
                    ///   - issuesUrl:
                    ///   - keysUrl:
                    ///   - labelsUrl:
                    ///   - language:
                    ///   - languagesUrl:
                    ///   - license:
                    ///   - masterBranch:
                    ///   - mergesUrl:
                    ///   - milestonesUrl:
                    ///   - mirrorUrl:
                    ///   - name: The name of the repository.
                    ///   - nodeId:
                    ///   - notificationsUrl:
                    ///   - openIssues:
                    ///   - openIssuesCount:
                    ///   - organization:
                    ///   - owner:
                    ///   - permissions:
                    ///   - _private: Whether the repository is private or public.
                    ///   - _public:
                    ///   - pullsUrl:
                    ///   - pushedAt:
                    ///   - releasesUrl:
                    ///   - roleName:
                    ///   - size:
                    ///   - sshUrl:
                    ///   - stargazers:
                    ///   - stargazersCount:
                    ///   - stargazersUrl:
                    ///   - statusesUrl:
                    ///   - subscribersUrl:
                    ///   - subscriptionUrl:
                    ///   - svnUrl:
                    ///   - tagsUrl:
                    ///   - teamsUrl:
                    ///   - topics:
                    ///   - treesUrl:
                    ///   - updatedAt:
                    ///   - url:
                    ///   - visibility:
                    ///   - watchers:
                    ///   - watchersCount:
                    public init(
                        allowAutoMerge: Swift.Bool? = nil,
                        allowForking: Swift.Bool? = nil,
                        allowMergeCommit: Swift.Bool? = nil,
                        allowRebaseMerge: Swift.Bool? = nil,
                        allowSquashMerge: Swift.Bool? = nil,
                        allowUpdateBranch: Swift.Bool? = nil,
                        archiveUrl: Swift.String,
                        archived: Swift.Bool,
                        assigneesUrl: Swift.String,
                        blobsUrl: Swift.String,
                        branchesUrl: Swift.String,
                        cloneUrl: Swift.String,
                        collaboratorsUrl: Swift.String,
                        commentsUrl: Swift.String,
                        commitsUrl: Swift.String,
                        compareUrl: Swift.String,
                        contentsUrl: Swift.String,
                        contributorsUrl: Swift.String,
                        createdAt: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldRepositoryPayload.CreatedAtPayload,
                        defaultBranch: Swift.String,
                        deleteBranchOnMerge: Swift.Bool? = nil,
                        deploymentsUrl: Swift.String,
                        description: Swift.String? = nil,
                        disabled: Swift.Bool? = nil,
                        downloadsUrl: Swift.String,
                        eventsUrl: Swift.String,
                        fork: Swift.Bool,
                        forks: Swift.Int,
                        forksCount: Swift.Int,
                        forksUrl: Swift.String,
                        fullName: Swift.String,
                        gitCommitsUrl: Swift.String,
                        gitRefsUrl: Swift.String,
                        gitTagsUrl: Swift.String,
                        gitUrl: Swift.String,
                        hasDownloads: Swift.Bool,
                        hasIssues: Swift.Bool,
                        hasPages: Swift.Bool,
                        hasProjects: Swift.Bool,
                        hasWiki: Swift.Bool,
                        homepage: Swift.String? = nil,
                        hooksUrl: Swift.String,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        isTemplate: Swift.Bool? = nil,
                        issueCommentUrl: Swift.String,
                        issueEventsUrl: Swift.String,
                        issuesUrl: Swift.String,
                        keysUrl: Swift.String,
                        labelsUrl: Swift.String,
                        language: Swift.String? = nil,
                        languagesUrl: Swift.String,
                        license: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldRepositoryPayload.LicensePayload? = nil,
                        masterBranch: Swift.String? = nil,
                        mergesUrl: Swift.String,
                        milestonesUrl: Swift.String,
                        mirrorUrl: Swift.String? = nil,
                        name: Swift.String,
                        nodeId: Swift.String,
                        notificationsUrl: Swift.String,
                        openIssues: Swift.Int,
                        openIssuesCount: Swift.Int,
                        organization: Swift.String? = nil,
                        owner: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldRepositoryPayload.OwnerPayload? = nil,
                        permissions: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldRepositoryPayload.PermissionsPayload? = nil,
                        _private: Swift.Bool,
                        _public: Swift.Bool? = nil,
                        pullsUrl: Swift.String,
                        pushedAt: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldRepositoryPayload.PushedAtPayload? = nil,
                        releasesUrl: Swift.String,
                        roleName: Swift.String? = nil,
                        size: Swift.Int,
                        sshUrl: Swift.String,
                        stargazers: Swift.Int? = nil,
                        stargazersCount: Swift.Int,
                        stargazersUrl: Swift.String,
                        statusesUrl: Swift.String,
                        subscribersUrl: Swift.String,
                        subscriptionUrl: Swift.String,
                        svnUrl: Swift.String,
                        tagsUrl: Swift.String,
                        teamsUrl: Swift.String,
                        topics: [Swift.String],
                        treesUrl: Swift.String,
                        updatedAt: Foundation.Date,
                        url: Swift.String,
                        visibility: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldRepositoryPayload.VisibilityPayload,
                        watchers: Swift.Int,
                        watchersCount: Swift.Int
                    ) {
                        self.allowAutoMerge = allowAutoMerge
                        self.allowForking = allowForking
                        self.allowMergeCommit = allowMergeCommit
                        self.allowRebaseMerge = allowRebaseMerge
                        self.allowSquashMerge = allowSquashMerge
                        self.allowUpdateBranch = allowUpdateBranch
                        self.archiveUrl = archiveUrl
                        self.archived = archived
                        self.assigneesUrl = assigneesUrl
                        self.blobsUrl = blobsUrl
                        self.branchesUrl = branchesUrl
                        self.cloneUrl = cloneUrl
                        self.collaboratorsUrl = collaboratorsUrl
                        self.commentsUrl = commentsUrl
                        self.commitsUrl = commitsUrl
                        self.compareUrl = compareUrl
                        self.contentsUrl = contentsUrl
                        self.contributorsUrl = contributorsUrl
                        self.createdAt = createdAt
                        self.defaultBranch = defaultBranch
                        self.deleteBranchOnMerge = deleteBranchOnMerge
                        self.deploymentsUrl = deploymentsUrl
                        self.description = description
                        self.disabled = disabled
                        self.downloadsUrl = downloadsUrl
                        self.eventsUrl = eventsUrl
                        self.fork = fork
                        self.forks = forks
                        self.forksCount = forksCount
                        self.forksUrl = forksUrl
                        self.fullName = fullName
                        self.gitCommitsUrl = gitCommitsUrl
                        self.gitRefsUrl = gitRefsUrl
                        self.gitTagsUrl = gitTagsUrl
                        self.gitUrl = gitUrl
                        self.hasDownloads = hasDownloads
                        self.hasIssues = hasIssues
                        self.hasPages = hasPages
                        self.hasProjects = hasProjects
                        self.hasWiki = hasWiki
                        self.homepage = homepage
                        self.hooksUrl = hooksUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.isTemplate = isTemplate
                        self.issueCommentUrl = issueCommentUrl
                        self.issueEventsUrl = issueEventsUrl
                        self.issuesUrl = issuesUrl
                        self.keysUrl = keysUrl
                        self.labelsUrl = labelsUrl
                        self.language = language
                        self.languagesUrl = languagesUrl
                        self.license = license
                        self.masterBranch = masterBranch
                        self.mergesUrl = mergesUrl
                        self.milestonesUrl = milestonesUrl
                        self.mirrorUrl = mirrorUrl
                        self.name = name
                        self.nodeId = nodeId
                        self.notificationsUrl = notificationsUrl
                        self.openIssues = openIssues
                        self.openIssuesCount = openIssuesCount
                        self.organization = organization
                        self.owner = owner
                        self.permissions = permissions
                        self._private = _private
                        self._public = _public
                        self.pullsUrl = pullsUrl
                        self.pushedAt = pushedAt
                        self.releasesUrl = releasesUrl
                        self.roleName = roleName
                        self.size = size
                        self.sshUrl = sshUrl
                        self.stargazers = stargazers
                        self.stargazersCount = stargazersCount
                        self.stargazersUrl = stargazersUrl
                        self.statusesUrl = statusesUrl
                        self.subscribersUrl = subscribersUrl
                        self.subscriptionUrl = subscriptionUrl
                        self.svnUrl = svnUrl
                        self.tagsUrl = tagsUrl
                        self.teamsUrl = teamsUrl
                        self.topics = topics
                        self.treesUrl = treesUrl
                        self.updatedAt = updatedAt
                        self.url = url
                        self.visibility = visibility
                        self.watchers = watchers
                        self.watchersCount = watchersCount
                    }
                    public enum CodingKeys: String, CodingKey {
                        case allowAutoMerge = "allow_auto_merge"
                        case allowForking = "allow_forking"
                        case allowMergeCommit = "allow_merge_commit"
                        case allowRebaseMerge = "allow_rebase_merge"
                        case allowSquashMerge = "allow_squash_merge"
                        case allowUpdateBranch = "allow_update_branch"
                        case archiveUrl = "archive_url"
                        case archived
                        case assigneesUrl = "assignees_url"
                        case blobsUrl = "blobs_url"
                        case branchesUrl = "branches_url"
                        case cloneUrl = "clone_url"
                        case collaboratorsUrl = "collaborators_url"
                        case commentsUrl = "comments_url"
                        case commitsUrl = "commits_url"
                        case compareUrl = "compare_url"
                        case contentsUrl = "contents_url"
                        case contributorsUrl = "contributors_url"
                        case createdAt = "created_at"
                        case defaultBranch = "default_branch"
                        case deleteBranchOnMerge = "delete_branch_on_merge"
                        case deploymentsUrl = "deployments_url"
                        case description
                        case disabled
                        case downloadsUrl = "downloads_url"
                        case eventsUrl = "events_url"
                        case fork
                        case forks
                        case forksCount = "forks_count"
                        case forksUrl = "forks_url"
                        case fullName = "full_name"
                        case gitCommitsUrl = "git_commits_url"
                        case gitRefsUrl = "git_refs_url"
                        case gitTagsUrl = "git_tags_url"
                        case gitUrl = "git_url"
                        case hasDownloads = "has_downloads"
                        case hasIssues = "has_issues"
                        case hasPages = "has_pages"
                        case hasProjects = "has_projects"
                        case hasWiki = "has_wiki"
                        case homepage
                        case hooksUrl = "hooks_url"
                        case htmlUrl = "html_url"
                        case id
                        case isTemplate = "is_template"
                        case issueCommentUrl = "issue_comment_url"
                        case issueEventsUrl = "issue_events_url"
                        case issuesUrl = "issues_url"
                        case keysUrl = "keys_url"
                        case labelsUrl = "labels_url"
                        case language
                        case languagesUrl = "languages_url"
                        case license
                        case masterBranch = "master_branch"
                        case mergesUrl = "merges_url"
                        case milestonesUrl = "milestones_url"
                        case mirrorUrl = "mirror_url"
                        case name
                        case nodeId = "node_id"
                        case notificationsUrl = "notifications_url"
                        case openIssues = "open_issues"
                        case openIssuesCount = "open_issues_count"
                        case organization
                        case owner
                        case permissions
                        case _private = "private"
                        case _public = "public"
                        case pullsUrl = "pulls_url"
                        case pushedAt = "pushed_at"
                        case releasesUrl = "releases_url"
                        case roleName = "role_name"
                        case size
                        case sshUrl = "ssh_url"
                        case stargazers
                        case stargazersCount = "stargazers_count"
                        case stargazersUrl = "stargazers_url"
                        case statusesUrl = "statuses_url"
                        case subscribersUrl = "subscribers_url"
                        case subscriptionUrl = "subscription_url"
                        case svnUrl = "svn_url"
                        case tagsUrl = "tags_url"
                        case teamsUrl = "teams_url"
                        case topics
                        case treesUrl = "trees_url"
                        case updatedAt = "updated_at"
                        case url
                        case visibility
                        case watchers
                        case watchersCount = "watchers_count"
                    }
                }
                /// A git repository
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes/old_repository`.
                public var oldRepository: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldRepositoryPayload
                /// Creates a new `ChangesPayload`.
                ///
                /// - Parameters:
                ///   - oldIssue: The [issue](https://docs.github.com/en/rest/reference/issues) itself.
                ///   - oldRepository: A git repository
                public init(
                    oldIssue: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldIssuePayload? = nil,
                    oldRepository: Components.Schemas.WebhookIssuesOpened.ChangesPayload.OldRepositoryPayload
                ) {
                    self.oldIssue = oldIssue
                    self.oldRepository = oldRepository
                }
                public enum CodingKeys: String, CodingKey {
                    case oldIssue = "old_issue"
                    case oldRepository = "old_repository"
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/changes`.
            public var changes: Components.Schemas.WebhookIssuesOpened.ChangesPayload?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue`.
            public struct IssuePayload: Codable, Hashable, Sendable {
                /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/active_lock_reason`.
                    @frozen public enum ActiveLockReasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case resolved = "resolved"
                        case offTopic = "off-topic"
                        case tooHeated = "too heated"
                        case spam = "spam"
                        case _empty_ = ""
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/active_lock_reason`.
                    public var activeLockReason: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.ActiveLockReasonPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/assignee`.
                    public struct AssigneePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/assignee/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/assignee/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/assignee/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/assignee/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/assignee/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/assignee/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/assignee/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/assignee/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/assignee/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/assignee/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/assignee/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/assignee/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/assignee/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/assignee/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/assignee/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/assignee/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/assignee/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/assignee/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/assignee/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/assignee/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/assignee/type`.
                        public var _type: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.AssigneePayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/assignee/url`.
                        public var url: Swift.String?
                        /// Creates a new `AssigneePayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.AssigneePayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/assignee`.
                    public var assignee: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.AssigneePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/AssigneesPayload`.
                    public struct AssigneesPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/AssigneesPayload/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/AssigneesPayload/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/AssigneesPayload/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/AssigneesPayload/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/AssigneesPayload/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/AssigneesPayload/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/AssigneesPayload/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/AssigneesPayload/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/AssigneesPayload/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/AssigneesPayload/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/AssigneesPayload/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/AssigneesPayload/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/AssigneesPayload/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/AssigneesPayload/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/AssigneesPayload/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/AssigneesPayload/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/AssigneesPayload/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/AssigneesPayload/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/AssigneesPayload/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/AssigneesPayload/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/AssigneesPayload/type`.
                        public var _type: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.AssigneesPayloadPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/AssigneesPayload/url`.
                        public var url: Swift.String?
                        /// Creates a new `AssigneesPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.AssigneesPayloadPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/assignees`.
                    public typealias AssigneesPayload = [Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.AssigneesPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/assignees`.
                    public var assignees: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.AssigneesPayload
                    /// How the author is associated with the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/author_association`.
                    @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case collaborator = "COLLABORATOR"
                        case contributor = "CONTRIBUTOR"
                        case firstTimer = "FIRST_TIMER"
                        case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                        case mannequin = "MANNEQUIN"
                        case member = "MEMBER"
                        case none = "NONE"
                        case owner = "OWNER"
                    }
                    /// How the author is associated with the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/author_association`.
                    public var authorAssociation: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.AuthorAssociationPayload
                    /// Contents of the issue
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/body`.
                    public var body: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/closed_at`.
                    public var closedAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/comments`.
                    public var comments: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/comments_url`.
                    public var commentsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/created_at`.
                    public var createdAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/draft`.
                    public var draft: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/events_url`.
                    public var eventsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/html_url`.
                    public var htmlUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/LabelsPayload`.
                    public struct LabelsPayloadPayload: Codable, Hashable, Sendable {
                        /// 6-character hex code, without the leading #, identifying the color
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/LabelsPayload/color`.
                        public var color: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/LabelsPayload/default`.
                        public var _default: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/LabelsPayload/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/LabelsPayload/id`.
                        public var id: Swift.Int
                        /// The name of the label.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/LabelsPayload/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/LabelsPayload/node_id`.
                        public var nodeId: Swift.String
                        /// URL for the label
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/LabelsPayload/url`.
                        public var url: Swift.String
                        /// Creates a new `LabelsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - color: 6-character hex code, without the leading #, identifying the color
                        ///   - _default:
                        ///   - description:
                        ///   - id:
                        ///   - name: The name of the label.
                        ///   - nodeId:
                        ///   - url: URL for the label
                        public init(
                            color: Swift.String,
                            _default: Swift.Bool,
                            description: Swift.String? = nil,
                            id: Swift.Int,
                            name: Swift.String,
                            nodeId: Swift.String,
                            url: Swift.String
                        ) {
                            self.color = color
                            self._default = _default
                            self.description = description
                            self.id = id
                            self.name = name
                            self.nodeId = nodeId
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case color
                            case _default = "default"
                            case description
                            case id
                            case name
                            case nodeId = "node_id"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/labels`.
                    public typealias LabelsPayload = [Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.LabelsPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/labels`.
                    public var labels: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.LabelsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/labels_url`.
                    public var labelsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/locked`.
                    public var locked: Swift.Bool?
                    /// A collection of related issues and pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone`.
                    public struct MilestonePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/closed_at`.
                        public var closedAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/closed_issues`.
                        public var closedIssues: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/created_at`.
                        public var createdAt: Foundation.Date
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/creator`.
                        public struct CreatorPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/creator/avatar_url`.
                            public var avatarUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/creator/deleted`.
                            public var deleted: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/creator/email`.
                            public var email: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/creator/events_url`.
                            public var eventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/creator/followers_url`.
                            public var followersUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/creator/following_url`.
                            public var followingUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/creator/gists_url`.
                            public var gistsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/creator/gravatar_id`.
                            public var gravatarId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/creator/html_url`.
                            public var htmlUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/creator/id`.
                            public var id: Swift.Int
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/creator/login`.
                            public var login: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/creator/name`.
                            public var name: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/creator/node_id`.
                            public var nodeId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/creator/organizations_url`.
                            public var organizationsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/creator/received_events_url`.
                            public var receivedEventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/creator/repos_url`.
                            public var reposUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/creator/site_admin`.
                            public var siteAdmin: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/creator/starred_url`.
                            public var starredUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/creator/subscriptions_url`.
                            public var subscriptionsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/creator/type`.
                            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case bot = "Bot"
                                case user = "User"
                                case organization = "Organization"
                                case mannequin = "Mannequin"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/creator/type`.
                            public var _type: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload._TypePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/creator/url`.
                            public var url: Swift.String?
                            /// Creates a new `CreatorPayload`.
                            ///
                            /// - Parameters:
                            ///   - avatarUrl:
                            ///   - deleted:
                            ///   - email:
                            ///   - eventsUrl:
                            ///   - followersUrl:
                            ///   - followingUrl:
                            ///   - gistsUrl:
                            ///   - gravatarId:
                            ///   - htmlUrl:
                            ///   - id:
                            ///   - login:
                            ///   - name:
                            ///   - nodeId:
                            ///   - organizationsUrl:
                            ///   - receivedEventsUrl:
                            ///   - reposUrl:
                            ///   - siteAdmin:
                            ///   - starredUrl:
                            ///   - subscriptionsUrl:
                            ///   - _type:
                            ///   - url:
                            public init(
                                avatarUrl: Swift.String? = nil,
                                deleted: Swift.Bool? = nil,
                                email: Swift.String? = nil,
                                eventsUrl: Swift.String? = nil,
                                followersUrl: Swift.String? = nil,
                                followingUrl: Swift.String? = nil,
                                gistsUrl: Swift.String? = nil,
                                gravatarId: Swift.String? = nil,
                                htmlUrl: Swift.String? = nil,
                                id: Swift.Int,
                                login: Swift.String,
                                name: Swift.String? = nil,
                                nodeId: Swift.String? = nil,
                                organizationsUrl: Swift.String? = nil,
                                receivedEventsUrl: Swift.String? = nil,
                                reposUrl: Swift.String? = nil,
                                siteAdmin: Swift.Bool? = nil,
                                starredUrl: Swift.String? = nil,
                                subscriptionsUrl: Swift.String? = nil,
                                _type: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload._TypePayload? = nil,
                                url: Swift.String? = nil
                            ) {
                                self.avatarUrl = avatarUrl
                                self.deleted = deleted
                                self.email = email
                                self.eventsUrl = eventsUrl
                                self.followersUrl = followersUrl
                                self.followingUrl = followingUrl
                                self.gistsUrl = gistsUrl
                                self.gravatarId = gravatarId
                                self.htmlUrl = htmlUrl
                                self.id = id
                                self.login = login
                                self.name = name
                                self.nodeId = nodeId
                                self.organizationsUrl = organizationsUrl
                                self.receivedEventsUrl = receivedEventsUrl
                                self.reposUrl = reposUrl
                                self.siteAdmin = siteAdmin
                                self.starredUrl = starredUrl
                                self.subscriptionsUrl = subscriptionsUrl
                                self._type = _type
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case avatarUrl = "avatar_url"
                                case deleted
                                case email
                                case eventsUrl = "events_url"
                                case followersUrl = "followers_url"
                                case followingUrl = "following_url"
                                case gistsUrl = "gists_url"
                                case gravatarId = "gravatar_id"
                                case htmlUrl = "html_url"
                                case id
                                case login
                                case name
                                case nodeId = "node_id"
                                case organizationsUrl = "organizations_url"
                                case receivedEventsUrl = "received_events_url"
                                case reposUrl = "repos_url"
                                case siteAdmin = "site_admin"
                                case starredUrl = "starred_url"
                                case subscriptionsUrl = "subscriptions_url"
                                case _type = "type"
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/creator`.
                        public var creator: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/due_on`.
                        public var dueOn: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/html_url`.
                        public var htmlUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/labels_url`.
                        public var labelsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/node_id`.
                        public var nodeId: Swift.String
                        /// The number of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/number`.
                        public var number: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/open_issues`.
                        public var openIssues: Swift.Int
                        /// The state of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/state`.
                        @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case open = "open"
                            case closed = "closed"
                        }
                        /// The state of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/state`.
                        public var state: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.MilestonePayload.StatePayload
                        /// The title of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/title`.
                        public var title: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/updated_at`.
                        public var updatedAt: Foundation.Date
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone/url`.
                        public var url: Swift.String
                        /// Creates a new `MilestonePayload`.
                        ///
                        /// - Parameters:
                        ///   - closedAt:
                        ///   - closedIssues:
                        ///   - createdAt:
                        ///   - creator:
                        ///   - description:
                        ///   - dueOn:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - labelsUrl:
                        ///   - nodeId:
                        ///   - number: The number of the milestone.
                        ///   - openIssues:
                        ///   - state: The state of the milestone.
                        ///   - title: The title of the milestone.
                        ///   - updatedAt:
                        ///   - url:
                        public init(
                            closedAt: Foundation.Date? = nil,
                            closedIssues: Swift.Int,
                            createdAt: Foundation.Date,
                            creator: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload? = nil,
                            description: Swift.String? = nil,
                            dueOn: Foundation.Date? = nil,
                            htmlUrl: Swift.String,
                            id: Swift.Int,
                            labelsUrl: Swift.String,
                            nodeId: Swift.String,
                            number: Swift.Int,
                            openIssues: Swift.Int,
                            state: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.MilestonePayload.StatePayload,
                            title: Swift.String,
                            updatedAt: Foundation.Date,
                            url: Swift.String
                        ) {
                            self.closedAt = closedAt
                            self.closedIssues = closedIssues
                            self.createdAt = createdAt
                            self.creator = creator
                            self.description = description
                            self.dueOn = dueOn
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.labelsUrl = labelsUrl
                            self.nodeId = nodeId
                            self.number = number
                            self.openIssues = openIssues
                            self.state = state
                            self.title = title
                            self.updatedAt = updatedAt
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case closedAt = "closed_at"
                            case closedIssues = "closed_issues"
                            case createdAt = "created_at"
                            case creator
                            case description
                            case dueOn = "due_on"
                            case htmlUrl = "html_url"
                            case id
                            case labelsUrl = "labels_url"
                            case nodeId = "node_id"
                            case number
                            case openIssues = "open_issues"
                            case state
                            case title
                            case updatedAt = "updated_at"
                            case url
                        }
                    }
                    /// A collection of related issues and pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/milestone`.
                    public var milestone: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.MilestonePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/number`.
                    public var number: Swift.Int
                    /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app`.
                    public struct PerformedViaGithubAppPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/created_at`.
                        public var createdAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/EventsPayload`.
                        @frozen public enum EventsPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case branchProtectionRule = "branch_protection_rule"
                            case checkRun = "check_run"
                            case checkSuite = "check_suite"
                            case codeScanningAlert = "code_scanning_alert"
                            case commitComment = "commit_comment"
                            case contentReference = "content_reference"
                            case create = "create"
                            case delete = "delete"
                            case deployment = "deployment"
                            case deploymentReview = "deployment_review"
                            case deploymentStatus = "deployment_status"
                            case deployKey = "deploy_key"
                            case discussion = "discussion"
                            case discussionComment = "discussion_comment"
                            case fork = "fork"
                            case gollum = "gollum"
                            case issues = "issues"
                            case issueComment = "issue_comment"
                            case label = "label"
                            case member = "member"
                            case membership = "membership"
                            case milestone = "milestone"
                            case organization = "organization"
                            case orgBlock = "org_block"
                            case pageBuild = "page_build"
                            case project = "project"
                            case projectCard = "project_card"
                            case projectColumn = "project_column"
                            case _public = "public"
                            case pullRequest = "pull_request"
                            case pullRequestReview = "pull_request_review"
                            case pullRequestReviewComment = "pull_request_review_comment"
                            case push = "push"
                            case registryPackage = "registry_package"
                            case release = "release"
                            case repository = "repository"
                            case repositoryDispatch = "repository_dispatch"
                            case secretScanningAlert = "secret_scanning_alert"
                            case star = "star"
                            case status = "status"
                            case team = "team"
                            case teamAdd = "team_add"
                            case watch = "watch"
                            case workflowDispatch = "workflow_dispatch"
                            case workflowRun = "workflow_run"
                            case securityAndAnalysis = "security_and_analysis"
                            case pullRequestReviewThread = "pull_request_review_thread"
                            case reminder = "reminder"
                        }
                        /// The list of events for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/events`.
                        public typealias EventsPayload = [Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.EventsPayloadPayload]
                        /// The list of events for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/events`.
                        public var events: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.EventsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/external_url`.
                        public var externalUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/html_url`.
                        public var htmlUrl: Swift.String
                        /// Unique identifier of the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/id`.
                        public var id: Swift.Int?
                        /// The name of the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/node_id`.
                        public var nodeId: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/owner`.
                        public struct OwnerPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/owner/avatar_url`.
                            public var avatarUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/owner/deleted`.
                            public var deleted: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/owner/email`.
                            public var email: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/owner/events_url`.
                            public var eventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/owner/followers_url`.
                            public var followersUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/owner/following_url`.
                            public var followingUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/owner/gists_url`.
                            public var gistsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/owner/gravatar_id`.
                            public var gravatarId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/owner/html_url`.
                            public var htmlUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/owner/id`.
                            public var id: Swift.Int
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/owner/login`.
                            public var login: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/owner/name`.
                            public var name: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/owner/node_id`.
                            public var nodeId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/owner/organizations_url`.
                            public var organizationsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/owner/received_events_url`.
                            public var receivedEventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/owner/repos_url`.
                            public var reposUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/owner/site_admin`.
                            public var siteAdmin: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/owner/starred_url`.
                            public var starredUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/owner/subscriptions_url`.
                            public var subscriptionsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/owner/type`.
                            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case bot = "Bot"
                                case user = "User"
                                case organization = "Organization"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/owner/type`.
                            public var _type: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/owner/url`.
                            public var url: Swift.String?
                            /// Creates a new `OwnerPayload`.
                            ///
                            /// - Parameters:
                            ///   - avatarUrl:
                            ///   - deleted:
                            ///   - email:
                            ///   - eventsUrl:
                            ///   - followersUrl:
                            ///   - followingUrl:
                            ///   - gistsUrl:
                            ///   - gravatarId:
                            ///   - htmlUrl:
                            ///   - id:
                            ///   - login:
                            ///   - name:
                            ///   - nodeId:
                            ///   - organizationsUrl:
                            ///   - receivedEventsUrl:
                            ///   - reposUrl:
                            ///   - siteAdmin:
                            ///   - starredUrl:
                            ///   - subscriptionsUrl:
                            ///   - _type:
                            ///   - url:
                            public init(
                                avatarUrl: Swift.String? = nil,
                                deleted: Swift.Bool? = nil,
                                email: Swift.String? = nil,
                                eventsUrl: Swift.String? = nil,
                                followersUrl: Swift.String? = nil,
                                followingUrl: Swift.String? = nil,
                                gistsUrl: Swift.String? = nil,
                                gravatarId: Swift.String? = nil,
                                htmlUrl: Swift.String? = nil,
                                id: Swift.Int,
                                login: Swift.String,
                                name: Swift.String? = nil,
                                nodeId: Swift.String? = nil,
                                organizationsUrl: Swift.String? = nil,
                                receivedEventsUrl: Swift.String? = nil,
                                reposUrl: Swift.String? = nil,
                                siteAdmin: Swift.Bool? = nil,
                                starredUrl: Swift.String? = nil,
                                subscriptionsUrl: Swift.String? = nil,
                                _type: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload? = nil,
                                url: Swift.String? = nil
                            ) {
                                self.avatarUrl = avatarUrl
                                self.deleted = deleted
                                self.email = email
                                self.eventsUrl = eventsUrl
                                self.followersUrl = followersUrl
                                self.followingUrl = followingUrl
                                self.gistsUrl = gistsUrl
                                self.gravatarId = gravatarId
                                self.htmlUrl = htmlUrl
                                self.id = id
                                self.login = login
                                self.name = name
                                self.nodeId = nodeId
                                self.organizationsUrl = organizationsUrl
                                self.receivedEventsUrl = receivedEventsUrl
                                self.reposUrl = reposUrl
                                self.siteAdmin = siteAdmin
                                self.starredUrl = starredUrl
                                self.subscriptionsUrl = subscriptionsUrl
                                self._type = _type
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case avatarUrl = "avatar_url"
                                case deleted
                                case email
                                case eventsUrl = "events_url"
                                case followersUrl = "followers_url"
                                case followingUrl = "following_url"
                                case gistsUrl = "gists_url"
                                case gravatarId = "gravatar_id"
                                case htmlUrl = "html_url"
                                case id
                                case login
                                case name
                                case nodeId = "node_id"
                                case organizationsUrl = "organizations_url"
                                case receivedEventsUrl = "received_events_url"
                                case reposUrl = "repos_url"
                                case siteAdmin = "site_admin"
                                case starredUrl = "starred_url"
                                case subscriptionsUrl = "subscriptions_url"
                                case _type = "type"
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/owner`.
                        public var owner: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload?
                        /// The set of permissions for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions`.
                        public struct PermissionsPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/actions`.
                            @frozen public enum ActionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/actions`.
                            public var actions: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/administration`.
                            @frozen public enum AdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/administration`.
                            public var administration: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/checks`.
                            @frozen public enum ChecksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/checks`.
                            public var checks: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/content_references`.
                            @frozen public enum ContentReferencesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/content_references`.
                            public var contentReferences: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/contents`.
                            @frozen public enum ContentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/contents`.
                            public var contents: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/deployments`.
                            @frozen public enum DeploymentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/deployments`.
                            public var deployments: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/discussions`.
                            @frozen public enum DiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/discussions`.
                            public var discussions: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/emails`.
                            @frozen public enum EmailsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/emails`.
                            public var emails: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/environments`.
                            @frozen public enum EnvironmentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/environments`.
                            public var environments: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/issues`.
                            @frozen public enum IssuesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/issues`.
                            public var issues: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/keys`.
                            @frozen public enum KeysPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/keys`.
                            public var keys: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/members`.
                            @frozen public enum MembersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/members`.
                            public var members: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/metadata`.
                            @frozen public enum MetadataPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/metadata`.
                            public var metadata: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/organization_administration`.
                            @frozen public enum OrganizationAdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/organization_administration`.
                            public var organizationAdministration: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/organization_hooks`.
                            @frozen public enum OrganizationHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/organization_hooks`.
                            public var organizationHooks: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/organization_packages`.
                            @frozen public enum OrganizationPackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/organization_packages`.
                            public var organizationPackages: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/organization_plan`.
                            @frozen public enum OrganizationPlanPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/organization_plan`.
                            public var organizationPlan: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/organization_projects`.
                            @frozen public enum OrganizationProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                                case admin = "admin"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/organization_projects`.
                            public var organizationProjects: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/organization_secrets`.
                            @frozen public enum OrganizationSecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/organization_secrets`.
                            public var organizationSecrets: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/organization_self_hosted_runners`.
                            @frozen public enum OrganizationSelfHostedRunnersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/organization_self_hosted_runners`.
                            public var organizationSelfHostedRunners: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/organization_user_blocking`.
                            @frozen public enum OrganizationUserBlockingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/organization_user_blocking`.
                            public var organizationUserBlocking: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/packages`.
                            @frozen public enum PackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/packages`.
                            public var packages: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/pages`.
                            @frozen public enum PagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/pages`.
                            public var pages: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/pull_requests`.
                            @frozen public enum PullRequestsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/pull_requests`.
                            public var pullRequests: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/repository_hooks`.
                            @frozen public enum RepositoryHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/repository_hooks`.
                            public var repositoryHooks: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/repository_projects`.
                            @frozen public enum RepositoryProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/repository_projects`.
                            public var repositoryProjects: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/secret_scanning_alerts`.
                            @frozen public enum SecretScanningAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/secret_scanning_alerts`.
                            public var secretScanningAlerts: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/secrets`.
                            @frozen public enum SecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/secrets`.
                            public var secrets: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/security_events`.
                            @frozen public enum SecurityEventsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/security_events`.
                            public var securityEvents: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/security_scanning_alert`.
                            @frozen public enum SecurityScanningAlertPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/security_scanning_alert`.
                            public var securityScanningAlert: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/single_file`.
                            @frozen public enum SingleFilePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/single_file`.
                            public var singleFile: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/statuses`.
                            @frozen public enum StatusesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/statuses`.
                            public var statuses: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/team_discussions`.
                            @frozen public enum TeamDiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/team_discussions`.
                            public var teamDiscussions: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/vulnerability_alerts`.
                            @frozen public enum VulnerabilityAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/vulnerability_alerts`.
                            public var vulnerabilityAlerts: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/workflows`.
                            @frozen public enum WorkflowsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions/workflows`.
                            public var workflows: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload?
                            /// Creates a new `PermissionsPayload`.
                            ///
                            /// - Parameters:
                            ///   - actions:
                            ///   - administration:
                            ///   - checks:
                            ///   - contentReferences:
                            ///   - contents:
                            ///   - deployments:
                            ///   - discussions:
                            ///   - emails:
                            ///   - environments:
                            ///   - issues:
                            ///   - keys:
                            ///   - members:
                            ///   - metadata:
                            ///   - organizationAdministration:
                            ///   - organizationHooks:
                            ///   - organizationPackages:
                            ///   - organizationPlan:
                            ///   - organizationProjects:
                            ///   - organizationSecrets:
                            ///   - organizationSelfHostedRunners:
                            ///   - organizationUserBlocking:
                            ///   - packages:
                            ///   - pages:
                            ///   - pullRequests:
                            ///   - repositoryHooks:
                            ///   - repositoryProjects:
                            ///   - secretScanningAlerts:
                            ///   - secrets:
                            ///   - securityEvents:
                            ///   - securityScanningAlert:
                            ///   - singleFile:
                            ///   - statuses:
                            ///   - teamDiscussions:
                            ///   - vulnerabilityAlerts:
                            ///   - workflows:
                            public init(
                                actions: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload? = nil,
                                administration: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload? = nil,
                                checks: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload? = nil,
                                contentReferences: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload? = nil,
                                contents: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload? = nil,
                                deployments: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload? = nil,
                                discussions: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload? = nil,
                                emails: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload? = nil,
                                environments: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload? = nil,
                                issues: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload? = nil,
                                keys: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload? = nil,
                                members: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload? = nil,
                                metadata: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload? = nil,
                                organizationAdministration: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload? = nil,
                                organizationHooks: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload? = nil,
                                organizationPackages: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload? = nil,
                                organizationPlan: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload? = nil,
                                organizationProjects: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload? = nil,
                                organizationSecrets: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload? = nil,
                                organizationSelfHostedRunners: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload? = nil,
                                organizationUserBlocking: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload? = nil,
                                packages: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload? = nil,
                                pages: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload? = nil,
                                pullRequests: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload? = nil,
                                repositoryHooks: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload? = nil,
                                repositoryProjects: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload? = nil,
                                secretScanningAlerts: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload? = nil,
                                secrets: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload? = nil,
                                securityEvents: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload? = nil,
                                securityScanningAlert: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload? = nil,
                                singleFile: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload? = nil,
                                statuses: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload? = nil,
                                teamDiscussions: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload? = nil,
                                vulnerabilityAlerts: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload? = nil,
                                workflows: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload? = nil
                            ) {
                                self.actions = actions
                                self.administration = administration
                                self.checks = checks
                                self.contentReferences = contentReferences
                                self.contents = contents
                                self.deployments = deployments
                                self.discussions = discussions
                                self.emails = emails
                                self.environments = environments
                                self.issues = issues
                                self.keys = keys
                                self.members = members
                                self.metadata = metadata
                                self.organizationAdministration = organizationAdministration
                                self.organizationHooks = organizationHooks
                                self.organizationPackages = organizationPackages
                                self.organizationPlan = organizationPlan
                                self.organizationProjects = organizationProjects
                                self.organizationSecrets = organizationSecrets
                                self.organizationSelfHostedRunners = organizationSelfHostedRunners
                                self.organizationUserBlocking = organizationUserBlocking
                                self.packages = packages
                                self.pages = pages
                                self.pullRequests = pullRequests
                                self.repositoryHooks = repositoryHooks
                                self.repositoryProjects = repositoryProjects
                                self.secretScanningAlerts = secretScanningAlerts
                                self.secrets = secrets
                                self.securityEvents = securityEvents
                                self.securityScanningAlert = securityScanningAlert
                                self.singleFile = singleFile
                                self.statuses = statuses
                                self.teamDiscussions = teamDiscussions
                                self.vulnerabilityAlerts = vulnerabilityAlerts
                                self.workflows = workflows
                            }
                            public enum CodingKeys: String, CodingKey {
                                case actions
                                case administration
                                case checks
                                case contentReferences = "content_references"
                                case contents
                                case deployments
                                case discussions
                                case emails
                                case environments
                                case issues
                                case keys
                                case members
                                case metadata
                                case organizationAdministration = "organization_administration"
                                case organizationHooks = "organization_hooks"
                                case organizationPackages = "organization_packages"
                                case organizationPlan = "organization_plan"
                                case organizationProjects = "organization_projects"
                                case organizationSecrets = "organization_secrets"
                                case organizationSelfHostedRunners = "organization_self_hosted_runners"
                                case organizationUserBlocking = "organization_user_blocking"
                                case packages
                                case pages
                                case pullRequests = "pull_requests"
                                case repositoryHooks = "repository_hooks"
                                case repositoryProjects = "repository_projects"
                                case secretScanningAlerts = "secret_scanning_alerts"
                                case secrets
                                case securityEvents = "security_events"
                                case securityScanningAlert = "security_scanning_alert"
                                case singleFile = "single_file"
                                case statuses
                                case teamDiscussions = "team_discussions"
                                case vulnerabilityAlerts = "vulnerability_alerts"
                                case workflows
                            }
                        }
                        /// The set of permissions for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/permissions`.
                        public var permissions: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload?
                        /// The slug name of the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/slug`.
                        public var slug: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app/updated_at`.
                        public var updatedAt: Foundation.Date?
                        /// Creates a new `PerformedViaGithubAppPayload`.
                        ///
                        /// - Parameters:
                        ///   - createdAt:
                        ///   - description:
                        ///   - events: The list of events for the GitHub app
                        ///   - externalUrl:
                        ///   - htmlUrl:
                        ///   - id: Unique identifier of the GitHub app
                        ///   - name: The name of the GitHub app
                        ///   - nodeId:
                        ///   - owner:
                        ///   - permissions: The set of permissions for the GitHub app
                        ///   - slug: The slug name of the GitHub app
                        ///   - updatedAt:
                        public init(
                            createdAt: Foundation.Date? = nil,
                            description: Swift.String? = nil,
                            events: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.EventsPayload? = nil,
                            externalUrl: Swift.String? = nil,
                            htmlUrl: Swift.String,
                            id: Swift.Int? = nil,
                            name: Swift.String,
                            nodeId: Swift.String,
                            owner: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload? = nil,
                            permissions: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload? = nil,
                            slug: Swift.String? = nil,
                            updatedAt: Foundation.Date? = nil
                        ) {
                            self.createdAt = createdAt
                            self.description = description
                            self.events = events
                            self.externalUrl = externalUrl
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.name = name
                            self.nodeId = nodeId
                            self.owner = owner
                            self.permissions = permissions
                            self.slug = slug
                            self.updatedAt = updatedAt
                        }
                        public enum CodingKeys: String, CodingKey {
                            case createdAt = "created_at"
                            case description
                            case events
                            case externalUrl = "external_url"
                            case htmlUrl = "html_url"
                            case id
                            case name
                            case nodeId = "node_id"
                            case owner
                            case permissions
                            case slug
                            case updatedAt = "updated_at"
                        }
                    }
                    /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/performed_via_github_app`.
                    public var performedViaGithubApp: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/pull_request`.
                    public struct PullRequestPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/pull_request/diff_url`.
                        public var diffUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/pull_request/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/pull_request/merged_at`.
                        public var mergedAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/pull_request/patch_url`.
                        public var patchUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/pull_request/url`.
                        public var url: Swift.String?
                        /// Creates a new `PullRequestPayload`.
                        ///
                        /// - Parameters:
                        ///   - diffUrl:
                        ///   - htmlUrl:
                        ///   - mergedAt:
                        ///   - patchUrl:
                        ///   - url:
                        public init(
                            diffUrl: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            mergedAt: Foundation.Date? = nil,
                            patchUrl: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.diffUrl = diffUrl
                            self.htmlUrl = htmlUrl
                            self.mergedAt = mergedAt
                            self.patchUrl = patchUrl
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case diffUrl = "diff_url"
                            case htmlUrl = "html_url"
                            case mergedAt = "merged_at"
                            case patchUrl = "patch_url"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/pull_request`.
                    public var pullRequest: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PullRequestPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/reactions`.
                    public struct ReactionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/reactions/+1`.
                        public var _plus_1: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/reactions/-1`.
                        public var _hyphen_1: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/reactions/confused`.
                        public var confused: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/reactions/eyes`.
                        public var eyes: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/reactions/heart`.
                        public var heart: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/reactions/hooray`.
                        public var hooray: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/reactions/laugh`.
                        public var laugh: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/reactions/rocket`.
                        public var rocket: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/reactions/total_count`.
                        public var totalCount: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/reactions/url`.
                        public var url: Swift.String
                        /// Creates a new `ReactionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - _plus_1:
                        ///   - _hyphen_1:
                        ///   - confused:
                        ///   - eyes:
                        ///   - heart:
                        ///   - hooray:
                        ///   - laugh:
                        ///   - rocket:
                        ///   - totalCount:
                        ///   - url:
                        public init(
                            _plus_1: Swift.Int,
                            _hyphen_1: Swift.Int,
                            confused: Swift.Int,
                            eyes: Swift.Int,
                            heart: Swift.Int,
                            hooray: Swift.Int,
                            laugh: Swift.Int,
                            rocket: Swift.Int,
                            totalCount: Swift.Int,
                            url: Swift.String
                        ) {
                            self._plus_1 = _plus_1
                            self._hyphen_1 = _hyphen_1
                            self.confused = confused
                            self.eyes = eyes
                            self.heart = heart
                            self.hooray = hooray
                            self.laugh = laugh
                            self.rocket = rocket
                            self.totalCount = totalCount
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _plus_1 = "+1"
                            case _hyphen_1 = "-1"
                            case confused
                            case eyes
                            case heart
                            case hooray
                            case laugh
                            case rocket
                            case totalCount = "total_count"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/reactions`.
                    public var reactions: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.ReactionsPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/repository_url`.
                    public var repositoryUrl: Swift.String
                    /// State of the issue; either 'open' or 'closed'
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/state`.
                    @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case closed = "closed"
                    }
                    /// State of the issue; either 'open' or 'closed'
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/state`.
                    public var state: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.StatePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/state_reason`.
                    public var stateReason: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/timeline_url`.
                    public var timelineUrl: Swift.String?
                    /// Title of the issue
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/title`.
                    public var title: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/updated_at`.
                    public var updatedAt: Foundation.Date
                    /// URL for the issue
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/url`.
                    public var url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/user`.
                    public struct UserPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/user/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/user/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/user/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/user/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/user/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/user/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/user/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/user/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/user/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/user/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/user/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/user/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/user/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/user/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/user/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/user/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/user/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/user/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/user/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/user/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/user/type`.
                        public var _type: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.UserPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/user/url`.
                        public var url: Swift.String?
                        /// Creates a new `UserPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.UserPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1/user`.
                    public var user: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.UserPayload?
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - activeLockReason:
                    ///   - assignee:
                    ///   - assignees:
                    ///   - authorAssociation: How the author is associated with the repository.
                    ///   - body: Contents of the issue
                    ///   - closedAt:
                    ///   - comments:
                    ///   - commentsUrl:
                    ///   - createdAt:
                    ///   - draft:
                    ///   - eventsUrl:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - labels:
                    ///   - labelsUrl:
                    ///   - locked:
                    ///   - milestone: A collection of related issues and pull requests.
                    ///   - nodeId:
                    ///   - number:
                    ///   - performedViaGithubApp: GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                    ///   - pullRequest:
                    ///   - reactions:
                    ///   - repositoryUrl:
                    ///   - state: State of the issue; either 'open' or 'closed'
                    ///   - stateReason:
                    ///   - timelineUrl:
                    ///   - title: Title of the issue
                    ///   - updatedAt:
                    ///   - url: URL for the issue
                    ///   - user:
                    public init(
                        activeLockReason: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.ActiveLockReasonPayload? = nil,
                        assignee: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.AssigneePayload? = nil,
                        assignees: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.AssigneesPayload,
                        authorAssociation: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.AuthorAssociationPayload,
                        body: Swift.String? = nil,
                        closedAt: Foundation.Date? = nil,
                        comments: Swift.Int,
                        commentsUrl: Swift.String,
                        createdAt: Foundation.Date,
                        draft: Swift.Bool? = nil,
                        eventsUrl: Swift.String,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        labels: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.LabelsPayload? = nil,
                        labelsUrl: Swift.String,
                        locked: Swift.Bool? = nil,
                        milestone: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.MilestonePayload? = nil,
                        nodeId: Swift.String,
                        number: Swift.Int,
                        performedViaGithubApp: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload? = nil,
                        pullRequest: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.PullRequestPayload? = nil,
                        reactions: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.ReactionsPayload,
                        repositoryUrl: Swift.String,
                        state: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.StatePayload? = nil,
                        stateReason: Swift.String? = nil,
                        timelineUrl: Swift.String? = nil,
                        title: Swift.String,
                        updatedAt: Foundation.Date,
                        url: Swift.String,
                        user: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload.UserPayload? = nil
                    ) {
                        self.activeLockReason = activeLockReason
                        self.assignee = assignee
                        self.assignees = assignees
                        self.authorAssociation = authorAssociation
                        self.body = body
                        self.closedAt = closedAt
                        self.comments = comments
                        self.commentsUrl = commentsUrl
                        self.createdAt = createdAt
                        self.draft = draft
                        self.eventsUrl = eventsUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.labels = labels
                        self.labelsUrl = labelsUrl
                        self.locked = locked
                        self.milestone = milestone
                        self.nodeId = nodeId
                        self.number = number
                        self.performedViaGithubApp = performedViaGithubApp
                        self.pullRequest = pullRequest
                        self.reactions = reactions
                        self.repositoryUrl = repositoryUrl
                        self.state = state
                        self.stateReason = stateReason
                        self.timelineUrl = timelineUrl
                        self.title = title
                        self.updatedAt = updatedAt
                        self.url = url
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case activeLockReason = "active_lock_reason"
                        case assignee
                        case assignees
                        case authorAssociation = "author_association"
                        case body
                        case closedAt = "closed_at"
                        case comments
                        case commentsUrl = "comments_url"
                        case createdAt = "created_at"
                        case draft
                        case eventsUrl = "events_url"
                        case htmlUrl = "html_url"
                        case id
                        case labels
                        case labelsUrl = "labels_url"
                        case locked
                        case milestone
                        case nodeId = "node_id"
                        case number
                        case performedViaGithubApp = "performed_via_github_app"
                        case pullRequest = "pull_request"
                        case reactions
                        case repositoryUrl = "repository_url"
                        case state
                        case stateReason = "state_reason"
                        case timelineUrl = "timeline_url"
                        case title
                        case updatedAt = "updated_at"
                        case url
                        case user
                    }
                }
                /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value1`.
                public var value1: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/active_lock_reason`.
                    public var activeLockReason: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/assignee`.
                    public var assignee: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/assignees`.
                    public var assignees: [OpenAPIRuntime.OpenAPIObjectContainer?]?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/author_association`.
                    public var authorAssociation: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/body`.
                    public var body: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/closed_at`.
                    public var closedAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/comments`.
                    public var comments: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/comments_url`.
                    public var commentsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/created_at`.
                    public var createdAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/id`.
                    public var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/labels`.
                    public var labels: [OpenAPIRuntime.OpenAPIObjectContainer?]?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/labels_url`.
                    public var labelsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/locked`.
                    public var locked: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/milestone`.
                    public var milestone: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/number`.
                    public var number: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/performed_via_github_app`.
                    public var performedViaGithubApp: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/reactions`.
                    public struct ReactionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/reactions/+1`.
                        public var _plus_1: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/reactions/-1`.
                        public var _hyphen_1: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/reactions/confused`.
                        public var confused: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/reactions/eyes`.
                        public var eyes: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/reactions/heart`.
                        public var heart: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/reactions/hooray`.
                        public var hooray: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/reactions/laugh`.
                        public var laugh: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/reactions/rocket`.
                        public var rocket: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/reactions/total_count`.
                        public var totalCount: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/reactions/url`.
                        public var url: Swift.String?
                        /// Creates a new `ReactionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - _plus_1:
                        ///   - _hyphen_1:
                        ///   - confused:
                        ///   - eyes:
                        ///   - heart:
                        ///   - hooray:
                        ///   - laugh:
                        ///   - rocket:
                        ///   - totalCount:
                        ///   - url:
                        public init(
                            _plus_1: Swift.Int? = nil,
                            _hyphen_1: Swift.Int? = nil,
                            confused: Swift.Int? = nil,
                            eyes: Swift.Int? = nil,
                            heart: Swift.Int? = nil,
                            hooray: Swift.Int? = nil,
                            laugh: Swift.Int? = nil,
                            rocket: Swift.Int? = nil,
                            totalCount: Swift.Int? = nil,
                            url: Swift.String? = nil
                        ) {
                            self._plus_1 = _plus_1
                            self._hyphen_1 = _hyphen_1
                            self.confused = confused
                            self.eyes = eyes
                            self.heart = heart
                            self.hooray = hooray
                            self.laugh = laugh
                            self.rocket = rocket
                            self.totalCount = totalCount
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _plus_1 = "+1"
                            case _hyphen_1 = "-1"
                            case confused
                            case eyes
                            case heart
                            case hooray
                            case laugh
                            case rocket
                            case totalCount = "total_count"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/reactions`.
                    public var reactions: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value2Payload.ReactionsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/repository_url`.
                    public var repositoryUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/state`.
                    @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case closed = "closed"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/state`.
                    public var state: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value2Payload.StatePayload
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/timeline_url`.
                    public var timelineUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/title`.
                    public var title: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/updated_at`.
                    public var updatedAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/url`.
                    public var url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/user`.
                    public struct UserPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/user/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/user/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/user/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/user/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/user/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/user/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/user/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/user/id`.
                        public var id: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/user/login`.
                        public var login: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/user/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/user/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/user/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/user/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/user/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/user/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/user/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/user/type`.
                        public var _type: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/user/url`.
                        public var url: Swift.String?
                        /// Creates a new `UserPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int? = nil,
                            login: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2/user`.
                    public var user: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value2Payload.UserPayload?
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - activeLockReason:
                    ///   - assignee:
                    ///   - assignees:
                    ///   - authorAssociation:
                    ///   - body:
                    ///   - closedAt:
                    ///   - comments:
                    ///   - commentsUrl:
                    ///   - createdAt:
                    ///   - eventsUrl:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - labels:
                    ///   - labelsUrl:
                    ///   - locked:
                    ///   - milestone:
                    ///   - nodeId:
                    ///   - number:
                    ///   - performedViaGithubApp:
                    ///   - reactions:
                    ///   - repositoryUrl:
                    ///   - state:
                    ///   - timelineUrl:
                    ///   - title:
                    ///   - updatedAt:
                    ///   - url:
                    ///   - user:
                    public init(
                        activeLockReason: Swift.String? = nil,
                        assignee: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                        assignees: [OpenAPIRuntime.OpenAPIObjectContainer?]? = nil,
                        authorAssociation: Swift.String? = nil,
                        body: Swift.String? = nil,
                        closedAt: Swift.String? = nil,
                        comments: Swift.Int? = nil,
                        commentsUrl: Swift.String? = nil,
                        createdAt: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int? = nil,
                        labels: [OpenAPIRuntime.OpenAPIObjectContainer?]? = nil,
                        labelsUrl: Swift.String? = nil,
                        locked: Swift.Bool? = nil,
                        milestone: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                        nodeId: Swift.String? = nil,
                        number: Swift.Int? = nil,
                        performedViaGithubApp: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                        reactions: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value2Payload.ReactionsPayload? = nil,
                        repositoryUrl: Swift.String? = nil,
                        state: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value2Payload.StatePayload,
                        timelineUrl: Swift.String? = nil,
                        title: Swift.String? = nil,
                        updatedAt: Swift.String? = nil,
                        url: Swift.String? = nil,
                        user: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value2Payload.UserPayload? = nil
                    ) {
                        self.activeLockReason = activeLockReason
                        self.assignee = assignee
                        self.assignees = assignees
                        self.authorAssociation = authorAssociation
                        self.body = body
                        self.closedAt = closedAt
                        self.comments = comments
                        self.commentsUrl = commentsUrl
                        self.createdAt = createdAt
                        self.eventsUrl = eventsUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.labels = labels
                        self.labelsUrl = labelsUrl
                        self.locked = locked
                        self.milestone = milestone
                        self.nodeId = nodeId
                        self.number = number
                        self.performedViaGithubApp = performedViaGithubApp
                        self.reactions = reactions
                        self.repositoryUrl = repositoryUrl
                        self.state = state
                        self.timelineUrl = timelineUrl
                        self.title = title
                        self.updatedAt = updatedAt
                        self.url = url
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case activeLockReason = "active_lock_reason"
                        case assignee
                        case assignees
                        case authorAssociation = "author_association"
                        case body
                        case closedAt = "closed_at"
                        case comments
                        case commentsUrl = "comments_url"
                        case createdAt = "created_at"
                        case eventsUrl = "events_url"
                        case htmlUrl = "html_url"
                        case id
                        case labels
                        case labelsUrl = "labels_url"
                        case locked
                        case milestone
                        case nodeId = "node_id"
                        case number
                        case performedViaGithubApp = "performed_via_github_app"
                        case reactions
                        case repositoryUrl = "repository_url"
                        case state
                        case timelineUrl = "timeline_url"
                        case title
                        case updatedAt = "updated_at"
                        case url
                        case user
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue/value2`.
                public var value2: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value2Payload
                /// Creates a new `IssuePayload`.
                ///
                /// - Parameters:
                ///   - value1: The [issue](https://docs.github.com/en/rest/reference/issues) itself.
                ///   - value2:
                public init(
                    value1: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value1Payload,
                    value2: Components.Schemas.WebhookIssuesOpened.IssuePayload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/issue`.
            public var issue: Components.Schemas.WebhookIssuesOpened.IssuePayload
            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-issues-opened/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Creates a new `WebhookIssuesOpened`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - changes:
            ///   - enterprise:
            ///   - installation:
            ///   - issue:
            ///   - organization:
            ///   - repository:
            ///   - sender:
            public init(
                action: Components.Schemas.WebhookIssuesOpened.ActionPayload,
                changes: Components.Schemas.WebhookIssuesOpened.ChangesPayload? = nil,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                issue: Components.Schemas.WebhookIssuesOpened.IssuePayload,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser
            ) {
                self.action = action
                self.changes = changes
                self.enterprise = enterprise
                self.installation = installation
                self.issue = issue
                self.organization = organization
                self.repository = repository
                self.sender = sender
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case changes
                case enterprise
                case installation
                case issue
                case organization
                case repository
                case sender
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned`.
        public struct WebhookIssuesPinned: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case pinned = "pinned"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/action`.
            public var action: Components.Schemas.WebhookIssuesPinned.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue`.
            public struct IssuePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/active_lock_reason`.
                @frozen public enum ActiveLockReasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case resolved = "resolved"
                    case offTopic = "off-topic"
                    case tooHeated = "too heated"
                    case spam = "spam"
                    case _empty_ = ""
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/active_lock_reason`.
                public var activeLockReason: Components.Schemas.WebhookIssuesPinned.IssuePayload.ActiveLockReasonPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/assignee`.
                public struct AssigneePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/assignee/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/assignee/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/assignee/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/assignee/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/assignee/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/assignee/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/assignee/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/assignee/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/assignee/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/assignee/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/assignee/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/assignee/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/assignee/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/assignee/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/assignee/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/assignee/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/assignee/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/assignee/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/assignee/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/assignee/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/assignee/type`.
                    public var _type: Components.Schemas.WebhookIssuesPinned.IssuePayload.AssigneePayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/assignee/url`.
                    public var url: Swift.String?
                    /// Creates a new `AssigneePayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookIssuesPinned.IssuePayload.AssigneePayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/assignee`.
                public var assignee: Components.Schemas.WebhookIssuesPinned.IssuePayload.AssigneePayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/AssigneesPayload`.
                public struct AssigneesPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/AssigneesPayload/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/AssigneesPayload/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/AssigneesPayload/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/AssigneesPayload/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/AssigneesPayload/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/AssigneesPayload/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/AssigneesPayload/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/AssigneesPayload/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/AssigneesPayload/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/AssigneesPayload/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/AssigneesPayload/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/AssigneesPayload/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/AssigneesPayload/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/AssigneesPayload/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/AssigneesPayload/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/AssigneesPayload/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/AssigneesPayload/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/AssigneesPayload/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/AssigneesPayload/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/AssigneesPayload/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/AssigneesPayload/type`.
                    public var _type: Components.Schemas.WebhookIssuesPinned.IssuePayload.AssigneesPayloadPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/AssigneesPayload/url`.
                    public var url: Swift.String?
                    /// Creates a new `AssigneesPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookIssuesPinned.IssuePayload.AssigneesPayloadPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/assignees`.
                public typealias AssigneesPayload = [Components.Schemas.WebhookIssuesPinned.IssuePayload.AssigneesPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/assignees`.
                public var assignees: Components.Schemas.WebhookIssuesPinned.IssuePayload.AssigneesPayload
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/author_association`.
                @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case collaborator = "COLLABORATOR"
                    case contributor = "CONTRIBUTOR"
                    case firstTimer = "FIRST_TIMER"
                    case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                    case mannequin = "MANNEQUIN"
                    case member = "MEMBER"
                    case none = "NONE"
                    case owner = "OWNER"
                }
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/author_association`.
                public var authorAssociation: Components.Schemas.WebhookIssuesPinned.IssuePayload.AuthorAssociationPayload
                /// Contents of the issue
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/body`.
                public var body: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/closed_at`.
                public var closedAt: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/comments`.
                public var comments: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/comments_url`.
                public var commentsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/created_at`.
                public var createdAt: Foundation.Date
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/draft`.
                public var draft: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/events_url`.
                public var eventsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/html_url`.
                public var htmlUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/LabelsPayload`.
                public struct LabelsPayloadPayload: Codable, Hashable, Sendable {
                    /// 6-character hex code, without the leading #, identifying the color
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/LabelsPayload/color`.
                    public var color: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/LabelsPayload/default`.
                    public var _default: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/LabelsPayload/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/LabelsPayload/id`.
                    public var id: Swift.Int
                    /// The name of the label.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/LabelsPayload/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/LabelsPayload/node_id`.
                    public var nodeId: Swift.String
                    /// URL for the label
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/LabelsPayload/url`.
                    public var url: Swift.String
                    /// Creates a new `LabelsPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - color: 6-character hex code, without the leading #, identifying the color
                    ///   - _default:
                    ///   - description:
                    ///   - id:
                    ///   - name: The name of the label.
                    ///   - nodeId:
                    ///   - url: URL for the label
                    public init(
                        color: Swift.String,
                        _default: Swift.Bool,
                        description: Swift.String? = nil,
                        id: Swift.Int,
                        name: Swift.String,
                        nodeId: Swift.String,
                        url: Swift.String
                    ) {
                        self.color = color
                        self._default = _default
                        self.description = description
                        self.id = id
                        self.name = name
                        self.nodeId = nodeId
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case color
                        case _default = "default"
                        case description
                        case id
                        case name
                        case nodeId = "node_id"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/labels`.
                public typealias LabelsPayload = [Components.Schemas.WebhookIssuesPinned.IssuePayload.LabelsPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/labels`.
                public var labels: Components.Schemas.WebhookIssuesPinned.IssuePayload.LabelsPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/labels_url`.
                public var labelsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/locked`.
                public var locked: Swift.Bool?
                /// A collection of related issues and pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone`.
                public struct MilestonePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/closed_at`.
                    public var closedAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/closed_issues`.
                    public var closedIssues: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/created_at`.
                    public var createdAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/creator`.
                    public struct CreatorPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/creator/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/creator/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/creator/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/creator/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/creator/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/creator/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/creator/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/creator/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/creator/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/creator/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/creator/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/creator/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/creator/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/creator/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/creator/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/creator/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/creator/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/creator/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/creator/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/creator/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/creator/type`.
                        public var _type: Components.Schemas.WebhookIssuesPinned.IssuePayload.MilestonePayload.CreatorPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/creator/url`.
                        public var url: Swift.String?
                        /// Creates a new `CreatorPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesPinned.IssuePayload.MilestonePayload.CreatorPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/creator`.
                    public var creator: Components.Schemas.WebhookIssuesPinned.IssuePayload.MilestonePayload.CreatorPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/due_on`.
                    public var dueOn: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/html_url`.
                    public var htmlUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/labels_url`.
                    public var labelsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/node_id`.
                    public var nodeId: Swift.String
                    /// The number of the milestone.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/number`.
                    public var number: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/open_issues`.
                    public var openIssues: Swift.Int
                    /// The state of the milestone.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/state`.
                    @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case closed = "closed"
                    }
                    /// The state of the milestone.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/state`.
                    public var state: Components.Schemas.WebhookIssuesPinned.IssuePayload.MilestonePayload.StatePayload
                    /// The title of the milestone.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/title`.
                    public var title: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/updated_at`.
                    public var updatedAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone/url`.
                    public var url: Swift.String
                    /// Creates a new `MilestonePayload`.
                    ///
                    /// - Parameters:
                    ///   - closedAt:
                    ///   - closedIssues:
                    ///   - createdAt:
                    ///   - creator:
                    ///   - description:
                    ///   - dueOn:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - labelsUrl:
                    ///   - nodeId:
                    ///   - number: The number of the milestone.
                    ///   - openIssues:
                    ///   - state: The state of the milestone.
                    ///   - title: The title of the milestone.
                    ///   - updatedAt:
                    ///   - url:
                    public init(
                        closedAt: Foundation.Date? = nil,
                        closedIssues: Swift.Int,
                        createdAt: Foundation.Date,
                        creator: Components.Schemas.WebhookIssuesPinned.IssuePayload.MilestonePayload.CreatorPayload? = nil,
                        description: Swift.String? = nil,
                        dueOn: Foundation.Date? = nil,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        labelsUrl: Swift.String,
                        nodeId: Swift.String,
                        number: Swift.Int,
                        openIssues: Swift.Int,
                        state: Components.Schemas.WebhookIssuesPinned.IssuePayload.MilestonePayload.StatePayload,
                        title: Swift.String,
                        updatedAt: Foundation.Date,
                        url: Swift.String
                    ) {
                        self.closedAt = closedAt
                        self.closedIssues = closedIssues
                        self.createdAt = createdAt
                        self.creator = creator
                        self.description = description
                        self.dueOn = dueOn
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.labelsUrl = labelsUrl
                        self.nodeId = nodeId
                        self.number = number
                        self.openIssues = openIssues
                        self.state = state
                        self.title = title
                        self.updatedAt = updatedAt
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case closedAt = "closed_at"
                        case closedIssues = "closed_issues"
                        case createdAt = "created_at"
                        case creator
                        case description
                        case dueOn = "due_on"
                        case htmlUrl = "html_url"
                        case id
                        case labelsUrl = "labels_url"
                        case nodeId = "node_id"
                        case number
                        case openIssues = "open_issues"
                        case state
                        case title
                        case updatedAt = "updated_at"
                        case url
                    }
                }
                /// A collection of related issues and pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/milestone`.
                public var milestone: Components.Schemas.WebhookIssuesPinned.IssuePayload.MilestonePayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/number`.
                public var number: Swift.Int
                /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app`.
                public struct PerformedViaGithubAppPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/created_at`.
                    public var createdAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/EventsPayload`.
                    @frozen public enum EventsPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case branchProtectionRule = "branch_protection_rule"
                        case checkRun = "check_run"
                        case checkSuite = "check_suite"
                        case codeScanningAlert = "code_scanning_alert"
                        case commitComment = "commit_comment"
                        case contentReference = "content_reference"
                        case create = "create"
                        case delete = "delete"
                        case deployment = "deployment"
                        case deploymentReview = "deployment_review"
                        case deploymentStatus = "deployment_status"
                        case deployKey = "deploy_key"
                        case discussion = "discussion"
                        case discussionComment = "discussion_comment"
                        case fork = "fork"
                        case gollum = "gollum"
                        case issues = "issues"
                        case issueComment = "issue_comment"
                        case label = "label"
                        case member = "member"
                        case membership = "membership"
                        case milestone = "milestone"
                        case organization = "organization"
                        case orgBlock = "org_block"
                        case pageBuild = "page_build"
                        case project = "project"
                        case projectCard = "project_card"
                        case projectColumn = "project_column"
                        case _public = "public"
                        case pullRequest = "pull_request"
                        case pullRequestReview = "pull_request_review"
                        case pullRequestReviewComment = "pull_request_review_comment"
                        case push = "push"
                        case registryPackage = "registry_package"
                        case release = "release"
                        case repository = "repository"
                        case repositoryDispatch = "repository_dispatch"
                        case secretScanningAlert = "secret_scanning_alert"
                        case star = "star"
                        case status = "status"
                        case team = "team"
                        case teamAdd = "team_add"
                        case watch = "watch"
                        case workflowDispatch = "workflow_dispatch"
                        case workflowRun = "workflow_run"
                    }
                    /// The list of events for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/events`.
                    public typealias EventsPayload = [Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.EventsPayloadPayload]
                    /// The list of events for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/events`.
                    public var events: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.EventsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/external_url`.
                    public var externalUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/html_url`.
                    public var htmlUrl: Swift.String
                    /// Unique identifier of the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/id`.
                    public var id: Swift.Int?
                    /// The name of the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/owner`.
                    public struct OwnerPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/owner/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/owner/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/owner/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/owner/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/owner/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/owner/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/owner/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/owner/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/owner/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/owner/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/owner/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/owner/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/owner/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/owner/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/owner/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/owner/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/owner/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/owner/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/owner/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/owner/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/owner/type`.
                        public var _type: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/owner/url`.
                        public var url: Swift.String?
                        /// Creates a new `OwnerPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/owner`.
                    public var owner: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.OwnerPayload?
                    /// The set of permissions for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions`.
                    public struct PermissionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/actions`.
                        @frozen public enum ActionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/actions`.
                        public var actions: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/administration`.
                        @frozen public enum AdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/administration`.
                        public var administration: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/checks`.
                        @frozen public enum ChecksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/checks`.
                        public var checks: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/content_references`.
                        @frozen public enum ContentReferencesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/content_references`.
                        public var contentReferences: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/contents`.
                        @frozen public enum ContentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/contents`.
                        public var contents: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/deployments`.
                        @frozen public enum DeploymentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/deployments`.
                        public var deployments: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/discussions`.
                        @frozen public enum DiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/discussions`.
                        public var discussions: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/emails`.
                        @frozen public enum EmailsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/emails`.
                        public var emails: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/environments`.
                        @frozen public enum EnvironmentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/environments`.
                        public var environments: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/issues`.
                        @frozen public enum IssuesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/issues`.
                        public var issues: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/keys`.
                        @frozen public enum KeysPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/keys`.
                        public var keys: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/members`.
                        @frozen public enum MembersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/members`.
                        public var members: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/metadata`.
                        @frozen public enum MetadataPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/metadata`.
                        public var metadata: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/organization_administration`.
                        @frozen public enum OrganizationAdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/organization_administration`.
                        public var organizationAdministration: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/organization_hooks`.
                        @frozen public enum OrganizationHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/organization_hooks`.
                        public var organizationHooks: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/organization_packages`.
                        @frozen public enum OrganizationPackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/organization_packages`.
                        public var organizationPackages: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/organization_plan`.
                        @frozen public enum OrganizationPlanPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/organization_plan`.
                        public var organizationPlan: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/organization_projects`.
                        @frozen public enum OrganizationProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/organization_projects`.
                        public var organizationProjects: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/organization_secrets`.
                        @frozen public enum OrganizationSecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/organization_secrets`.
                        public var organizationSecrets: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/organization_self_hosted_runners`.
                        @frozen public enum OrganizationSelfHostedRunnersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/organization_self_hosted_runners`.
                        public var organizationSelfHostedRunners: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/organization_user_blocking`.
                        @frozen public enum OrganizationUserBlockingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/organization_user_blocking`.
                        public var organizationUserBlocking: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/packages`.
                        @frozen public enum PackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/packages`.
                        public var packages: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/pages`.
                        @frozen public enum PagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/pages`.
                        public var pages: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/pull_requests`.
                        @frozen public enum PullRequestsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/pull_requests`.
                        public var pullRequests: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/repository_hooks`.
                        @frozen public enum RepositoryHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/repository_hooks`.
                        public var repositoryHooks: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/repository_projects`.
                        @frozen public enum RepositoryProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/repository_projects`.
                        public var repositoryProjects: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/secret_scanning_alerts`.
                        @frozen public enum SecretScanningAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/secret_scanning_alerts`.
                        public var secretScanningAlerts: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/secrets`.
                        @frozen public enum SecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/secrets`.
                        public var secrets: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/security_events`.
                        @frozen public enum SecurityEventsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/security_events`.
                        public var securityEvents: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/security_scanning_alert`.
                        @frozen public enum SecurityScanningAlertPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/security_scanning_alert`.
                        public var securityScanningAlert: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/single_file`.
                        @frozen public enum SingleFilePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/single_file`.
                        public var singleFile: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/statuses`.
                        @frozen public enum StatusesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/statuses`.
                        public var statuses: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/team_discussions`.
                        @frozen public enum TeamDiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/team_discussions`.
                        public var teamDiscussions: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/vulnerability_alerts`.
                        @frozen public enum VulnerabilityAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/vulnerability_alerts`.
                        public var vulnerabilityAlerts: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/workflows`.
                        @frozen public enum WorkflowsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions/workflows`.
                        public var workflows: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload?
                        /// Creates a new `PermissionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - actions:
                        ///   - administration:
                        ///   - checks:
                        ///   - contentReferences:
                        ///   - contents:
                        ///   - deployments:
                        ///   - discussions:
                        ///   - emails:
                        ///   - environments:
                        ///   - issues:
                        ///   - keys:
                        ///   - members:
                        ///   - metadata:
                        ///   - organizationAdministration:
                        ///   - organizationHooks:
                        ///   - organizationPackages:
                        ///   - organizationPlan:
                        ///   - organizationProjects:
                        ///   - organizationSecrets:
                        ///   - organizationSelfHostedRunners:
                        ///   - organizationUserBlocking:
                        ///   - packages:
                        ///   - pages:
                        ///   - pullRequests:
                        ///   - repositoryHooks:
                        ///   - repositoryProjects:
                        ///   - secretScanningAlerts:
                        ///   - secrets:
                        ///   - securityEvents:
                        ///   - securityScanningAlert:
                        ///   - singleFile:
                        ///   - statuses:
                        ///   - teamDiscussions:
                        ///   - vulnerabilityAlerts:
                        ///   - workflows:
                        public init(
                            actions: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload? = nil,
                            administration: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload? = nil,
                            checks: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload? = nil,
                            contentReferences: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload? = nil,
                            contents: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload? = nil,
                            deployments: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload? = nil,
                            discussions: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload? = nil,
                            emails: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload? = nil,
                            environments: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload? = nil,
                            issues: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload? = nil,
                            keys: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload? = nil,
                            members: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload? = nil,
                            metadata: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload? = nil,
                            organizationAdministration: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload? = nil,
                            organizationHooks: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload? = nil,
                            organizationPackages: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload? = nil,
                            organizationPlan: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload? = nil,
                            organizationProjects: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload? = nil,
                            organizationSecrets: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload? = nil,
                            organizationSelfHostedRunners: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload? = nil,
                            organizationUserBlocking: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload? = nil,
                            packages: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload? = nil,
                            pages: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload? = nil,
                            pullRequests: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload? = nil,
                            repositoryHooks: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload? = nil,
                            repositoryProjects: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload? = nil,
                            secretScanningAlerts: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload? = nil,
                            secrets: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload? = nil,
                            securityEvents: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload? = nil,
                            securityScanningAlert: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload? = nil,
                            singleFile: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload? = nil,
                            statuses: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload? = nil,
                            teamDiscussions: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload? = nil,
                            vulnerabilityAlerts: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload? = nil,
                            workflows: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload? = nil
                        ) {
                            self.actions = actions
                            self.administration = administration
                            self.checks = checks
                            self.contentReferences = contentReferences
                            self.contents = contents
                            self.deployments = deployments
                            self.discussions = discussions
                            self.emails = emails
                            self.environments = environments
                            self.issues = issues
                            self.keys = keys
                            self.members = members
                            self.metadata = metadata
                            self.organizationAdministration = organizationAdministration
                            self.organizationHooks = organizationHooks
                            self.organizationPackages = organizationPackages
                            self.organizationPlan = organizationPlan
                            self.organizationProjects = organizationProjects
                            self.organizationSecrets = organizationSecrets
                            self.organizationSelfHostedRunners = organizationSelfHostedRunners
                            self.organizationUserBlocking = organizationUserBlocking
                            self.packages = packages
                            self.pages = pages
                            self.pullRequests = pullRequests
                            self.repositoryHooks = repositoryHooks
                            self.repositoryProjects = repositoryProjects
                            self.secretScanningAlerts = secretScanningAlerts
                            self.secrets = secrets
                            self.securityEvents = securityEvents
                            self.securityScanningAlert = securityScanningAlert
                            self.singleFile = singleFile
                            self.statuses = statuses
                            self.teamDiscussions = teamDiscussions
                            self.vulnerabilityAlerts = vulnerabilityAlerts
                            self.workflows = workflows
                        }
                        public enum CodingKeys: String, CodingKey {
                            case actions
                            case administration
                            case checks
                            case contentReferences = "content_references"
                            case contents
                            case deployments
                            case discussions
                            case emails
                            case environments
                            case issues
                            case keys
                            case members
                            case metadata
                            case organizationAdministration = "organization_administration"
                            case organizationHooks = "organization_hooks"
                            case organizationPackages = "organization_packages"
                            case organizationPlan = "organization_plan"
                            case organizationProjects = "organization_projects"
                            case organizationSecrets = "organization_secrets"
                            case organizationSelfHostedRunners = "organization_self_hosted_runners"
                            case organizationUserBlocking = "organization_user_blocking"
                            case packages
                            case pages
                            case pullRequests = "pull_requests"
                            case repositoryHooks = "repository_hooks"
                            case repositoryProjects = "repository_projects"
                            case secretScanningAlerts = "secret_scanning_alerts"
                            case secrets
                            case securityEvents = "security_events"
                            case securityScanningAlert = "security_scanning_alert"
                            case singleFile = "single_file"
                            case statuses
                            case teamDiscussions = "team_discussions"
                            case vulnerabilityAlerts = "vulnerability_alerts"
                            case workflows
                        }
                    }
                    /// The set of permissions for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/permissions`.
                    public var permissions: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload?
                    /// The slug name of the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/slug`.
                    public var slug: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app/updated_at`.
                    public var updatedAt: Foundation.Date?
                    /// Creates a new `PerformedViaGithubAppPayload`.
                    ///
                    /// - Parameters:
                    ///   - createdAt:
                    ///   - description:
                    ///   - events: The list of events for the GitHub app
                    ///   - externalUrl:
                    ///   - htmlUrl:
                    ///   - id: Unique identifier of the GitHub app
                    ///   - name: The name of the GitHub app
                    ///   - nodeId:
                    ///   - owner:
                    ///   - permissions: The set of permissions for the GitHub app
                    ///   - slug: The slug name of the GitHub app
                    ///   - updatedAt:
                    public init(
                        createdAt: Foundation.Date? = nil,
                        description: Swift.String? = nil,
                        events: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.EventsPayload? = nil,
                        externalUrl: Swift.String? = nil,
                        htmlUrl: Swift.String,
                        id: Swift.Int? = nil,
                        name: Swift.String,
                        nodeId: Swift.String,
                        owner: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.OwnerPayload? = nil,
                        permissions: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload? = nil,
                        slug: Swift.String? = nil,
                        updatedAt: Foundation.Date? = nil
                    ) {
                        self.createdAt = createdAt
                        self.description = description
                        self.events = events
                        self.externalUrl = externalUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.name = name
                        self.nodeId = nodeId
                        self.owner = owner
                        self.permissions = permissions
                        self.slug = slug
                        self.updatedAt = updatedAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case createdAt = "created_at"
                        case description
                        case events
                        case externalUrl = "external_url"
                        case htmlUrl = "html_url"
                        case id
                        case name
                        case nodeId = "node_id"
                        case owner
                        case permissions
                        case slug
                        case updatedAt = "updated_at"
                    }
                }
                /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/performed_via_github_app`.
                public var performedViaGithubApp: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/pull_request`.
                public struct PullRequestPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/pull_request/diff_url`.
                    public var diffUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/pull_request/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/pull_request/merged_at`.
                    public var mergedAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/pull_request/patch_url`.
                    public var patchUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/pull_request/url`.
                    public var url: Swift.String?
                    /// Creates a new `PullRequestPayload`.
                    ///
                    /// - Parameters:
                    ///   - diffUrl:
                    ///   - htmlUrl:
                    ///   - mergedAt:
                    ///   - patchUrl:
                    ///   - url:
                    public init(
                        diffUrl: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        mergedAt: Foundation.Date? = nil,
                        patchUrl: Swift.String? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.diffUrl = diffUrl
                        self.htmlUrl = htmlUrl
                        self.mergedAt = mergedAt
                        self.patchUrl = patchUrl
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case diffUrl = "diff_url"
                        case htmlUrl = "html_url"
                        case mergedAt = "merged_at"
                        case patchUrl = "patch_url"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/pull_request`.
                public var pullRequest: Components.Schemas.WebhookIssuesPinned.IssuePayload.PullRequestPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/reactions`.
                public struct ReactionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/reactions/+1`.
                    public var _plus_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/reactions/-1`.
                    public var _hyphen_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/reactions/confused`.
                    public var confused: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/reactions/eyes`.
                    public var eyes: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/reactions/heart`.
                    public var heart: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/reactions/hooray`.
                    public var hooray: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/reactions/laugh`.
                    public var laugh: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/reactions/rocket`.
                    public var rocket: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/reactions/total_count`.
                    public var totalCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/reactions/url`.
                    public var url: Swift.String
                    /// Creates a new `ReactionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - _plus_1:
                    ///   - _hyphen_1:
                    ///   - confused:
                    ///   - eyes:
                    ///   - heart:
                    ///   - hooray:
                    ///   - laugh:
                    ///   - rocket:
                    ///   - totalCount:
                    ///   - url:
                    public init(
                        _plus_1: Swift.Int,
                        _hyphen_1: Swift.Int,
                        confused: Swift.Int,
                        eyes: Swift.Int,
                        heart: Swift.Int,
                        hooray: Swift.Int,
                        laugh: Swift.Int,
                        rocket: Swift.Int,
                        totalCount: Swift.Int,
                        url: Swift.String
                    ) {
                        self._plus_1 = _plus_1
                        self._hyphen_1 = _hyphen_1
                        self.confused = confused
                        self.eyes = eyes
                        self.heart = heart
                        self.hooray = hooray
                        self.laugh = laugh
                        self.rocket = rocket
                        self.totalCount = totalCount
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _plus_1 = "+1"
                        case _hyphen_1 = "-1"
                        case confused
                        case eyes
                        case heart
                        case hooray
                        case laugh
                        case rocket
                        case totalCount = "total_count"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/reactions`.
                public var reactions: Components.Schemas.WebhookIssuesPinned.IssuePayload.ReactionsPayload
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/repository_url`.
                public var repositoryUrl: Swift.String
                /// State of the issue; either 'open' or 'closed'
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/state`.
                @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case open = "open"
                    case closed = "closed"
                }
                /// State of the issue; either 'open' or 'closed'
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/state`.
                public var state: Components.Schemas.WebhookIssuesPinned.IssuePayload.StatePayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/state_reason`.
                public var stateReason: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/timeline_url`.
                public var timelineUrl: Swift.String?
                /// Title of the issue
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/title`.
                public var title: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/updated_at`.
                public var updatedAt: Foundation.Date
                /// URL for the issue
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/user`.
                public struct UserPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/user/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/user/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/user/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/user/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/user/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/user/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/user/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/user/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/user/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/user/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/user/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/user/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/user/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/user/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/user/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/user/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/user/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/user/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/user/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/user/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/user/type`.
                    public var _type: Components.Schemas.WebhookIssuesPinned.IssuePayload.UserPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/user/url`.
                    public var url: Swift.String?
                    /// Creates a new `UserPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookIssuesPinned.IssuePayload.UserPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue/user`.
                public var user: Components.Schemas.WebhookIssuesPinned.IssuePayload.UserPayload?
                /// Creates a new `IssuePayload`.
                ///
                /// - Parameters:
                ///   - activeLockReason:
                ///   - assignee:
                ///   - assignees:
                ///   - authorAssociation: How the author is associated with the repository.
                ///   - body: Contents of the issue
                ///   - closedAt:
                ///   - comments:
                ///   - commentsUrl:
                ///   - createdAt:
                ///   - draft:
                ///   - eventsUrl:
                ///   - htmlUrl:
                ///   - id:
                ///   - labels:
                ///   - labelsUrl:
                ///   - locked:
                ///   - milestone: A collection of related issues and pull requests.
                ///   - nodeId:
                ///   - number:
                ///   - performedViaGithubApp: GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                ///   - pullRequest:
                ///   - reactions:
                ///   - repositoryUrl:
                ///   - state: State of the issue; either 'open' or 'closed'
                ///   - stateReason:
                ///   - timelineUrl:
                ///   - title: Title of the issue
                ///   - updatedAt:
                ///   - url: URL for the issue
                ///   - user:
                public init(
                    activeLockReason: Components.Schemas.WebhookIssuesPinned.IssuePayload.ActiveLockReasonPayload? = nil,
                    assignee: Components.Schemas.WebhookIssuesPinned.IssuePayload.AssigneePayload? = nil,
                    assignees: Components.Schemas.WebhookIssuesPinned.IssuePayload.AssigneesPayload,
                    authorAssociation: Components.Schemas.WebhookIssuesPinned.IssuePayload.AuthorAssociationPayload,
                    body: Swift.String? = nil,
                    closedAt: Foundation.Date? = nil,
                    comments: Swift.Int,
                    commentsUrl: Swift.String,
                    createdAt: Foundation.Date,
                    draft: Swift.Bool? = nil,
                    eventsUrl: Swift.String,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    labels: Components.Schemas.WebhookIssuesPinned.IssuePayload.LabelsPayload? = nil,
                    labelsUrl: Swift.String,
                    locked: Swift.Bool? = nil,
                    milestone: Components.Schemas.WebhookIssuesPinned.IssuePayload.MilestonePayload? = nil,
                    nodeId: Swift.String,
                    number: Swift.Int,
                    performedViaGithubApp: Components.Schemas.WebhookIssuesPinned.IssuePayload.PerformedViaGithubAppPayload? = nil,
                    pullRequest: Components.Schemas.WebhookIssuesPinned.IssuePayload.PullRequestPayload? = nil,
                    reactions: Components.Schemas.WebhookIssuesPinned.IssuePayload.ReactionsPayload,
                    repositoryUrl: Swift.String,
                    state: Components.Schemas.WebhookIssuesPinned.IssuePayload.StatePayload? = nil,
                    stateReason: Swift.String? = nil,
                    timelineUrl: Swift.String? = nil,
                    title: Swift.String,
                    updatedAt: Foundation.Date,
                    url: Swift.String,
                    user: Components.Schemas.WebhookIssuesPinned.IssuePayload.UserPayload? = nil
                ) {
                    self.activeLockReason = activeLockReason
                    self.assignee = assignee
                    self.assignees = assignees
                    self.authorAssociation = authorAssociation
                    self.body = body
                    self.closedAt = closedAt
                    self.comments = comments
                    self.commentsUrl = commentsUrl
                    self.createdAt = createdAt
                    self.draft = draft
                    self.eventsUrl = eventsUrl
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.labels = labels
                    self.labelsUrl = labelsUrl
                    self.locked = locked
                    self.milestone = milestone
                    self.nodeId = nodeId
                    self.number = number
                    self.performedViaGithubApp = performedViaGithubApp
                    self.pullRequest = pullRequest
                    self.reactions = reactions
                    self.repositoryUrl = repositoryUrl
                    self.state = state
                    self.stateReason = stateReason
                    self.timelineUrl = timelineUrl
                    self.title = title
                    self.updatedAt = updatedAt
                    self.url = url
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case activeLockReason = "active_lock_reason"
                    case assignee
                    case assignees
                    case authorAssociation = "author_association"
                    case body
                    case closedAt = "closed_at"
                    case comments
                    case commentsUrl = "comments_url"
                    case createdAt = "created_at"
                    case draft
                    case eventsUrl = "events_url"
                    case htmlUrl = "html_url"
                    case id
                    case labels
                    case labelsUrl = "labels_url"
                    case locked
                    case milestone
                    case nodeId = "node_id"
                    case number
                    case performedViaGithubApp = "performed_via_github_app"
                    case pullRequest = "pull_request"
                    case reactions
                    case repositoryUrl = "repository_url"
                    case state
                    case stateReason = "state_reason"
                    case timelineUrl = "timeline_url"
                    case title
                    case updatedAt = "updated_at"
                    case url
                    case user
                }
            }
            /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/issue`.
            public var issue: Components.Schemas.WebhookIssuesPinned.IssuePayload
            /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-issues-pinned/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Creates a new `WebhookIssuesPinned`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - enterprise:
            ///   - installation:
            ///   - issue: The [issue](https://docs.github.com/en/rest/reference/issues) itself.
            ///   - organization:
            ///   - repository:
            ///   - sender:
            public init(
                action: Components.Schemas.WebhookIssuesPinned.ActionPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                issue: Components.Schemas.WebhookIssuesPinned.IssuePayload,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser
            ) {
                self.action = action
                self.enterprise = enterprise
                self.installation = installation
                self.issue = issue
                self.organization = organization
                self.repository = repository
                self.sender = sender
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case enterprise
                case installation
                case issue
                case organization
                case repository
                case sender
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened`.
        public struct WebhookIssuesReopened: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case reopened = "reopened"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/action`.
            public var action: Components.Schemas.WebhookIssuesReopened.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue`.
            public struct IssuePayload: Codable, Hashable, Sendable {
                /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/active_lock_reason`.
                    @frozen public enum ActiveLockReasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case resolved = "resolved"
                        case offTopic = "off-topic"
                        case tooHeated = "too heated"
                        case spam = "spam"
                        case _empty_ = ""
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/active_lock_reason`.
                    public var activeLockReason: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.ActiveLockReasonPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/assignee`.
                    public struct AssigneePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/assignee/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/assignee/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/assignee/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/assignee/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/assignee/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/assignee/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/assignee/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/assignee/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/assignee/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/assignee/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/assignee/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/assignee/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/assignee/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/assignee/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/assignee/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/assignee/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/assignee/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/assignee/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/assignee/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/assignee/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/assignee/type`.
                        public var _type: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.AssigneePayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/assignee/url`.
                        public var url: Swift.String?
                        /// Creates a new `AssigneePayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.AssigneePayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/assignee`.
                    public var assignee: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.AssigneePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/AssigneesPayload`.
                    public struct AssigneesPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/AssigneesPayload/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/AssigneesPayload/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/AssigneesPayload/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/AssigneesPayload/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/AssigneesPayload/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/AssigneesPayload/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/AssigneesPayload/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/AssigneesPayload/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/AssigneesPayload/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/AssigneesPayload/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/AssigneesPayload/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/AssigneesPayload/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/AssigneesPayload/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/AssigneesPayload/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/AssigneesPayload/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/AssigneesPayload/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/AssigneesPayload/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/AssigneesPayload/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/AssigneesPayload/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/AssigneesPayload/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                            case mannequin = "Mannequin"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/AssigneesPayload/type`.
                        public var _type: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.AssigneesPayloadPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/AssigneesPayload/url`.
                        public var url: Swift.String?
                        /// Creates a new `AssigneesPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.AssigneesPayloadPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/assignees`.
                    public typealias AssigneesPayload = [Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.AssigneesPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/assignees`.
                    public var assignees: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.AssigneesPayload
                    /// How the author is associated with the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/author_association`.
                    @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case collaborator = "COLLABORATOR"
                        case contributor = "CONTRIBUTOR"
                        case firstTimer = "FIRST_TIMER"
                        case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                        case mannequin = "MANNEQUIN"
                        case member = "MEMBER"
                        case none = "NONE"
                        case owner = "OWNER"
                    }
                    /// How the author is associated with the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/author_association`.
                    public var authorAssociation: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.AuthorAssociationPayload
                    /// Contents of the issue
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/body`.
                    public var body: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/closed_at`.
                    public var closedAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/comments`.
                    public var comments: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/comments_url`.
                    public var commentsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/created_at`.
                    public var createdAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/draft`.
                    public var draft: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/events_url`.
                    public var eventsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/html_url`.
                    public var htmlUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/LabelsPayload`.
                    public struct LabelsPayloadPayload: Codable, Hashable, Sendable {
                        /// 6-character hex code, without the leading #, identifying the color
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/LabelsPayload/color`.
                        public var color: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/LabelsPayload/default`.
                        public var _default: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/LabelsPayload/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/LabelsPayload/id`.
                        public var id: Swift.Int
                        /// The name of the label.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/LabelsPayload/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/LabelsPayload/node_id`.
                        public var nodeId: Swift.String
                        /// URL for the label
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/LabelsPayload/url`.
                        public var url: Swift.String
                        /// Creates a new `LabelsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - color: 6-character hex code, without the leading #, identifying the color
                        ///   - _default:
                        ///   - description:
                        ///   - id:
                        ///   - name: The name of the label.
                        ///   - nodeId:
                        ///   - url: URL for the label
                        public init(
                            color: Swift.String,
                            _default: Swift.Bool,
                            description: Swift.String? = nil,
                            id: Swift.Int,
                            name: Swift.String,
                            nodeId: Swift.String,
                            url: Swift.String
                        ) {
                            self.color = color
                            self._default = _default
                            self.description = description
                            self.id = id
                            self.name = name
                            self.nodeId = nodeId
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case color
                            case _default = "default"
                            case description
                            case id
                            case name
                            case nodeId = "node_id"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/labels`.
                    public typealias LabelsPayload = [Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.LabelsPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/labels`.
                    public var labels: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.LabelsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/labels_url`.
                    public var labelsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/locked`.
                    public var locked: Swift.Bool?
                    /// A collection of related issues and pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone`.
                    public struct MilestonePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/closed_at`.
                        public var closedAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/closed_issues`.
                        public var closedIssues: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/created_at`.
                        public var createdAt: Foundation.Date
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/creator`.
                        public struct CreatorPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/creator/avatar_url`.
                            public var avatarUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/creator/deleted`.
                            public var deleted: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/creator/email`.
                            public var email: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/creator/events_url`.
                            public var eventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/creator/followers_url`.
                            public var followersUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/creator/following_url`.
                            public var followingUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/creator/gists_url`.
                            public var gistsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/creator/gravatar_id`.
                            public var gravatarId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/creator/html_url`.
                            public var htmlUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/creator/id`.
                            public var id: Swift.Int
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/creator/login`.
                            public var login: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/creator/name`.
                            public var name: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/creator/node_id`.
                            public var nodeId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/creator/organizations_url`.
                            public var organizationsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/creator/received_events_url`.
                            public var receivedEventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/creator/repos_url`.
                            public var reposUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/creator/site_admin`.
                            public var siteAdmin: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/creator/starred_url`.
                            public var starredUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/creator/subscriptions_url`.
                            public var subscriptionsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/creator/type`.
                            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case bot = "Bot"
                                case user = "User"
                                case organization = "Organization"
                                case mannequin = "Mannequin"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/creator/type`.
                            public var _type: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload._TypePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/creator/url`.
                            public var url: Swift.String?
                            /// Creates a new `CreatorPayload`.
                            ///
                            /// - Parameters:
                            ///   - avatarUrl:
                            ///   - deleted:
                            ///   - email:
                            ///   - eventsUrl:
                            ///   - followersUrl:
                            ///   - followingUrl:
                            ///   - gistsUrl:
                            ///   - gravatarId:
                            ///   - htmlUrl:
                            ///   - id:
                            ///   - login:
                            ///   - name:
                            ///   - nodeId:
                            ///   - organizationsUrl:
                            ///   - receivedEventsUrl:
                            ///   - reposUrl:
                            ///   - siteAdmin:
                            ///   - starredUrl:
                            ///   - subscriptionsUrl:
                            ///   - _type:
                            ///   - url:
                            public init(
                                avatarUrl: Swift.String? = nil,
                                deleted: Swift.Bool? = nil,
                                email: Swift.String? = nil,
                                eventsUrl: Swift.String? = nil,
                                followersUrl: Swift.String? = nil,
                                followingUrl: Swift.String? = nil,
                                gistsUrl: Swift.String? = nil,
                                gravatarId: Swift.String? = nil,
                                htmlUrl: Swift.String? = nil,
                                id: Swift.Int,
                                login: Swift.String,
                                name: Swift.String? = nil,
                                nodeId: Swift.String? = nil,
                                organizationsUrl: Swift.String? = nil,
                                receivedEventsUrl: Swift.String? = nil,
                                reposUrl: Swift.String? = nil,
                                siteAdmin: Swift.Bool? = nil,
                                starredUrl: Swift.String? = nil,
                                subscriptionsUrl: Swift.String? = nil,
                                _type: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload._TypePayload? = nil,
                                url: Swift.String? = nil
                            ) {
                                self.avatarUrl = avatarUrl
                                self.deleted = deleted
                                self.email = email
                                self.eventsUrl = eventsUrl
                                self.followersUrl = followersUrl
                                self.followingUrl = followingUrl
                                self.gistsUrl = gistsUrl
                                self.gravatarId = gravatarId
                                self.htmlUrl = htmlUrl
                                self.id = id
                                self.login = login
                                self.name = name
                                self.nodeId = nodeId
                                self.organizationsUrl = organizationsUrl
                                self.receivedEventsUrl = receivedEventsUrl
                                self.reposUrl = reposUrl
                                self.siteAdmin = siteAdmin
                                self.starredUrl = starredUrl
                                self.subscriptionsUrl = subscriptionsUrl
                                self._type = _type
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case avatarUrl = "avatar_url"
                                case deleted
                                case email
                                case eventsUrl = "events_url"
                                case followersUrl = "followers_url"
                                case followingUrl = "following_url"
                                case gistsUrl = "gists_url"
                                case gravatarId = "gravatar_id"
                                case htmlUrl = "html_url"
                                case id
                                case login
                                case name
                                case nodeId = "node_id"
                                case organizationsUrl = "organizations_url"
                                case receivedEventsUrl = "received_events_url"
                                case reposUrl = "repos_url"
                                case siteAdmin = "site_admin"
                                case starredUrl = "starred_url"
                                case subscriptionsUrl = "subscriptions_url"
                                case _type = "type"
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/creator`.
                        public var creator: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/due_on`.
                        public var dueOn: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/html_url`.
                        public var htmlUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/labels_url`.
                        public var labelsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/node_id`.
                        public var nodeId: Swift.String
                        /// The number of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/number`.
                        public var number: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/open_issues`.
                        public var openIssues: Swift.Int
                        /// The state of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/state`.
                        @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case open = "open"
                            case closed = "closed"
                        }
                        /// The state of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/state`.
                        public var state: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.MilestonePayload.StatePayload
                        /// The title of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/title`.
                        public var title: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/updated_at`.
                        public var updatedAt: Foundation.Date
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone/url`.
                        public var url: Swift.String
                        /// Creates a new `MilestonePayload`.
                        ///
                        /// - Parameters:
                        ///   - closedAt:
                        ///   - closedIssues:
                        ///   - createdAt:
                        ///   - creator:
                        ///   - description:
                        ///   - dueOn:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - labelsUrl:
                        ///   - nodeId:
                        ///   - number: The number of the milestone.
                        ///   - openIssues:
                        ///   - state: The state of the milestone.
                        ///   - title: The title of the milestone.
                        ///   - updatedAt:
                        ///   - url:
                        public init(
                            closedAt: Foundation.Date? = nil,
                            closedIssues: Swift.Int,
                            createdAt: Foundation.Date,
                            creator: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload? = nil,
                            description: Swift.String? = nil,
                            dueOn: Foundation.Date? = nil,
                            htmlUrl: Swift.String,
                            id: Swift.Int,
                            labelsUrl: Swift.String,
                            nodeId: Swift.String,
                            number: Swift.Int,
                            openIssues: Swift.Int,
                            state: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.MilestonePayload.StatePayload,
                            title: Swift.String,
                            updatedAt: Foundation.Date,
                            url: Swift.String
                        ) {
                            self.closedAt = closedAt
                            self.closedIssues = closedIssues
                            self.createdAt = createdAt
                            self.creator = creator
                            self.description = description
                            self.dueOn = dueOn
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.labelsUrl = labelsUrl
                            self.nodeId = nodeId
                            self.number = number
                            self.openIssues = openIssues
                            self.state = state
                            self.title = title
                            self.updatedAt = updatedAt
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case closedAt = "closed_at"
                            case closedIssues = "closed_issues"
                            case createdAt = "created_at"
                            case creator
                            case description
                            case dueOn = "due_on"
                            case htmlUrl = "html_url"
                            case id
                            case labelsUrl = "labels_url"
                            case nodeId = "node_id"
                            case number
                            case openIssues = "open_issues"
                            case state
                            case title
                            case updatedAt = "updated_at"
                            case url
                        }
                    }
                    /// A collection of related issues and pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/milestone`.
                    public var milestone: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.MilestonePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/number`.
                    public var number: Swift.Int
                    /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app`.
                    public struct PerformedViaGithubAppPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/created_at`.
                        public var createdAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/EventsPayload`.
                        @frozen public enum EventsPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case branchProtectionRule = "branch_protection_rule"
                            case checkRun = "check_run"
                            case checkSuite = "check_suite"
                            case codeScanningAlert = "code_scanning_alert"
                            case commitComment = "commit_comment"
                            case contentReference = "content_reference"
                            case create = "create"
                            case delete = "delete"
                            case deployment = "deployment"
                            case deploymentReview = "deployment_review"
                            case deploymentStatus = "deployment_status"
                            case deployKey = "deploy_key"
                            case discussion = "discussion"
                            case discussionComment = "discussion_comment"
                            case fork = "fork"
                            case gollum = "gollum"
                            case issues = "issues"
                            case issueComment = "issue_comment"
                            case label = "label"
                            case member = "member"
                            case membership = "membership"
                            case milestone = "milestone"
                            case organization = "organization"
                            case orgBlock = "org_block"
                            case pageBuild = "page_build"
                            case project = "project"
                            case projectCard = "project_card"
                            case projectColumn = "project_column"
                            case _public = "public"
                            case pullRequest = "pull_request"
                            case pullRequestReview = "pull_request_review"
                            case pullRequestReviewComment = "pull_request_review_comment"
                            case push = "push"
                            case registryPackage = "registry_package"
                            case release = "release"
                            case repository = "repository"
                            case repositoryDispatch = "repository_dispatch"
                            case secretScanningAlert = "secret_scanning_alert"
                            case star = "star"
                            case status = "status"
                            case team = "team"
                            case teamAdd = "team_add"
                            case watch = "watch"
                            case workflowDispatch = "workflow_dispatch"
                            case workflowRun = "workflow_run"
                            case pullRequestReviewThread = "pull_request_review_thread"
                            case reminder = "reminder"
                        }
                        /// The list of events for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/events`.
                        public typealias EventsPayload = [Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.EventsPayloadPayload]
                        /// The list of events for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/events`.
                        public var events: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.EventsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/external_url`.
                        public var externalUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/html_url`.
                        public var htmlUrl: Swift.String
                        /// Unique identifier of the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/id`.
                        public var id: Swift.Int?
                        /// The name of the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/node_id`.
                        public var nodeId: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/owner`.
                        public struct OwnerPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/owner/avatar_url`.
                            public var avatarUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/owner/deleted`.
                            public var deleted: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/owner/email`.
                            public var email: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/owner/events_url`.
                            public var eventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/owner/followers_url`.
                            public var followersUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/owner/following_url`.
                            public var followingUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/owner/gists_url`.
                            public var gistsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/owner/gravatar_id`.
                            public var gravatarId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/owner/html_url`.
                            public var htmlUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/owner/id`.
                            public var id: Swift.Int
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/owner/login`.
                            public var login: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/owner/name`.
                            public var name: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/owner/node_id`.
                            public var nodeId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/owner/organizations_url`.
                            public var organizationsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/owner/received_events_url`.
                            public var receivedEventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/owner/repos_url`.
                            public var reposUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/owner/site_admin`.
                            public var siteAdmin: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/owner/starred_url`.
                            public var starredUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/owner/subscriptions_url`.
                            public var subscriptionsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/owner/type`.
                            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case bot = "Bot"
                                case user = "User"
                                case organization = "Organization"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/owner/type`.
                            public var _type: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/owner/url`.
                            public var url: Swift.String?
                            /// Creates a new `OwnerPayload`.
                            ///
                            /// - Parameters:
                            ///   - avatarUrl:
                            ///   - deleted:
                            ///   - email:
                            ///   - eventsUrl:
                            ///   - followersUrl:
                            ///   - followingUrl:
                            ///   - gistsUrl:
                            ///   - gravatarId:
                            ///   - htmlUrl:
                            ///   - id:
                            ///   - login:
                            ///   - name:
                            ///   - nodeId:
                            ///   - organizationsUrl:
                            ///   - receivedEventsUrl:
                            ///   - reposUrl:
                            ///   - siteAdmin:
                            ///   - starredUrl:
                            ///   - subscriptionsUrl:
                            ///   - _type:
                            ///   - url:
                            public init(
                                avatarUrl: Swift.String? = nil,
                                deleted: Swift.Bool? = nil,
                                email: Swift.String? = nil,
                                eventsUrl: Swift.String? = nil,
                                followersUrl: Swift.String? = nil,
                                followingUrl: Swift.String? = nil,
                                gistsUrl: Swift.String? = nil,
                                gravatarId: Swift.String? = nil,
                                htmlUrl: Swift.String? = nil,
                                id: Swift.Int,
                                login: Swift.String,
                                name: Swift.String? = nil,
                                nodeId: Swift.String? = nil,
                                organizationsUrl: Swift.String? = nil,
                                receivedEventsUrl: Swift.String? = nil,
                                reposUrl: Swift.String? = nil,
                                siteAdmin: Swift.Bool? = nil,
                                starredUrl: Swift.String? = nil,
                                subscriptionsUrl: Swift.String? = nil,
                                _type: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload? = nil,
                                url: Swift.String? = nil
                            ) {
                                self.avatarUrl = avatarUrl
                                self.deleted = deleted
                                self.email = email
                                self.eventsUrl = eventsUrl
                                self.followersUrl = followersUrl
                                self.followingUrl = followingUrl
                                self.gistsUrl = gistsUrl
                                self.gravatarId = gravatarId
                                self.htmlUrl = htmlUrl
                                self.id = id
                                self.login = login
                                self.name = name
                                self.nodeId = nodeId
                                self.organizationsUrl = organizationsUrl
                                self.receivedEventsUrl = receivedEventsUrl
                                self.reposUrl = reposUrl
                                self.siteAdmin = siteAdmin
                                self.starredUrl = starredUrl
                                self.subscriptionsUrl = subscriptionsUrl
                                self._type = _type
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case avatarUrl = "avatar_url"
                                case deleted
                                case email
                                case eventsUrl = "events_url"
                                case followersUrl = "followers_url"
                                case followingUrl = "following_url"
                                case gistsUrl = "gists_url"
                                case gravatarId = "gravatar_id"
                                case htmlUrl = "html_url"
                                case id
                                case login
                                case name
                                case nodeId = "node_id"
                                case organizationsUrl = "organizations_url"
                                case receivedEventsUrl = "received_events_url"
                                case reposUrl = "repos_url"
                                case siteAdmin = "site_admin"
                                case starredUrl = "starred_url"
                                case subscriptionsUrl = "subscriptions_url"
                                case _type = "type"
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/owner`.
                        public var owner: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload?
                        /// The set of permissions for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions`.
                        public struct PermissionsPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/actions`.
                            @frozen public enum ActionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/actions`.
                            public var actions: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/administration`.
                            @frozen public enum AdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/administration`.
                            public var administration: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/checks`.
                            @frozen public enum ChecksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/checks`.
                            public var checks: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/content_references`.
                            @frozen public enum ContentReferencesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/content_references`.
                            public var contentReferences: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/contents`.
                            @frozen public enum ContentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/contents`.
                            public var contents: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/deployments`.
                            @frozen public enum DeploymentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/deployments`.
                            public var deployments: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/discussions`.
                            @frozen public enum DiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/discussions`.
                            public var discussions: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/emails`.
                            @frozen public enum EmailsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/emails`.
                            public var emails: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/environments`.
                            @frozen public enum EnvironmentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/environments`.
                            public var environments: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/issues`.
                            @frozen public enum IssuesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/issues`.
                            public var issues: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/keys`.
                            @frozen public enum KeysPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/keys`.
                            public var keys: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/members`.
                            @frozen public enum MembersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/members`.
                            public var members: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/metadata`.
                            @frozen public enum MetadataPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/metadata`.
                            public var metadata: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/organization_administration`.
                            @frozen public enum OrganizationAdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/organization_administration`.
                            public var organizationAdministration: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/organization_hooks`.
                            @frozen public enum OrganizationHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/organization_hooks`.
                            public var organizationHooks: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/organization_packages`.
                            @frozen public enum OrganizationPackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/organization_packages`.
                            public var organizationPackages: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/organization_plan`.
                            @frozen public enum OrganizationPlanPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/organization_plan`.
                            public var organizationPlan: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/organization_projects`.
                            @frozen public enum OrganizationProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                                case admin = "admin"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/organization_projects`.
                            public var organizationProjects: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/organization_secrets`.
                            @frozen public enum OrganizationSecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/organization_secrets`.
                            public var organizationSecrets: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/organization_self_hosted_runners`.
                            @frozen public enum OrganizationSelfHostedRunnersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/organization_self_hosted_runners`.
                            public var organizationSelfHostedRunners: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/organization_user_blocking`.
                            @frozen public enum OrganizationUserBlockingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/organization_user_blocking`.
                            public var organizationUserBlocking: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/packages`.
                            @frozen public enum PackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/packages`.
                            public var packages: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/pages`.
                            @frozen public enum PagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/pages`.
                            public var pages: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/pull_requests`.
                            @frozen public enum PullRequestsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/pull_requests`.
                            public var pullRequests: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/repository_hooks`.
                            @frozen public enum RepositoryHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/repository_hooks`.
                            public var repositoryHooks: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/repository_projects`.
                            @frozen public enum RepositoryProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                                case admin = "admin"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/repository_projects`.
                            public var repositoryProjects: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/secret_scanning_alerts`.
                            @frozen public enum SecretScanningAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/secret_scanning_alerts`.
                            public var secretScanningAlerts: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/secrets`.
                            @frozen public enum SecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/secrets`.
                            public var secrets: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/security_events`.
                            @frozen public enum SecurityEventsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/security_events`.
                            public var securityEvents: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/security_scanning_alert`.
                            @frozen public enum SecurityScanningAlertPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/security_scanning_alert`.
                            public var securityScanningAlert: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/single_file`.
                            @frozen public enum SingleFilePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/single_file`.
                            public var singleFile: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/statuses`.
                            @frozen public enum StatusesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/statuses`.
                            public var statuses: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/team_discussions`.
                            @frozen public enum TeamDiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/team_discussions`.
                            public var teamDiscussions: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/vulnerability_alerts`.
                            @frozen public enum VulnerabilityAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/vulnerability_alerts`.
                            public var vulnerabilityAlerts: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/workflows`.
                            @frozen public enum WorkflowsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions/workflows`.
                            public var workflows: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload?
                            /// Creates a new `PermissionsPayload`.
                            ///
                            /// - Parameters:
                            ///   - actions:
                            ///   - administration:
                            ///   - checks:
                            ///   - contentReferences:
                            ///   - contents:
                            ///   - deployments:
                            ///   - discussions:
                            ///   - emails:
                            ///   - environments:
                            ///   - issues:
                            ///   - keys:
                            ///   - members:
                            ///   - metadata:
                            ///   - organizationAdministration:
                            ///   - organizationHooks:
                            ///   - organizationPackages:
                            ///   - organizationPlan:
                            ///   - organizationProjects:
                            ///   - organizationSecrets:
                            ///   - organizationSelfHostedRunners:
                            ///   - organizationUserBlocking:
                            ///   - packages:
                            ///   - pages:
                            ///   - pullRequests:
                            ///   - repositoryHooks:
                            ///   - repositoryProjects:
                            ///   - secretScanningAlerts:
                            ///   - secrets:
                            ///   - securityEvents:
                            ///   - securityScanningAlert:
                            ///   - singleFile:
                            ///   - statuses:
                            ///   - teamDiscussions:
                            ///   - vulnerabilityAlerts:
                            ///   - workflows:
                            public init(
                                actions: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload? = nil,
                                administration: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload? = nil,
                                checks: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload? = nil,
                                contentReferences: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload? = nil,
                                contents: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload? = nil,
                                deployments: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload? = nil,
                                discussions: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload? = nil,
                                emails: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload? = nil,
                                environments: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload? = nil,
                                issues: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload? = nil,
                                keys: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload? = nil,
                                members: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload? = nil,
                                metadata: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload? = nil,
                                organizationAdministration: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload? = nil,
                                organizationHooks: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload? = nil,
                                organizationPackages: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload? = nil,
                                organizationPlan: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload? = nil,
                                organizationProjects: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload? = nil,
                                organizationSecrets: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload? = nil,
                                organizationSelfHostedRunners: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload? = nil,
                                organizationUserBlocking: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload? = nil,
                                packages: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload? = nil,
                                pages: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload? = nil,
                                pullRequests: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload? = nil,
                                repositoryHooks: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload? = nil,
                                repositoryProjects: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload? = nil,
                                secretScanningAlerts: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload? = nil,
                                secrets: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload? = nil,
                                securityEvents: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload? = nil,
                                securityScanningAlert: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload? = nil,
                                singleFile: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload? = nil,
                                statuses: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload? = nil,
                                teamDiscussions: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload? = nil,
                                vulnerabilityAlerts: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload? = nil,
                                workflows: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload? = nil
                            ) {
                                self.actions = actions
                                self.administration = administration
                                self.checks = checks
                                self.contentReferences = contentReferences
                                self.contents = contents
                                self.deployments = deployments
                                self.discussions = discussions
                                self.emails = emails
                                self.environments = environments
                                self.issues = issues
                                self.keys = keys
                                self.members = members
                                self.metadata = metadata
                                self.organizationAdministration = organizationAdministration
                                self.organizationHooks = organizationHooks
                                self.organizationPackages = organizationPackages
                                self.organizationPlan = organizationPlan
                                self.organizationProjects = organizationProjects
                                self.organizationSecrets = organizationSecrets
                                self.organizationSelfHostedRunners = organizationSelfHostedRunners
                                self.organizationUserBlocking = organizationUserBlocking
                                self.packages = packages
                                self.pages = pages
                                self.pullRequests = pullRequests
                                self.repositoryHooks = repositoryHooks
                                self.repositoryProjects = repositoryProjects
                                self.secretScanningAlerts = secretScanningAlerts
                                self.secrets = secrets
                                self.securityEvents = securityEvents
                                self.securityScanningAlert = securityScanningAlert
                                self.singleFile = singleFile
                                self.statuses = statuses
                                self.teamDiscussions = teamDiscussions
                                self.vulnerabilityAlerts = vulnerabilityAlerts
                                self.workflows = workflows
                            }
                            public enum CodingKeys: String, CodingKey {
                                case actions
                                case administration
                                case checks
                                case contentReferences = "content_references"
                                case contents
                                case deployments
                                case discussions
                                case emails
                                case environments
                                case issues
                                case keys
                                case members
                                case metadata
                                case organizationAdministration = "organization_administration"
                                case organizationHooks = "organization_hooks"
                                case organizationPackages = "organization_packages"
                                case organizationPlan = "organization_plan"
                                case organizationProjects = "organization_projects"
                                case organizationSecrets = "organization_secrets"
                                case organizationSelfHostedRunners = "organization_self_hosted_runners"
                                case organizationUserBlocking = "organization_user_blocking"
                                case packages
                                case pages
                                case pullRequests = "pull_requests"
                                case repositoryHooks = "repository_hooks"
                                case repositoryProjects = "repository_projects"
                                case secretScanningAlerts = "secret_scanning_alerts"
                                case secrets
                                case securityEvents = "security_events"
                                case securityScanningAlert = "security_scanning_alert"
                                case singleFile = "single_file"
                                case statuses
                                case teamDiscussions = "team_discussions"
                                case vulnerabilityAlerts = "vulnerability_alerts"
                                case workflows
                            }
                        }
                        /// The set of permissions for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/permissions`.
                        public var permissions: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload?
                        /// The slug name of the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/slug`.
                        public var slug: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app/updated_at`.
                        public var updatedAt: Foundation.Date?
                        /// Creates a new `PerformedViaGithubAppPayload`.
                        ///
                        /// - Parameters:
                        ///   - createdAt:
                        ///   - description:
                        ///   - events: The list of events for the GitHub app
                        ///   - externalUrl:
                        ///   - htmlUrl:
                        ///   - id: Unique identifier of the GitHub app
                        ///   - name: The name of the GitHub app
                        ///   - nodeId:
                        ///   - owner:
                        ///   - permissions: The set of permissions for the GitHub app
                        ///   - slug: The slug name of the GitHub app
                        ///   - updatedAt:
                        public init(
                            createdAt: Foundation.Date? = nil,
                            description: Swift.String? = nil,
                            events: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.EventsPayload? = nil,
                            externalUrl: Swift.String? = nil,
                            htmlUrl: Swift.String,
                            id: Swift.Int? = nil,
                            name: Swift.String,
                            nodeId: Swift.String,
                            owner: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload? = nil,
                            permissions: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload? = nil,
                            slug: Swift.String? = nil,
                            updatedAt: Foundation.Date? = nil
                        ) {
                            self.createdAt = createdAt
                            self.description = description
                            self.events = events
                            self.externalUrl = externalUrl
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.name = name
                            self.nodeId = nodeId
                            self.owner = owner
                            self.permissions = permissions
                            self.slug = slug
                            self.updatedAt = updatedAt
                        }
                        public enum CodingKeys: String, CodingKey {
                            case createdAt = "created_at"
                            case description
                            case events
                            case externalUrl = "external_url"
                            case htmlUrl = "html_url"
                            case id
                            case name
                            case nodeId = "node_id"
                            case owner
                            case permissions
                            case slug
                            case updatedAt = "updated_at"
                        }
                    }
                    /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/performed_via_github_app`.
                    public var performedViaGithubApp: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/pull_request`.
                    public struct PullRequestPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/pull_request/diff_url`.
                        public var diffUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/pull_request/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/pull_request/merged_at`.
                        public var mergedAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/pull_request/patch_url`.
                        public var patchUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/pull_request/url`.
                        public var url: Swift.String?
                        /// Creates a new `PullRequestPayload`.
                        ///
                        /// - Parameters:
                        ///   - diffUrl:
                        ///   - htmlUrl:
                        ///   - mergedAt:
                        ///   - patchUrl:
                        ///   - url:
                        public init(
                            diffUrl: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            mergedAt: Foundation.Date? = nil,
                            patchUrl: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.diffUrl = diffUrl
                            self.htmlUrl = htmlUrl
                            self.mergedAt = mergedAt
                            self.patchUrl = patchUrl
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case diffUrl = "diff_url"
                            case htmlUrl = "html_url"
                            case mergedAt = "merged_at"
                            case patchUrl = "patch_url"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/pull_request`.
                    public var pullRequest: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PullRequestPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/reactions`.
                    public struct ReactionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/reactions/+1`.
                        public var _plus_1: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/reactions/-1`.
                        public var _hyphen_1: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/reactions/confused`.
                        public var confused: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/reactions/eyes`.
                        public var eyes: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/reactions/heart`.
                        public var heart: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/reactions/hooray`.
                        public var hooray: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/reactions/laugh`.
                        public var laugh: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/reactions/rocket`.
                        public var rocket: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/reactions/total_count`.
                        public var totalCount: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/reactions/url`.
                        public var url: Swift.String
                        /// Creates a new `ReactionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - _plus_1:
                        ///   - _hyphen_1:
                        ///   - confused:
                        ///   - eyes:
                        ///   - heart:
                        ///   - hooray:
                        ///   - laugh:
                        ///   - rocket:
                        ///   - totalCount:
                        ///   - url:
                        public init(
                            _plus_1: Swift.Int,
                            _hyphen_1: Swift.Int,
                            confused: Swift.Int,
                            eyes: Swift.Int,
                            heart: Swift.Int,
                            hooray: Swift.Int,
                            laugh: Swift.Int,
                            rocket: Swift.Int,
                            totalCount: Swift.Int,
                            url: Swift.String
                        ) {
                            self._plus_1 = _plus_1
                            self._hyphen_1 = _hyphen_1
                            self.confused = confused
                            self.eyes = eyes
                            self.heart = heart
                            self.hooray = hooray
                            self.laugh = laugh
                            self.rocket = rocket
                            self.totalCount = totalCount
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _plus_1 = "+1"
                            case _hyphen_1 = "-1"
                            case confused
                            case eyes
                            case heart
                            case hooray
                            case laugh
                            case rocket
                            case totalCount = "total_count"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/reactions`.
                    public var reactions: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.ReactionsPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/repository_url`.
                    public var repositoryUrl: Swift.String
                    /// State of the issue; either 'open' or 'closed'
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/state`.
                    @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case closed = "closed"
                    }
                    /// State of the issue; either 'open' or 'closed'
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/state`.
                    public var state: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.StatePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/state_reason`.
                    public var stateReason: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/timeline_url`.
                    public var timelineUrl: Swift.String?
                    /// Title of the issue
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/title`.
                    public var title: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/updated_at`.
                    public var updatedAt: Foundation.Date
                    /// URL for the issue
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/url`.
                    public var url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/user`.
                    public struct UserPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/user/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/user/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/user/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/user/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/user/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/user/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/user/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/user/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/user/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/user/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/user/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/user/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/user/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/user/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/user/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/user/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/user/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/user/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/user/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/user/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                            case mannequin = "Mannequin"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/user/type`.
                        public var _type: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.UserPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/user/url`.
                        public var url: Swift.String?
                        /// Creates a new `UserPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.UserPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1/user`.
                    public var user: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.UserPayload?
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - activeLockReason:
                    ///   - assignee:
                    ///   - assignees:
                    ///   - authorAssociation: How the author is associated with the repository.
                    ///   - body: Contents of the issue
                    ///   - closedAt:
                    ///   - comments:
                    ///   - commentsUrl:
                    ///   - createdAt:
                    ///   - draft:
                    ///   - eventsUrl:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - labels:
                    ///   - labelsUrl:
                    ///   - locked:
                    ///   - milestone: A collection of related issues and pull requests.
                    ///   - nodeId:
                    ///   - number:
                    ///   - performedViaGithubApp: GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                    ///   - pullRequest:
                    ///   - reactions:
                    ///   - repositoryUrl:
                    ///   - state: State of the issue; either 'open' or 'closed'
                    ///   - stateReason:
                    ///   - timelineUrl:
                    ///   - title: Title of the issue
                    ///   - updatedAt:
                    ///   - url: URL for the issue
                    ///   - user:
                    public init(
                        activeLockReason: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.ActiveLockReasonPayload? = nil,
                        assignee: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.AssigneePayload? = nil,
                        assignees: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.AssigneesPayload,
                        authorAssociation: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.AuthorAssociationPayload,
                        body: Swift.String? = nil,
                        closedAt: Foundation.Date? = nil,
                        comments: Swift.Int,
                        commentsUrl: Swift.String,
                        createdAt: Foundation.Date,
                        draft: Swift.Bool? = nil,
                        eventsUrl: Swift.String,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        labels: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.LabelsPayload? = nil,
                        labelsUrl: Swift.String,
                        locked: Swift.Bool? = nil,
                        milestone: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.MilestonePayload? = nil,
                        nodeId: Swift.String,
                        number: Swift.Int,
                        performedViaGithubApp: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PerformedViaGithubAppPayload? = nil,
                        pullRequest: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.PullRequestPayload? = nil,
                        reactions: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.ReactionsPayload,
                        repositoryUrl: Swift.String,
                        state: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.StatePayload? = nil,
                        stateReason: Swift.String? = nil,
                        timelineUrl: Swift.String? = nil,
                        title: Swift.String,
                        updatedAt: Foundation.Date,
                        url: Swift.String,
                        user: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload.UserPayload? = nil
                    ) {
                        self.activeLockReason = activeLockReason
                        self.assignee = assignee
                        self.assignees = assignees
                        self.authorAssociation = authorAssociation
                        self.body = body
                        self.closedAt = closedAt
                        self.comments = comments
                        self.commentsUrl = commentsUrl
                        self.createdAt = createdAt
                        self.draft = draft
                        self.eventsUrl = eventsUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.labels = labels
                        self.labelsUrl = labelsUrl
                        self.locked = locked
                        self.milestone = milestone
                        self.nodeId = nodeId
                        self.number = number
                        self.performedViaGithubApp = performedViaGithubApp
                        self.pullRequest = pullRequest
                        self.reactions = reactions
                        self.repositoryUrl = repositoryUrl
                        self.state = state
                        self.stateReason = stateReason
                        self.timelineUrl = timelineUrl
                        self.title = title
                        self.updatedAt = updatedAt
                        self.url = url
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case activeLockReason = "active_lock_reason"
                        case assignee
                        case assignees
                        case authorAssociation = "author_association"
                        case body
                        case closedAt = "closed_at"
                        case comments
                        case commentsUrl = "comments_url"
                        case createdAt = "created_at"
                        case draft
                        case eventsUrl = "events_url"
                        case htmlUrl = "html_url"
                        case id
                        case labels
                        case labelsUrl = "labels_url"
                        case locked
                        case milestone
                        case nodeId = "node_id"
                        case number
                        case performedViaGithubApp = "performed_via_github_app"
                        case pullRequest = "pull_request"
                        case reactions
                        case repositoryUrl = "repository_url"
                        case state
                        case stateReason = "state_reason"
                        case timelineUrl = "timeline_url"
                        case title
                        case updatedAt = "updated_at"
                        case url
                        case user
                    }
                }
                /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value1`.
                public var value1: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/active_lock_reason`.
                    public var activeLockReason: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/assignee`.
                    public var assignee: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/assignees`.
                    public var assignees: [OpenAPIRuntime.OpenAPIObjectContainer?]?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/author_association`.
                    public var authorAssociation: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/body`.
                    public var body: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/closed_at`.
                    public var closedAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/comments`.
                    public var comments: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/comments_url`.
                    public var commentsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/created_at`.
                    public var createdAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/id`.
                    public var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/labels`.
                    public var labels: [OpenAPIRuntime.OpenAPIObjectContainer?]?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/labels_url`.
                    public var labelsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/locked`.
                    public var locked: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/milestone`.
                    public var milestone: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/number`.
                    public var number: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/performed_via_github_app`.
                    public var performedViaGithubApp: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/reactions`.
                    public struct ReactionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/reactions/+1`.
                        public var _plus_1: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/reactions/-1`.
                        public var _hyphen_1: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/reactions/confused`.
                        public var confused: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/reactions/eyes`.
                        public var eyes: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/reactions/heart`.
                        public var heart: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/reactions/hooray`.
                        public var hooray: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/reactions/laugh`.
                        public var laugh: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/reactions/rocket`.
                        public var rocket: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/reactions/total_count`.
                        public var totalCount: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/reactions/url`.
                        public var url: Swift.String?
                        /// Creates a new `ReactionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - _plus_1:
                        ///   - _hyphen_1:
                        ///   - confused:
                        ///   - eyes:
                        ///   - heart:
                        ///   - hooray:
                        ///   - laugh:
                        ///   - rocket:
                        ///   - totalCount:
                        ///   - url:
                        public init(
                            _plus_1: Swift.Int? = nil,
                            _hyphen_1: Swift.Int? = nil,
                            confused: Swift.Int? = nil,
                            eyes: Swift.Int? = nil,
                            heart: Swift.Int? = nil,
                            hooray: Swift.Int? = nil,
                            laugh: Swift.Int? = nil,
                            rocket: Swift.Int? = nil,
                            totalCount: Swift.Int? = nil,
                            url: Swift.String? = nil
                        ) {
                            self._plus_1 = _plus_1
                            self._hyphen_1 = _hyphen_1
                            self.confused = confused
                            self.eyes = eyes
                            self.heart = heart
                            self.hooray = hooray
                            self.laugh = laugh
                            self.rocket = rocket
                            self.totalCount = totalCount
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _plus_1 = "+1"
                            case _hyphen_1 = "-1"
                            case confused
                            case eyes
                            case heart
                            case hooray
                            case laugh
                            case rocket
                            case totalCount = "total_count"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/reactions`.
                    public var reactions: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value2Payload.ReactionsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/repository_url`.
                    public var repositoryUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/state`.
                    @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case closed = "closed"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/state`.
                    public var state: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value2Payload.StatePayload
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/timeline_url`.
                    public var timelineUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/title`.
                    public var title: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/updated_at`.
                    public var updatedAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/url`.
                    public var url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/user`.
                    public struct UserPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/user/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/user/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/user/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/user/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/user/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/user/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/user/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/user/id`.
                        public var id: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/user/login`.
                        public var login: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/user/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/user/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/user/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/user/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/user/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/user/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/user/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/user/type`.
                        public var _type: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/user/url`.
                        public var url: Swift.String?
                        /// Creates a new `UserPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int? = nil,
                            login: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2/user`.
                    public var user: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value2Payload.UserPayload?
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - activeLockReason:
                    ///   - assignee:
                    ///   - assignees:
                    ///   - authorAssociation:
                    ///   - body:
                    ///   - closedAt:
                    ///   - comments:
                    ///   - commentsUrl:
                    ///   - createdAt:
                    ///   - eventsUrl:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - labels:
                    ///   - labelsUrl:
                    ///   - locked:
                    ///   - milestone:
                    ///   - nodeId:
                    ///   - number:
                    ///   - performedViaGithubApp:
                    ///   - reactions:
                    ///   - repositoryUrl:
                    ///   - state:
                    ///   - timelineUrl:
                    ///   - title:
                    ///   - updatedAt:
                    ///   - url:
                    ///   - user:
                    public init(
                        activeLockReason: Swift.String? = nil,
                        assignee: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                        assignees: [OpenAPIRuntime.OpenAPIObjectContainer?]? = nil,
                        authorAssociation: Swift.String? = nil,
                        body: Swift.String? = nil,
                        closedAt: Swift.String? = nil,
                        comments: Swift.Int? = nil,
                        commentsUrl: Swift.String? = nil,
                        createdAt: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int? = nil,
                        labels: [OpenAPIRuntime.OpenAPIObjectContainer?]? = nil,
                        labelsUrl: Swift.String? = nil,
                        locked: Swift.Bool? = nil,
                        milestone: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                        nodeId: Swift.String? = nil,
                        number: Swift.Int? = nil,
                        performedViaGithubApp: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                        reactions: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value2Payload.ReactionsPayload? = nil,
                        repositoryUrl: Swift.String? = nil,
                        state: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value2Payload.StatePayload,
                        timelineUrl: Swift.String? = nil,
                        title: Swift.String? = nil,
                        updatedAt: Swift.String? = nil,
                        url: Swift.String? = nil,
                        user: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value2Payload.UserPayload? = nil
                    ) {
                        self.activeLockReason = activeLockReason
                        self.assignee = assignee
                        self.assignees = assignees
                        self.authorAssociation = authorAssociation
                        self.body = body
                        self.closedAt = closedAt
                        self.comments = comments
                        self.commentsUrl = commentsUrl
                        self.createdAt = createdAt
                        self.eventsUrl = eventsUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.labels = labels
                        self.labelsUrl = labelsUrl
                        self.locked = locked
                        self.milestone = milestone
                        self.nodeId = nodeId
                        self.number = number
                        self.performedViaGithubApp = performedViaGithubApp
                        self.reactions = reactions
                        self.repositoryUrl = repositoryUrl
                        self.state = state
                        self.timelineUrl = timelineUrl
                        self.title = title
                        self.updatedAt = updatedAt
                        self.url = url
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case activeLockReason = "active_lock_reason"
                        case assignee
                        case assignees
                        case authorAssociation = "author_association"
                        case body
                        case closedAt = "closed_at"
                        case comments
                        case commentsUrl = "comments_url"
                        case createdAt = "created_at"
                        case eventsUrl = "events_url"
                        case htmlUrl = "html_url"
                        case id
                        case labels
                        case labelsUrl = "labels_url"
                        case locked
                        case milestone
                        case nodeId = "node_id"
                        case number
                        case performedViaGithubApp = "performed_via_github_app"
                        case reactions
                        case repositoryUrl = "repository_url"
                        case state
                        case timelineUrl = "timeline_url"
                        case title
                        case updatedAt = "updated_at"
                        case url
                        case user
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue/value2`.
                public var value2: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value2Payload
                /// Creates a new `IssuePayload`.
                ///
                /// - Parameters:
                ///   - value1: The [issue](https://docs.github.com/en/rest/reference/issues) itself.
                ///   - value2:
                public init(
                    value1: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value1Payload,
                    value2: Components.Schemas.WebhookIssuesReopened.IssuePayload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/issue`.
            public var issue: Components.Schemas.WebhookIssuesReopened.IssuePayload
            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-issues-reopened/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Creates a new `WebhookIssuesReopened`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - enterprise:
            ///   - installation:
            ///   - issue:
            ///   - organization:
            ///   - repository:
            ///   - sender:
            public init(
                action: Components.Schemas.WebhookIssuesReopened.ActionPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                issue: Components.Schemas.WebhookIssuesReopened.IssuePayload,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser
            ) {
                self.action = action
                self.enterprise = enterprise
                self.installation = installation
                self.issue = issue
                self.organization = organization
                self.repository = repository
                self.sender = sender
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case enterprise
                case installation
                case issue
                case organization
                case repository
                case sender
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred`.
        public struct WebhookIssuesTransferred: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case transferred = "transferred"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/action`.
            public var action: Components.Schemas.WebhookIssuesTransferred.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes`.
            public struct ChangesPayload: Codable, Hashable, Sendable {
                /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue`.
                public struct NewIssuePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/active_lock_reason`.
                    @frozen public enum ActiveLockReasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case resolved = "resolved"
                        case offTopic = "off-topic"
                        case tooHeated = "too heated"
                        case spam = "spam"
                        case _empty_ = ""
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/active_lock_reason`.
                    public var activeLockReason: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.ActiveLockReasonPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/assignee`.
                    public struct AssigneePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/assignee/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/assignee/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/assignee/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/assignee/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/assignee/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/assignee/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/assignee/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/assignee/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/assignee/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/assignee/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/assignee/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/assignee/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/assignee/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/assignee/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/assignee/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/assignee/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/assignee/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/assignee/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/assignee/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/assignee/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/assignee/type`.
                        public var _type: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.AssigneePayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/assignee/url`.
                        public var url: Swift.String?
                        /// Creates a new `AssigneePayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.AssigneePayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/assignee`.
                    public var assignee: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.AssigneePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/AssigneesPayload`.
                    public struct AssigneesPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/AssigneesPayload/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/AssigneesPayload/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/AssigneesPayload/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/AssigneesPayload/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/AssigneesPayload/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/AssigneesPayload/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/AssigneesPayload/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/AssigneesPayload/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/AssigneesPayload/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/AssigneesPayload/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/AssigneesPayload/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/AssigneesPayload/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/AssigneesPayload/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/AssigneesPayload/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/AssigneesPayload/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/AssigneesPayload/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/AssigneesPayload/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/AssigneesPayload/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/AssigneesPayload/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/AssigneesPayload/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/AssigneesPayload/type`.
                        public var _type: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.AssigneesPayloadPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/AssigneesPayload/url`.
                        public var url: Swift.String?
                        /// Creates a new `AssigneesPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.AssigneesPayloadPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/assignees`.
                    public typealias AssigneesPayload = [Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.AssigneesPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/assignees`.
                    public var assignees: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.AssigneesPayload
                    /// How the author is associated with the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/author_association`.
                    @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case collaborator = "COLLABORATOR"
                        case contributor = "CONTRIBUTOR"
                        case firstTimer = "FIRST_TIMER"
                        case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                        case mannequin = "MANNEQUIN"
                        case member = "MEMBER"
                        case none = "NONE"
                        case owner = "OWNER"
                    }
                    /// How the author is associated with the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/author_association`.
                    public var authorAssociation: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.AuthorAssociationPayload
                    /// Contents of the issue
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/body`.
                    public var body: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/closed_at`.
                    public var closedAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/comments`.
                    public var comments: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/comments_url`.
                    public var commentsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/created_at`.
                    public var createdAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/draft`.
                    public var draft: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/events_url`.
                    public var eventsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/html_url`.
                    public var htmlUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/LabelsPayload`.
                    public struct LabelsPayloadPayload: Codable, Hashable, Sendable {
                        /// 6-character hex code, without the leading #, identifying the color
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/LabelsPayload/color`.
                        public var color: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/LabelsPayload/default`.
                        public var _default: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/LabelsPayload/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/LabelsPayload/id`.
                        public var id: Swift.Int
                        /// The name of the label.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/LabelsPayload/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/LabelsPayload/node_id`.
                        public var nodeId: Swift.String
                        /// URL for the label
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/LabelsPayload/url`.
                        public var url: Swift.String
                        /// Creates a new `LabelsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - color: 6-character hex code, without the leading #, identifying the color
                        ///   - _default:
                        ///   - description:
                        ///   - id:
                        ///   - name: The name of the label.
                        ///   - nodeId:
                        ///   - url: URL for the label
                        public init(
                            color: Swift.String,
                            _default: Swift.Bool,
                            description: Swift.String? = nil,
                            id: Swift.Int,
                            name: Swift.String,
                            nodeId: Swift.String,
                            url: Swift.String
                        ) {
                            self.color = color
                            self._default = _default
                            self.description = description
                            self.id = id
                            self.name = name
                            self.nodeId = nodeId
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case color
                            case _default = "default"
                            case description
                            case id
                            case name
                            case nodeId = "node_id"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/labels`.
                    public typealias LabelsPayload = [Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.LabelsPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/labels`.
                    public var labels: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.LabelsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/labels_url`.
                    public var labelsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/locked`.
                    public var locked: Swift.Bool?
                    /// A collection of related issues and pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone`.
                    public struct MilestonePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/closed_at`.
                        public var closedAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/closed_issues`.
                        public var closedIssues: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/created_at`.
                        public var createdAt: Foundation.Date
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/creator`.
                        public struct CreatorPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/creator/avatar_url`.
                            public var avatarUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/creator/deleted`.
                            public var deleted: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/creator/email`.
                            public var email: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/creator/events_url`.
                            public var eventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/creator/followers_url`.
                            public var followersUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/creator/following_url`.
                            public var followingUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/creator/gists_url`.
                            public var gistsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/creator/gravatar_id`.
                            public var gravatarId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/creator/html_url`.
                            public var htmlUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/creator/id`.
                            public var id: Swift.Int
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/creator/login`.
                            public var login: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/creator/name`.
                            public var name: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/creator/node_id`.
                            public var nodeId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/creator/organizations_url`.
                            public var organizationsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/creator/received_events_url`.
                            public var receivedEventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/creator/repos_url`.
                            public var reposUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/creator/site_admin`.
                            public var siteAdmin: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/creator/starred_url`.
                            public var starredUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/creator/subscriptions_url`.
                            public var subscriptionsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/creator/type`.
                            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case bot = "Bot"
                                case user = "User"
                                case organization = "Organization"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/creator/type`.
                            public var _type: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.MilestonePayload.CreatorPayload._TypePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/creator/url`.
                            public var url: Swift.String?
                            /// Creates a new `CreatorPayload`.
                            ///
                            /// - Parameters:
                            ///   - avatarUrl:
                            ///   - deleted:
                            ///   - email:
                            ///   - eventsUrl:
                            ///   - followersUrl:
                            ///   - followingUrl:
                            ///   - gistsUrl:
                            ///   - gravatarId:
                            ///   - htmlUrl:
                            ///   - id:
                            ///   - login:
                            ///   - name:
                            ///   - nodeId:
                            ///   - organizationsUrl:
                            ///   - receivedEventsUrl:
                            ///   - reposUrl:
                            ///   - siteAdmin:
                            ///   - starredUrl:
                            ///   - subscriptionsUrl:
                            ///   - _type:
                            ///   - url:
                            public init(
                                avatarUrl: Swift.String? = nil,
                                deleted: Swift.Bool? = nil,
                                email: Swift.String? = nil,
                                eventsUrl: Swift.String? = nil,
                                followersUrl: Swift.String? = nil,
                                followingUrl: Swift.String? = nil,
                                gistsUrl: Swift.String? = nil,
                                gravatarId: Swift.String? = nil,
                                htmlUrl: Swift.String? = nil,
                                id: Swift.Int,
                                login: Swift.String,
                                name: Swift.String? = nil,
                                nodeId: Swift.String? = nil,
                                organizationsUrl: Swift.String? = nil,
                                receivedEventsUrl: Swift.String? = nil,
                                reposUrl: Swift.String? = nil,
                                siteAdmin: Swift.Bool? = nil,
                                starredUrl: Swift.String? = nil,
                                subscriptionsUrl: Swift.String? = nil,
                                _type: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.MilestonePayload.CreatorPayload._TypePayload? = nil,
                                url: Swift.String? = nil
                            ) {
                                self.avatarUrl = avatarUrl
                                self.deleted = deleted
                                self.email = email
                                self.eventsUrl = eventsUrl
                                self.followersUrl = followersUrl
                                self.followingUrl = followingUrl
                                self.gistsUrl = gistsUrl
                                self.gravatarId = gravatarId
                                self.htmlUrl = htmlUrl
                                self.id = id
                                self.login = login
                                self.name = name
                                self.nodeId = nodeId
                                self.organizationsUrl = organizationsUrl
                                self.receivedEventsUrl = receivedEventsUrl
                                self.reposUrl = reposUrl
                                self.siteAdmin = siteAdmin
                                self.starredUrl = starredUrl
                                self.subscriptionsUrl = subscriptionsUrl
                                self._type = _type
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case avatarUrl = "avatar_url"
                                case deleted
                                case email
                                case eventsUrl = "events_url"
                                case followersUrl = "followers_url"
                                case followingUrl = "following_url"
                                case gistsUrl = "gists_url"
                                case gravatarId = "gravatar_id"
                                case htmlUrl = "html_url"
                                case id
                                case login
                                case name
                                case nodeId = "node_id"
                                case organizationsUrl = "organizations_url"
                                case receivedEventsUrl = "received_events_url"
                                case reposUrl = "repos_url"
                                case siteAdmin = "site_admin"
                                case starredUrl = "starred_url"
                                case subscriptionsUrl = "subscriptions_url"
                                case _type = "type"
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/creator`.
                        public var creator: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.MilestonePayload.CreatorPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/due_on`.
                        public var dueOn: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/html_url`.
                        public var htmlUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/labels_url`.
                        public var labelsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/node_id`.
                        public var nodeId: Swift.String
                        /// The number of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/number`.
                        public var number: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/open_issues`.
                        public var openIssues: Swift.Int
                        /// The state of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/state`.
                        @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case open = "open"
                            case closed = "closed"
                        }
                        /// The state of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/state`.
                        public var state: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.MilestonePayload.StatePayload
                        /// The title of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/title`.
                        public var title: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/updated_at`.
                        public var updatedAt: Foundation.Date
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone/url`.
                        public var url: Swift.String
                        /// Creates a new `MilestonePayload`.
                        ///
                        /// - Parameters:
                        ///   - closedAt:
                        ///   - closedIssues:
                        ///   - createdAt:
                        ///   - creator:
                        ///   - description:
                        ///   - dueOn:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - labelsUrl:
                        ///   - nodeId:
                        ///   - number: The number of the milestone.
                        ///   - openIssues:
                        ///   - state: The state of the milestone.
                        ///   - title: The title of the milestone.
                        ///   - updatedAt:
                        ///   - url:
                        public init(
                            closedAt: Foundation.Date? = nil,
                            closedIssues: Swift.Int,
                            createdAt: Foundation.Date,
                            creator: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.MilestonePayload.CreatorPayload? = nil,
                            description: Swift.String? = nil,
                            dueOn: Foundation.Date? = nil,
                            htmlUrl: Swift.String,
                            id: Swift.Int,
                            labelsUrl: Swift.String,
                            nodeId: Swift.String,
                            number: Swift.Int,
                            openIssues: Swift.Int,
                            state: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.MilestonePayload.StatePayload,
                            title: Swift.String,
                            updatedAt: Foundation.Date,
                            url: Swift.String
                        ) {
                            self.closedAt = closedAt
                            self.closedIssues = closedIssues
                            self.createdAt = createdAt
                            self.creator = creator
                            self.description = description
                            self.dueOn = dueOn
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.labelsUrl = labelsUrl
                            self.nodeId = nodeId
                            self.number = number
                            self.openIssues = openIssues
                            self.state = state
                            self.title = title
                            self.updatedAt = updatedAt
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case closedAt = "closed_at"
                            case closedIssues = "closed_issues"
                            case createdAt = "created_at"
                            case creator
                            case description
                            case dueOn = "due_on"
                            case htmlUrl = "html_url"
                            case id
                            case labelsUrl = "labels_url"
                            case nodeId = "node_id"
                            case number
                            case openIssues = "open_issues"
                            case state
                            case title
                            case updatedAt = "updated_at"
                            case url
                        }
                    }
                    /// A collection of related issues and pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/milestone`.
                    public var milestone: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.MilestonePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/number`.
                    public var number: Swift.Int
                    /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app`.
                    public struct PerformedViaGithubAppPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/created_at`.
                        public var createdAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/EventsPayload`.
                        @frozen public enum EventsPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case branchProtectionRule = "branch_protection_rule"
                            case checkRun = "check_run"
                            case checkSuite = "check_suite"
                            case codeScanningAlert = "code_scanning_alert"
                            case commitComment = "commit_comment"
                            case contentReference = "content_reference"
                            case create = "create"
                            case delete = "delete"
                            case deployment = "deployment"
                            case deploymentReview = "deployment_review"
                            case deploymentStatus = "deployment_status"
                            case deployKey = "deploy_key"
                            case discussion = "discussion"
                            case discussionComment = "discussion_comment"
                            case fork = "fork"
                            case gollum = "gollum"
                            case issues = "issues"
                            case issueComment = "issue_comment"
                            case label = "label"
                            case member = "member"
                            case membership = "membership"
                            case milestone = "milestone"
                            case organization = "organization"
                            case orgBlock = "org_block"
                            case pageBuild = "page_build"
                            case project = "project"
                            case projectCard = "project_card"
                            case projectColumn = "project_column"
                            case _public = "public"
                            case pullRequest = "pull_request"
                            case pullRequestReview = "pull_request_review"
                            case pullRequestReviewComment = "pull_request_review_comment"
                            case push = "push"
                            case registryPackage = "registry_package"
                            case release = "release"
                            case repository = "repository"
                            case repositoryDispatch = "repository_dispatch"
                            case secretScanningAlert = "secret_scanning_alert"
                            case star = "star"
                            case status = "status"
                            case team = "team"
                            case teamAdd = "team_add"
                            case watch = "watch"
                            case workflowDispatch = "workflow_dispatch"
                            case workflowRun = "workflow_run"
                        }
                        /// The list of events for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/events`.
                        public typealias EventsPayload = [Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.EventsPayloadPayload]
                        /// The list of events for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/events`.
                        public var events: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.EventsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/external_url`.
                        public var externalUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/html_url`.
                        public var htmlUrl: Swift.String
                        /// Unique identifier of the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/id`.
                        public var id: Swift.Int?
                        /// The name of the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/node_id`.
                        public var nodeId: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/owner`.
                        public struct OwnerPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/owner/avatar_url`.
                            public var avatarUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/owner/deleted`.
                            public var deleted: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/owner/email`.
                            public var email: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/owner/events_url`.
                            public var eventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/owner/followers_url`.
                            public var followersUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/owner/following_url`.
                            public var followingUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/owner/gists_url`.
                            public var gistsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/owner/gravatar_id`.
                            public var gravatarId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/owner/html_url`.
                            public var htmlUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/owner/id`.
                            public var id: Swift.Int
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/owner/login`.
                            public var login: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/owner/name`.
                            public var name: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/owner/node_id`.
                            public var nodeId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/owner/organizations_url`.
                            public var organizationsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/owner/received_events_url`.
                            public var receivedEventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/owner/repos_url`.
                            public var reposUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/owner/site_admin`.
                            public var siteAdmin: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/owner/starred_url`.
                            public var starredUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/owner/subscriptions_url`.
                            public var subscriptionsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/owner/type`.
                            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case bot = "Bot"
                                case user = "User"
                                case organization = "Organization"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/owner/type`.
                            public var _type: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/owner/url`.
                            public var url: Swift.String?
                            /// Creates a new `OwnerPayload`.
                            ///
                            /// - Parameters:
                            ///   - avatarUrl:
                            ///   - deleted:
                            ///   - email:
                            ///   - eventsUrl:
                            ///   - followersUrl:
                            ///   - followingUrl:
                            ///   - gistsUrl:
                            ///   - gravatarId:
                            ///   - htmlUrl:
                            ///   - id:
                            ///   - login:
                            ///   - name:
                            ///   - nodeId:
                            ///   - organizationsUrl:
                            ///   - receivedEventsUrl:
                            ///   - reposUrl:
                            ///   - siteAdmin:
                            ///   - starredUrl:
                            ///   - subscriptionsUrl:
                            ///   - _type:
                            ///   - url:
                            public init(
                                avatarUrl: Swift.String? = nil,
                                deleted: Swift.Bool? = nil,
                                email: Swift.String? = nil,
                                eventsUrl: Swift.String? = nil,
                                followersUrl: Swift.String? = nil,
                                followingUrl: Swift.String? = nil,
                                gistsUrl: Swift.String? = nil,
                                gravatarId: Swift.String? = nil,
                                htmlUrl: Swift.String? = nil,
                                id: Swift.Int,
                                login: Swift.String,
                                name: Swift.String? = nil,
                                nodeId: Swift.String? = nil,
                                organizationsUrl: Swift.String? = nil,
                                receivedEventsUrl: Swift.String? = nil,
                                reposUrl: Swift.String? = nil,
                                siteAdmin: Swift.Bool? = nil,
                                starredUrl: Swift.String? = nil,
                                subscriptionsUrl: Swift.String? = nil,
                                _type: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload? = nil,
                                url: Swift.String? = nil
                            ) {
                                self.avatarUrl = avatarUrl
                                self.deleted = deleted
                                self.email = email
                                self.eventsUrl = eventsUrl
                                self.followersUrl = followersUrl
                                self.followingUrl = followingUrl
                                self.gistsUrl = gistsUrl
                                self.gravatarId = gravatarId
                                self.htmlUrl = htmlUrl
                                self.id = id
                                self.login = login
                                self.name = name
                                self.nodeId = nodeId
                                self.organizationsUrl = organizationsUrl
                                self.receivedEventsUrl = receivedEventsUrl
                                self.reposUrl = reposUrl
                                self.siteAdmin = siteAdmin
                                self.starredUrl = starredUrl
                                self.subscriptionsUrl = subscriptionsUrl
                                self._type = _type
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case avatarUrl = "avatar_url"
                                case deleted
                                case email
                                case eventsUrl = "events_url"
                                case followersUrl = "followers_url"
                                case followingUrl = "following_url"
                                case gistsUrl = "gists_url"
                                case gravatarId = "gravatar_id"
                                case htmlUrl = "html_url"
                                case id
                                case login
                                case name
                                case nodeId = "node_id"
                                case organizationsUrl = "organizations_url"
                                case receivedEventsUrl = "received_events_url"
                                case reposUrl = "repos_url"
                                case siteAdmin = "site_admin"
                                case starredUrl = "starred_url"
                                case subscriptionsUrl = "subscriptions_url"
                                case _type = "type"
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/owner`.
                        public var owner: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.OwnerPayload?
                        /// The set of permissions for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions`.
                        public struct PermissionsPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/actions`.
                            @frozen public enum ActionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/actions`.
                            public var actions: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/administration`.
                            @frozen public enum AdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/administration`.
                            public var administration: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/checks`.
                            @frozen public enum ChecksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/checks`.
                            public var checks: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/content_references`.
                            @frozen public enum ContentReferencesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/content_references`.
                            public var contentReferences: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/contents`.
                            @frozen public enum ContentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/contents`.
                            public var contents: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/deployments`.
                            @frozen public enum DeploymentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/deployments`.
                            public var deployments: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/discussions`.
                            @frozen public enum DiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/discussions`.
                            public var discussions: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/emails`.
                            @frozen public enum EmailsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/emails`.
                            public var emails: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/environments`.
                            @frozen public enum EnvironmentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/environments`.
                            public var environments: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/issues`.
                            @frozen public enum IssuesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/issues`.
                            public var issues: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/keys`.
                            @frozen public enum KeysPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/keys`.
                            public var keys: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/members`.
                            @frozen public enum MembersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/members`.
                            public var members: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/metadata`.
                            @frozen public enum MetadataPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/metadata`.
                            public var metadata: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/organization_administration`.
                            @frozen public enum OrganizationAdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/organization_administration`.
                            public var organizationAdministration: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/organization_hooks`.
                            @frozen public enum OrganizationHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/organization_hooks`.
                            public var organizationHooks: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/organization_packages`.
                            @frozen public enum OrganizationPackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/organization_packages`.
                            public var organizationPackages: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/organization_plan`.
                            @frozen public enum OrganizationPlanPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/organization_plan`.
                            public var organizationPlan: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/organization_projects`.
                            @frozen public enum OrganizationProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/organization_projects`.
                            public var organizationProjects: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/organization_secrets`.
                            @frozen public enum OrganizationSecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/organization_secrets`.
                            public var organizationSecrets: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/organization_self_hosted_runners`.
                            @frozen public enum OrganizationSelfHostedRunnersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/organization_self_hosted_runners`.
                            public var organizationSelfHostedRunners: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/organization_user_blocking`.
                            @frozen public enum OrganizationUserBlockingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/organization_user_blocking`.
                            public var organizationUserBlocking: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/packages`.
                            @frozen public enum PackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/packages`.
                            public var packages: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/pages`.
                            @frozen public enum PagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/pages`.
                            public var pages: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/pull_requests`.
                            @frozen public enum PullRequestsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/pull_requests`.
                            public var pullRequests: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/repository_hooks`.
                            @frozen public enum RepositoryHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/repository_hooks`.
                            public var repositoryHooks: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/repository_projects`.
                            @frozen public enum RepositoryProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/repository_projects`.
                            public var repositoryProjects: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/secret_scanning_alerts`.
                            @frozen public enum SecretScanningAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/secret_scanning_alerts`.
                            public var secretScanningAlerts: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/secrets`.
                            @frozen public enum SecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/secrets`.
                            public var secrets: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/security_events`.
                            @frozen public enum SecurityEventsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/security_events`.
                            public var securityEvents: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/security_scanning_alert`.
                            @frozen public enum SecurityScanningAlertPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/security_scanning_alert`.
                            public var securityScanningAlert: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/single_file`.
                            @frozen public enum SingleFilePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/single_file`.
                            public var singleFile: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/statuses`.
                            @frozen public enum StatusesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/statuses`.
                            public var statuses: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/team_discussions`.
                            @frozen public enum TeamDiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/team_discussions`.
                            public var teamDiscussions: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/vulnerability_alerts`.
                            @frozen public enum VulnerabilityAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/vulnerability_alerts`.
                            public var vulnerabilityAlerts: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/workflows`.
                            @frozen public enum WorkflowsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions/workflows`.
                            public var workflows: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload?
                            /// Creates a new `PermissionsPayload`.
                            ///
                            /// - Parameters:
                            ///   - actions:
                            ///   - administration:
                            ///   - checks:
                            ///   - contentReferences:
                            ///   - contents:
                            ///   - deployments:
                            ///   - discussions:
                            ///   - emails:
                            ///   - environments:
                            ///   - issues:
                            ///   - keys:
                            ///   - members:
                            ///   - metadata:
                            ///   - organizationAdministration:
                            ///   - organizationHooks:
                            ///   - organizationPackages:
                            ///   - organizationPlan:
                            ///   - organizationProjects:
                            ///   - organizationSecrets:
                            ///   - organizationSelfHostedRunners:
                            ///   - organizationUserBlocking:
                            ///   - packages:
                            ///   - pages:
                            ///   - pullRequests:
                            ///   - repositoryHooks:
                            ///   - repositoryProjects:
                            ///   - secretScanningAlerts:
                            ///   - secrets:
                            ///   - securityEvents:
                            ///   - securityScanningAlert:
                            ///   - singleFile:
                            ///   - statuses:
                            ///   - teamDiscussions:
                            ///   - vulnerabilityAlerts:
                            ///   - workflows:
                            public init(
                                actions: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload? = nil,
                                administration: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload? = nil,
                                checks: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload? = nil,
                                contentReferences: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload? = nil,
                                contents: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload? = nil,
                                deployments: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload? = nil,
                                discussions: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload? = nil,
                                emails: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload? = nil,
                                environments: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload? = nil,
                                issues: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload? = nil,
                                keys: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload? = nil,
                                members: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload? = nil,
                                metadata: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload? = nil,
                                organizationAdministration: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload? = nil,
                                organizationHooks: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload? = nil,
                                organizationPackages: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload? = nil,
                                organizationPlan: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload? = nil,
                                organizationProjects: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload? = nil,
                                organizationSecrets: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload? = nil,
                                organizationSelfHostedRunners: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload? = nil,
                                organizationUserBlocking: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload? = nil,
                                packages: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload? = nil,
                                pages: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload? = nil,
                                pullRequests: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload? = nil,
                                repositoryHooks: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload? = nil,
                                repositoryProjects: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload? = nil,
                                secretScanningAlerts: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload? = nil,
                                secrets: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload? = nil,
                                securityEvents: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload? = nil,
                                securityScanningAlert: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload? = nil,
                                singleFile: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload? = nil,
                                statuses: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload? = nil,
                                teamDiscussions: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload? = nil,
                                vulnerabilityAlerts: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload? = nil,
                                workflows: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload? = nil
                            ) {
                                self.actions = actions
                                self.administration = administration
                                self.checks = checks
                                self.contentReferences = contentReferences
                                self.contents = contents
                                self.deployments = deployments
                                self.discussions = discussions
                                self.emails = emails
                                self.environments = environments
                                self.issues = issues
                                self.keys = keys
                                self.members = members
                                self.metadata = metadata
                                self.organizationAdministration = organizationAdministration
                                self.organizationHooks = organizationHooks
                                self.organizationPackages = organizationPackages
                                self.organizationPlan = organizationPlan
                                self.organizationProjects = organizationProjects
                                self.organizationSecrets = organizationSecrets
                                self.organizationSelfHostedRunners = organizationSelfHostedRunners
                                self.organizationUserBlocking = organizationUserBlocking
                                self.packages = packages
                                self.pages = pages
                                self.pullRequests = pullRequests
                                self.repositoryHooks = repositoryHooks
                                self.repositoryProjects = repositoryProjects
                                self.secretScanningAlerts = secretScanningAlerts
                                self.secrets = secrets
                                self.securityEvents = securityEvents
                                self.securityScanningAlert = securityScanningAlert
                                self.singleFile = singleFile
                                self.statuses = statuses
                                self.teamDiscussions = teamDiscussions
                                self.vulnerabilityAlerts = vulnerabilityAlerts
                                self.workflows = workflows
                            }
                            public enum CodingKeys: String, CodingKey {
                                case actions
                                case administration
                                case checks
                                case contentReferences = "content_references"
                                case contents
                                case deployments
                                case discussions
                                case emails
                                case environments
                                case issues
                                case keys
                                case members
                                case metadata
                                case organizationAdministration = "organization_administration"
                                case organizationHooks = "organization_hooks"
                                case organizationPackages = "organization_packages"
                                case organizationPlan = "organization_plan"
                                case organizationProjects = "organization_projects"
                                case organizationSecrets = "organization_secrets"
                                case organizationSelfHostedRunners = "organization_self_hosted_runners"
                                case organizationUserBlocking = "organization_user_blocking"
                                case packages
                                case pages
                                case pullRequests = "pull_requests"
                                case repositoryHooks = "repository_hooks"
                                case repositoryProjects = "repository_projects"
                                case secretScanningAlerts = "secret_scanning_alerts"
                                case secrets
                                case securityEvents = "security_events"
                                case securityScanningAlert = "security_scanning_alert"
                                case singleFile = "single_file"
                                case statuses
                                case teamDiscussions = "team_discussions"
                                case vulnerabilityAlerts = "vulnerability_alerts"
                                case workflows
                            }
                        }
                        /// The set of permissions for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/permissions`.
                        public var permissions: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload?
                        /// The slug name of the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/slug`.
                        public var slug: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app/updated_at`.
                        public var updatedAt: Foundation.Date?
                        /// Creates a new `PerformedViaGithubAppPayload`.
                        ///
                        /// - Parameters:
                        ///   - createdAt:
                        ///   - description:
                        ///   - events: The list of events for the GitHub app
                        ///   - externalUrl:
                        ///   - htmlUrl:
                        ///   - id: Unique identifier of the GitHub app
                        ///   - name: The name of the GitHub app
                        ///   - nodeId:
                        ///   - owner:
                        ///   - permissions: The set of permissions for the GitHub app
                        ///   - slug: The slug name of the GitHub app
                        ///   - updatedAt:
                        public init(
                            createdAt: Foundation.Date? = nil,
                            description: Swift.String? = nil,
                            events: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.EventsPayload? = nil,
                            externalUrl: Swift.String? = nil,
                            htmlUrl: Swift.String,
                            id: Swift.Int? = nil,
                            name: Swift.String,
                            nodeId: Swift.String,
                            owner: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.OwnerPayload? = nil,
                            permissions: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload.PermissionsPayload? = nil,
                            slug: Swift.String? = nil,
                            updatedAt: Foundation.Date? = nil
                        ) {
                            self.createdAt = createdAt
                            self.description = description
                            self.events = events
                            self.externalUrl = externalUrl
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.name = name
                            self.nodeId = nodeId
                            self.owner = owner
                            self.permissions = permissions
                            self.slug = slug
                            self.updatedAt = updatedAt
                        }
                        public enum CodingKeys: String, CodingKey {
                            case createdAt = "created_at"
                            case description
                            case events
                            case externalUrl = "external_url"
                            case htmlUrl = "html_url"
                            case id
                            case name
                            case nodeId = "node_id"
                            case owner
                            case permissions
                            case slug
                            case updatedAt = "updated_at"
                        }
                    }
                    /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/performed_via_github_app`.
                    public var performedViaGithubApp: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/pull_request`.
                    public struct PullRequestPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/pull_request/diff_url`.
                        public var diffUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/pull_request/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/pull_request/merged_at`.
                        public var mergedAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/pull_request/patch_url`.
                        public var patchUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/pull_request/url`.
                        public var url: Swift.String?
                        /// Creates a new `PullRequestPayload`.
                        ///
                        /// - Parameters:
                        ///   - diffUrl:
                        ///   - htmlUrl:
                        ///   - mergedAt:
                        ///   - patchUrl:
                        ///   - url:
                        public init(
                            diffUrl: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            mergedAt: Foundation.Date? = nil,
                            patchUrl: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.diffUrl = diffUrl
                            self.htmlUrl = htmlUrl
                            self.mergedAt = mergedAt
                            self.patchUrl = patchUrl
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case diffUrl = "diff_url"
                            case htmlUrl = "html_url"
                            case mergedAt = "merged_at"
                            case patchUrl = "patch_url"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/pull_request`.
                    public var pullRequest: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PullRequestPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/reactions`.
                    public struct ReactionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/reactions/+1`.
                        public var _plus_1: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/reactions/-1`.
                        public var _hyphen_1: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/reactions/confused`.
                        public var confused: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/reactions/eyes`.
                        public var eyes: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/reactions/heart`.
                        public var heart: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/reactions/hooray`.
                        public var hooray: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/reactions/laugh`.
                        public var laugh: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/reactions/rocket`.
                        public var rocket: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/reactions/total_count`.
                        public var totalCount: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/reactions/url`.
                        public var url: Swift.String
                        /// Creates a new `ReactionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - _plus_1:
                        ///   - _hyphen_1:
                        ///   - confused:
                        ///   - eyes:
                        ///   - heart:
                        ///   - hooray:
                        ///   - laugh:
                        ///   - rocket:
                        ///   - totalCount:
                        ///   - url:
                        public init(
                            _plus_1: Swift.Int,
                            _hyphen_1: Swift.Int,
                            confused: Swift.Int,
                            eyes: Swift.Int,
                            heart: Swift.Int,
                            hooray: Swift.Int,
                            laugh: Swift.Int,
                            rocket: Swift.Int,
                            totalCount: Swift.Int,
                            url: Swift.String
                        ) {
                            self._plus_1 = _plus_1
                            self._hyphen_1 = _hyphen_1
                            self.confused = confused
                            self.eyes = eyes
                            self.heart = heart
                            self.hooray = hooray
                            self.laugh = laugh
                            self.rocket = rocket
                            self.totalCount = totalCount
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _plus_1 = "+1"
                            case _hyphen_1 = "-1"
                            case confused
                            case eyes
                            case heart
                            case hooray
                            case laugh
                            case rocket
                            case totalCount = "total_count"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/reactions`.
                    public var reactions: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.ReactionsPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/repository_url`.
                    public var repositoryUrl: Swift.String
                    /// State of the issue; either 'open' or 'closed'
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/state`.
                    @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case closed = "closed"
                    }
                    /// State of the issue; either 'open' or 'closed'
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/state`.
                    public var state: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.StatePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/state_reason`.
                    public var stateReason: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/timeline_url`.
                    public var timelineUrl: Swift.String?
                    /// Title of the issue
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/title`.
                    public var title: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/updated_at`.
                    public var updatedAt: Foundation.Date
                    /// URL for the issue
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/url`.
                    public var url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/user`.
                    public struct UserPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/user/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/user/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/user/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/user/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/user/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/user/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/user/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/user/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/user/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/user/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/user/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/user/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/user/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/user/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/user/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/user/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/user/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/user/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/user/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/user/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/user/type`.
                        public var _type: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.UserPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/user/url`.
                        public var url: Swift.String?
                        /// Creates a new `UserPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.UserPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue/user`.
                    public var user: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.UserPayload?
                    /// Creates a new `NewIssuePayload`.
                    ///
                    /// - Parameters:
                    ///   - activeLockReason:
                    ///   - assignee:
                    ///   - assignees:
                    ///   - authorAssociation: How the author is associated with the repository.
                    ///   - body: Contents of the issue
                    ///   - closedAt:
                    ///   - comments:
                    ///   - commentsUrl:
                    ///   - createdAt:
                    ///   - draft:
                    ///   - eventsUrl:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - labels:
                    ///   - labelsUrl:
                    ///   - locked:
                    ///   - milestone: A collection of related issues and pull requests.
                    ///   - nodeId:
                    ///   - number:
                    ///   - performedViaGithubApp: GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                    ///   - pullRequest:
                    ///   - reactions:
                    ///   - repositoryUrl:
                    ///   - state: State of the issue; either 'open' or 'closed'
                    ///   - stateReason:
                    ///   - timelineUrl:
                    ///   - title: Title of the issue
                    ///   - updatedAt:
                    ///   - url: URL for the issue
                    ///   - user:
                    public init(
                        activeLockReason: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.ActiveLockReasonPayload? = nil,
                        assignee: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.AssigneePayload? = nil,
                        assignees: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.AssigneesPayload,
                        authorAssociation: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.AuthorAssociationPayload,
                        body: Swift.String? = nil,
                        closedAt: Foundation.Date? = nil,
                        comments: Swift.Int,
                        commentsUrl: Swift.String,
                        createdAt: Foundation.Date,
                        draft: Swift.Bool? = nil,
                        eventsUrl: Swift.String,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        labels: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.LabelsPayload? = nil,
                        labelsUrl: Swift.String,
                        locked: Swift.Bool? = nil,
                        milestone: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.MilestonePayload? = nil,
                        nodeId: Swift.String,
                        number: Swift.Int,
                        performedViaGithubApp: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PerformedViaGithubAppPayload? = nil,
                        pullRequest: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.PullRequestPayload? = nil,
                        reactions: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.ReactionsPayload,
                        repositoryUrl: Swift.String,
                        state: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.StatePayload? = nil,
                        stateReason: Swift.String? = nil,
                        timelineUrl: Swift.String? = nil,
                        title: Swift.String,
                        updatedAt: Foundation.Date,
                        url: Swift.String,
                        user: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload.UserPayload? = nil
                    ) {
                        self.activeLockReason = activeLockReason
                        self.assignee = assignee
                        self.assignees = assignees
                        self.authorAssociation = authorAssociation
                        self.body = body
                        self.closedAt = closedAt
                        self.comments = comments
                        self.commentsUrl = commentsUrl
                        self.createdAt = createdAt
                        self.draft = draft
                        self.eventsUrl = eventsUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.labels = labels
                        self.labelsUrl = labelsUrl
                        self.locked = locked
                        self.milestone = milestone
                        self.nodeId = nodeId
                        self.number = number
                        self.performedViaGithubApp = performedViaGithubApp
                        self.pullRequest = pullRequest
                        self.reactions = reactions
                        self.repositoryUrl = repositoryUrl
                        self.state = state
                        self.stateReason = stateReason
                        self.timelineUrl = timelineUrl
                        self.title = title
                        self.updatedAt = updatedAt
                        self.url = url
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case activeLockReason = "active_lock_reason"
                        case assignee
                        case assignees
                        case authorAssociation = "author_association"
                        case body
                        case closedAt = "closed_at"
                        case comments
                        case commentsUrl = "comments_url"
                        case createdAt = "created_at"
                        case draft
                        case eventsUrl = "events_url"
                        case htmlUrl = "html_url"
                        case id
                        case labels
                        case labelsUrl = "labels_url"
                        case locked
                        case milestone
                        case nodeId = "node_id"
                        case number
                        case performedViaGithubApp = "performed_via_github_app"
                        case pullRequest = "pull_request"
                        case reactions
                        case repositoryUrl = "repository_url"
                        case state
                        case stateReason = "state_reason"
                        case timelineUrl = "timeline_url"
                        case title
                        case updatedAt = "updated_at"
                        case url
                        case user
                    }
                }
                /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_issue`.
                public var newIssue: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload
                /// A git repository
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository`.
                public struct NewRepositoryPayload: Codable, Hashable, Sendable {
                    /// Whether to allow auto-merge for pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/allow_auto_merge`.
                    public var allowAutoMerge: Swift.Bool?
                    /// Whether to allow private forks
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/allow_forking`.
                    public var allowForking: Swift.Bool?
                    /// Whether to allow merge commits for pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/allow_merge_commit`.
                    public var allowMergeCommit: Swift.Bool?
                    /// Whether to allow rebase merges for pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/allow_rebase_merge`.
                    public var allowRebaseMerge: Swift.Bool?
                    /// Whether to allow squash merges for pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/allow_squash_merge`.
                    public var allowSquashMerge: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/allow_update_branch`.
                    public var allowUpdateBranch: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/archive_url`.
                    public var archiveUrl: Swift.String
                    /// Whether the repository is archived.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/archived`.
                    public var archived: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/assignees_url`.
                    public var assigneesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/blobs_url`.
                    public var blobsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/branches_url`.
                    public var branchesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/clone_url`.
                    public var cloneUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/collaborators_url`.
                    public var collaboratorsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/comments_url`.
                    public var commentsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/commits_url`.
                    public var commitsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/compare_url`.
                    public var compareUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/contents_url`.
                    public var contentsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/contributors_url`.
                    public var contributorsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/created_at`.
                    @frozen public enum CreatedAtPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/created_at/case1`.
                        case case1(Swift.Int)
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/created_at/case2`.
                        case case2(Foundation.Date)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/created_at`.
                    public var createdAt: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewRepositoryPayload.CreatedAtPayload
                    /// The default branch of the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/default_branch`.
                    public var defaultBranch: Swift.String
                    /// Whether to delete head branches when pull requests are merged
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/delete_branch_on_merge`.
                    public var deleteBranchOnMerge: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/deployments_url`.
                    public var deploymentsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/description`.
                    public var description: Swift.String?
                    /// Returns whether or not this repository is disabled.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/disabled`.
                    public var disabled: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/downloads_url`.
                    public var downloadsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/events_url`.
                    public var eventsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/fork`.
                    public var fork: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/forks`.
                    public var forks: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/forks_count`.
                    public var forksCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/forks_url`.
                    public var forksUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/full_name`.
                    public var fullName: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/git_commits_url`.
                    public var gitCommitsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/git_refs_url`.
                    public var gitRefsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/git_tags_url`.
                    public var gitTagsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/git_url`.
                    public var gitUrl: Swift.String
                    /// Whether downloads are enabled.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/has_downloads`.
                    public var hasDownloads: Swift.Bool
                    /// Whether issues are enabled.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/has_issues`.
                    public var hasIssues: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/has_pages`.
                    public var hasPages: Swift.Bool
                    /// Whether projects are enabled.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/has_projects`.
                    public var hasProjects: Swift.Bool
                    /// Whether the wiki is enabled.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/has_wiki`.
                    public var hasWiki: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/homepage`.
                    public var homepage: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/hooks_url`.
                    public var hooksUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/html_url`.
                    public var htmlUrl: Swift.String
                    /// Unique identifier of the repository
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/is_template`.
                    public var isTemplate: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/issue_comment_url`.
                    public var issueCommentUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/issue_events_url`.
                    public var issueEventsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/issues_url`.
                    public var issuesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/keys_url`.
                    public var keysUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/labels_url`.
                    public var labelsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/language`.
                    public var language: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/languages_url`.
                    public var languagesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/license`.
                    public struct LicensePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/license/key`.
                        public var key: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/license/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/license/node_id`.
                        public var nodeId: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/license/spdx_id`.
                        public var spdxId: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/license/url`.
                        public var url: Swift.String?
                        /// Creates a new `LicensePayload`.
                        ///
                        /// - Parameters:
                        ///   - key:
                        ///   - name:
                        ///   - nodeId:
                        ///   - spdxId:
                        ///   - url:
                        public init(
                            key: Swift.String,
                            name: Swift.String,
                            nodeId: Swift.String,
                            spdxId: Swift.String,
                            url: Swift.String? = nil
                        ) {
                            self.key = key
                            self.name = name
                            self.nodeId = nodeId
                            self.spdxId = spdxId
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case key
                            case name
                            case nodeId = "node_id"
                            case spdxId = "spdx_id"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/license`.
                    public var license: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewRepositoryPayload.LicensePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/master_branch`.
                    public var masterBranch: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/merges_url`.
                    public var mergesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/milestones_url`.
                    public var milestonesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/mirror_url`.
                    public var mirrorUrl: Swift.String?
                    /// The name of the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/notifications_url`.
                    public var notificationsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/open_issues`.
                    public var openIssues: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/open_issues_count`.
                    public var openIssuesCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/organization`.
                    public var organization: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/owner`.
                    public struct OwnerPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/owner/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/owner/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/owner/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/owner/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/owner/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/owner/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/owner/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/owner/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/owner/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/owner/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/owner/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/owner/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/owner/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/owner/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/owner/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/owner/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/owner/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/owner/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/owner/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/owner/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/owner/type`.
                        public var _type: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewRepositoryPayload.OwnerPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/owner/url`.
                        public var url: Swift.String?
                        /// Creates a new `OwnerPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewRepositoryPayload.OwnerPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/owner`.
                    public var owner: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewRepositoryPayload.OwnerPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/permissions`.
                    public struct PermissionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/permissions/admin`.
                        public var admin: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/permissions/maintain`.
                        public var maintain: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/permissions/pull`.
                        public var pull: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/permissions/push`.
                        public var push: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/permissions/triage`.
                        public var triage: Swift.Bool?
                        /// Creates a new `PermissionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - admin:
                        ///   - maintain:
                        ///   - pull:
                        ///   - push:
                        ///   - triage:
                        public init(
                            admin: Swift.Bool,
                            maintain: Swift.Bool? = nil,
                            pull: Swift.Bool,
                            push: Swift.Bool,
                            triage: Swift.Bool? = nil
                        ) {
                            self.admin = admin
                            self.maintain = maintain
                            self.pull = pull
                            self.push = push
                            self.triage = triage
                        }
                        public enum CodingKeys: String, CodingKey {
                            case admin
                            case maintain
                            case pull
                            case push
                            case triage
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/permissions`.
                    public var permissions: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewRepositoryPayload.PermissionsPayload?
                    /// Whether the repository is private or public.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/private`.
                    public var _private: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/public`.
                    public var _public: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/pulls_url`.
                    public var pullsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/pushed_at`.
                    @frozen public enum PushedAtPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/pushed_at/case1`.
                        case case1(Swift.Int)
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/pushed_at/case2`.
                        case case2(Foundation.Date)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/pushed_at`.
                    public var pushedAt: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewRepositoryPayload.PushedAtPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/releases_url`.
                    public var releasesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/role_name`.
                    public var roleName: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/size`.
                    public var size: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/ssh_url`.
                    public var sshUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/stargazers`.
                    public var stargazers: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/stargazers_count`.
                    public var stargazersCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/stargazers_url`.
                    public var stargazersUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/statuses_url`.
                    public var statusesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/subscribers_url`.
                    public var subscribersUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/subscription_url`.
                    public var subscriptionUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/svn_url`.
                    public var svnUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/tags_url`.
                    public var tagsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/teams_url`.
                    public var teamsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/topics`.
                    public var topics: [Swift.String]
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/trees_url`.
                    public var treesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/updated_at`.
                    public var updatedAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/url`.
                    public var url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/visibility`.
                    @frozen public enum VisibilityPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case _public = "public"
                        case _private = "private"
                        case _internal = "internal"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/visibility`.
                    public var visibility: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewRepositoryPayload.VisibilityPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/watchers`.
                    public var watchers: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/watchers_count`.
                    public var watchersCount: Swift.Int
                    /// Whether to require contributors to sign off on web-based commits
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository/web_commit_signoff_required`.
                    public var webCommitSignoffRequired: Swift.Bool?
                    /// Creates a new `NewRepositoryPayload`.
                    ///
                    /// - Parameters:
                    ///   - allowAutoMerge: Whether to allow auto-merge for pull requests.
                    ///   - allowForking: Whether to allow private forks
                    ///   - allowMergeCommit: Whether to allow merge commits for pull requests.
                    ///   - allowRebaseMerge: Whether to allow rebase merges for pull requests.
                    ///   - allowSquashMerge: Whether to allow squash merges for pull requests.
                    ///   - allowUpdateBranch:
                    ///   - archiveUrl:
                    ///   - archived: Whether the repository is archived.
                    ///   - assigneesUrl:
                    ///   - blobsUrl:
                    ///   - branchesUrl:
                    ///   - cloneUrl:
                    ///   - collaboratorsUrl:
                    ///   - commentsUrl:
                    ///   - commitsUrl:
                    ///   - compareUrl:
                    ///   - contentsUrl:
                    ///   - contributorsUrl:
                    ///   - createdAt:
                    ///   - defaultBranch: The default branch of the repository.
                    ///   - deleteBranchOnMerge: Whether to delete head branches when pull requests are merged
                    ///   - deploymentsUrl:
                    ///   - description:
                    ///   - disabled: Returns whether or not this repository is disabled.
                    ///   - downloadsUrl:
                    ///   - eventsUrl:
                    ///   - fork:
                    ///   - forks:
                    ///   - forksCount:
                    ///   - forksUrl:
                    ///   - fullName:
                    ///   - gitCommitsUrl:
                    ///   - gitRefsUrl:
                    ///   - gitTagsUrl:
                    ///   - gitUrl:
                    ///   - hasDownloads: Whether downloads are enabled.
                    ///   - hasIssues: Whether issues are enabled.
                    ///   - hasPages:
                    ///   - hasProjects: Whether projects are enabled.
                    ///   - hasWiki: Whether the wiki is enabled.
                    ///   - homepage:
                    ///   - hooksUrl:
                    ///   - htmlUrl:
                    ///   - id: Unique identifier of the repository
                    ///   - isTemplate:
                    ///   - issueCommentUrl:
                    ///   - issueEventsUrl:
                    ///   - issuesUrl:
                    ///   - keysUrl:
                    ///   - labelsUrl:
                    ///   - language:
                    ///   - languagesUrl:
                    ///   - license:
                    ///   - masterBranch:
                    ///   - mergesUrl:
                    ///   - milestonesUrl:
                    ///   - mirrorUrl:
                    ///   - name: The name of the repository.
                    ///   - nodeId:
                    ///   - notificationsUrl:
                    ///   - openIssues:
                    ///   - openIssuesCount:
                    ///   - organization:
                    ///   - owner:
                    ///   - permissions:
                    ///   - _private: Whether the repository is private or public.
                    ///   - _public:
                    ///   - pullsUrl:
                    ///   - pushedAt:
                    ///   - releasesUrl:
                    ///   - roleName:
                    ///   - size:
                    ///   - sshUrl:
                    ///   - stargazers:
                    ///   - stargazersCount:
                    ///   - stargazersUrl:
                    ///   - statusesUrl:
                    ///   - subscribersUrl:
                    ///   - subscriptionUrl:
                    ///   - svnUrl:
                    ///   - tagsUrl:
                    ///   - teamsUrl:
                    ///   - topics:
                    ///   - treesUrl:
                    ///   - updatedAt:
                    ///   - url:
                    ///   - visibility:
                    ///   - watchers:
                    ///   - watchersCount:
                    ///   - webCommitSignoffRequired: Whether to require contributors to sign off on web-based commits
                    public init(
                        allowAutoMerge: Swift.Bool? = nil,
                        allowForking: Swift.Bool? = nil,
                        allowMergeCommit: Swift.Bool? = nil,
                        allowRebaseMerge: Swift.Bool? = nil,
                        allowSquashMerge: Swift.Bool? = nil,
                        allowUpdateBranch: Swift.Bool? = nil,
                        archiveUrl: Swift.String,
                        archived: Swift.Bool,
                        assigneesUrl: Swift.String,
                        blobsUrl: Swift.String,
                        branchesUrl: Swift.String,
                        cloneUrl: Swift.String,
                        collaboratorsUrl: Swift.String,
                        commentsUrl: Swift.String,
                        commitsUrl: Swift.String,
                        compareUrl: Swift.String,
                        contentsUrl: Swift.String,
                        contributorsUrl: Swift.String,
                        createdAt: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewRepositoryPayload.CreatedAtPayload,
                        defaultBranch: Swift.String,
                        deleteBranchOnMerge: Swift.Bool? = nil,
                        deploymentsUrl: Swift.String,
                        description: Swift.String? = nil,
                        disabled: Swift.Bool? = nil,
                        downloadsUrl: Swift.String,
                        eventsUrl: Swift.String,
                        fork: Swift.Bool,
                        forks: Swift.Int,
                        forksCount: Swift.Int,
                        forksUrl: Swift.String,
                        fullName: Swift.String,
                        gitCommitsUrl: Swift.String,
                        gitRefsUrl: Swift.String,
                        gitTagsUrl: Swift.String,
                        gitUrl: Swift.String,
                        hasDownloads: Swift.Bool,
                        hasIssues: Swift.Bool,
                        hasPages: Swift.Bool,
                        hasProjects: Swift.Bool,
                        hasWiki: Swift.Bool,
                        homepage: Swift.String? = nil,
                        hooksUrl: Swift.String,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        isTemplate: Swift.Bool? = nil,
                        issueCommentUrl: Swift.String,
                        issueEventsUrl: Swift.String,
                        issuesUrl: Swift.String,
                        keysUrl: Swift.String,
                        labelsUrl: Swift.String,
                        language: Swift.String? = nil,
                        languagesUrl: Swift.String,
                        license: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewRepositoryPayload.LicensePayload? = nil,
                        masterBranch: Swift.String? = nil,
                        mergesUrl: Swift.String,
                        milestonesUrl: Swift.String,
                        mirrorUrl: Swift.String? = nil,
                        name: Swift.String,
                        nodeId: Swift.String,
                        notificationsUrl: Swift.String,
                        openIssues: Swift.Int,
                        openIssuesCount: Swift.Int,
                        organization: Swift.String? = nil,
                        owner: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewRepositoryPayload.OwnerPayload? = nil,
                        permissions: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewRepositoryPayload.PermissionsPayload? = nil,
                        _private: Swift.Bool,
                        _public: Swift.Bool? = nil,
                        pullsUrl: Swift.String,
                        pushedAt: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewRepositoryPayload.PushedAtPayload? = nil,
                        releasesUrl: Swift.String,
                        roleName: Swift.String? = nil,
                        size: Swift.Int,
                        sshUrl: Swift.String,
                        stargazers: Swift.Int? = nil,
                        stargazersCount: Swift.Int,
                        stargazersUrl: Swift.String,
                        statusesUrl: Swift.String,
                        subscribersUrl: Swift.String,
                        subscriptionUrl: Swift.String,
                        svnUrl: Swift.String,
                        tagsUrl: Swift.String,
                        teamsUrl: Swift.String,
                        topics: [Swift.String],
                        treesUrl: Swift.String,
                        updatedAt: Foundation.Date,
                        url: Swift.String,
                        visibility: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewRepositoryPayload.VisibilityPayload,
                        watchers: Swift.Int,
                        watchersCount: Swift.Int,
                        webCommitSignoffRequired: Swift.Bool? = nil
                    ) {
                        self.allowAutoMerge = allowAutoMerge
                        self.allowForking = allowForking
                        self.allowMergeCommit = allowMergeCommit
                        self.allowRebaseMerge = allowRebaseMerge
                        self.allowSquashMerge = allowSquashMerge
                        self.allowUpdateBranch = allowUpdateBranch
                        self.archiveUrl = archiveUrl
                        self.archived = archived
                        self.assigneesUrl = assigneesUrl
                        self.blobsUrl = blobsUrl
                        self.branchesUrl = branchesUrl
                        self.cloneUrl = cloneUrl
                        self.collaboratorsUrl = collaboratorsUrl
                        self.commentsUrl = commentsUrl
                        self.commitsUrl = commitsUrl
                        self.compareUrl = compareUrl
                        self.contentsUrl = contentsUrl
                        self.contributorsUrl = contributorsUrl
                        self.createdAt = createdAt
                        self.defaultBranch = defaultBranch
                        self.deleteBranchOnMerge = deleteBranchOnMerge
                        self.deploymentsUrl = deploymentsUrl
                        self.description = description
                        self.disabled = disabled
                        self.downloadsUrl = downloadsUrl
                        self.eventsUrl = eventsUrl
                        self.fork = fork
                        self.forks = forks
                        self.forksCount = forksCount
                        self.forksUrl = forksUrl
                        self.fullName = fullName
                        self.gitCommitsUrl = gitCommitsUrl
                        self.gitRefsUrl = gitRefsUrl
                        self.gitTagsUrl = gitTagsUrl
                        self.gitUrl = gitUrl
                        self.hasDownloads = hasDownloads
                        self.hasIssues = hasIssues
                        self.hasPages = hasPages
                        self.hasProjects = hasProjects
                        self.hasWiki = hasWiki
                        self.homepage = homepage
                        self.hooksUrl = hooksUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.isTemplate = isTemplate
                        self.issueCommentUrl = issueCommentUrl
                        self.issueEventsUrl = issueEventsUrl
                        self.issuesUrl = issuesUrl
                        self.keysUrl = keysUrl
                        self.labelsUrl = labelsUrl
                        self.language = language
                        self.languagesUrl = languagesUrl
                        self.license = license
                        self.masterBranch = masterBranch
                        self.mergesUrl = mergesUrl
                        self.milestonesUrl = milestonesUrl
                        self.mirrorUrl = mirrorUrl
                        self.name = name
                        self.nodeId = nodeId
                        self.notificationsUrl = notificationsUrl
                        self.openIssues = openIssues
                        self.openIssuesCount = openIssuesCount
                        self.organization = organization
                        self.owner = owner
                        self.permissions = permissions
                        self._private = _private
                        self._public = _public
                        self.pullsUrl = pullsUrl
                        self.pushedAt = pushedAt
                        self.releasesUrl = releasesUrl
                        self.roleName = roleName
                        self.size = size
                        self.sshUrl = sshUrl
                        self.stargazers = stargazers
                        self.stargazersCount = stargazersCount
                        self.stargazersUrl = stargazersUrl
                        self.statusesUrl = statusesUrl
                        self.subscribersUrl = subscribersUrl
                        self.subscriptionUrl = subscriptionUrl
                        self.svnUrl = svnUrl
                        self.tagsUrl = tagsUrl
                        self.teamsUrl = teamsUrl
                        self.topics = topics
                        self.treesUrl = treesUrl
                        self.updatedAt = updatedAt
                        self.url = url
                        self.visibility = visibility
                        self.watchers = watchers
                        self.watchersCount = watchersCount
                        self.webCommitSignoffRequired = webCommitSignoffRequired
                    }
                    public enum CodingKeys: String, CodingKey {
                        case allowAutoMerge = "allow_auto_merge"
                        case allowForking = "allow_forking"
                        case allowMergeCommit = "allow_merge_commit"
                        case allowRebaseMerge = "allow_rebase_merge"
                        case allowSquashMerge = "allow_squash_merge"
                        case allowUpdateBranch = "allow_update_branch"
                        case archiveUrl = "archive_url"
                        case archived
                        case assigneesUrl = "assignees_url"
                        case blobsUrl = "blobs_url"
                        case branchesUrl = "branches_url"
                        case cloneUrl = "clone_url"
                        case collaboratorsUrl = "collaborators_url"
                        case commentsUrl = "comments_url"
                        case commitsUrl = "commits_url"
                        case compareUrl = "compare_url"
                        case contentsUrl = "contents_url"
                        case contributorsUrl = "contributors_url"
                        case createdAt = "created_at"
                        case defaultBranch = "default_branch"
                        case deleteBranchOnMerge = "delete_branch_on_merge"
                        case deploymentsUrl = "deployments_url"
                        case description
                        case disabled
                        case downloadsUrl = "downloads_url"
                        case eventsUrl = "events_url"
                        case fork
                        case forks
                        case forksCount = "forks_count"
                        case forksUrl = "forks_url"
                        case fullName = "full_name"
                        case gitCommitsUrl = "git_commits_url"
                        case gitRefsUrl = "git_refs_url"
                        case gitTagsUrl = "git_tags_url"
                        case gitUrl = "git_url"
                        case hasDownloads = "has_downloads"
                        case hasIssues = "has_issues"
                        case hasPages = "has_pages"
                        case hasProjects = "has_projects"
                        case hasWiki = "has_wiki"
                        case homepage
                        case hooksUrl = "hooks_url"
                        case htmlUrl = "html_url"
                        case id
                        case isTemplate = "is_template"
                        case issueCommentUrl = "issue_comment_url"
                        case issueEventsUrl = "issue_events_url"
                        case issuesUrl = "issues_url"
                        case keysUrl = "keys_url"
                        case labelsUrl = "labels_url"
                        case language
                        case languagesUrl = "languages_url"
                        case license
                        case masterBranch = "master_branch"
                        case mergesUrl = "merges_url"
                        case milestonesUrl = "milestones_url"
                        case mirrorUrl = "mirror_url"
                        case name
                        case nodeId = "node_id"
                        case notificationsUrl = "notifications_url"
                        case openIssues = "open_issues"
                        case openIssuesCount = "open_issues_count"
                        case organization
                        case owner
                        case permissions
                        case _private = "private"
                        case _public = "public"
                        case pullsUrl = "pulls_url"
                        case pushedAt = "pushed_at"
                        case releasesUrl = "releases_url"
                        case roleName = "role_name"
                        case size
                        case sshUrl = "ssh_url"
                        case stargazers
                        case stargazersCount = "stargazers_count"
                        case stargazersUrl = "stargazers_url"
                        case statusesUrl = "statuses_url"
                        case subscribersUrl = "subscribers_url"
                        case subscriptionUrl = "subscription_url"
                        case svnUrl = "svn_url"
                        case tagsUrl = "tags_url"
                        case teamsUrl = "teams_url"
                        case topics
                        case treesUrl = "trees_url"
                        case updatedAt = "updated_at"
                        case url
                        case visibility
                        case watchers
                        case watchersCount = "watchers_count"
                        case webCommitSignoffRequired = "web_commit_signoff_required"
                    }
                }
                /// A git repository
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes/new_repository`.
                public var newRepository: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewRepositoryPayload
                /// Creates a new `ChangesPayload`.
                ///
                /// - Parameters:
                ///   - newIssue: The [issue](https://docs.github.com/en/rest/reference/issues) itself.
                ///   - newRepository: A git repository
                public init(
                    newIssue: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewIssuePayload,
                    newRepository: Components.Schemas.WebhookIssuesTransferred.ChangesPayload.NewRepositoryPayload
                ) {
                    self.newIssue = newIssue
                    self.newRepository = newRepository
                }
                public enum CodingKeys: String, CodingKey {
                    case newIssue = "new_issue"
                    case newRepository = "new_repository"
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/changes`.
            public var changes: Components.Schemas.WebhookIssuesTransferred.ChangesPayload
            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue`.
            public struct IssuePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/active_lock_reason`.
                @frozen public enum ActiveLockReasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case resolved = "resolved"
                    case offTopic = "off-topic"
                    case tooHeated = "too heated"
                    case spam = "spam"
                    case _empty_ = ""
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/active_lock_reason`.
                public var activeLockReason: Components.Schemas.WebhookIssuesTransferred.IssuePayload.ActiveLockReasonPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/assignee`.
                public struct AssigneePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/assignee/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/assignee/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/assignee/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/assignee/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/assignee/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/assignee/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/assignee/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/assignee/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/assignee/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/assignee/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/assignee/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/assignee/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/assignee/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/assignee/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/assignee/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/assignee/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/assignee/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/assignee/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/assignee/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/assignee/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/assignee/type`.
                    public var _type: Components.Schemas.WebhookIssuesTransferred.IssuePayload.AssigneePayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/assignee/url`.
                    public var url: Swift.String?
                    /// Creates a new `AssigneePayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookIssuesTransferred.IssuePayload.AssigneePayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/assignee`.
                public var assignee: Components.Schemas.WebhookIssuesTransferred.IssuePayload.AssigneePayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/AssigneesPayload`.
                public struct AssigneesPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/AssigneesPayload/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/AssigneesPayload/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/AssigneesPayload/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/AssigneesPayload/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/AssigneesPayload/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/AssigneesPayload/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/AssigneesPayload/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/AssigneesPayload/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/AssigneesPayload/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/AssigneesPayload/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/AssigneesPayload/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/AssigneesPayload/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/AssigneesPayload/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/AssigneesPayload/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/AssigneesPayload/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/AssigneesPayload/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/AssigneesPayload/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/AssigneesPayload/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/AssigneesPayload/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/AssigneesPayload/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/AssigneesPayload/type`.
                    public var _type: Components.Schemas.WebhookIssuesTransferred.IssuePayload.AssigneesPayloadPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/AssigneesPayload/url`.
                    public var url: Swift.String?
                    /// Creates a new `AssigneesPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookIssuesTransferred.IssuePayload.AssigneesPayloadPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/assignees`.
                public typealias AssigneesPayload = [Components.Schemas.WebhookIssuesTransferred.IssuePayload.AssigneesPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/assignees`.
                public var assignees: Components.Schemas.WebhookIssuesTransferred.IssuePayload.AssigneesPayload
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/author_association`.
                @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case collaborator = "COLLABORATOR"
                    case contributor = "CONTRIBUTOR"
                    case firstTimer = "FIRST_TIMER"
                    case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                    case mannequin = "MANNEQUIN"
                    case member = "MEMBER"
                    case none = "NONE"
                    case owner = "OWNER"
                }
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/author_association`.
                public var authorAssociation: Components.Schemas.WebhookIssuesTransferred.IssuePayload.AuthorAssociationPayload
                /// Contents of the issue
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/body`.
                public var body: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/closed_at`.
                public var closedAt: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/comments`.
                public var comments: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/comments_url`.
                public var commentsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/created_at`.
                public var createdAt: Foundation.Date
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/draft`.
                public var draft: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/events_url`.
                public var eventsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/html_url`.
                public var htmlUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/LabelsPayload`.
                public struct LabelsPayloadPayload: Codable, Hashable, Sendable {
                    /// 6-character hex code, without the leading #, identifying the color
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/LabelsPayload/color`.
                    public var color: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/LabelsPayload/default`.
                    public var _default: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/LabelsPayload/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/LabelsPayload/id`.
                    public var id: Swift.Int
                    /// The name of the label.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/LabelsPayload/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/LabelsPayload/node_id`.
                    public var nodeId: Swift.String
                    /// URL for the label
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/LabelsPayload/url`.
                    public var url: Swift.String
                    /// Creates a new `LabelsPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - color: 6-character hex code, without the leading #, identifying the color
                    ///   - _default:
                    ///   - description:
                    ///   - id:
                    ///   - name: The name of the label.
                    ///   - nodeId:
                    ///   - url: URL for the label
                    public init(
                        color: Swift.String,
                        _default: Swift.Bool,
                        description: Swift.String? = nil,
                        id: Swift.Int,
                        name: Swift.String,
                        nodeId: Swift.String,
                        url: Swift.String
                    ) {
                        self.color = color
                        self._default = _default
                        self.description = description
                        self.id = id
                        self.name = name
                        self.nodeId = nodeId
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case color
                        case _default = "default"
                        case description
                        case id
                        case name
                        case nodeId = "node_id"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/labels`.
                public typealias LabelsPayload = [Components.Schemas.WebhookIssuesTransferred.IssuePayload.LabelsPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/labels`.
                public var labels: Components.Schemas.WebhookIssuesTransferred.IssuePayload.LabelsPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/labels_url`.
                public var labelsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/locked`.
                public var locked: Swift.Bool?
                /// A collection of related issues and pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone`.
                public struct MilestonePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/closed_at`.
                    public var closedAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/closed_issues`.
                    public var closedIssues: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/created_at`.
                    public var createdAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/creator`.
                    public struct CreatorPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/creator/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/creator/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/creator/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/creator/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/creator/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/creator/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/creator/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/creator/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/creator/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/creator/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/creator/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/creator/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/creator/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/creator/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/creator/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/creator/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/creator/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/creator/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/creator/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/creator/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/creator/type`.
                        public var _type: Components.Schemas.WebhookIssuesTransferred.IssuePayload.MilestonePayload.CreatorPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/creator/url`.
                        public var url: Swift.String?
                        /// Creates a new `CreatorPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesTransferred.IssuePayload.MilestonePayload.CreatorPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/creator`.
                    public var creator: Components.Schemas.WebhookIssuesTransferred.IssuePayload.MilestonePayload.CreatorPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/due_on`.
                    public var dueOn: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/html_url`.
                    public var htmlUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/labels_url`.
                    public var labelsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/node_id`.
                    public var nodeId: Swift.String
                    /// The number of the milestone.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/number`.
                    public var number: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/open_issues`.
                    public var openIssues: Swift.Int
                    /// The state of the milestone.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/state`.
                    @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case closed = "closed"
                    }
                    /// The state of the milestone.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/state`.
                    public var state: Components.Schemas.WebhookIssuesTransferred.IssuePayload.MilestonePayload.StatePayload
                    /// The title of the milestone.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/title`.
                    public var title: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/updated_at`.
                    public var updatedAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone/url`.
                    public var url: Swift.String
                    /// Creates a new `MilestonePayload`.
                    ///
                    /// - Parameters:
                    ///   - closedAt:
                    ///   - closedIssues:
                    ///   - createdAt:
                    ///   - creator:
                    ///   - description:
                    ///   - dueOn:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - labelsUrl:
                    ///   - nodeId:
                    ///   - number: The number of the milestone.
                    ///   - openIssues:
                    ///   - state: The state of the milestone.
                    ///   - title: The title of the milestone.
                    ///   - updatedAt:
                    ///   - url:
                    public init(
                        closedAt: Foundation.Date? = nil,
                        closedIssues: Swift.Int,
                        createdAt: Foundation.Date,
                        creator: Components.Schemas.WebhookIssuesTransferred.IssuePayload.MilestonePayload.CreatorPayload? = nil,
                        description: Swift.String? = nil,
                        dueOn: Foundation.Date? = nil,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        labelsUrl: Swift.String,
                        nodeId: Swift.String,
                        number: Swift.Int,
                        openIssues: Swift.Int,
                        state: Components.Schemas.WebhookIssuesTransferred.IssuePayload.MilestonePayload.StatePayload,
                        title: Swift.String,
                        updatedAt: Foundation.Date,
                        url: Swift.String
                    ) {
                        self.closedAt = closedAt
                        self.closedIssues = closedIssues
                        self.createdAt = createdAt
                        self.creator = creator
                        self.description = description
                        self.dueOn = dueOn
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.labelsUrl = labelsUrl
                        self.nodeId = nodeId
                        self.number = number
                        self.openIssues = openIssues
                        self.state = state
                        self.title = title
                        self.updatedAt = updatedAt
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case closedAt = "closed_at"
                        case closedIssues = "closed_issues"
                        case createdAt = "created_at"
                        case creator
                        case description
                        case dueOn = "due_on"
                        case htmlUrl = "html_url"
                        case id
                        case labelsUrl = "labels_url"
                        case nodeId = "node_id"
                        case number
                        case openIssues = "open_issues"
                        case state
                        case title
                        case updatedAt = "updated_at"
                        case url
                    }
                }
                /// A collection of related issues and pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/milestone`.
                public var milestone: Components.Schemas.WebhookIssuesTransferred.IssuePayload.MilestonePayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/number`.
                public var number: Swift.Int
                /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app`.
                public struct PerformedViaGithubAppPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/created_at`.
                    public var createdAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/EventsPayload`.
                    @frozen public enum EventsPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case branchProtectionRule = "branch_protection_rule"
                        case checkRun = "check_run"
                        case checkSuite = "check_suite"
                        case codeScanningAlert = "code_scanning_alert"
                        case commitComment = "commit_comment"
                        case contentReference = "content_reference"
                        case create = "create"
                        case delete = "delete"
                        case deployment = "deployment"
                        case deploymentReview = "deployment_review"
                        case deploymentStatus = "deployment_status"
                        case deployKey = "deploy_key"
                        case discussion = "discussion"
                        case discussionComment = "discussion_comment"
                        case fork = "fork"
                        case gollum = "gollum"
                        case issues = "issues"
                        case issueComment = "issue_comment"
                        case label = "label"
                        case member = "member"
                        case membership = "membership"
                        case milestone = "milestone"
                        case organization = "organization"
                        case orgBlock = "org_block"
                        case pageBuild = "page_build"
                        case project = "project"
                        case projectCard = "project_card"
                        case projectColumn = "project_column"
                        case _public = "public"
                        case pullRequest = "pull_request"
                        case pullRequestReview = "pull_request_review"
                        case pullRequestReviewComment = "pull_request_review_comment"
                        case push = "push"
                        case registryPackage = "registry_package"
                        case release = "release"
                        case repository = "repository"
                        case repositoryDispatch = "repository_dispatch"
                        case secretScanningAlert = "secret_scanning_alert"
                        case star = "star"
                        case status = "status"
                        case team = "team"
                        case teamAdd = "team_add"
                        case watch = "watch"
                        case workflowDispatch = "workflow_dispatch"
                        case workflowRun = "workflow_run"
                    }
                    /// The list of events for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/events`.
                    public typealias EventsPayload = [Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.EventsPayloadPayload]
                    /// The list of events for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/events`.
                    public var events: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.EventsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/external_url`.
                    public var externalUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/html_url`.
                    public var htmlUrl: Swift.String
                    /// Unique identifier of the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/id`.
                    public var id: Swift.Int?
                    /// The name of the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/owner`.
                    public struct OwnerPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/owner/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/owner/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/owner/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/owner/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/owner/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/owner/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/owner/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/owner/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/owner/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/owner/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/owner/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/owner/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/owner/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/owner/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/owner/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/owner/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/owner/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/owner/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/owner/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/owner/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/owner/type`.
                        public var _type: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/owner/url`.
                        public var url: Swift.String?
                        /// Creates a new `OwnerPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/owner`.
                    public var owner: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.OwnerPayload?
                    /// The set of permissions for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions`.
                    public struct PermissionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/actions`.
                        @frozen public enum ActionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/actions`.
                        public var actions: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/administration`.
                        @frozen public enum AdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/administration`.
                        public var administration: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/checks`.
                        @frozen public enum ChecksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/checks`.
                        public var checks: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/content_references`.
                        @frozen public enum ContentReferencesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/content_references`.
                        public var contentReferences: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/contents`.
                        @frozen public enum ContentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/contents`.
                        public var contents: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/deployments`.
                        @frozen public enum DeploymentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/deployments`.
                        public var deployments: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/discussions`.
                        @frozen public enum DiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/discussions`.
                        public var discussions: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/emails`.
                        @frozen public enum EmailsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/emails`.
                        public var emails: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/environments`.
                        @frozen public enum EnvironmentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/environments`.
                        public var environments: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/issues`.
                        @frozen public enum IssuesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/issues`.
                        public var issues: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/keys`.
                        @frozen public enum KeysPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/keys`.
                        public var keys: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/members`.
                        @frozen public enum MembersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/members`.
                        public var members: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/metadata`.
                        @frozen public enum MetadataPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/metadata`.
                        public var metadata: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/organization_administration`.
                        @frozen public enum OrganizationAdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/organization_administration`.
                        public var organizationAdministration: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/organization_hooks`.
                        @frozen public enum OrganizationHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/organization_hooks`.
                        public var organizationHooks: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/organization_packages`.
                        @frozen public enum OrganizationPackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/organization_packages`.
                        public var organizationPackages: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/organization_plan`.
                        @frozen public enum OrganizationPlanPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/organization_plan`.
                        public var organizationPlan: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/organization_projects`.
                        @frozen public enum OrganizationProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/organization_projects`.
                        public var organizationProjects: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/organization_secrets`.
                        @frozen public enum OrganizationSecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/organization_secrets`.
                        public var organizationSecrets: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/organization_self_hosted_runners`.
                        @frozen public enum OrganizationSelfHostedRunnersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/organization_self_hosted_runners`.
                        public var organizationSelfHostedRunners: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/organization_user_blocking`.
                        @frozen public enum OrganizationUserBlockingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/organization_user_blocking`.
                        public var organizationUserBlocking: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/packages`.
                        @frozen public enum PackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/packages`.
                        public var packages: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/pages`.
                        @frozen public enum PagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/pages`.
                        public var pages: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/pull_requests`.
                        @frozen public enum PullRequestsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/pull_requests`.
                        public var pullRequests: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/repository_hooks`.
                        @frozen public enum RepositoryHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/repository_hooks`.
                        public var repositoryHooks: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/repository_projects`.
                        @frozen public enum RepositoryProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/repository_projects`.
                        public var repositoryProjects: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/secret_scanning_alerts`.
                        @frozen public enum SecretScanningAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/secret_scanning_alerts`.
                        public var secretScanningAlerts: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/secrets`.
                        @frozen public enum SecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/secrets`.
                        public var secrets: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/security_events`.
                        @frozen public enum SecurityEventsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/security_events`.
                        public var securityEvents: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/security_scanning_alert`.
                        @frozen public enum SecurityScanningAlertPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/security_scanning_alert`.
                        public var securityScanningAlert: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/single_file`.
                        @frozen public enum SingleFilePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/single_file`.
                        public var singleFile: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/statuses`.
                        @frozen public enum StatusesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/statuses`.
                        public var statuses: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/team_discussions`.
                        @frozen public enum TeamDiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/team_discussions`.
                        public var teamDiscussions: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/vulnerability_alerts`.
                        @frozen public enum VulnerabilityAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/vulnerability_alerts`.
                        public var vulnerabilityAlerts: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/workflows`.
                        @frozen public enum WorkflowsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions/workflows`.
                        public var workflows: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload?
                        /// Creates a new `PermissionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - actions:
                        ///   - administration:
                        ///   - checks:
                        ///   - contentReferences:
                        ///   - contents:
                        ///   - deployments:
                        ///   - discussions:
                        ///   - emails:
                        ///   - environments:
                        ///   - issues:
                        ///   - keys:
                        ///   - members:
                        ///   - metadata:
                        ///   - organizationAdministration:
                        ///   - organizationHooks:
                        ///   - organizationPackages:
                        ///   - organizationPlan:
                        ///   - organizationProjects:
                        ///   - organizationSecrets:
                        ///   - organizationSelfHostedRunners:
                        ///   - organizationUserBlocking:
                        ///   - packages:
                        ///   - pages:
                        ///   - pullRequests:
                        ///   - repositoryHooks:
                        ///   - repositoryProjects:
                        ///   - secretScanningAlerts:
                        ///   - secrets:
                        ///   - securityEvents:
                        ///   - securityScanningAlert:
                        ///   - singleFile:
                        ///   - statuses:
                        ///   - teamDiscussions:
                        ///   - vulnerabilityAlerts:
                        ///   - workflows:
                        public init(
                            actions: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload? = nil,
                            administration: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload? = nil,
                            checks: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload? = nil,
                            contentReferences: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload? = nil,
                            contents: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload? = nil,
                            deployments: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload? = nil,
                            discussions: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload? = nil,
                            emails: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload? = nil,
                            environments: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload? = nil,
                            issues: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload? = nil,
                            keys: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload? = nil,
                            members: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload? = nil,
                            metadata: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload? = nil,
                            organizationAdministration: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload? = nil,
                            organizationHooks: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload? = nil,
                            organizationPackages: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload? = nil,
                            organizationPlan: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload? = nil,
                            organizationProjects: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload? = nil,
                            organizationSecrets: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload? = nil,
                            organizationSelfHostedRunners: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload? = nil,
                            organizationUserBlocking: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload? = nil,
                            packages: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload? = nil,
                            pages: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload? = nil,
                            pullRequests: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload? = nil,
                            repositoryHooks: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload? = nil,
                            repositoryProjects: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload? = nil,
                            secretScanningAlerts: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload? = nil,
                            secrets: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload? = nil,
                            securityEvents: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload? = nil,
                            securityScanningAlert: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload? = nil,
                            singleFile: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload? = nil,
                            statuses: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload? = nil,
                            teamDiscussions: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload? = nil,
                            vulnerabilityAlerts: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload? = nil,
                            workflows: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload? = nil
                        ) {
                            self.actions = actions
                            self.administration = administration
                            self.checks = checks
                            self.contentReferences = contentReferences
                            self.contents = contents
                            self.deployments = deployments
                            self.discussions = discussions
                            self.emails = emails
                            self.environments = environments
                            self.issues = issues
                            self.keys = keys
                            self.members = members
                            self.metadata = metadata
                            self.organizationAdministration = organizationAdministration
                            self.organizationHooks = organizationHooks
                            self.organizationPackages = organizationPackages
                            self.organizationPlan = organizationPlan
                            self.organizationProjects = organizationProjects
                            self.organizationSecrets = organizationSecrets
                            self.organizationSelfHostedRunners = organizationSelfHostedRunners
                            self.organizationUserBlocking = organizationUserBlocking
                            self.packages = packages
                            self.pages = pages
                            self.pullRequests = pullRequests
                            self.repositoryHooks = repositoryHooks
                            self.repositoryProjects = repositoryProjects
                            self.secretScanningAlerts = secretScanningAlerts
                            self.secrets = secrets
                            self.securityEvents = securityEvents
                            self.securityScanningAlert = securityScanningAlert
                            self.singleFile = singleFile
                            self.statuses = statuses
                            self.teamDiscussions = teamDiscussions
                            self.vulnerabilityAlerts = vulnerabilityAlerts
                            self.workflows = workflows
                        }
                        public enum CodingKeys: String, CodingKey {
                            case actions
                            case administration
                            case checks
                            case contentReferences = "content_references"
                            case contents
                            case deployments
                            case discussions
                            case emails
                            case environments
                            case issues
                            case keys
                            case members
                            case metadata
                            case organizationAdministration = "organization_administration"
                            case organizationHooks = "organization_hooks"
                            case organizationPackages = "organization_packages"
                            case organizationPlan = "organization_plan"
                            case organizationProjects = "organization_projects"
                            case organizationSecrets = "organization_secrets"
                            case organizationSelfHostedRunners = "organization_self_hosted_runners"
                            case organizationUserBlocking = "organization_user_blocking"
                            case packages
                            case pages
                            case pullRequests = "pull_requests"
                            case repositoryHooks = "repository_hooks"
                            case repositoryProjects = "repository_projects"
                            case secretScanningAlerts = "secret_scanning_alerts"
                            case secrets
                            case securityEvents = "security_events"
                            case securityScanningAlert = "security_scanning_alert"
                            case singleFile = "single_file"
                            case statuses
                            case teamDiscussions = "team_discussions"
                            case vulnerabilityAlerts = "vulnerability_alerts"
                            case workflows
                        }
                    }
                    /// The set of permissions for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/permissions`.
                    public var permissions: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload?
                    /// The slug name of the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/slug`.
                    public var slug: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app/updated_at`.
                    public var updatedAt: Foundation.Date?
                    /// Creates a new `PerformedViaGithubAppPayload`.
                    ///
                    /// - Parameters:
                    ///   - createdAt:
                    ///   - description:
                    ///   - events: The list of events for the GitHub app
                    ///   - externalUrl:
                    ///   - htmlUrl:
                    ///   - id: Unique identifier of the GitHub app
                    ///   - name: The name of the GitHub app
                    ///   - nodeId:
                    ///   - owner:
                    ///   - permissions: The set of permissions for the GitHub app
                    ///   - slug: The slug name of the GitHub app
                    ///   - updatedAt:
                    public init(
                        createdAt: Foundation.Date? = nil,
                        description: Swift.String? = nil,
                        events: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.EventsPayload? = nil,
                        externalUrl: Swift.String? = nil,
                        htmlUrl: Swift.String,
                        id: Swift.Int? = nil,
                        name: Swift.String,
                        nodeId: Swift.String,
                        owner: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.OwnerPayload? = nil,
                        permissions: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload? = nil,
                        slug: Swift.String? = nil,
                        updatedAt: Foundation.Date? = nil
                    ) {
                        self.createdAt = createdAt
                        self.description = description
                        self.events = events
                        self.externalUrl = externalUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.name = name
                        self.nodeId = nodeId
                        self.owner = owner
                        self.permissions = permissions
                        self.slug = slug
                        self.updatedAt = updatedAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case createdAt = "created_at"
                        case description
                        case events
                        case externalUrl = "external_url"
                        case htmlUrl = "html_url"
                        case id
                        case name
                        case nodeId = "node_id"
                        case owner
                        case permissions
                        case slug
                        case updatedAt = "updated_at"
                    }
                }
                /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/performed_via_github_app`.
                public var performedViaGithubApp: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/pull_request`.
                public struct PullRequestPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/pull_request/diff_url`.
                    public var diffUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/pull_request/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/pull_request/merged_at`.
                    public var mergedAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/pull_request/patch_url`.
                    public var patchUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/pull_request/url`.
                    public var url: Swift.String?
                    /// Creates a new `PullRequestPayload`.
                    ///
                    /// - Parameters:
                    ///   - diffUrl:
                    ///   - htmlUrl:
                    ///   - mergedAt:
                    ///   - patchUrl:
                    ///   - url:
                    public init(
                        diffUrl: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        mergedAt: Foundation.Date? = nil,
                        patchUrl: Swift.String? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.diffUrl = diffUrl
                        self.htmlUrl = htmlUrl
                        self.mergedAt = mergedAt
                        self.patchUrl = patchUrl
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case diffUrl = "diff_url"
                        case htmlUrl = "html_url"
                        case mergedAt = "merged_at"
                        case patchUrl = "patch_url"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/pull_request`.
                public var pullRequest: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PullRequestPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/reactions`.
                public struct ReactionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/reactions/+1`.
                    public var _plus_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/reactions/-1`.
                    public var _hyphen_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/reactions/confused`.
                    public var confused: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/reactions/eyes`.
                    public var eyes: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/reactions/heart`.
                    public var heart: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/reactions/hooray`.
                    public var hooray: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/reactions/laugh`.
                    public var laugh: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/reactions/rocket`.
                    public var rocket: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/reactions/total_count`.
                    public var totalCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/reactions/url`.
                    public var url: Swift.String
                    /// Creates a new `ReactionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - _plus_1:
                    ///   - _hyphen_1:
                    ///   - confused:
                    ///   - eyes:
                    ///   - heart:
                    ///   - hooray:
                    ///   - laugh:
                    ///   - rocket:
                    ///   - totalCount:
                    ///   - url:
                    public init(
                        _plus_1: Swift.Int,
                        _hyphen_1: Swift.Int,
                        confused: Swift.Int,
                        eyes: Swift.Int,
                        heart: Swift.Int,
                        hooray: Swift.Int,
                        laugh: Swift.Int,
                        rocket: Swift.Int,
                        totalCount: Swift.Int,
                        url: Swift.String
                    ) {
                        self._plus_1 = _plus_1
                        self._hyphen_1 = _hyphen_1
                        self.confused = confused
                        self.eyes = eyes
                        self.heart = heart
                        self.hooray = hooray
                        self.laugh = laugh
                        self.rocket = rocket
                        self.totalCount = totalCount
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _plus_1 = "+1"
                        case _hyphen_1 = "-1"
                        case confused
                        case eyes
                        case heart
                        case hooray
                        case laugh
                        case rocket
                        case totalCount = "total_count"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/reactions`.
                public var reactions: Components.Schemas.WebhookIssuesTransferred.IssuePayload.ReactionsPayload
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/repository_url`.
                public var repositoryUrl: Swift.String
                /// State of the issue; either 'open' or 'closed'
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/state`.
                @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case open = "open"
                    case closed = "closed"
                }
                /// State of the issue; either 'open' or 'closed'
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/state`.
                public var state: Components.Schemas.WebhookIssuesTransferred.IssuePayload.StatePayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/state_reason`.
                public var stateReason: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/timeline_url`.
                public var timelineUrl: Swift.String?
                /// Title of the issue
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/title`.
                public var title: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/updated_at`.
                public var updatedAt: Foundation.Date
                /// URL for the issue
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/user`.
                public struct UserPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/user/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/user/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/user/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/user/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/user/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/user/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/user/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/user/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/user/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/user/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/user/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/user/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/user/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/user/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/user/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/user/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/user/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/user/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/user/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/user/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/user/type`.
                    public var _type: Components.Schemas.WebhookIssuesTransferred.IssuePayload.UserPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/user/url`.
                    public var url: Swift.String?
                    /// Creates a new `UserPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookIssuesTransferred.IssuePayload.UserPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue/user`.
                public var user: Components.Schemas.WebhookIssuesTransferred.IssuePayload.UserPayload?
                /// Creates a new `IssuePayload`.
                ///
                /// - Parameters:
                ///   - activeLockReason:
                ///   - assignee:
                ///   - assignees:
                ///   - authorAssociation: How the author is associated with the repository.
                ///   - body: Contents of the issue
                ///   - closedAt:
                ///   - comments:
                ///   - commentsUrl:
                ///   - createdAt:
                ///   - draft:
                ///   - eventsUrl:
                ///   - htmlUrl:
                ///   - id:
                ///   - labels:
                ///   - labelsUrl:
                ///   - locked:
                ///   - milestone: A collection of related issues and pull requests.
                ///   - nodeId:
                ///   - number:
                ///   - performedViaGithubApp: GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                ///   - pullRequest:
                ///   - reactions:
                ///   - repositoryUrl:
                ///   - state: State of the issue; either 'open' or 'closed'
                ///   - stateReason:
                ///   - timelineUrl:
                ///   - title: Title of the issue
                ///   - updatedAt:
                ///   - url: URL for the issue
                ///   - user:
                public init(
                    activeLockReason: Components.Schemas.WebhookIssuesTransferred.IssuePayload.ActiveLockReasonPayload? = nil,
                    assignee: Components.Schemas.WebhookIssuesTransferred.IssuePayload.AssigneePayload? = nil,
                    assignees: Components.Schemas.WebhookIssuesTransferred.IssuePayload.AssigneesPayload,
                    authorAssociation: Components.Schemas.WebhookIssuesTransferred.IssuePayload.AuthorAssociationPayload,
                    body: Swift.String? = nil,
                    closedAt: Foundation.Date? = nil,
                    comments: Swift.Int,
                    commentsUrl: Swift.String,
                    createdAt: Foundation.Date,
                    draft: Swift.Bool? = nil,
                    eventsUrl: Swift.String,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    labels: Components.Schemas.WebhookIssuesTransferred.IssuePayload.LabelsPayload? = nil,
                    labelsUrl: Swift.String,
                    locked: Swift.Bool? = nil,
                    milestone: Components.Schemas.WebhookIssuesTransferred.IssuePayload.MilestonePayload? = nil,
                    nodeId: Swift.String,
                    number: Swift.Int,
                    performedViaGithubApp: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PerformedViaGithubAppPayload? = nil,
                    pullRequest: Components.Schemas.WebhookIssuesTransferred.IssuePayload.PullRequestPayload? = nil,
                    reactions: Components.Schemas.WebhookIssuesTransferred.IssuePayload.ReactionsPayload,
                    repositoryUrl: Swift.String,
                    state: Components.Schemas.WebhookIssuesTransferred.IssuePayload.StatePayload? = nil,
                    stateReason: Swift.String? = nil,
                    timelineUrl: Swift.String? = nil,
                    title: Swift.String,
                    updatedAt: Foundation.Date,
                    url: Swift.String,
                    user: Components.Schemas.WebhookIssuesTransferred.IssuePayload.UserPayload? = nil
                ) {
                    self.activeLockReason = activeLockReason
                    self.assignee = assignee
                    self.assignees = assignees
                    self.authorAssociation = authorAssociation
                    self.body = body
                    self.closedAt = closedAt
                    self.comments = comments
                    self.commentsUrl = commentsUrl
                    self.createdAt = createdAt
                    self.draft = draft
                    self.eventsUrl = eventsUrl
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.labels = labels
                    self.labelsUrl = labelsUrl
                    self.locked = locked
                    self.milestone = milestone
                    self.nodeId = nodeId
                    self.number = number
                    self.performedViaGithubApp = performedViaGithubApp
                    self.pullRequest = pullRequest
                    self.reactions = reactions
                    self.repositoryUrl = repositoryUrl
                    self.state = state
                    self.stateReason = stateReason
                    self.timelineUrl = timelineUrl
                    self.title = title
                    self.updatedAt = updatedAt
                    self.url = url
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case activeLockReason = "active_lock_reason"
                    case assignee
                    case assignees
                    case authorAssociation = "author_association"
                    case body
                    case closedAt = "closed_at"
                    case comments
                    case commentsUrl = "comments_url"
                    case createdAt = "created_at"
                    case draft
                    case eventsUrl = "events_url"
                    case htmlUrl = "html_url"
                    case id
                    case labels
                    case labelsUrl = "labels_url"
                    case locked
                    case milestone
                    case nodeId = "node_id"
                    case number
                    case performedViaGithubApp = "performed_via_github_app"
                    case pullRequest = "pull_request"
                    case reactions
                    case repositoryUrl = "repository_url"
                    case state
                    case stateReason = "state_reason"
                    case timelineUrl = "timeline_url"
                    case title
                    case updatedAt = "updated_at"
                    case url
                    case user
                }
            }
            /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/issue`.
            public var issue: Components.Schemas.WebhookIssuesTransferred.IssuePayload
            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-issues-transferred/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Creates a new `WebhookIssuesTransferred`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - changes:
            ///   - enterprise:
            ///   - installation:
            ///   - issue: The [issue](https://docs.github.com/en/rest/reference/issues) itself.
            ///   - organization:
            ///   - repository:
            ///   - sender:
            public init(
                action: Components.Schemas.WebhookIssuesTransferred.ActionPayload,
                changes: Components.Schemas.WebhookIssuesTransferred.ChangesPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                issue: Components.Schemas.WebhookIssuesTransferred.IssuePayload,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser
            ) {
                self.action = action
                self.changes = changes
                self.enterprise = enterprise
                self.installation = installation
                self.issue = issue
                self.organization = organization
                self.repository = repository
                self.sender = sender
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case changes
                case enterprise
                case installation
                case issue
                case organization
                case repository
                case sender
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned`.
        public struct WebhookIssuesUnassigned: Codable, Hashable, Sendable {
            /// The action that was performed.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case unassigned = "unassigned"
            }
            /// The action that was performed.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/action`.
            public var action: Components.Schemas.WebhookIssuesUnassigned.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/assignee`.
            public struct AssigneePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/assignee/avatar_url`.
                public var avatarUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/assignee/deleted`.
                public var deleted: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/assignee/email`.
                public var email: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/assignee/events_url`.
                public var eventsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/assignee/followers_url`.
                public var followersUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/assignee/following_url`.
                public var followingUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/assignee/gists_url`.
                public var gistsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/assignee/gravatar_id`.
                public var gravatarId: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/assignee/html_url`.
                public var htmlUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/assignee/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/assignee/login`.
                public var login: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/assignee/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/assignee/node_id`.
                public var nodeId: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/assignee/organizations_url`.
                public var organizationsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/assignee/received_events_url`.
                public var receivedEventsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/assignee/repos_url`.
                public var reposUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/assignee/site_admin`.
                public var siteAdmin: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/assignee/starred_url`.
                public var starredUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/assignee/subscriptions_url`.
                public var subscriptionsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/assignee/type`.
                @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case bot = "Bot"
                    case user = "User"
                    case organization = "Organization"
                    case mannequin = "Mannequin"
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/assignee/type`.
                public var _type: Components.Schemas.WebhookIssuesUnassigned.AssigneePayload._TypePayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/assignee/url`.
                public var url: Swift.String?
                /// Creates a new `AssigneePayload`.
                ///
                /// - Parameters:
                ///   - avatarUrl:
                ///   - deleted:
                ///   - email:
                ///   - eventsUrl:
                ///   - followersUrl:
                ///   - followingUrl:
                ///   - gistsUrl:
                ///   - gravatarId:
                ///   - htmlUrl:
                ///   - id:
                ///   - login:
                ///   - name:
                ///   - nodeId:
                ///   - organizationsUrl:
                ///   - receivedEventsUrl:
                ///   - reposUrl:
                ///   - siteAdmin:
                ///   - starredUrl:
                ///   - subscriptionsUrl:
                ///   - _type:
                ///   - url:
                public init(
                    avatarUrl: Swift.String? = nil,
                    deleted: Swift.Bool? = nil,
                    email: Swift.String? = nil,
                    eventsUrl: Swift.String? = nil,
                    followersUrl: Swift.String? = nil,
                    followingUrl: Swift.String? = nil,
                    gistsUrl: Swift.String? = nil,
                    gravatarId: Swift.String? = nil,
                    htmlUrl: Swift.String? = nil,
                    id: Swift.Int,
                    login: Swift.String,
                    name: Swift.String? = nil,
                    nodeId: Swift.String? = nil,
                    organizationsUrl: Swift.String? = nil,
                    receivedEventsUrl: Swift.String? = nil,
                    reposUrl: Swift.String? = nil,
                    siteAdmin: Swift.Bool? = nil,
                    starredUrl: Swift.String? = nil,
                    subscriptionsUrl: Swift.String? = nil,
                    _type: Components.Schemas.WebhookIssuesUnassigned.AssigneePayload._TypePayload? = nil,
                    url: Swift.String? = nil
                ) {
                    self.avatarUrl = avatarUrl
                    self.deleted = deleted
                    self.email = email
                    self.eventsUrl = eventsUrl
                    self.followersUrl = followersUrl
                    self.followingUrl = followingUrl
                    self.gistsUrl = gistsUrl
                    self.gravatarId = gravatarId
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.login = login
                    self.name = name
                    self.nodeId = nodeId
                    self.organizationsUrl = organizationsUrl
                    self.receivedEventsUrl = receivedEventsUrl
                    self.reposUrl = reposUrl
                    self.siteAdmin = siteAdmin
                    self.starredUrl = starredUrl
                    self.subscriptionsUrl = subscriptionsUrl
                    self._type = _type
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case avatarUrl = "avatar_url"
                    case deleted
                    case email
                    case eventsUrl = "events_url"
                    case followersUrl = "followers_url"
                    case followingUrl = "following_url"
                    case gistsUrl = "gists_url"
                    case gravatarId = "gravatar_id"
                    case htmlUrl = "html_url"
                    case id
                    case login
                    case name
                    case nodeId = "node_id"
                    case organizationsUrl = "organizations_url"
                    case receivedEventsUrl = "received_events_url"
                    case reposUrl = "repos_url"
                    case siteAdmin = "site_admin"
                    case starredUrl = "starred_url"
                    case subscriptionsUrl = "subscriptions_url"
                    case _type = "type"
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/assignee`.
            public var assignee: Components.Schemas.WebhookIssuesUnassigned.AssigneePayload?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue`.
            public struct IssuePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/active_lock_reason`.
                @frozen public enum ActiveLockReasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case resolved = "resolved"
                    case offTopic = "off-topic"
                    case tooHeated = "too heated"
                    case spam = "spam"
                    case _empty_ = ""
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/active_lock_reason`.
                public var activeLockReason: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.ActiveLockReasonPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/assignee`.
                public struct AssigneePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/assignee/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/assignee/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/assignee/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/assignee/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/assignee/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/assignee/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/assignee/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/assignee/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/assignee/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/assignee/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/assignee/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/assignee/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/assignee/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/assignee/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/assignee/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/assignee/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/assignee/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/assignee/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/assignee/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/assignee/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                        case mannequin = "Mannequin"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/assignee/type`.
                    public var _type: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.AssigneePayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/assignee/url`.
                    public var url: Swift.String?
                    /// Creates a new `AssigneePayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.AssigneePayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/assignee`.
                public var assignee: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.AssigneePayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/AssigneesPayload`.
                public struct AssigneesPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/AssigneesPayload/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/AssigneesPayload/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/AssigneesPayload/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/AssigneesPayload/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/AssigneesPayload/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/AssigneesPayload/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/AssigneesPayload/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/AssigneesPayload/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/AssigneesPayload/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/AssigneesPayload/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/AssigneesPayload/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/AssigneesPayload/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/AssigneesPayload/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/AssigneesPayload/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/AssigneesPayload/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/AssigneesPayload/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/AssigneesPayload/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/AssigneesPayload/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/AssigneesPayload/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/AssigneesPayload/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                        case mannequin = "Mannequin"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/AssigneesPayload/type`.
                    public var _type: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.AssigneesPayloadPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/AssigneesPayload/url`.
                    public var url: Swift.String?
                    /// Creates a new `AssigneesPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.AssigneesPayloadPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/assignees`.
                public typealias AssigneesPayload = [Components.Schemas.WebhookIssuesUnassigned.IssuePayload.AssigneesPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/assignees`.
                public var assignees: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.AssigneesPayload
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/author_association`.
                @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case collaborator = "COLLABORATOR"
                    case contributor = "CONTRIBUTOR"
                    case firstTimer = "FIRST_TIMER"
                    case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                    case mannequin = "MANNEQUIN"
                    case member = "MEMBER"
                    case none = "NONE"
                    case owner = "OWNER"
                }
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/author_association`.
                public var authorAssociation: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.AuthorAssociationPayload
                /// Contents of the issue
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/body`.
                public var body: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/closed_at`.
                public var closedAt: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/comments`.
                public var comments: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/comments_url`.
                public var commentsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/created_at`.
                public var createdAt: Foundation.Date
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/draft`.
                public var draft: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/events_url`.
                public var eventsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/html_url`.
                public var htmlUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/LabelsPayload`.
                public struct LabelsPayloadPayload: Codable, Hashable, Sendable {
                    /// 6-character hex code, without the leading #, identifying the color
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/LabelsPayload/color`.
                    public var color: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/LabelsPayload/default`.
                    public var _default: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/LabelsPayload/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/LabelsPayload/id`.
                    public var id: Swift.Int
                    /// The name of the label.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/LabelsPayload/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/LabelsPayload/node_id`.
                    public var nodeId: Swift.String
                    /// URL for the label
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/LabelsPayload/url`.
                    public var url: Swift.String
                    /// Creates a new `LabelsPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - color: 6-character hex code, without the leading #, identifying the color
                    ///   - _default:
                    ///   - description:
                    ///   - id:
                    ///   - name: The name of the label.
                    ///   - nodeId:
                    ///   - url: URL for the label
                    public init(
                        color: Swift.String,
                        _default: Swift.Bool,
                        description: Swift.String? = nil,
                        id: Swift.Int,
                        name: Swift.String,
                        nodeId: Swift.String,
                        url: Swift.String
                    ) {
                        self.color = color
                        self._default = _default
                        self.description = description
                        self.id = id
                        self.name = name
                        self.nodeId = nodeId
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case color
                        case _default = "default"
                        case description
                        case id
                        case name
                        case nodeId = "node_id"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/labels`.
                public typealias LabelsPayload = [Components.Schemas.WebhookIssuesUnassigned.IssuePayload.LabelsPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/labels`.
                public var labels: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.LabelsPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/labels_url`.
                public var labelsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/locked`.
                public var locked: Swift.Bool?
                /// A collection of related issues and pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone`.
                public struct MilestonePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/closed_at`.
                    public var closedAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/closed_issues`.
                    public var closedIssues: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/created_at`.
                    public var createdAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/creator`.
                    public struct CreatorPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/creator/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/creator/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/creator/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/creator/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/creator/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/creator/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/creator/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/creator/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/creator/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/creator/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/creator/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/creator/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/creator/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/creator/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/creator/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/creator/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/creator/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/creator/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/creator/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/creator/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                            case mannequin = "Mannequin"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/creator/type`.
                        public var _type: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.MilestonePayload.CreatorPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/creator/url`.
                        public var url: Swift.String?
                        /// Creates a new `CreatorPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.MilestonePayload.CreatorPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/creator`.
                    public var creator: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.MilestonePayload.CreatorPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/due_on`.
                    public var dueOn: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/html_url`.
                    public var htmlUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/labels_url`.
                    public var labelsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/node_id`.
                    public var nodeId: Swift.String
                    /// The number of the milestone.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/number`.
                    public var number: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/open_issues`.
                    public var openIssues: Swift.Int
                    /// The state of the milestone.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/state`.
                    @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case closed = "closed"
                    }
                    /// The state of the milestone.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/state`.
                    public var state: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.MilestonePayload.StatePayload
                    /// The title of the milestone.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/title`.
                    public var title: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/updated_at`.
                    public var updatedAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone/url`.
                    public var url: Swift.String
                    /// Creates a new `MilestonePayload`.
                    ///
                    /// - Parameters:
                    ///   - closedAt:
                    ///   - closedIssues:
                    ///   - createdAt:
                    ///   - creator:
                    ///   - description:
                    ///   - dueOn:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - labelsUrl:
                    ///   - nodeId:
                    ///   - number: The number of the milestone.
                    ///   - openIssues:
                    ///   - state: The state of the milestone.
                    ///   - title: The title of the milestone.
                    ///   - updatedAt:
                    ///   - url:
                    public init(
                        closedAt: Foundation.Date? = nil,
                        closedIssues: Swift.Int,
                        createdAt: Foundation.Date,
                        creator: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.MilestonePayload.CreatorPayload? = nil,
                        description: Swift.String? = nil,
                        dueOn: Foundation.Date? = nil,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        labelsUrl: Swift.String,
                        nodeId: Swift.String,
                        number: Swift.Int,
                        openIssues: Swift.Int,
                        state: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.MilestonePayload.StatePayload,
                        title: Swift.String,
                        updatedAt: Foundation.Date,
                        url: Swift.String
                    ) {
                        self.closedAt = closedAt
                        self.closedIssues = closedIssues
                        self.createdAt = createdAt
                        self.creator = creator
                        self.description = description
                        self.dueOn = dueOn
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.labelsUrl = labelsUrl
                        self.nodeId = nodeId
                        self.number = number
                        self.openIssues = openIssues
                        self.state = state
                        self.title = title
                        self.updatedAt = updatedAt
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case closedAt = "closed_at"
                        case closedIssues = "closed_issues"
                        case createdAt = "created_at"
                        case creator
                        case description
                        case dueOn = "due_on"
                        case htmlUrl = "html_url"
                        case id
                        case labelsUrl = "labels_url"
                        case nodeId = "node_id"
                        case number
                        case openIssues = "open_issues"
                        case state
                        case title
                        case updatedAt = "updated_at"
                        case url
                    }
                }
                /// A collection of related issues and pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/milestone`.
                public var milestone: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.MilestonePayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/number`.
                public var number: Swift.Int
                /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app`.
                public struct PerformedViaGithubAppPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/created_at`.
                    public var createdAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/EventsPayload`.
                    @frozen public enum EventsPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case branchProtectionRule = "branch_protection_rule"
                        case checkRun = "check_run"
                        case checkSuite = "check_suite"
                        case codeScanningAlert = "code_scanning_alert"
                        case commitComment = "commit_comment"
                        case contentReference = "content_reference"
                        case create = "create"
                        case delete = "delete"
                        case deployment = "deployment"
                        case deploymentReview = "deployment_review"
                        case deploymentStatus = "deployment_status"
                        case deployKey = "deploy_key"
                        case discussion = "discussion"
                        case discussionComment = "discussion_comment"
                        case fork = "fork"
                        case gollum = "gollum"
                        case issues = "issues"
                        case issueComment = "issue_comment"
                        case label = "label"
                        case member = "member"
                        case membership = "membership"
                        case milestone = "milestone"
                        case organization = "organization"
                        case orgBlock = "org_block"
                        case pageBuild = "page_build"
                        case project = "project"
                        case projectCard = "project_card"
                        case projectColumn = "project_column"
                        case _public = "public"
                        case pullRequest = "pull_request"
                        case pullRequestReview = "pull_request_review"
                        case pullRequestReviewComment = "pull_request_review_comment"
                        case push = "push"
                        case registryPackage = "registry_package"
                        case release = "release"
                        case repository = "repository"
                        case repositoryDispatch = "repository_dispatch"
                        case secretScanningAlert = "secret_scanning_alert"
                        case star = "star"
                        case status = "status"
                        case team = "team"
                        case teamAdd = "team_add"
                        case watch = "watch"
                        case workflowDispatch = "workflow_dispatch"
                        case workflowRun = "workflow_run"
                        case reminder = "reminder"
                        case pullRequestReviewThread = "pull_request_review_thread"
                    }
                    /// The list of events for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/events`.
                    public typealias EventsPayload = [Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.EventsPayloadPayload]
                    /// The list of events for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/events`.
                    public var events: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.EventsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/external_url`.
                    public var externalUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/html_url`.
                    public var htmlUrl: Swift.String
                    /// Unique identifier of the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/id`.
                    public var id: Swift.Int?
                    /// The name of the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/owner`.
                    public struct OwnerPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/owner/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/owner/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/owner/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/owner/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/owner/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/owner/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/owner/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/owner/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/owner/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/owner/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/owner/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/owner/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/owner/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/owner/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/owner/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/owner/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/owner/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/owner/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/owner/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/owner/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/owner/type`.
                        public var _type: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/owner/url`.
                        public var url: Swift.String?
                        /// Creates a new `OwnerPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/owner`.
                    public var owner: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.OwnerPayload?
                    /// The set of permissions for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions`.
                    public struct PermissionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/actions`.
                        @frozen public enum ActionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/actions`.
                        public var actions: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/administration`.
                        @frozen public enum AdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/administration`.
                        public var administration: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/checks`.
                        @frozen public enum ChecksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/checks`.
                        public var checks: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/content_references`.
                        @frozen public enum ContentReferencesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/content_references`.
                        public var contentReferences: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/contents`.
                        @frozen public enum ContentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/contents`.
                        public var contents: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/deployments`.
                        @frozen public enum DeploymentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/deployments`.
                        public var deployments: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/discussions`.
                        @frozen public enum DiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/discussions`.
                        public var discussions: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/emails`.
                        @frozen public enum EmailsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/emails`.
                        public var emails: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/environments`.
                        @frozen public enum EnvironmentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/environments`.
                        public var environments: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/issues`.
                        @frozen public enum IssuesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/issues`.
                        public var issues: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/keys`.
                        @frozen public enum KeysPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/keys`.
                        public var keys: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/members`.
                        @frozen public enum MembersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/members`.
                        public var members: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/metadata`.
                        @frozen public enum MetadataPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/metadata`.
                        public var metadata: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/organization_administration`.
                        @frozen public enum OrganizationAdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/organization_administration`.
                        public var organizationAdministration: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/organization_hooks`.
                        @frozen public enum OrganizationHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/organization_hooks`.
                        public var organizationHooks: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/organization_packages`.
                        @frozen public enum OrganizationPackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/organization_packages`.
                        public var organizationPackages: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/organization_plan`.
                        @frozen public enum OrganizationPlanPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/organization_plan`.
                        public var organizationPlan: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/organization_projects`.
                        @frozen public enum OrganizationProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                            case admin = "admin"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/organization_projects`.
                        public var organizationProjects: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/organization_secrets`.
                        @frozen public enum OrganizationSecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/organization_secrets`.
                        public var organizationSecrets: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/organization_self_hosted_runners`.
                        @frozen public enum OrganizationSelfHostedRunnersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/organization_self_hosted_runners`.
                        public var organizationSelfHostedRunners: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/organization_user_blocking`.
                        @frozen public enum OrganizationUserBlockingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/organization_user_blocking`.
                        public var organizationUserBlocking: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/packages`.
                        @frozen public enum PackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/packages`.
                        public var packages: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/pages`.
                        @frozen public enum PagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/pages`.
                        public var pages: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/pull_requests`.
                        @frozen public enum PullRequestsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/pull_requests`.
                        public var pullRequests: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/repository_hooks`.
                        @frozen public enum RepositoryHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/repository_hooks`.
                        public var repositoryHooks: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/repository_projects`.
                        @frozen public enum RepositoryProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/repository_projects`.
                        public var repositoryProjects: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/secret_scanning_alerts`.
                        @frozen public enum SecretScanningAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/secret_scanning_alerts`.
                        public var secretScanningAlerts: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/secrets`.
                        @frozen public enum SecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/secrets`.
                        public var secrets: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/security_events`.
                        @frozen public enum SecurityEventsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/security_events`.
                        public var securityEvents: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/security_scanning_alert`.
                        @frozen public enum SecurityScanningAlertPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/security_scanning_alert`.
                        public var securityScanningAlert: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/single_file`.
                        @frozen public enum SingleFilePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/single_file`.
                        public var singleFile: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/statuses`.
                        @frozen public enum StatusesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/statuses`.
                        public var statuses: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/team_discussions`.
                        @frozen public enum TeamDiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/team_discussions`.
                        public var teamDiscussions: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/vulnerability_alerts`.
                        @frozen public enum VulnerabilityAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/vulnerability_alerts`.
                        public var vulnerabilityAlerts: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/workflows`.
                        @frozen public enum WorkflowsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions/workflows`.
                        public var workflows: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload?
                        /// Creates a new `PermissionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - actions:
                        ///   - administration:
                        ///   - checks:
                        ///   - contentReferences:
                        ///   - contents:
                        ///   - deployments:
                        ///   - discussions:
                        ///   - emails:
                        ///   - environments:
                        ///   - issues:
                        ///   - keys:
                        ///   - members:
                        ///   - metadata:
                        ///   - organizationAdministration:
                        ///   - organizationHooks:
                        ///   - organizationPackages:
                        ///   - organizationPlan:
                        ///   - organizationProjects:
                        ///   - organizationSecrets:
                        ///   - organizationSelfHostedRunners:
                        ///   - organizationUserBlocking:
                        ///   - packages:
                        ///   - pages:
                        ///   - pullRequests:
                        ///   - repositoryHooks:
                        ///   - repositoryProjects:
                        ///   - secretScanningAlerts:
                        ///   - secrets:
                        ///   - securityEvents:
                        ///   - securityScanningAlert:
                        ///   - singleFile:
                        ///   - statuses:
                        ///   - teamDiscussions:
                        ///   - vulnerabilityAlerts:
                        ///   - workflows:
                        public init(
                            actions: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload? = nil,
                            administration: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload? = nil,
                            checks: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload? = nil,
                            contentReferences: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload? = nil,
                            contents: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload? = nil,
                            deployments: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload? = nil,
                            discussions: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload? = nil,
                            emails: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload? = nil,
                            environments: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload? = nil,
                            issues: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload? = nil,
                            keys: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload? = nil,
                            members: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload? = nil,
                            metadata: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload? = nil,
                            organizationAdministration: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload? = nil,
                            organizationHooks: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload? = nil,
                            organizationPackages: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload? = nil,
                            organizationPlan: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload? = nil,
                            organizationProjects: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload? = nil,
                            organizationSecrets: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload? = nil,
                            organizationSelfHostedRunners: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload? = nil,
                            organizationUserBlocking: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload? = nil,
                            packages: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload? = nil,
                            pages: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload? = nil,
                            pullRequests: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload? = nil,
                            repositoryHooks: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload? = nil,
                            repositoryProjects: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload? = nil,
                            secretScanningAlerts: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload? = nil,
                            secrets: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload? = nil,
                            securityEvents: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload? = nil,
                            securityScanningAlert: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload? = nil,
                            singleFile: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload? = nil,
                            statuses: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload? = nil,
                            teamDiscussions: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload? = nil,
                            vulnerabilityAlerts: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload? = nil,
                            workflows: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload? = nil
                        ) {
                            self.actions = actions
                            self.administration = administration
                            self.checks = checks
                            self.contentReferences = contentReferences
                            self.contents = contents
                            self.deployments = deployments
                            self.discussions = discussions
                            self.emails = emails
                            self.environments = environments
                            self.issues = issues
                            self.keys = keys
                            self.members = members
                            self.metadata = metadata
                            self.organizationAdministration = organizationAdministration
                            self.organizationHooks = organizationHooks
                            self.organizationPackages = organizationPackages
                            self.organizationPlan = organizationPlan
                            self.organizationProjects = organizationProjects
                            self.organizationSecrets = organizationSecrets
                            self.organizationSelfHostedRunners = organizationSelfHostedRunners
                            self.organizationUserBlocking = organizationUserBlocking
                            self.packages = packages
                            self.pages = pages
                            self.pullRequests = pullRequests
                            self.repositoryHooks = repositoryHooks
                            self.repositoryProjects = repositoryProjects
                            self.secretScanningAlerts = secretScanningAlerts
                            self.secrets = secrets
                            self.securityEvents = securityEvents
                            self.securityScanningAlert = securityScanningAlert
                            self.singleFile = singleFile
                            self.statuses = statuses
                            self.teamDiscussions = teamDiscussions
                            self.vulnerabilityAlerts = vulnerabilityAlerts
                            self.workflows = workflows
                        }
                        public enum CodingKeys: String, CodingKey {
                            case actions
                            case administration
                            case checks
                            case contentReferences = "content_references"
                            case contents
                            case deployments
                            case discussions
                            case emails
                            case environments
                            case issues
                            case keys
                            case members
                            case metadata
                            case organizationAdministration = "organization_administration"
                            case organizationHooks = "organization_hooks"
                            case organizationPackages = "organization_packages"
                            case organizationPlan = "organization_plan"
                            case organizationProjects = "organization_projects"
                            case organizationSecrets = "organization_secrets"
                            case organizationSelfHostedRunners = "organization_self_hosted_runners"
                            case organizationUserBlocking = "organization_user_blocking"
                            case packages
                            case pages
                            case pullRequests = "pull_requests"
                            case repositoryHooks = "repository_hooks"
                            case repositoryProjects = "repository_projects"
                            case secretScanningAlerts = "secret_scanning_alerts"
                            case secrets
                            case securityEvents = "security_events"
                            case securityScanningAlert = "security_scanning_alert"
                            case singleFile = "single_file"
                            case statuses
                            case teamDiscussions = "team_discussions"
                            case vulnerabilityAlerts = "vulnerability_alerts"
                            case workflows
                        }
                    }
                    /// The set of permissions for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/permissions`.
                    public var permissions: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload?
                    /// The slug name of the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/slug`.
                    public var slug: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app/updated_at`.
                    public var updatedAt: Foundation.Date?
                    /// Creates a new `PerformedViaGithubAppPayload`.
                    ///
                    /// - Parameters:
                    ///   - createdAt:
                    ///   - description:
                    ///   - events: The list of events for the GitHub app
                    ///   - externalUrl:
                    ///   - htmlUrl:
                    ///   - id: Unique identifier of the GitHub app
                    ///   - name: The name of the GitHub app
                    ///   - nodeId:
                    ///   - owner:
                    ///   - permissions: The set of permissions for the GitHub app
                    ///   - slug: The slug name of the GitHub app
                    ///   - updatedAt:
                    public init(
                        createdAt: Foundation.Date? = nil,
                        description: Swift.String? = nil,
                        events: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.EventsPayload? = nil,
                        externalUrl: Swift.String? = nil,
                        htmlUrl: Swift.String,
                        id: Swift.Int? = nil,
                        name: Swift.String,
                        nodeId: Swift.String,
                        owner: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.OwnerPayload? = nil,
                        permissions: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload? = nil,
                        slug: Swift.String? = nil,
                        updatedAt: Foundation.Date? = nil
                    ) {
                        self.createdAt = createdAt
                        self.description = description
                        self.events = events
                        self.externalUrl = externalUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.name = name
                        self.nodeId = nodeId
                        self.owner = owner
                        self.permissions = permissions
                        self.slug = slug
                        self.updatedAt = updatedAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case createdAt = "created_at"
                        case description
                        case events
                        case externalUrl = "external_url"
                        case htmlUrl = "html_url"
                        case id
                        case name
                        case nodeId = "node_id"
                        case owner
                        case permissions
                        case slug
                        case updatedAt = "updated_at"
                    }
                }
                /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/performed_via_github_app`.
                public var performedViaGithubApp: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/pull_request`.
                public struct PullRequestPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/pull_request/diff_url`.
                    public var diffUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/pull_request/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/pull_request/merged_at`.
                    public var mergedAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/pull_request/patch_url`.
                    public var patchUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/pull_request/url`.
                    public var url: Swift.String?
                    /// Creates a new `PullRequestPayload`.
                    ///
                    /// - Parameters:
                    ///   - diffUrl:
                    ///   - htmlUrl:
                    ///   - mergedAt:
                    ///   - patchUrl:
                    ///   - url:
                    public init(
                        diffUrl: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        mergedAt: Foundation.Date? = nil,
                        patchUrl: Swift.String? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.diffUrl = diffUrl
                        self.htmlUrl = htmlUrl
                        self.mergedAt = mergedAt
                        self.patchUrl = patchUrl
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case diffUrl = "diff_url"
                        case htmlUrl = "html_url"
                        case mergedAt = "merged_at"
                        case patchUrl = "patch_url"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/pull_request`.
                public var pullRequest: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PullRequestPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/reactions`.
                public struct ReactionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/reactions/+1`.
                    public var _plus_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/reactions/-1`.
                    public var _hyphen_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/reactions/confused`.
                    public var confused: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/reactions/eyes`.
                    public var eyes: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/reactions/heart`.
                    public var heart: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/reactions/hooray`.
                    public var hooray: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/reactions/laugh`.
                    public var laugh: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/reactions/rocket`.
                    public var rocket: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/reactions/total_count`.
                    public var totalCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/reactions/url`.
                    public var url: Swift.String
                    /// Creates a new `ReactionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - _plus_1:
                    ///   - _hyphen_1:
                    ///   - confused:
                    ///   - eyes:
                    ///   - heart:
                    ///   - hooray:
                    ///   - laugh:
                    ///   - rocket:
                    ///   - totalCount:
                    ///   - url:
                    public init(
                        _plus_1: Swift.Int,
                        _hyphen_1: Swift.Int,
                        confused: Swift.Int,
                        eyes: Swift.Int,
                        heart: Swift.Int,
                        hooray: Swift.Int,
                        laugh: Swift.Int,
                        rocket: Swift.Int,
                        totalCount: Swift.Int,
                        url: Swift.String
                    ) {
                        self._plus_1 = _plus_1
                        self._hyphen_1 = _hyphen_1
                        self.confused = confused
                        self.eyes = eyes
                        self.heart = heart
                        self.hooray = hooray
                        self.laugh = laugh
                        self.rocket = rocket
                        self.totalCount = totalCount
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _plus_1 = "+1"
                        case _hyphen_1 = "-1"
                        case confused
                        case eyes
                        case heart
                        case hooray
                        case laugh
                        case rocket
                        case totalCount = "total_count"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/reactions`.
                public var reactions: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.ReactionsPayload
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/repository_url`.
                public var repositoryUrl: Swift.String
                /// State of the issue; either 'open' or 'closed'
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/state`.
                @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case open = "open"
                    case closed = "closed"
                }
                /// State of the issue; either 'open' or 'closed'
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/state`.
                public var state: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.StatePayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/state_reason`.
                public var stateReason: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/timeline_url`.
                public var timelineUrl: Swift.String?
                /// Title of the issue
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/title`.
                public var title: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/updated_at`.
                public var updatedAt: Foundation.Date
                /// URL for the issue
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/user`.
                public struct UserPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/user/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/user/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/user/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/user/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/user/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/user/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/user/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/user/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/user/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/user/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/user/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/user/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/user/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/user/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/user/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/user/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/user/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/user/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/user/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/user/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                        case mannequin = "Mannequin"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/user/type`.
                    public var _type: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.UserPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/user/url`.
                    public var url: Swift.String?
                    /// Creates a new `UserPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.UserPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue/user`.
                public var user: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.UserPayload?
                /// Creates a new `IssuePayload`.
                ///
                /// - Parameters:
                ///   - activeLockReason:
                ///   - assignee:
                ///   - assignees:
                ///   - authorAssociation: How the author is associated with the repository.
                ///   - body: Contents of the issue
                ///   - closedAt:
                ///   - comments:
                ///   - commentsUrl:
                ///   - createdAt:
                ///   - draft:
                ///   - eventsUrl:
                ///   - htmlUrl:
                ///   - id:
                ///   - labels:
                ///   - labelsUrl:
                ///   - locked:
                ///   - milestone: A collection of related issues and pull requests.
                ///   - nodeId:
                ///   - number:
                ///   - performedViaGithubApp: GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                ///   - pullRequest:
                ///   - reactions:
                ///   - repositoryUrl:
                ///   - state: State of the issue; either 'open' or 'closed'
                ///   - stateReason:
                ///   - timelineUrl:
                ///   - title: Title of the issue
                ///   - updatedAt:
                ///   - url: URL for the issue
                ///   - user:
                public init(
                    activeLockReason: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.ActiveLockReasonPayload? = nil,
                    assignee: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.AssigneePayload? = nil,
                    assignees: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.AssigneesPayload,
                    authorAssociation: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.AuthorAssociationPayload,
                    body: Swift.String? = nil,
                    closedAt: Foundation.Date? = nil,
                    comments: Swift.Int,
                    commentsUrl: Swift.String,
                    createdAt: Foundation.Date,
                    draft: Swift.Bool? = nil,
                    eventsUrl: Swift.String,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    labels: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.LabelsPayload? = nil,
                    labelsUrl: Swift.String,
                    locked: Swift.Bool? = nil,
                    milestone: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.MilestonePayload? = nil,
                    nodeId: Swift.String,
                    number: Swift.Int,
                    performedViaGithubApp: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PerformedViaGithubAppPayload? = nil,
                    pullRequest: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.PullRequestPayload? = nil,
                    reactions: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.ReactionsPayload,
                    repositoryUrl: Swift.String,
                    state: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.StatePayload? = nil,
                    stateReason: Swift.String? = nil,
                    timelineUrl: Swift.String? = nil,
                    title: Swift.String,
                    updatedAt: Foundation.Date,
                    url: Swift.String,
                    user: Components.Schemas.WebhookIssuesUnassigned.IssuePayload.UserPayload? = nil
                ) {
                    self.activeLockReason = activeLockReason
                    self.assignee = assignee
                    self.assignees = assignees
                    self.authorAssociation = authorAssociation
                    self.body = body
                    self.closedAt = closedAt
                    self.comments = comments
                    self.commentsUrl = commentsUrl
                    self.createdAt = createdAt
                    self.draft = draft
                    self.eventsUrl = eventsUrl
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.labels = labels
                    self.labelsUrl = labelsUrl
                    self.locked = locked
                    self.milestone = milestone
                    self.nodeId = nodeId
                    self.number = number
                    self.performedViaGithubApp = performedViaGithubApp
                    self.pullRequest = pullRequest
                    self.reactions = reactions
                    self.repositoryUrl = repositoryUrl
                    self.state = state
                    self.stateReason = stateReason
                    self.timelineUrl = timelineUrl
                    self.title = title
                    self.updatedAt = updatedAt
                    self.url = url
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case activeLockReason = "active_lock_reason"
                    case assignee
                    case assignees
                    case authorAssociation = "author_association"
                    case body
                    case closedAt = "closed_at"
                    case comments
                    case commentsUrl = "comments_url"
                    case createdAt = "created_at"
                    case draft
                    case eventsUrl = "events_url"
                    case htmlUrl = "html_url"
                    case id
                    case labels
                    case labelsUrl = "labels_url"
                    case locked
                    case milestone
                    case nodeId = "node_id"
                    case number
                    case performedViaGithubApp = "performed_via_github_app"
                    case pullRequest = "pull_request"
                    case reactions
                    case repositoryUrl = "repository_url"
                    case state
                    case stateReason = "state_reason"
                    case timelineUrl = "timeline_url"
                    case title
                    case updatedAt = "updated_at"
                    case url
                    case user
                }
            }
            /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/issue`.
            public var issue: Components.Schemas.WebhookIssuesUnassigned.IssuePayload
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unassigned/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Creates a new `WebhookIssuesUnassigned`.
            ///
            /// - Parameters:
            ///   - action: The action that was performed.
            ///   - assignee:
            ///   - enterprise:
            ///   - installation:
            ///   - issue: The [issue](https://docs.github.com/en/rest/reference/issues) itself.
            ///   - organization:
            ///   - repository:
            ///   - sender:
            public init(
                action: Components.Schemas.WebhookIssuesUnassigned.ActionPayload,
                assignee: Components.Schemas.WebhookIssuesUnassigned.AssigneePayload? = nil,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                issue: Components.Schemas.WebhookIssuesUnassigned.IssuePayload,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser
            ) {
                self.action = action
                self.assignee = assignee
                self.enterprise = enterprise
                self.installation = installation
                self.issue = issue
                self.organization = organization
                self.repository = repository
                self.sender = sender
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case assignee
                case enterprise
                case installation
                case issue
                case organization
                case repository
                case sender
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled`.
        public struct WebhookIssuesUnlabeled: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case unlabeled = "unlabeled"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/action`.
            public var action: Components.Schemas.WebhookIssuesUnlabeled.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue`.
            public struct IssuePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/active_lock_reason`.
                @frozen public enum ActiveLockReasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case resolved = "resolved"
                    case offTopic = "off-topic"
                    case tooHeated = "too heated"
                    case spam = "spam"
                    case _empty_ = ""
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/active_lock_reason`.
                public var activeLockReason: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.ActiveLockReasonPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/assignee`.
                public struct AssigneePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/assignee/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/assignee/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/assignee/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/assignee/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/assignee/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/assignee/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/assignee/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/assignee/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/assignee/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/assignee/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/assignee/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/assignee/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/assignee/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/assignee/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/assignee/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/assignee/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/assignee/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/assignee/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/assignee/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/assignee/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                        case mannequin = "Mannequin"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/assignee/type`.
                    public var _type: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.AssigneePayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/assignee/url`.
                    public var url: Swift.String?
                    /// Creates a new `AssigneePayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.AssigneePayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/assignee`.
                public var assignee: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.AssigneePayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/AssigneesPayload`.
                public struct AssigneesPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/AssigneesPayload/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/AssigneesPayload/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/AssigneesPayload/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/AssigneesPayload/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/AssigneesPayload/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/AssigneesPayload/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/AssigneesPayload/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/AssigneesPayload/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/AssigneesPayload/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/AssigneesPayload/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/AssigneesPayload/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/AssigneesPayload/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/AssigneesPayload/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/AssigneesPayload/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/AssigneesPayload/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/AssigneesPayload/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/AssigneesPayload/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/AssigneesPayload/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/AssigneesPayload/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/AssigneesPayload/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                        case mannequin = "Mannequin"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/AssigneesPayload/type`.
                    public var _type: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.AssigneesPayloadPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/AssigneesPayload/url`.
                    public var url: Swift.String?
                    /// Creates a new `AssigneesPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.AssigneesPayloadPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/assignees`.
                public typealias AssigneesPayload = [Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.AssigneesPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/assignees`.
                public var assignees: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.AssigneesPayload
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/author_association`.
                @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case collaborator = "COLLABORATOR"
                    case contributor = "CONTRIBUTOR"
                    case firstTimer = "FIRST_TIMER"
                    case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                    case mannequin = "MANNEQUIN"
                    case member = "MEMBER"
                    case none = "NONE"
                    case owner = "OWNER"
                }
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/author_association`.
                public var authorAssociation: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.AuthorAssociationPayload
                /// Contents of the issue
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/body`.
                public var body: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/closed_at`.
                public var closedAt: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/comments`.
                public var comments: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/comments_url`.
                public var commentsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/created_at`.
                public var createdAt: Foundation.Date
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/draft`.
                public var draft: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/events_url`.
                public var eventsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/html_url`.
                public var htmlUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/LabelsPayload`.
                public struct LabelsPayloadPayload: Codable, Hashable, Sendable {
                    /// 6-character hex code, without the leading #, identifying the color
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/LabelsPayload/color`.
                    public var color: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/LabelsPayload/default`.
                    public var _default: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/LabelsPayload/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/LabelsPayload/id`.
                    public var id: Swift.Int
                    /// The name of the label.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/LabelsPayload/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/LabelsPayload/node_id`.
                    public var nodeId: Swift.String
                    /// URL for the label
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/LabelsPayload/url`.
                    public var url: Swift.String
                    /// Creates a new `LabelsPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - color: 6-character hex code, without the leading #, identifying the color
                    ///   - _default:
                    ///   - description:
                    ///   - id:
                    ///   - name: The name of the label.
                    ///   - nodeId:
                    ///   - url: URL for the label
                    public init(
                        color: Swift.String,
                        _default: Swift.Bool,
                        description: Swift.String? = nil,
                        id: Swift.Int,
                        name: Swift.String,
                        nodeId: Swift.String,
                        url: Swift.String
                    ) {
                        self.color = color
                        self._default = _default
                        self.description = description
                        self.id = id
                        self.name = name
                        self.nodeId = nodeId
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case color
                        case _default = "default"
                        case description
                        case id
                        case name
                        case nodeId = "node_id"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/labels`.
                public typealias LabelsPayload = [Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.LabelsPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/labels`.
                public var labels: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.LabelsPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/labels_url`.
                public var labelsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/locked`.
                public var locked: Swift.Bool?
                /// A collection of related issues and pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone`.
                public struct MilestonePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/closed_at`.
                    public var closedAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/closed_issues`.
                    public var closedIssues: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/created_at`.
                    public var createdAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/creator`.
                    public struct CreatorPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/creator/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/creator/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/creator/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/creator/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/creator/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/creator/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/creator/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/creator/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/creator/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/creator/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/creator/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/creator/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/creator/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/creator/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/creator/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/creator/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/creator/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/creator/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/creator/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/creator/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                            case mannequin = "Mannequin"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/creator/type`.
                        public var _type: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.MilestonePayload.CreatorPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/creator/url`.
                        public var url: Swift.String?
                        /// Creates a new `CreatorPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.MilestonePayload.CreatorPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/creator`.
                    public var creator: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.MilestonePayload.CreatorPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/due_on`.
                    public var dueOn: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/html_url`.
                    public var htmlUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/labels_url`.
                    public var labelsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/node_id`.
                    public var nodeId: Swift.String
                    /// The number of the milestone.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/number`.
                    public var number: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/open_issues`.
                    public var openIssues: Swift.Int
                    /// The state of the milestone.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/state`.
                    @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case closed = "closed"
                    }
                    /// The state of the milestone.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/state`.
                    public var state: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.MilestonePayload.StatePayload
                    /// The title of the milestone.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/title`.
                    public var title: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/updated_at`.
                    public var updatedAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone/url`.
                    public var url: Swift.String
                    /// Creates a new `MilestonePayload`.
                    ///
                    /// - Parameters:
                    ///   - closedAt:
                    ///   - closedIssues:
                    ///   - createdAt:
                    ///   - creator:
                    ///   - description:
                    ///   - dueOn:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - labelsUrl:
                    ///   - nodeId:
                    ///   - number: The number of the milestone.
                    ///   - openIssues:
                    ///   - state: The state of the milestone.
                    ///   - title: The title of the milestone.
                    ///   - updatedAt:
                    ///   - url:
                    public init(
                        closedAt: Foundation.Date? = nil,
                        closedIssues: Swift.Int,
                        createdAt: Foundation.Date,
                        creator: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.MilestonePayload.CreatorPayload? = nil,
                        description: Swift.String? = nil,
                        dueOn: Foundation.Date? = nil,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        labelsUrl: Swift.String,
                        nodeId: Swift.String,
                        number: Swift.Int,
                        openIssues: Swift.Int,
                        state: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.MilestonePayload.StatePayload,
                        title: Swift.String,
                        updatedAt: Foundation.Date,
                        url: Swift.String
                    ) {
                        self.closedAt = closedAt
                        self.closedIssues = closedIssues
                        self.createdAt = createdAt
                        self.creator = creator
                        self.description = description
                        self.dueOn = dueOn
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.labelsUrl = labelsUrl
                        self.nodeId = nodeId
                        self.number = number
                        self.openIssues = openIssues
                        self.state = state
                        self.title = title
                        self.updatedAt = updatedAt
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case closedAt = "closed_at"
                        case closedIssues = "closed_issues"
                        case createdAt = "created_at"
                        case creator
                        case description
                        case dueOn = "due_on"
                        case htmlUrl = "html_url"
                        case id
                        case labelsUrl = "labels_url"
                        case nodeId = "node_id"
                        case number
                        case openIssues = "open_issues"
                        case state
                        case title
                        case updatedAt = "updated_at"
                        case url
                    }
                }
                /// A collection of related issues and pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/milestone`.
                public var milestone: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.MilestonePayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/number`.
                public var number: Swift.Int
                /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app`.
                public struct PerformedViaGithubAppPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/created_at`.
                    public var createdAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/EventsPayload`.
                    @frozen public enum EventsPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case branchProtectionRule = "branch_protection_rule"
                        case checkRun = "check_run"
                        case checkSuite = "check_suite"
                        case codeScanningAlert = "code_scanning_alert"
                        case commitComment = "commit_comment"
                        case contentReference = "content_reference"
                        case create = "create"
                        case delete = "delete"
                        case deployment = "deployment"
                        case deploymentReview = "deployment_review"
                        case deploymentStatus = "deployment_status"
                        case deployKey = "deploy_key"
                        case discussion = "discussion"
                        case discussionComment = "discussion_comment"
                        case fork = "fork"
                        case gollum = "gollum"
                        case issues = "issues"
                        case issueComment = "issue_comment"
                        case label = "label"
                        case member = "member"
                        case membership = "membership"
                        case milestone = "milestone"
                        case organization = "organization"
                        case orgBlock = "org_block"
                        case pageBuild = "page_build"
                        case project = "project"
                        case projectCard = "project_card"
                        case projectColumn = "project_column"
                        case _public = "public"
                        case pullRequest = "pull_request"
                        case pullRequestReview = "pull_request_review"
                        case pullRequestReviewComment = "pull_request_review_comment"
                        case push = "push"
                        case registryPackage = "registry_package"
                        case release = "release"
                        case repository = "repository"
                        case repositoryDispatch = "repository_dispatch"
                        case secretScanningAlert = "secret_scanning_alert"
                        case star = "star"
                        case status = "status"
                        case team = "team"
                        case teamAdd = "team_add"
                        case watch = "watch"
                        case workflowDispatch = "workflow_dispatch"
                        case workflowRun = "workflow_run"
                        case reminder = "reminder"
                        case pullRequestReviewThread = "pull_request_review_thread"
                    }
                    /// The list of events for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/events`.
                    public typealias EventsPayload = [Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.EventsPayloadPayload]
                    /// The list of events for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/events`.
                    public var events: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.EventsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/external_url`.
                    public var externalUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/html_url`.
                    public var htmlUrl: Swift.String
                    /// Unique identifier of the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/id`.
                    public var id: Swift.Int?
                    /// The name of the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/owner`.
                    public struct OwnerPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/owner/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/owner/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/owner/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/owner/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/owner/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/owner/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/owner/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/owner/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/owner/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/owner/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/owner/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/owner/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/owner/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/owner/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/owner/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/owner/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/owner/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/owner/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/owner/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/owner/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/owner/type`.
                        public var _type: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/owner/url`.
                        public var url: Swift.String?
                        /// Creates a new `OwnerPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/owner`.
                    public var owner: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.OwnerPayload?
                    /// The set of permissions for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions`.
                    public struct PermissionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/actions`.
                        @frozen public enum ActionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/actions`.
                        public var actions: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/administration`.
                        @frozen public enum AdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/administration`.
                        public var administration: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/checks`.
                        @frozen public enum ChecksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/checks`.
                        public var checks: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/content_references`.
                        @frozen public enum ContentReferencesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/content_references`.
                        public var contentReferences: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/contents`.
                        @frozen public enum ContentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/contents`.
                        public var contents: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/deployments`.
                        @frozen public enum DeploymentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/deployments`.
                        public var deployments: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/discussions`.
                        @frozen public enum DiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/discussions`.
                        public var discussions: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/emails`.
                        @frozen public enum EmailsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/emails`.
                        public var emails: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/environments`.
                        @frozen public enum EnvironmentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/environments`.
                        public var environments: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/issues`.
                        @frozen public enum IssuesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/issues`.
                        public var issues: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/keys`.
                        @frozen public enum KeysPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/keys`.
                        public var keys: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/members`.
                        @frozen public enum MembersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/members`.
                        public var members: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/metadata`.
                        @frozen public enum MetadataPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/metadata`.
                        public var metadata: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/organization_administration`.
                        @frozen public enum OrganizationAdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/organization_administration`.
                        public var organizationAdministration: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/organization_hooks`.
                        @frozen public enum OrganizationHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/organization_hooks`.
                        public var organizationHooks: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/organization_packages`.
                        @frozen public enum OrganizationPackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/organization_packages`.
                        public var organizationPackages: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/organization_plan`.
                        @frozen public enum OrganizationPlanPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/organization_plan`.
                        public var organizationPlan: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/organization_projects`.
                        @frozen public enum OrganizationProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                            case admin = "admin"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/organization_projects`.
                        public var organizationProjects: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/organization_secrets`.
                        @frozen public enum OrganizationSecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/organization_secrets`.
                        public var organizationSecrets: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/organization_self_hosted_runners`.
                        @frozen public enum OrganizationSelfHostedRunnersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/organization_self_hosted_runners`.
                        public var organizationSelfHostedRunners: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/organization_user_blocking`.
                        @frozen public enum OrganizationUserBlockingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/organization_user_blocking`.
                        public var organizationUserBlocking: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/packages`.
                        @frozen public enum PackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/packages`.
                        public var packages: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/pages`.
                        @frozen public enum PagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/pages`.
                        public var pages: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/pull_requests`.
                        @frozen public enum PullRequestsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/pull_requests`.
                        public var pullRequests: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/repository_hooks`.
                        @frozen public enum RepositoryHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/repository_hooks`.
                        public var repositoryHooks: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/repository_projects`.
                        @frozen public enum RepositoryProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/repository_projects`.
                        public var repositoryProjects: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/secret_scanning_alerts`.
                        @frozen public enum SecretScanningAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/secret_scanning_alerts`.
                        public var secretScanningAlerts: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/secrets`.
                        @frozen public enum SecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/secrets`.
                        public var secrets: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/security_events`.
                        @frozen public enum SecurityEventsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/security_events`.
                        public var securityEvents: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/security_scanning_alert`.
                        @frozen public enum SecurityScanningAlertPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/security_scanning_alert`.
                        public var securityScanningAlert: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/single_file`.
                        @frozen public enum SingleFilePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/single_file`.
                        public var singleFile: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/statuses`.
                        @frozen public enum StatusesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/statuses`.
                        public var statuses: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/team_discussions`.
                        @frozen public enum TeamDiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/team_discussions`.
                        public var teamDiscussions: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/vulnerability_alerts`.
                        @frozen public enum VulnerabilityAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/vulnerability_alerts`.
                        public var vulnerabilityAlerts: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/workflows`.
                        @frozen public enum WorkflowsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions/workflows`.
                        public var workflows: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload?
                        /// Creates a new `PermissionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - actions:
                        ///   - administration:
                        ///   - checks:
                        ///   - contentReferences:
                        ///   - contents:
                        ///   - deployments:
                        ///   - discussions:
                        ///   - emails:
                        ///   - environments:
                        ///   - issues:
                        ///   - keys:
                        ///   - members:
                        ///   - metadata:
                        ///   - organizationAdministration:
                        ///   - organizationHooks:
                        ///   - organizationPackages:
                        ///   - organizationPlan:
                        ///   - organizationProjects:
                        ///   - organizationSecrets:
                        ///   - organizationSelfHostedRunners:
                        ///   - organizationUserBlocking:
                        ///   - packages:
                        ///   - pages:
                        ///   - pullRequests:
                        ///   - repositoryHooks:
                        ///   - repositoryProjects:
                        ///   - secretScanningAlerts:
                        ///   - secrets:
                        ///   - securityEvents:
                        ///   - securityScanningAlert:
                        ///   - singleFile:
                        ///   - statuses:
                        ///   - teamDiscussions:
                        ///   - vulnerabilityAlerts:
                        ///   - workflows:
                        public init(
                            actions: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload? = nil,
                            administration: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload? = nil,
                            checks: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload? = nil,
                            contentReferences: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload? = nil,
                            contents: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload? = nil,
                            deployments: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload? = nil,
                            discussions: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload? = nil,
                            emails: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload? = nil,
                            environments: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload? = nil,
                            issues: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload? = nil,
                            keys: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload? = nil,
                            members: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload? = nil,
                            metadata: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload? = nil,
                            organizationAdministration: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload? = nil,
                            organizationHooks: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload? = nil,
                            organizationPackages: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload? = nil,
                            organizationPlan: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload? = nil,
                            organizationProjects: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload? = nil,
                            organizationSecrets: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload? = nil,
                            organizationSelfHostedRunners: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload? = nil,
                            organizationUserBlocking: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload? = nil,
                            packages: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload? = nil,
                            pages: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload? = nil,
                            pullRequests: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload? = nil,
                            repositoryHooks: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload? = nil,
                            repositoryProjects: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload? = nil,
                            secretScanningAlerts: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload? = nil,
                            secrets: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload? = nil,
                            securityEvents: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload? = nil,
                            securityScanningAlert: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload? = nil,
                            singleFile: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload? = nil,
                            statuses: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload? = nil,
                            teamDiscussions: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload? = nil,
                            vulnerabilityAlerts: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload? = nil,
                            workflows: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload? = nil
                        ) {
                            self.actions = actions
                            self.administration = administration
                            self.checks = checks
                            self.contentReferences = contentReferences
                            self.contents = contents
                            self.deployments = deployments
                            self.discussions = discussions
                            self.emails = emails
                            self.environments = environments
                            self.issues = issues
                            self.keys = keys
                            self.members = members
                            self.metadata = metadata
                            self.organizationAdministration = organizationAdministration
                            self.organizationHooks = organizationHooks
                            self.organizationPackages = organizationPackages
                            self.organizationPlan = organizationPlan
                            self.organizationProjects = organizationProjects
                            self.organizationSecrets = organizationSecrets
                            self.organizationSelfHostedRunners = organizationSelfHostedRunners
                            self.organizationUserBlocking = organizationUserBlocking
                            self.packages = packages
                            self.pages = pages
                            self.pullRequests = pullRequests
                            self.repositoryHooks = repositoryHooks
                            self.repositoryProjects = repositoryProjects
                            self.secretScanningAlerts = secretScanningAlerts
                            self.secrets = secrets
                            self.securityEvents = securityEvents
                            self.securityScanningAlert = securityScanningAlert
                            self.singleFile = singleFile
                            self.statuses = statuses
                            self.teamDiscussions = teamDiscussions
                            self.vulnerabilityAlerts = vulnerabilityAlerts
                            self.workflows = workflows
                        }
                        public enum CodingKeys: String, CodingKey {
                            case actions
                            case administration
                            case checks
                            case contentReferences = "content_references"
                            case contents
                            case deployments
                            case discussions
                            case emails
                            case environments
                            case issues
                            case keys
                            case members
                            case metadata
                            case organizationAdministration = "organization_administration"
                            case organizationHooks = "organization_hooks"
                            case organizationPackages = "organization_packages"
                            case organizationPlan = "organization_plan"
                            case organizationProjects = "organization_projects"
                            case organizationSecrets = "organization_secrets"
                            case organizationSelfHostedRunners = "organization_self_hosted_runners"
                            case organizationUserBlocking = "organization_user_blocking"
                            case packages
                            case pages
                            case pullRequests = "pull_requests"
                            case repositoryHooks = "repository_hooks"
                            case repositoryProjects = "repository_projects"
                            case secretScanningAlerts = "secret_scanning_alerts"
                            case secrets
                            case securityEvents = "security_events"
                            case securityScanningAlert = "security_scanning_alert"
                            case singleFile = "single_file"
                            case statuses
                            case teamDiscussions = "team_discussions"
                            case vulnerabilityAlerts = "vulnerability_alerts"
                            case workflows
                        }
                    }
                    /// The set of permissions for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/permissions`.
                    public var permissions: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload?
                    /// The slug name of the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/slug`.
                    public var slug: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app/updated_at`.
                    public var updatedAt: Foundation.Date?
                    /// Creates a new `PerformedViaGithubAppPayload`.
                    ///
                    /// - Parameters:
                    ///   - createdAt:
                    ///   - description:
                    ///   - events: The list of events for the GitHub app
                    ///   - externalUrl:
                    ///   - htmlUrl:
                    ///   - id: Unique identifier of the GitHub app
                    ///   - name: The name of the GitHub app
                    ///   - nodeId:
                    ///   - owner:
                    ///   - permissions: The set of permissions for the GitHub app
                    ///   - slug: The slug name of the GitHub app
                    ///   - updatedAt:
                    public init(
                        createdAt: Foundation.Date? = nil,
                        description: Swift.String? = nil,
                        events: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.EventsPayload? = nil,
                        externalUrl: Swift.String? = nil,
                        htmlUrl: Swift.String,
                        id: Swift.Int? = nil,
                        name: Swift.String,
                        nodeId: Swift.String,
                        owner: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.OwnerPayload? = nil,
                        permissions: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload? = nil,
                        slug: Swift.String? = nil,
                        updatedAt: Foundation.Date? = nil
                    ) {
                        self.createdAt = createdAt
                        self.description = description
                        self.events = events
                        self.externalUrl = externalUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.name = name
                        self.nodeId = nodeId
                        self.owner = owner
                        self.permissions = permissions
                        self.slug = slug
                        self.updatedAt = updatedAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case createdAt = "created_at"
                        case description
                        case events
                        case externalUrl = "external_url"
                        case htmlUrl = "html_url"
                        case id
                        case name
                        case nodeId = "node_id"
                        case owner
                        case permissions
                        case slug
                        case updatedAt = "updated_at"
                    }
                }
                /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/performed_via_github_app`.
                public var performedViaGithubApp: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/pull_request`.
                public struct PullRequestPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/pull_request/diff_url`.
                    public var diffUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/pull_request/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/pull_request/merged_at`.
                    public var mergedAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/pull_request/patch_url`.
                    public var patchUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/pull_request/url`.
                    public var url: Swift.String?
                    /// Creates a new `PullRequestPayload`.
                    ///
                    /// - Parameters:
                    ///   - diffUrl:
                    ///   - htmlUrl:
                    ///   - mergedAt:
                    ///   - patchUrl:
                    ///   - url:
                    public init(
                        diffUrl: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        mergedAt: Foundation.Date? = nil,
                        patchUrl: Swift.String? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.diffUrl = diffUrl
                        self.htmlUrl = htmlUrl
                        self.mergedAt = mergedAt
                        self.patchUrl = patchUrl
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case diffUrl = "diff_url"
                        case htmlUrl = "html_url"
                        case mergedAt = "merged_at"
                        case patchUrl = "patch_url"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/pull_request`.
                public var pullRequest: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PullRequestPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/reactions`.
                public struct ReactionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/reactions/+1`.
                    public var _plus_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/reactions/-1`.
                    public var _hyphen_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/reactions/confused`.
                    public var confused: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/reactions/eyes`.
                    public var eyes: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/reactions/heart`.
                    public var heart: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/reactions/hooray`.
                    public var hooray: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/reactions/laugh`.
                    public var laugh: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/reactions/rocket`.
                    public var rocket: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/reactions/total_count`.
                    public var totalCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/reactions/url`.
                    public var url: Swift.String
                    /// Creates a new `ReactionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - _plus_1:
                    ///   - _hyphen_1:
                    ///   - confused:
                    ///   - eyes:
                    ///   - heart:
                    ///   - hooray:
                    ///   - laugh:
                    ///   - rocket:
                    ///   - totalCount:
                    ///   - url:
                    public init(
                        _plus_1: Swift.Int,
                        _hyphen_1: Swift.Int,
                        confused: Swift.Int,
                        eyes: Swift.Int,
                        heart: Swift.Int,
                        hooray: Swift.Int,
                        laugh: Swift.Int,
                        rocket: Swift.Int,
                        totalCount: Swift.Int,
                        url: Swift.String
                    ) {
                        self._plus_1 = _plus_1
                        self._hyphen_1 = _hyphen_1
                        self.confused = confused
                        self.eyes = eyes
                        self.heart = heart
                        self.hooray = hooray
                        self.laugh = laugh
                        self.rocket = rocket
                        self.totalCount = totalCount
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _plus_1 = "+1"
                        case _hyphen_1 = "-1"
                        case confused
                        case eyes
                        case heart
                        case hooray
                        case laugh
                        case rocket
                        case totalCount = "total_count"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/reactions`.
                public var reactions: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.ReactionsPayload
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/repository_url`.
                public var repositoryUrl: Swift.String
                /// State of the issue; either 'open' or 'closed'
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/state`.
                @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case open = "open"
                    case closed = "closed"
                }
                /// State of the issue; either 'open' or 'closed'
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/state`.
                public var state: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.StatePayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/state_reason`.
                public var stateReason: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/timeline_url`.
                public var timelineUrl: Swift.String?
                /// Title of the issue
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/title`.
                public var title: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/updated_at`.
                public var updatedAt: Foundation.Date
                /// URL for the issue
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/user`.
                public struct UserPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/user/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/user/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/user/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/user/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/user/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/user/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/user/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/user/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/user/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/user/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/user/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/user/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/user/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/user/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/user/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/user/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/user/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/user/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/user/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/user/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                        case mannequin = "Mannequin"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/user/type`.
                    public var _type: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.UserPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/user/url`.
                    public var url: Swift.String?
                    /// Creates a new `UserPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.UserPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue/user`.
                public var user: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.UserPayload?
                /// Creates a new `IssuePayload`.
                ///
                /// - Parameters:
                ///   - activeLockReason:
                ///   - assignee:
                ///   - assignees:
                ///   - authorAssociation: How the author is associated with the repository.
                ///   - body: Contents of the issue
                ///   - closedAt:
                ///   - comments:
                ///   - commentsUrl:
                ///   - createdAt:
                ///   - draft:
                ///   - eventsUrl:
                ///   - htmlUrl:
                ///   - id:
                ///   - labels:
                ///   - labelsUrl:
                ///   - locked:
                ///   - milestone: A collection of related issues and pull requests.
                ///   - nodeId:
                ///   - number:
                ///   - performedViaGithubApp: GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                ///   - pullRequest:
                ///   - reactions:
                ///   - repositoryUrl:
                ///   - state: State of the issue; either 'open' or 'closed'
                ///   - stateReason:
                ///   - timelineUrl:
                ///   - title: Title of the issue
                ///   - updatedAt:
                ///   - url: URL for the issue
                ///   - user:
                public init(
                    activeLockReason: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.ActiveLockReasonPayload? = nil,
                    assignee: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.AssigneePayload? = nil,
                    assignees: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.AssigneesPayload,
                    authorAssociation: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.AuthorAssociationPayload,
                    body: Swift.String? = nil,
                    closedAt: Foundation.Date? = nil,
                    comments: Swift.Int,
                    commentsUrl: Swift.String,
                    createdAt: Foundation.Date,
                    draft: Swift.Bool? = nil,
                    eventsUrl: Swift.String,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    labels: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.LabelsPayload? = nil,
                    labelsUrl: Swift.String,
                    locked: Swift.Bool? = nil,
                    milestone: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.MilestonePayload? = nil,
                    nodeId: Swift.String,
                    number: Swift.Int,
                    performedViaGithubApp: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PerformedViaGithubAppPayload? = nil,
                    pullRequest: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.PullRequestPayload? = nil,
                    reactions: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.ReactionsPayload,
                    repositoryUrl: Swift.String,
                    state: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.StatePayload? = nil,
                    stateReason: Swift.String? = nil,
                    timelineUrl: Swift.String? = nil,
                    title: Swift.String,
                    updatedAt: Foundation.Date,
                    url: Swift.String,
                    user: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload.UserPayload? = nil
                ) {
                    self.activeLockReason = activeLockReason
                    self.assignee = assignee
                    self.assignees = assignees
                    self.authorAssociation = authorAssociation
                    self.body = body
                    self.closedAt = closedAt
                    self.comments = comments
                    self.commentsUrl = commentsUrl
                    self.createdAt = createdAt
                    self.draft = draft
                    self.eventsUrl = eventsUrl
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.labels = labels
                    self.labelsUrl = labelsUrl
                    self.locked = locked
                    self.milestone = milestone
                    self.nodeId = nodeId
                    self.number = number
                    self.performedViaGithubApp = performedViaGithubApp
                    self.pullRequest = pullRequest
                    self.reactions = reactions
                    self.repositoryUrl = repositoryUrl
                    self.state = state
                    self.stateReason = stateReason
                    self.timelineUrl = timelineUrl
                    self.title = title
                    self.updatedAt = updatedAt
                    self.url = url
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case activeLockReason = "active_lock_reason"
                    case assignee
                    case assignees
                    case authorAssociation = "author_association"
                    case body
                    case closedAt = "closed_at"
                    case comments
                    case commentsUrl = "comments_url"
                    case createdAt = "created_at"
                    case draft
                    case eventsUrl = "events_url"
                    case htmlUrl = "html_url"
                    case id
                    case labels
                    case labelsUrl = "labels_url"
                    case locked
                    case milestone
                    case nodeId = "node_id"
                    case number
                    case performedViaGithubApp = "performed_via_github_app"
                    case pullRequest = "pull_request"
                    case reactions
                    case repositoryUrl = "repository_url"
                    case state
                    case stateReason = "state_reason"
                    case timelineUrl = "timeline_url"
                    case title
                    case updatedAt = "updated_at"
                    case url
                    case user
                }
            }
            /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/issue`.
            public var issue: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/label`.
            public struct LabelPayload: Codable, Hashable, Sendable {
                /// 6-character hex code, without the leading #, identifying the color
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/label/color`.
                public var color: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/label/default`.
                public var _default: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/label/description`.
                public var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/label/id`.
                public var id: Swift.Int
                /// The name of the label.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/label/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/label/node_id`.
                public var nodeId: Swift.String
                /// URL for the label
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/label/url`.
                public var url: Swift.String
                /// Creates a new `LabelPayload`.
                ///
                /// - Parameters:
                ///   - color: 6-character hex code, without the leading #, identifying the color
                ///   - _default:
                ///   - description:
                ///   - id:
                ///   - name: The name of the label.
                ///   - nodeId:
                ///   - url: URL for the label
                public init(
                    color: Swift.String,
                    _default: Swift.Bool,
                    description: Swift.String? = nil,
                    id: Swift.Int,
                    name: Swift.String,
                    nodeId: Swift.String,
                    url: Swift.String
                ) {
                    self.color = color
                    self._default = _default
                    self.description = description
                    self.id = id
                    self.name = name
                    self.nodeId = nodeId
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case color
                    case _default = "default"
                    case description
                    case id
                    case name
                    case nodeId = "node_id"
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/label`.
            public var label: Components.Schemas.WebhookIssuesUnlabeled.LabelPayload?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlabeled/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Creates a new `WebhookIssuesUnlabeled`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - enterprise:
            ///   - installation:
            ///   - issue: The [issue](https://docs.github.com/en/rest/reference/issues) itself.
            ///   - label:
            ///   - organization:
            ///   - repository:
            ///   - sender:
            public init(
                action: Components.Schemas.WebhookIssuesUnlabeled.ActionPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                issue: Components.Schemas.WebhookIssuesUnlabeled.IssuePayload,
                label: Components.Schemas.WebhookIssuesUnlabeled.LabelPayload? = nil,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser
            ) {
                self.action = action
                self.enterprise = enterprise
                self.installation = installation
                self.issue = issue
                self.label = label
                self.organization = organization
                self.repository = repository
                self.sender = sender
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case enterprise
                case installation
                case issue
                case label
                case organization
                case repository
                case sender
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked`.
        public struct WebhookIssuesUnlocked: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case unlocked = "unlocked"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/action`.
            public var action: Components.Schemas.WebhookIssuesUnlocked.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue`.
            public struct IssuePayload: Codable, Hashable, Sendable {
                /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/active_lock_reason`.
                    @frozen public enum ActiveLockReasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case resolved = "resolved"
                        case offTopic = "off-topic"
                        case tooHeated = "too heated"
                        case spam = "spam"
                        case _empty_ = ""
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/active_lock_reason`.
                    public var activeLockReason: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.ActiveLockReasonPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/assignee`.
                    public struct AssigneePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/assignee/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/assignee/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/assignee/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/assignee/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/assignee/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/assignee/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/assignee/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/assignee/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/assignee/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/assignee/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/assignee/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/assignee/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/assignee/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/assignee/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/assignee/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/assignee/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/assignee/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/assignee/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/assignee/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/assignee/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/assignee/type`.
                        public var _type: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.AssigneePayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/assignee/url`.
                        public var url: Swift.String?
                        /// Creates a new `AssigneePayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.AssigneePayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/assignee`.
                    public var assignee: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.AssigneePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/AssigneesPayload`.
                    public struct AssigneesPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/AssigneesPayload/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/AssigneesPayload/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/AssigneesPayload/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/AssigneesPayload/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/AssigneesPayload/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/AssigneesPayload/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/AssigneesPayload/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/AssigneesPayload/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/AssigneesPayload/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/AssigneesPayload/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/AssigneesPayload/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/AssigneesPayload/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/AssigneesPayload/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/AssigneesPayload/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/AssigneesPayload/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/AssigneesPayload/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/AssigneesPayload/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/AssigneesPayload/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/AssigneesPayload/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/AssigneesPayload/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/AssigneesPayload/type`.
                        public var _type: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.AssigneesPayloadPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/AssigneesPayload/url`.
                        public var url: Swift.String?
                        /// Creates a new `AssigneesPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.AssigneesPayloadPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/assignees`.
                    public typealias AssigneesPayload = [Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.AssigneesPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/assignees`.
                    public var assignees: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.AssigneesPayload
                    /// How the author is associated with the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/author_association`.
                    @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case collaborator = "COLLABORATOR"
                        case contributor = "CONTRIBUTOR"
                        case firstTimer = "FIRST_TIMER"
                        case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                        case mannequin = "MANNEQUIN"
                        case member = "MEMBER"
                        case none = "NONE"
                        case owner = "OWNER"
                    }
                    /// How the author is associated with the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/author_association`.
                    public var authorAssociation: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.AuthorAssociationPayload
                    /// Contents of the issue
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/body`.
                    public var body: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/closed_at`.
                    public var closedAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/comments`.
                    public var comments: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/comments_url`.
                    public var commentsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/created_at`.
                    public var createdAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/draft`.
                    public var draft: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/events_url`.
                    public var eventsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/html_url`.
                    public var htmlUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/LabelsPayload`.
                    public struct LabelsPayloadPayload: Codable, Hashable, Sendable {
                        /// 6-character hex code, without the leading #, identifying the color
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/LabelsPayload/color`.
                        public var color: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/LabelsPayload/default`.
                        public var _default: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/LabelsPayload/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/LabelsPayload/id`.
                        public var id: Swift.Int
                        /// The name of the label.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/LabelsPayload/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/LabelsPayload/node_id`.
                        public var nodeId: Swift.String
                        /// URL for the label
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/LabelsPayload/url`.
                        public var url: Swift.String
                        /// Creates a new `LabelsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - color: 6-character hex code, without the leading #, identifying the color
                        ///   - _default:
                        ///   - description:
                        ///   - id:
                        ///   - name: The name of the label.
                        ///   - nodeId:
                        ///   - url: URL for the label
                        public init(
                            color: Swift.String,
                            _default: Swift.Bool,
                            description: Swift.String? = nil,
                            id: Swift.Int,
                            name: Swift.String,
                            nodeId: Swift.String,
                            url: Swift.String
                        ) {
                            self.color = color
                            self._default = _default
                            self.description = description
                            self.id = id
                            self.name = name
                            self.nodeId = nodeId
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case color
                            case _default = "default"
                            case description
                            case id
                            case name
                            case nodeId = "node_id"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/labels`.
                    public typealias LabelsPayload = [Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.LabelsPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/labels`.
                    public var labels: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.LabelsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/labels_url`.
                    public var labelsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/locked`.
                    public var locked: Swift.Bool?
                    /// A collection of related issues and pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone`.
                    public struct MilestonePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/closed_at`.
                        public var closedAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/closed_issues`.
                        public var closedIssues: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/created_at`.
                        public var createdAt: Foundation.Date
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/creator`.
                        public struct CreatorPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/creator/avatar_url`.
                            public var avatarUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/creator/deleted`.
                            public var deleted: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/creator/email`.
                            public var email: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/creator/events_url`.
                            public var eventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/creator/followers_url`.
                            public var followersUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/creator/following_url`.
                            public var followingUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/creator/gists_url`.
                            public var gistsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/creator/gravatar_id`.
                            public var gravatarId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/creator/html_url`.
                            public var htmlUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/creator/id`.
                            public var id: Swift.Int
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/creator/login`.
                            public var login: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/creator/name`.
                            public var name: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/creator/node_id`.
                            public var nodeId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/creator/organizations_url`.
                            public var organizationsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/creator/received_events_url`.
                            public var receivedEventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/creator/repos_url`.
                            public var reposUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/creator/site_admin`.
                            public var siteAdmin: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/creator/starred_url`.
                            public var starredUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/creator/subscriptions_url`.
                            public var subscriptionsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/creator/type`.
                            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case bot = "Bot"
                                case user = "User"
                                case organization = "Organization"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/creator/type`.
                            public var _type: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload._TypePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/creator/url`.
                            public var url: Swift.String?
                            /// Creates a new `CreatorPayload`.
                            ///
                            /// - Parameters:
                            ///   - avatarUrl:
                            ///   - deleted:
                            ///   - email:
                            ///   - eventsUrl:
                            ///   - followersUrl:
                            ///   - followingUrl:
                            ///   - gistsUrl:
                            ///   - gravatarId:
                            ///   - htmlUrl:
                            ///   - id:
                            ///   - login:
                            ///   - name:
                            ///   - nodeId:
                            ///   - organizationsUrl:
                            ///   - receivedEventsUrl:
                            ///   - reposUrl:
                            ///   - siteAdmin:
                            ///   - starredUrl:
                            ///   - subscriptionsUrl:
                            ///   - _type:
                            ///   - url:
                            public init(
                                avatarUrl: Swift.String? = nil,
                                deleted: Swift.Bool? = nil,
                                email: Swift.String? = nil,
                                eventsUrl: Swift.String? = nil,
                                followersUrl: Swift.String? = nil,
                                followingUrl: Swift.String? = nil,
                                gistsUrl: Swift.String? = nil,
                                gravatarId: Swift.String? = nil,
                                htmlUrl: Swift.String? = nil,
                                id: Swift.Int,
                                login: Swift.String,
                                name: Swift.String? = nil,
                                nodeId: Swift.String? = nil,
                                organizationsUrl: Swift.String? = nil,
                                receivedEventsUrl: Swift.String? = nil,
                                reposUrl: Swift.String? = nil,
                                siteAdmin: Swift.Bool? = nil,
                                starredUrl: Swift.String? = nil,
                                subscriptionsUrl: Swift.String? = nil,
                                _type: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload._TypePayload? = nil,
                                url: Swift.String? = nil
                            ) {
                                self.avatarUrl = avatarUrl
                                self.deleted = deleted
                                self.email = email
                                self.eventsUrl = eventsUrl
                                self.followersUrl = followersUrl
                                self.followingUrl = followingUrl
                                self.gistsUrl = gistsUrl
                                self.gravatarId = gravatarId
                                self.htmlUrl = htmlUrl
                                self.id = id
                                self.login = login
                                self.name = name
                                self.nodeId = nodeId
                                self.organizationsUrl = organizationsUrl
                                self.receivedEventsUrl = receivedEventsUrl
                                self.reposUrl = reposUrl
                                self.siteAdmin = siteAdmin
                                self.starredUrl = starredUrl
                                self.subscriptionsUrl = subscriptionsUrl
                                self._type = _type
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case avatarUrl = "avatar_url"
                                case deleted
                                case email
                                case eventsUrl = "events_url"
                                case followersUrl = "followers_url"
                                case followingUrl = "following_url"
                                case gistsUrl = "gists_url"
                                case gravatarId = "gravatar_id"
                                case htmlUrl = "html_url"
                                case id
                                case login
                                case name
                                case nodeId = "node_id"
                                case organizationsUrl = "organizations_url"
                                case receivedEventsUrl = "received_events_url"
                                case reposUrl = "repos_url"
                                case siteAdmin = "site_admin"
                                case starredUrl = "starred_url"
                                case subscriptionsUrl = "subscriptions_url"
                                case _type = "type"
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/creator`.
                        public var creator: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/due_on`.
                        public var dueOn: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/html_url`.
                        public var htmlUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/labels_url`.
                        public var labelsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/node_id`.
                        public var nodeId: Swift.String
                        /// The number of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/number`.
                        public var number: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/open_issues`.
                        public var openIssues: Swift.Int
                        /// The state of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/state`.
                        @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case open = "open"
                            case closed = "closed"
                        }
                        /// The state of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/state`.
                        public var state: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.MilestonePayload.StatePayload
                        /// The title of the milestone.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/title`.
                        public var title: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/updated_at`.
                        public var updatedAt: Foundation.Date
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone/url`.
                        public var url: Swift.String
                        /// Creates a new `MilestonePayload`.
                        ///
                        /// - Parameters:
                        ///   - closedAt:
                        ///   - closedIssues:
                        ///   - createdAt:
                        ///   - creator:
                        ///   - description:
                        ///   - dueOn:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - labelsUrl:
                        ///   - nodeId:
                        ///   - number: The number of the milestone.
                        ///   - openIssues:
                        ///   - state: The state of the milestone.
                        ///   - title: The title of the milestone.
                        ///   - updatedAt:
                        ///   - url:
                        public init(
                            closedAt: Foundation.Date? = nil,
                            closedIssues: Swift.Int,
                            createdAt: Foundation.Date,
                            creator: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.MilestonePayload.CreatorPayload? = nil,
                            description: Swift.String? = nil,
                            dueOn: Foundation.Date? = nil,
                            htmlUrl: Swift.String,
                            id: Swift.Int,
                            labelsUrl: Swift.String,
                            nodeId: Swift.String,
                            number: Swift.Int,
                            openIssues: Swift.Int,
                            state: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.MilestonePayload.StatePayload,
                            title: Swift.String,
                            updatedAt: Foundation.Date,
                            url: Swift.String
                        ) {
                            self.closedAt = closedAt
                            self.closedIssues = closedIssues
                            self.createdAt = createdAt
                            self.creator = creator
                            self.description = description
                            self.dueOn = dueOn
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.labelsUrl = labelsUrl
                            self.nodeId = nodeId
                            self.number = number
                            self.openIssues = openIssues
                            self.state = state
                            self.title = title
                            self.updatedAt = updatedAt
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case closedAt = "closed_at"
                            case closedIssues = "closed_issues"
                            case createdAt = "created_at"
                            case creator
                            case description
                            case dueOn = "due_on"
                            case htmlUrl = "html_url"
                            case id
                            case labelsUrl = "labels_url"
                            case nodeId = "node_id"
                            case number
                            case openIssues = "open_issues"
                            case state
                            case title
                            case updatedAt = "updated_at"
                            case url
                        }
                    }
                    /// A collection of related issues and pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/milestone`.
                    public var milestone: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.MilestonePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/number`.
                    public var number: Swift.Int
                    /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app`.
                    public struct PerformedViaGithubAppPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/created_at`.
                        public var createdAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/EventsPayload`.
                        @frozen public enum EventsPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case branchProtectionRule = "branch_protection_rule"
                            case checkRun = "check_run"
                            case checkSuite = "check_suite"
                            case codeScanningAlert = "code_scanning_alert"
                            case commitComment = "commit_comment"
                            case contentReference = "content_reference"
                            case create = "create"
                            case delete = "delete"
                            case deployment = "deployment"
                            case deploymentReview = "deployment_review"
                            case deploymentStatus = "deployment_status"
                            case deployKey = "deploy_key"
                            case discussion = "discussion"
                            case discussionComment = "discussion_comment"
                            case fork = "fork"
                            case gollum = "gollum"
                            case issues = "issues"
                            case issueComment = "issue_comment"
                            case label = "label"
                            case member = "member"
                            case membership = "membership"
                            case milestone = "milestone"
                            case organization = "organization"
                            case orgBlock = "org_block"
                            case pageBuild = "page_build"
                            case project = "project"
                            case projectCard = "project_card"
                            case projectColumn = "project_column"
                            case _public = "public"
                            case pullRequest = "pull_request"
                            case pullRequestReview = "pull_request_review"
                            case pullRequestReviewComment = "pull_request_review_comment"
                            case push = "push"
                            case registryPackage = "registry_package"
                            case release = "release"
                            case repository = "repository"
                            case repositoryDispatch = "repository_dispatch"
                            case secretScanningAlert = "secret_scanning_alert"
                            case star = "star"
                            case status = "status"
                            case team = "team"
                            case teamAdd = "team_add"
                            case watch = "watch"
                            case workflowDispatch = "workflow_dispatch"
                            case workflowRun = "workflow_run"
                        }
                        /// The list of events for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/events`.
                        public typealias EventsPayload = [Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.EventsPayloadPayload]
                        /// The list of events for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/events`.
                        public var events: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.EventsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/external_url`.
                        public var externalUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/html_url`.
                        public var htmlUrl: Swift.String
                        /// Unique identifier of the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/id`.
                        public var id: Swift.Int?
                        /// The name of the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/node_id`.
                        public var nodeId: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/owner`.
                        public struct OwnerPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/owner/avatar_url`.
                            public var avatarUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/owner/deleted`.
                            public var deleted: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/owner/email`.
                            public var email: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/owner/events_url`.
                            public var eventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/owner/followers_url`.
                            public var followersUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/owner/following_url`.
                            public var followingUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/owner/gists_url`.
                            public var gistsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/owner/gravatar_id`.
                            public var gravatarId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/owner/html_url`.
                            public var htmlUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/owner/id`.
                            public var id: Swift.Int
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/owner/login`.
                            public var login: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/owner/name`.
                            public var name: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/owner/node_id`.
                            public var nodeId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/owner/organizations_url`.
                            public var organizationsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/owner/received_events_url`.
                            public var receivedEventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/owner/repos_url`.
                            public var reposUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/owner/site_admin`.
                            public var siteAdmin: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/owner/starred_url`.
                            public var starredUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/owner/subscriptions_url`.
                            public var subscriptionsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/owner/type`.
                            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case bot = "Bot"
                                case user = "User"
                                case organization = "Organization"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/owner/type`.
                            public var _type: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/owner/url`.
                            public var url: Swift.String?
                            /// Creates a new `OwnerPayload`.
                            ///
                            /// - Parameters:
                            ///   - avatarUrl:
                            ///   - deleted:
                            ///   - email:
                            ///   - eventsUrl:
                            ///   - followersUrl:
                            ///   - followingUrl:
                            ///   - gistsUrl:
                            ///   - gravatarId:
                            ///   - htmlUrl:
                            ///   - id:
                            ///   - login:
                            ///   - name:
                            ///   - nodeId:
                            ///   - organizationsUrl:
                            ///   - receivedEventsUrl:
                            ///   - reposUrl:
                            ///   - siteAdmin:
                            ///   - starredUrl:
                            ///   - subscriptionsUrl:
                            ///   - _type:
                            ///   - url:
                            public init(
                                avatarUrl: Swift.String? = nil,
                                deleted: Swift.Bool? = nil,
                                email: Swift.String? = nil,
                                eventsUrl: Swift.String? = nil,
                                followersUrl: Swift.String? = nil,
                                followingUrl: Swift.String? = nil,
                                gistsUrl: Swift.String? = nil,
                                gravatarId: Swift.String? = nil,
                                htmlUrl: Swift.String? = nil,
                                id: Swift.Int,
                                login: Swift.String,
                                name: Swift.String? = nil,
                                nodeId: Swift.String? = nil,
                                organizationsUrl: Swift.String? = nil,
                                receivedEventsUrl: Swift.String? = nil,
                                reposUrl: Swift.String? = nil,
                                siteAdmin: Swift.Bool? = nil,
                                starredUrl: Swift.String? = nil,
                                subscriptionsUrl: Swift.String? = nil,
                                _type: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload? = nil,
                                url: Swift.String? = nil
                            ) {
                                self.avatarUrl = avatarUrl
                                self.deleted = deleted
                                self.email = email
                                self.eventsUrl = eventsUrl
                                self.followersUrl = followersUrl
                                self.followingUrl = followingUrl
                                self.gistsUrl = gistsUrl
                                self.gravatarId = gravatarId
                                self.htmlUrl = htmlUrl
                                self.id = id
                                self.login = login
                                self.name = name
                                self.nodeId = nodeId
                                self.organizationsUrl = organizationsUrl
                                self.receivedEventsUrl = receivedEventsUrl
                                self.reposUrl = reposUrl
                                self.siteAdmin = siteAdmin
                                self.starredUrl = starredUrl
                                self.subscriptionsUrl = subscriptionsUrl
                                self._type = _type
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case avatarUrl = "avatar_url"
                                case deleted
                                case email
                                case eventsUrl = "events_url"
                                case followersUrl = "followers_url"
                                case followingUrl = "following_url"
                                case gistsUrl = "gists_url"
                                case gravatarId = "gravatar_id"
                                case htmlUrl = "html_url"
                                case id
                                case login
                                case name
                                case nodeId = "node_id"
                                case organizationsUrl = "organizations_url"
                                case receivedEventsUrl = "received_events_url"
                                case reposUrl = "repos_url"
                                case siteAdmin = "site_admin"
                                case starredUrl = "starred_url"
                                case subscriptionsUrl = "subscriptions_url"
                                case _type = "type"
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/owner`.
                        public var owner: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload?
                        /// The set of permissions for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions`.
                        public struct PermissionsPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/actions`.
                            @frozen public enum ActionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/actions`.
                            public var actions: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/administration`.
                            @frozen public enum AdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/administration`.
                            public var administration: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/checks`.
                            @frozen public enum ChecksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/checks`.
                            public var checks: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/content_references`.
                            @frozen public enum ContentReferencesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/content_references`.
                            public var contentReferences: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/contents`.
                            @frozen public enum ContentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/contents`.
                            public var contents: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/deployments`.
                            @frozen public enum DeploymentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/deployments`.
                            public var deployments: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/discussions`.
                            @frozen public enum DiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/discussions`.
                            public var discussions: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/emails`.
                            @frozen public enum EmailsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/emails`.
                            public var emails: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/environments`.
                            @frozen public enum EnvironmentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/environments`.
                            public var environments: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/issues`.
                            @frozen public enum IssuesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/issues`.
                            public var issues: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/keys`.
                            @frozen public enum KeysPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/keys`.
                            public var keys: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/members`.
                            @frozen public enum MembersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/members`.
                            public var members: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/metadata`.
                            @frozen public enum MetadataPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/metadata`.
                            public var metadata: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/organization_administration`.
                            @frozen public enum OrganizationAdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/organization_administration`.
                            public var organizationAdministration: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/organization_hooks`.
                            @frozen public enum OrganizationHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/organization_hooks`.
                            public var organizationHooks: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/organization_packages`.
                            @frozen public enum OrganizationPackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/organization_packages`.
                            public var organizationPackages: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/organization_plan`.
                            @frozen public enum OrganizationPlanPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/organization_plan`.
                            public var organizationPlan: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/organization_projects`.
                            @frozen public enum OrganizationProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/organization_projects`.
                            public var organizationProjects: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/organization_secrets`.
                            @frozen public enum OrganizationSecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/organization_secrets`.
                            public var organizationSecrets: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/organization_self_hosted_runners`.
                            @frozen public enum OrganizationSelfHostedRunnersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/organization_self_hosted_runners`.
                            public var organizationSelfHostedRunners: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/organization_user_blocking`.
                            @frozen public enum OrganizationUserBlockingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/organization_user_blocking`.
                            public var organizationUserBlocking: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/packages`.
                            @frozen public enum PackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/packages`.
                            public var packages: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/pages`.
                            @frozen public enum PagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/pages`.
                            public var pages: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/pull_requests`.
                            @frozen public enum PullRequestsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/pull_requests`.
                            public var pullRequests: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/repository_hooks`.
                            @frozen public enum RepositoryHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/repository_hooks`.
                            public var repositoryHooks: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/repository_projects`.
                            @frozen public enum RepositoryProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/repository_projects`.
                            public var repositoryProjects: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/secret_scanning_alerts`.
                            @frozen public enum SecretScanningAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/secret_scanning_alerts`.
                            public var secretScanningAlerts: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/secrets`.
                            @frozen public enum SecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/secrets`.
                            public var secrets: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/security_events`.
                            @frozen public enum SecurityEventsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/security_events`.
                            public var securityEvents: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/security_scanning_alert`.
                            @frozen public enum SecurityScanningAlertPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/security_scanning_alert`.
                            public var securityScanningAlert: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/single_file`.
                            @frozen public enum SingleFilePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/single_file`.
                            public var singleFile: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/statuses`.
                            @frozen public enum StatusesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/statuses`.
                            public var statuses: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/team_discussions`.
                            @frozen public enum TeamDiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/team_discussions`.
                            public var teamDiscussions: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/vulnerability_alerts`.
                            @frozen public enum VulnerabilityAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/vulnerability_alerts`.
                            public var vulnerabilityAlerts: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/workflows`.
                            @frozen public enum WorkflowsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case read = "read"
                                case write = "write"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions/workflows`.
                            public var workflows: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload?
                            /// Creates a new `PermissionsPayload`.
                            ///
                            /// - Parameters:
                            ///   - actions:
                            ///   - administration:
                            ///   - checks:
                            ///   - contentReferences:
                            ///   - contents:
                            ///   - deployments:
                            ///   - discussions:
                            ///   - emails:
                            ///   - environments:
                            ///   - issues:
                            ///   - keys:
                            ///   - members:
                            ///   - metadata:
                            ///   - organizationAdministration:
                            ///   - organizationHooks:
                            ///   - organizationPackages:
                            ///   - organizationPlan:
                            ///   - organizationProjects:
                            ///   - organizationSecrets:
                            ///   - organizationSelfHostedRunners:
                            ///   - organizationUserBlocking:
                            ///   - packages:
                            ///   - pages:
                            ///   - pullRequests:
                            ///   - repositoryHooks:
                            ///   - repositoryProjects:
                            ///   - secretScanningAlerts:
                            ///   - secrets:
                            ///   - securityEvents:
                            ///   - securityScanningAlert:
                            ///   - singleFile:
                            ///   - statuses:
                            ///   - teamDiscussions:
                            ///   - vulnerabilityAlerts:
                            ///   - workflows:
                            public init(
                                actions: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload? = nil,
                                administration: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload? = nil,
                                checks: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload? = nil,
                                contentReferences: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload? = nil,
                                contents: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload? = nil,
                                deployments: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload? = nil,
                                discussions: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload? = nil,
                                emails: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload? = nil,
                                environments: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload? = nil,
                                issues: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload? = nil,
                                keys: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload? = nil,
                                members: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload? = nil,
                                metadata: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload? = nil,
                                organizationAdministration: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload? = nil,
                                organizationHooks: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload? = nil,
                                organizationPackages: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload? = nil,
                                organizationPlan: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload? = nil,
                                organizationProjects: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload? = nil,
                                organizationSecrets: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload? = nil,
                                organizationSelfHostedRunners: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload? = nil,
                                organizationUserBlocking: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload? = nil,
                                packages: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload? = nil,
                                pages: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload? = nil,
                                pullRequests: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload? = nil,
                                repositoryHooks: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload? = nil,
                                repositoryProjects: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload? = nil,
                                secretScanningAlerts: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload? = nil,
                                secrets: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload? = nil,
                                securityEvents: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload? = nil,
                                securityScanningAlert: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload? = nil,
                                singleFile: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload? = nil,
                                statuses: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload? = nil,
                                teamDiscussions: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload? = nil,
                                vulnerabilityAlerts: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload? = nil,
                                workflows: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload? = nil
                            ) {
                                self.actions = actions
                                self.administration = administration
                                self.checks = checks
                                self.contentReferences = contentReferences
                                self.contents = contents
                                self.deployments = deployments
                                self.discussions = discussions
                                self.emails = emails
                                self.environments = environments
                                self.issues = issues
                                self.keys = keys
                                self.members = members
                                self.metadata = metadata
                                self.organizationAdministration = organizationAdministration
                                self.organizationHooks = organizationHooks
                                self.organizationPackages = organizationPackages
                                self.organizationPlan = organizationPlan
                                self.organizationProjects = organizationProjects
                                self.organizationSecrets = organizationSecrets
                                self.organizationSelfHostedRunners = organizationSelfHostedRunners
                                self.organizationUserBlocking = organizationUserBlocking
                                self.packages = packages
                                self.pages = pages
                                self.pullRequests = pullRequests
                                self.repositoryHooks = repositoryHooks
                                self.repositoryProjects = repositoryProjects
                                self.secretScanningAlerts = secretScanningAlerts
                                self.secrets = secrets
                                self.securityEvents = securityEvents
                                self.securityScanningAlert = securityScanningAlert
                                self.singleFile = singleFile
                                self.statuses = statuses
                                self.teamDiscussions = teamDiscussions
                                self.vulnerabilityAlerts = vulnerabilityAlerts
                                self.workflows = workflows
                            }
                            public enum CodingKeys: String, CodingKey {
                                case actions
                                case administration
                                case checks
                                case contentReferences = "content_references"
                                case contents
                                case deployments
                                case discussions
                                case emails
                                case environments
                                case issues
                                case keys
                                case members
                                case metadata
                                case organizationAdministration = "organization_administration"
                                case organizationHooks = "organization_hooks"
                                case organizationPackages = "organization_packages"
                                case organizationPlan = "organization_plan"
                                case organizationProjects = "organization_projects"
                                case organizationSecrets = "organization_secrets"
                                case organizationSelfHostedRunners = "organization_self_hosted_runners"
                                case organizationUserBlocking = "organization_user_blocking"
                                case packages
                                case pages
                                case pullRequests = "pull_requests"
                                case repositoryHooks = "repository_hooks"
                                case repositoryProjects = "repository_projects"
                                case secretScanningAlerts = "secret_scanning_alerts"
                                case secrets
                                case securityEvents = "security_events"
                                case securityScanningAlert = "security_scanning_alert"
                                case singleFile = "single_file"
                                case statuses
                                case teamDiscussions = "team_discussions"
                                case vulnerabilityAlerts = "vulnerability_alerts"
                                case workflows
                            }
                        }
                        /// The set of permissions for the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/permissions`.
                        public var permissions: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload?
                        /// The slug name of the GitHub app
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/slug`.
                        public var slug: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app/updated_at`.
                        public var updatedAt: Foundation.Date?
                        /// Creates a new `PerformedViaGithubAppPayload`.
                        ///
                        /// - Parameters:
                        ///   - createdAt:
                        ///   - description:
                        ///   - events: The list of events for the GitHub app
                        ///   - externalUrl:
                        ///   - htmlUrl:
                        ///   - id: Unique identifier of the GitHub app
                        ///   - name: The name of the GitHub app
                        ///   - nodeId:
                        ///   - owner:
                        ///   - permissions: The set of permissions for the GitHub app
                        ///   - slug: The slug name of the GitHub app
                        ///   - updatedAt:
                        public init(
                            createdAt: Foundation.Date? = nil,
                            description: Swift.String? = nil,
                            events: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.EventsPayload? = nil,
                            externalUrl: Swift.String? = nil,
                            htmlUrl: Swift.String,
                            id: Swift.Int? = nil,
                            name: Swift.String,
                            nodeId: Swift.String,
                            owner: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.OwnerPayload? = nil,
                            permissions: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload.PermissionsPayload? = nil,
                            slug: Swift.String? = nil,
                            updatedAt: Foundation.Date? = nil
                        ) {
                            self.createdAt = createdAt
                            self.description = description
                            self.events = events
                            self.externalUrl = externalUrl
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.name = name
                            self.nodeId = nodeId
                            self.owner = owner
                            self.permissions = permissions
                            self.slug = slug
                            self.updatedAt = updatedAt
                        }
                        public enum CodingKeys: String, CodingKey {
                            case createdAt = "created_at"
                            case description
                            case events
                            case externalUrl = "external_url"
                            case htmlUrl = "html_url"
                            case id
                            case name
                            case nodeId = "node_id"
                            case owner
                            case permissions
                            case slug
                            case updatedAt = "updated_at"
                        }
                    }
                    /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/performed_via_github_app`.
                    public var performedViaGithubApp: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/pull_request`.
                    public struct PullRequestPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/pull_request/diff_url`.
                        public var diffUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/pull_request/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/pull_request/merged_at`.
                        public var mergedAt: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/pull_request/patch_url`.
                        public var patchUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/pull_request/url`.
                        public var url: Swift.String?
                        /// Creates a new `PullRequestPayload`.
                        ///
                        /// - Parameters:
                        ///   - diffUrl:
                        ///   - htmlUrl:
                        ///   - mergedAt:
                        ///   - patchUrl:
                        ///   - url:
                        public init(
                            diffUrl: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            mergedAt: Foundation.Date? = nil,
                            patchUrl: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.diffUrl = diffUrl
                            self.htmlUrl = htmlUrl
                            self.mergedAt = mergedAt
                            self.patchUrl = patchUrl
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case diffUrl = "diff_url"
                            case htmlUrl = "html_url"
                            case mergedAt = "merged_at"
                            case patchUrl = "patch_url"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/pull_request`.
                    public var pullRequest: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PullRequestPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/reactions`.
                    public struct ReactionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/reactions/+1`.
                        public var _plus_1: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/reactions/-1`.
                        public var _hyphen_1: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/reactions/confused`.
                        public var confused: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/reactions/eyes`.
                        public var eyes: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/reactions/heart`.
                        public var heart: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/reactions/hooray`.
                        public var hooray: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/reactions/laugh`.
                        public var laugh: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/reactions/rocket`.
                        public var rocket: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/reactions/total_count`.
                        public var totalCount: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/reactions/url`.
                        public var url: Swift.String
                        /// Creates a new `ReactionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - _plus_1:
                        ///   - _hyphen_1:
                        ///   - confused:
                        ///   - eyes:
                        ///   - heart:
                        ///   - hooray:
                        ///   - laugh:
                        ///   - rocket:
                        ///   - totalCount:
                        ///   - url:
                        public init(
                            _plus_1: Swift.Int,
                            _hyphen_1: Swift.Int,
                            confused: Swift.Int,
                            eyes: Swift.Int,
                            heart: Swift.Int,
                            hooray: Swift.Int,
                            laugh: Swift.Int,
                            rocket: Swift.Int,
                            totalCount: Swift.Int,
                            url: Swift.String
                        ) {
                            self._plus_1 = _plus_1
                            self._hyphen_1 = _hyphen_1
                            self.confused = confused
                            self.eyes = eyes
                            self.heart = heart
                            self.hooray = hooray
                            self.laugh = laugh
                            self.rocket = rocket
                            self.totalCount = totalCount
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _plus_1 = "+1"
                            case _hyphen_1 = "-1"
                            case confused
                            case eyes
                            case heart
                            case hooray
                            case laugh
                            case rocket
                            case totalCount = "total_count"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/reactions`.
                    public var reactions: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.ReactionsPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/repository_url`.
                    public var repositoryUrl: Swift.String
                    /// State of the issue; either 'open' or 'closed'
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/state`.
                    @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case closed = "closed"
                    }
                    /// State of the issue; either 'open' or 'closed'
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/state`.
                    public var state: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.StatePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/state_reason`.
                    public var stateReason: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/timeline_url`.
                    public var timelineUrl: Swift.String?
                    /// Title of the issue
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/title`.
                    public var title: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/updated_at`.
                    public var updatedAt: Foundation.Date
                    /// URL for the issue
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/url`.
                    public var url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/user`.
                    public struct UserPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/user/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/user/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/user/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/user/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/user/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/user/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/user/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/user/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/user/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/user/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/user/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/user/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/user/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/user/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/user/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/user/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/user/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/user/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/user/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/user/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/user/type`.
                        public var _type: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.UserPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/user/url`.
                        public var url: Swift.String?
                        /// Creates a new `UserPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.UserPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1/user`.
                    public var user: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.UserPayload?
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - activeLockReason:
                    ///   - assignee:
                    ///   - assignees:
                    ///   - authorAssociation: How the author is associated with the repository.
                    ///   - body: Contents of the issue
                    ///   - closedAt:
                    ///   - comments:
                    ///   - commentsUrl:
                    ///   - createdAt:
                    ///   - draft:
                    ///   - eventsUrl:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - labels:
                    ///   - labelsUrl:
                    ///   - locked:
                    ///   - milestone: A collection of related issues and pull requests.
                    ///   - nodeId:
                    ///   - number:
                    ///   - performedViaGithubApp: GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                    ///   - pullRequest:
                    ///   - reactions:
                    ///   - repositoryUrl:
                    ///   - state: State of the issue; either 'open' or 'closed'
                    ///   - stateReason:
                    ///   - timelineUrl:
                    ///   - title: Title of the issue
                    ///   - updatedAt:
                    ///   - url: URL for the issue
                    ///   - user:
                    public init(
                        activeLockReason: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.ActiveLockReasonPayload? = nil,
                        assignee: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.AssigneePayload? = nil,
                        assignees: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.AssigneesPayload,
                        authorAssociation: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.AuthorAssociationPayload,
                        body: Swift.String? = nil,
                        closedAt: Foundation.Date? = nil,
                        comments: Swift.Int,
                        commentsUrl: Swift.String,
                        createdAt: Foundation.Date,
                        draft: Swift.Bool? = nil,
                        eventsUrl: Swift.String,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        labels: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.LabelsPayload? = nil,
                        labelsUrl: Swift.String,
                        locked: Swift.Bool? = nil,
                        milestone: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.MilestonePayload? = nil,
                        nodeId: Swift.String,
                        number: Swift.Int,
                        performedViaGithubApp: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PerformedViaGithubAppPayload? = nil,
                        pullRequest: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.PullRequestPayload? = nil,
                        reactions: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.ReactionsPayload,
                        repositoryUrl: Swift.String,
                        state: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.StatePayload? = nil,
                        stateReason: Swift.String? = nil,
                        timelineUrl: Swift.String? = nil,
                        title: Swift.String,
                        updatedAt: Foundation.Date,
                        url: Swift.String,
                        user: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload.UserPayload? = nil
                    ) {
                        self.activeLockReason = activeLockReason
                        self.assignee = assignee
                        self.assignees = assignees
                        self.authorAssociation = authorAssociation
                        self.body = body
                        self.closedAt = closedAt
                        self.comments = comments
                        self.commentsUrl = commentsUrl
                        self.createdAt = createdAt
                        self.draft = draft
                        self.eventsUrl = eventsUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.labels = labels
                        self.labelsUrl = labelsUrl
                        self.locked = locked
                        self.milestone = milestone
                        self.nodeId = nodeId
                        self.number = number
                        self.performedViaGithubApp = performedViaGithubApp
                        self.pullRequest = pullRequest
                        self.reactions = reactions
                        self.repositoryUrl = repositoryUrl
                        self.state = state
                        self.stateReason = stateReason
                        self.timelineUrl = timelineUrl
                        self.title = title
                        self.updatedAt = updatedAt
                        self.url = url
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case activeLockReason = "active_lock_reason"
                        case assignee
                        case assignees
                        case authorAssociation = "author_association"
                        case body
                        case closedAt = "closed_at"
                        case comments
                        case commentsUrl = "comments_url"
                        case createdAt = "created_at"
                        case draft
                        case eventsUrl = "events_url"
                        case htmlUrl = "html_url"
                        case id
                        case labels
                        case labelsUrl = "labels_url"
                        case locked
                        case milestone
                        case nodeId = "node_id"
                        case number
                        case performedViaGithubApp = "performed_via_github_app"
                        case pullRequest = "pull_request"
                        case reactions
                        case repositoryUrl = "repository_url"
                        case state
                        case stateReason = "state_reason"
                        case timelineUrl = "timeline_url"
                        case title
                        case updatedAt = "updated_at"
                        case url
                        case user
                    }
                }
                /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value1`.
                public var value1: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/active_lock_reason`.
                    public var activeLockReason: OpenAPIRuntime.OpenAPIValueContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/assignee`.
                    public var assignee: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/assignees`.
                    public var assignees: [OpenAPIRuntime.OpenAPIObjectContainer?]?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/author_association`.
                    public var authorAssociation: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/body`.
                    public var body: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/closed_at`.
                    public var closedAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/comments`.
                    public var comments: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/comments_url`.
                    public var commentsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/created_at`.
                    public var createdAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/id`.
                    public var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/labels`.
                    public var labels: [OpenAPIRuntime.OpenAPIObjectContainer?]?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/labels_url`.
                    public var labelsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/locked`.
                    public var locked: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/milestone`.
                    public var milestone: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/number`.
                    public var number: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/performed_via_github_app`.
                    public var performedViaGithubApp: OpenAPIRuntime.OpenAPIValueContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/reactions`.
                    public struct ReactionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/reactions/+1`.
                        public var _plus_1: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/reactions/-1`.
                        public var _hyphen_1: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/reactions/confused`.
                        public var confused: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/reactions/eyes`.
                        public var eyes: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/reactions/heart`.
                        public var heart: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/reactions/hooray`.
                        public var hooray: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/reactions/laugh`.
                        public var laugh: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/reactions/rocket`.
                        public var rocket: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/reactions/total_count`.
                        public var totalCount: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/reactions/url`.
                        public var url: Swift.String?
                        /// Creates a new `ReactionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - _plus_1:
                        ///   - _hyphen_1:
                        ///   - confused:
                        ///   - eyes:
                        ///   - heart:
                        ///   - hooray:
                        ///   - laugh:
                        ///   - rocket:
                        ///   - totalCount:
                        ///   - url:
                        public init(
                            _plus_1: Swift.Int? = nil,
                            _hyphen_1: Swift.Int? = nil,
                            confused: Swift.Int? = nil,
                            eyes: Swift.Int? = nil,
                            heart: Swift.Int? = nil,
                            hooray: Swift.Int? = nil,
                            laugh: Swift.Int? = nil,
                            rocket: Swift.Int? = nil,
                            totalCount: Swift.Int? = nil,
                            url: Swift.String? = nil
                        ) {
                            self._plus_1 = _plus_1
                            self._hyphen_1 = _hyphen_1
                            self.confused = confused
                            self.eyes = eyes
                            self.heart = heart
                            self.hooray = hooray
                            self.laugh = laugh
                            self.rocket = rocket
                            self.totalCount = totalCount
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _plus_1 = "+1"
                            case _hyphen_1 = "-1"
                            case confused
                            case eyes
                            case heart
                            case hooray
                            case laugh
                            case rocket
                            case totalCount = "total_count"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/reactions`.
                    public var reactions: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value2Payload.ReactionsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/repository_url`.
                    public var repositoryUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/state`.
                    public var state: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/timeline_url`.
                    public var timelineUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/title`.
                    public var title: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/updated_at`.
                    public var updatedAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/url`.
                    public var url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/user`.
                    public struct UserPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/user/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/user/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/user/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/user/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/user/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/user/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/user/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/user/id`.
                        public var id: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/user/login`.
                        public var login: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/user/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/user/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/user/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/user/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/user/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/user/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/user/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/user/type`.
                        public var _type: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/user/url`.
                        public var url: Swift.String?
                        /// Creates a new `UserPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int? = nil,
                            login: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2/user`.
                    public var user: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value2Payload.UserPayload?
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - activeLockReason:
                    ///   - assignee:
                    ///   - assignees:
                    ///   - authorAssociation:
                    ///   - body:
                    ///   - closedAt:
                    ///   - comments:
                    ///   - commentsUrl:
                    ///   - createdAt:
                    ///   - eventsUrl:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - labels:
                    ///   - labelsUrl:
                    ///   - locked:
                    ///   - milestone:
                    ///   - nodeId:
                    ///   - number:
                    ///   - performedViaGithubApp:
                    ///   - reactions:
                    ///   - repositoryUrl:
                    ///   - state:
                    ///   - timelineUrl:
                    ///   - title:
                    ///   - updatedAt:
                    ///   - url:
                    ///   - user:
                    public init(
                        activeLockReason: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                        assignee: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                        assignees: [OpenAPIRuntime.OpenAPIObjectContainer?]? = nil,
                        authorAssociation: Swift.String? = nil,
                        body: Swift.String? = nil,
                        closedAt: Swift.String? = nil,
                        comments: Swift.Int? = nil,
                        commentsUrl: Swift.String? = nil,
                        createdAt: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int? = nil,
                        labels: [OpenAPIRuntime.OpenAPIObjectContainer?]? = nil,
                        labelsUrl: Swift.String? = nil,
                        locked: Swift.Bool,
                        milestone: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                        nodeId: Swift.String? = nil,
                        number: Swift.Int? = nil,
                        performedViaGithubApp: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                        reactions: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value2Payload.ReactionsPayload? = nil,
                        repositoryUrl: Swift.String? = nil,
                        state: Swift.String? = nil,
                        timelineUrl: Swift.String? = nil,
                        title: Swift.String? = nil,
                        updatedAt: Swift.String? = nil,
                        url: Swift.String? = nil,
                        user: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value2Payload.UserPayload? = nil
                    ) {
                        self.activeLockReason = activeLockReason
                        self.assignee = assignee
                        self.assignees = assignees
                        self.authorAssociation = authorAssociation
                        self.body = body
                        self.closedAt = closedAt
                        self.comments = comments
                        self.commentsUrl = commentsUrl
                        self.createdAt = createdAt
                        self.eventsUrl = eventsUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.labels = labels
                        self.labelsUrl = labelsUrl
                        self.locked = locked
                        self.milestone = milestone
                        self.nodeId = nodeId
                        self.number = number
                        self.performedViaGithubApp = performedViaGithubApp
                        self.reactions = reactions
                        self.repositoryUrl = repositoryUrl
                        self.state = state
                        self.timelineUrl = timelineUrl
                        self.title = title
                        self.updatedAt = updatedAt
                        self.url = url
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case activeLockReason = "active_lock_reason"
                        case assignee
                        case assignees
                        case authorAssociation = "author_association"
                        case body
                        case closedAt = "closed_at"
                        case comments
                        case commentsUrl = "comments_url"
                        case createdAt = "created_at"
                        case eventsUrl = "events_url"
                        case htmlUrl = "html_url"
                        case id
                        case labels
                        case labelsUrl = "labels_url"
                        case locked
                        case milestone
                        case nodeId = "node_id"
                        case number
                        case performedViaGithubApp = "performed_via_github_app"
                        case reactions
                        case repositoryUrl = "repository_url"
                        case state
                        case timelineUrl = "timeline_url"
                        case title
                        case updatedAt = "updated_at"
                        case url
                        case user
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue/value2`.
                public var value2: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value2Payload
                /// Creates a new `IssuePayload`.
                ///
                /// - Parameters:
                ///   - value1: The [issue](https://docs.github.com/en/rest/reference/issues) itself.
                ///   - value2:
                public init(
                    value1: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value1Payload,
                    value2: Components.Schemas.WebhookIssuesUnlocked.IssuePayload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/issue`.
            public var issue: Components.Schemas.WebhookIssuesUnlocked.IssuePayload
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unlocked/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Creates a new `WebhookIssuesUnlocked`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - enterprise:
            ///   - installation:
            ///   - issue:
            ///   - organization:
            ///   - repository:
            ///   - sender:
            public init(
                action: Components.Schemas.WebhookIssuesUnlocked.ActionPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                issue: Components.Schemas.WebhookIssuesUnlocked.IssuePayload,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser
            ) {
                self.action = action
                self.enterprise = enterprise
                self.installation = installation
                self.issue = issue
                self.organization = organization
                self.repository = repository
                self.sender = sender
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case enterprise
                case installation
                case issue
                case organization
                case repository
                case sender
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned`.
        public struct WebhookIssuesUnpinned: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case unpinned = "unpinned"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/action`.
            public var action: Components.Schemas.WebhookIssuesUnpinned.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue`.
            public struct IssuePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/active_lock_reason`.
                @frozen public enum ActiveLockReasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case resolved = "resolved"
                    case offTopic = "off-topic"
                    case tooHeated = "too heated"
                    case spam = "spam"
                    case _empty_ = ""
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/active_lock_reason`.
                public var activeLockReason: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.ActiveLockReasonPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/assignee`.
                public struct AssigneePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/assignee/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/assignee/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/assignee/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/assignee/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/assignee/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/assignee/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/assignee/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/assignee/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/assignee/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/assignee/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/assignee/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/assignee/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/assignee/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/assignee/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/assignee/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/assignee/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/assignee/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/assignee/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/assignee/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/assignee/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/assignee/type`.
                    public var _type: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.AssigneePayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/assignee/url`.
                    public var url: Swift.String?
                    /// Creates a new `AssigneePayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.AssigneePayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/assignee`.
                public var assignee: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.AssigneePayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/AssigneesPayload`.
                public struct AssigneesPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/AssigneesPayload/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/AssigneesPayload/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/AssigneesPayload/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/AssigneesPayload/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/AssigneesPayload/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/AssigneesPayload/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/AssigneesPayload/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/AssigneesPayload/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/AssigneesPayload/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/AssigneesPayload/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/AssigneesPayload/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/AssigneesPayload/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/AssigneesPayload/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/AssigneesPayload/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/AssigneesPayload/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/AssigneesPayload/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/AssigneesPayload/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/AssigneesPayload/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/AssigneesPayload/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/AssigneesPayload/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/AssigneesPayload/type`.
                    public var _type: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.AssigneesPayloadPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/AssigneesPayload/url`.
                    public var url: Swift.String?
                    /// Creates a new `AssigneesPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.AssigneesPayloadPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/assignees`.
                public typealias AssigneesPayload = [Components.Schemas.WebhookIssuesUnpinned.IssuePayload.AssigneesPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/assignees`.
                public var assignees: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.AssigneesPayload
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/author_association`.
                @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case collaborator = "COLLABORATOR"
                    case contributor = "CONTRIBUTOR"
                    case firstTimer = "FIRST_TIMER"
                    case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                    case mannequin = "MANNEQUIN"
                    case member = "MEMBER"
                    case none = "NONE"
                    case owner = "OWNER"
                }
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/author_association`.
                public var authorAssociation: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.AuthorAssociationPayload
                /// Contents of the issue
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/body`.
                public var body: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/closed_at`.
                public var closedAt: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/comments`.
                public var comments: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/comments_url`.
                public var commentsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/created_at`.
                public var createdAt: Foundation.Date
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/draft`.
                public var draft: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/events_url`.
                public var eventsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/html_url`.
                public var htmlUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/LabelsPayload`.
                public struct LabelsPayloadPayload: Codable, Hashable, Sendable {
                    /// 6-character hex code, without the leading #, identifying the color
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/LabelsPayload/color`.
                    public var color: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/LabelsPayload/default`.
                    public var _default: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/LabelsPayload/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/LabelsPayload/id`.
                    public var id: Swift.Int
                    /// The name of the label.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/LabelsPayload/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/LabelsPayload/node_id`.
                    public var nodeId: Swift.String
                    /// URL for the label
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/LabelsPayload/url`.
                    public var url: Swift.String
                    /// Creates a new `LabelsPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - color: 6-character hex code, without the leading #, identifying the color
                    ///   - _default:
                    ///   - description:
                    ///   - id:
                    ///   - name: The name of the label.
                    ///   - nodeId:
                    ///   - url: URL for the label
                    public init(
                        color: Swift.String,
                        _default: Swift.Bool,
                        description: Swift.String? = nil,
                        id: Swift.Int,
                        name: Swift.String,
                        nodeId: Swift.String,
                        url: Swift.String
                    ) {
                        self.color = color
                        self._default = _default
                        self.description = description
                        self.id = id
                        self.name = name
                        self.nodeId = nodeId
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case color
                        case _default = "default"
                        case description
                        case id
                        case name
                        case nodeId = "node_id"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/labels`.
                public typealias LabelsPayload = [Components.Schemas.WebhookIssuesUnpinned.IssuePayload.LabelsPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/labels`.
                public var labels: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.LabelsPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/labels_url`.
                public var labelsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/locked`.
                public var locked: Swift.Bool?
                /// A collection of related issues and pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone`.
                public struct MilestonePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/closed_at`.
                    public var closedAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/closed_issues`.
                    public var closedIssues: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/created_at`.
                    public var createdAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/creator`.
                    public struct CreatorPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/creator/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/creator/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/creator/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/creator/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/creator/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/creator/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/creator/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/creator/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/creator/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/creator/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/creator/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/creator/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/creator/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/creator/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/creator/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/creator/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/creator/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/creator/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/creator/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/creator/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/creator/type`.
                        public var _type: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.MilestonePayload.CreatorPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/creator/url`.
                        public var url: Swift.String?
                        /// Creates a new `CreatorPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.MilestonePayload.CreatorPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/creator`.
                    public var creator: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.MilestonePayload.CreatorPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/due_on`.
                    public var dueOn: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/html_url`.
                    public var htmlUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/labels_url`.
                    public var labelsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/node_id`.
                    public var nodeId: Swift.String
                    /// The number of the milestone.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/number`.
                    public var number: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/open_issues`.
                    public var openIssues: Swift.Int
                    /// The state of the milestone.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/state`.
                    @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case closed = "closed"
                    }
                    /// The state of the milestone.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/state`.
                    public var state: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.MilestonePayload.StatePayload
                    /// The title of the milestone.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/title`.
                    public var title: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/updated_at`.
                    public var updatedAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone/url`.
                    public var url: Swift.String
                    /// Creates a new `MilestonePayload`.
                    ///
                    /// - Parameters:
                    ///   - closedAt:
                    ///   - closedIssues:
                    ///   - createdAt:
                    ///   - creator:
                    ///   - description:
                    ///   - dueOn:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - labelsUrl:
                    ///   - nodeId:
                    ///   - number: The number of the milestone.
                    ///   - openIssues:
                    ///   - state: The state of the milestone.
                    ///   - title: The title of the milestone.
                    ///   - updatedAt:
                    ///   - url:
                    public init(
                        closedAt: Foundation.Date? = nil,
                        closedIssues: Swift.Int,
                        createdAt: Foundation.Date,
                        creator: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.MilestonePayload.CreatorPayload? = nil,
                        description: Swift.String? = nil,
                        dueOn: Foundation.Date? = nil,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        labelsUrl: Swift.String,
                        nodeId: Swift.String,
                        number: Swift.Int,
                        openIssues: Swift.Int,
                        state: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.MilestonePayload.StatePayload,
                        title: Swift.String,
                        updatedAt: Foundation.Date,
                        url: Swift.String
                    ) {
                        self.closedAt = closedAt
                        self.closedIssues = closedIssues
                        self.createdAt = createdAt
                        self.creator = creator
                        self.description = description
                        self.dueOn = dueOn
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.labelsUrl = labelsUrl
                        self.nodeId = nodeId
                        self.number = number
                        self.openIssues = openIssues
                        self.state = state
                        self.title = title
                        self.updatedAt = updatedAt
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case closedAt = "closed_at"
                        case closedIssues = "closed_issues"
                        case createdAt = "created_at"
                        case creator
                        case description
                        case dueOn = "due_on"
                        case htmlUrl = "html_url"
                        case id
                        case labelsUrl = "labels_url"
                        case nodeId = "node_id"
                        case number
                        case openIssues = "open_issues"
                        case state
                        case title
                        case updatedAt = "updated_at"
                        case url
                    }
                }
                /// A collection of related issues and pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/milestone`.
                public var milestone: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.MilestonePayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/number`.
                public var number: Swift.Int
                /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app`.
                public struct PerformedViaGithubAppPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/created_at`.
                    public var createdAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/EventsPayload`.
                    @frozen public enum EventsPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case branchProtectionRule = "branch_protection_rule"
                        case checkRun = "check_run"
                        case checkSuite = "check_suite"
                        case codeScanningAlert = "code_scanning_alert"
                        case commitComment = "commit_comment"
                        case contentReference = "content_reference"
                        case create = "create"
                        case delete = "delete"
                        case deployment = "deployment"
                        case deploymentReview = "deployment_review"
                        case deploymentStatus = "deployment_status"
                        case deployKey = "deploy_key"
                        case discussion = "discussion"
                        case discussionComment = "discussion_comment"
                        case fork = "fork"
                        case gollum = "gollum"
                        case issues = "issues"
                        case issueComment = "issue_comment"
                        case label = "label"
                        case member = "member"
                        case membership = "membership"
                        case milestone = "milestone"
                        case organization = "organization"
                        case orgBlock = "org_block"
                        case pageBuild = "page_build"
                        case project = "project"
                        case projectCard = "project_card"
                        case projectColumn = "project_column"
                        case _public = "public"
                        case pullRequest = "pull_request"
                        case pullRequestReview = "pull_request_review"
                        case pullRequestReviewComment = "pull_request_review_comment"
                        case push = "push"
                        case registryPackage = "registry_package"
                        case release = "release"
                        case repository = "repository"
                        case repositoryDispatch = "repository_dispatch"
                        case secretScanningAlert = "secret_scanning_alert"
                        case star = "star"
                        case status = "status"
                        case team = "team"
                        case teamAdd = "team_add"
                        case watch = "watch"
                        case workflowDispatch = "workflow_dispatch"
                        case workflowRun = "workflow_run"
                    }
                    /// The list of events for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/events`.
                    public typealias EventsPayload = [Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.EventsPayloadPayload]
                    /// The list of events for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/events`.
                    public var events: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.EventsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/external_url`.
                    public var externalUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/html_url`.
                    public var htmlUrl: Swift.String
                    /// Unique identifier of the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/id`.
                    public var id: Swift.Int?
                    /// The name of the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/owner`.
                    public struct OwnerPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/owner/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/owner/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/owner/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/owner/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/owner/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/owner/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/owner/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/owner/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/owner/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/owner/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/owner/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/owner/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/owner/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/owner/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/owner/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/owner/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/owner/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/owner/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/owner/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/owner/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/owner/type`.
                        public var _type: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/owner/url`.
                        public var url: Swift.String?
                        /// Creates a new `OwnerPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/owner`.
                    public var owner: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.OwnerPayload?
                    /// The set of permissions for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions`.
                    public struct PermissionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/actions`.
                        @frozen public enum ActionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/actions`.
                        public var actions: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/administration`.
                        @frozen public enum AdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/administration`.
                        public var administration: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/checks`.
                        @frozen public enum ChecksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/checks`.
                        public var checks: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/content_references`.
                        @frozen public enum ContentReferencesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/content_references`.
                        public var contentReferences: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/contents`.
                        @frozen public enum ContentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/contents`.
                        public var contents: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/deployments`.
                        @frozen public enum DeploymentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/deployments`.
                        public var deployments: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/discussions`.
                        @frozen public enum DiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/discussions`.
                        public var discussions: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/emails`.
                        @frozen public enum EmailsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/emails`.
                        public var emails: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/environments`.
                        @frozen public enum EnvironmentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/environments`.
                        public var environments: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/issues`.
                        @frozen public enum IssuesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/issues`.
                        public var issues: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/keys`.
                        @frozen public enum KeysPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/keys`.
                        public var keys: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/members`.
                        @frozen public enum MembersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/members`.
                        public var members: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/metadata`.
                        @frozen public enum MetadataPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/metadata`.
                        public var metadata: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/organization_administration`.
                        @frozen public enum OrganizationAdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/organization_administration`.
                        public var organizationAdministration: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/organization_hooks`.
                        @frozen public enum OrganizationHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/organization_hooks`.
                        public var organizationHooks: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/organization_packages`.
                        @frozen public enum OrganizationPackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/organization_packages`.
                        public var organizationPackages: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/organization_plan`.
                        @frozen public enum OrganizationPlanPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/organization_plan`.
                        public var organizationPlan: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/organization_projects`.
                        @frozen public enum OrganizationProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/organization_projects`.
                        public var organizationProjects: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/organization_secrets`.
                        @frozen public enum OrganizationSecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/organization_secrets`.
                        public var organizationSecrets: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/organization_self_hosted_runners`.
                        @frozen public enum OrganizationSelfHostedRunnersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/organization_self_hosted_runners`.
                        public var organizationSelfHostedRunners: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/organization_user_blocking`.
                        @frozen public enum OrganizationUserBlockingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/organization_user_blocking`.
                        public var organizationUserBlocking: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/packages`.
                        @frozen public enum PackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/packages`.
                        public var packages: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/pages`.
                        @frozen public enum PagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/pages`.
                        public var pages: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/pull_requests`.
                        @frozen public enum PullRequestsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/pull_requests`.
                        public var pullRequests: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/repository_hooks`.
                        @frozen public enum RepositoryHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/repository_hooks`.
                        public var repositoryHooks: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/repository_projects`.
                        @frozen public enum RepositoryProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/repository_projects`.
                        public var repositoryProjects: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/secret_scanning_alerts`.
                        @frozen public enum SecretScanningAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/secret_scanning_alerts`.
                        public var secretScanningAlerts: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/secrets`.
                        @frozen public enum SecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/secrets`.
                        public var secrets: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/security_events`.
                        @frozen public enum SecurityEventsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/security_events`.
                        public var securityEvents: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/security_scanning_alert`.
                        @frozen public enum SecurityScanningAlertPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/security_scanning_alert`.
                        public var securityScanningAlert: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/single_file`.
                        @frozen public enum SingleFilePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/single_file`.
                        public var singleFile: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/statuses`.
                        @frozen public enum StatusesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/statuses`.
                        public var statuses: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/team_discussions`.
                        @frozen public enum TeamDiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/team_discussions`.
                        public var teamDiscussions: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/vulnerability_alerts`.
                        @frozen public enum VulnerabilityAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/vulnerability_alerts`.
                        public var vulnerabilityAlerts: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/workflows`.
                        @frozen public enum WorkflowsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions/workflows`.
                        public var workflows: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload?
                        /// Creates a new `PermissionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - actions:
                        ///   - administration:
                        ///   - checks:
                        ///   - contentReferences:
                        ///   - contents:
                        ///   - deployments:
                        ///   - discussions:
                        ///   - emails:
                        ///   - environments:
                        ///   - issues:
                        ///   - keys:
                        ///   - members:
                        ///   - metadata:
                        ///   - organizationAdministration:
                        ///   - organizationHooks:
                        ///   - organizationPackages:
                        ///   - organizationPlan:
                        ///   - organizationProjects:
                        ///   - organizationSecrets:
                        ///   - organizationSelfHostedRunners:
                        ///   - organizationUserBlocking:
                        ///   - packages:
                        ///   - pages:
                        ///   - pullRequests:
                        ///   - repositoryHooks:
                        ///   - repositoryProjects:
                        ///   - secretScanningAlerts:
                        ///   - secrets:
                        ///   - securityEvents:
                        ///   - securityScanningAlert:
                        ///   - singleFile:
                        ///   - statuses:
                        ///   - teamDiscussions:
                        ///   - vulnerabilityAlerts:
                        ///   - workflows:
                        public init(
                            actions: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload? = nil,
                            administration: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload? = nil,
                            checks: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload? = nil,
                            contentReferences: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload? = nil,
                            contents: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload? = nil,
                            deployments: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload? = nil,
                            discussions: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload? = nil,
                            emails: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload? = nil,
                            environments: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload? = nil,
                            issues: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload? = nil,
                            keys: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload? = nil,
                            members: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload? = nil,
                            metadata: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload? = nil,
                            organizationAdministration: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload? = nil,
                            organizationHooks: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload? = nil,
                            organizationPackages: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload? = nil,
                            organizationPlan: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload? = nil,
                            organizationProjects: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload? = nil,
                            organizationSecrets: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload? = nil,
                            organizationSelfHostedRunners: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload? = nil,
                            organizationUserBlocking: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload? = nil,
                            packages: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload? = nil,
                            pages: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload? = nil,
                            pullRequests: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload? = nil,
                            repositoryHooks: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload? = nil,
                            repositoryProjects: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload? = nil,
                            secretScanningAlerts: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload? = nil,
                            secrets: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload? = nil,
                            securityEvents: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload? = nil,
                            securityScanningAlert: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload? = nil,
                            singleFile: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload? = nil,
                            statuses: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload? = nil,
                            teamDiscussions: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload? = nil,
                            vulnerabilityAlerts: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload? = nil,
                            workflows: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload? = nil
                        ) {
                            self.actions = actions
                            self.administration = administration
                            self.checks = checks
                            self.contentReferences = contentReferences
                            self.contents = contents
                            self.deployments = deployments
                            self.discussions = discussions
                            self.emails = emails
                            self.environments = environments
                            self.issues = issues
                            self.keys = keys
                            self.members = members
                            self.metadata = metadata
                            self.organizationAdministration = organizationAdministration
                            self.organizationHooks = organizationHooks
                            self.organizationPackages = organizationPackages
                            self.organizationPlan = organizationPlan
                            self.organizationProjects = organizationProjects
                            self.organizationSecrets = organizationSecrets
                            self.organizationSelfHostedRunners = organizationSelfHostedRunners
                            self.organizationUserBlocking = organizationUserBlocking
                            self.packages = packages
                            self.pages = pages
                            self.pullRequests = pullRequests
                            self.repositoryHooks = repositoryHooks
                            self.repositoryProjects = repositoryProjects
                            self.secretScanningAlerts = secretScanningAlerts
                            self.secrets = secrets
                            self.securityEvents = securityEvents
                            self.securityScanningAlert = securityScanningAlert
                            self.singleFile = singleFile
                            self.statuses = statuses
                            self.teamDiscussions = teamDiscussions
                            self.vulnerabilityAlerts = vulnerabilityAlerts
                            self.workflows = workflows
                        }
                        public enum CodingKeys: String, CodingKey {
                            case actions
                            case administration
                            case checks
                            case contentReferences = "content_references"
                            case contents
                            case deployments
                            case discussions
                            case emails
                            case environments
                            case issues
                            case keys
                            case members
                            case metadata
                            case organizationAdministration = "organization_administration"
                            case organizationHooks = "organization_hooks"
                            case organizationPackages = "organization_packages"
                            case organizationPlan = "organization_plan"
                            case organizationProjects = "organization_projects"
                            case organizationSecrets = "organization_secrets"
                            case organizationSelfHostedRunners = "organization_self_hosted_runners"
                            case organizationUserBlocking = "organization_user_blocking"
                            case packages
                            case pages
                            case pullRequests = "pull_requests"
                            case repositoryHooks = "repository_hooks"
                            case repositoryProjects = "repository_projects"
                            case secretScanningAlerts = "secret_scanning_alerts"
                            case secrets
                            case securityEvents = "security_events"
                            case securityScanningAlert = "security_scanning_alert"
                            case singleFile = "single_file"
                            case statuses
                            case teamDiscussions = "team_discussions"
                            case vulnerabilityAlerts = "vulnerability_alerts"
                            case workflows
                        }
                    }
                    /// The set of permissions for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/permissions`.
                    public var permissions: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload?
                    /// The slug name of the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/slug`.
                    public var slug: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app/updated_at`.
                    public var updatedAt: Foundation.Date?
                    /// Creates a new `PerformedViaGithubAppPayload`.
                    ///
                    /// - Parameters:
                    ///   - createdAt:
                    ///   - description:
                    ///   - events: The list of events for the GitHub app
                    ///   - externalUrl:
                    ///   - htmlUrl:
                    ///   - id: Unique identifier of the GitHub app
                    ///   - name: The name of the GitHub app
                    ///   - nodeId:
                    ///   - owner:
                    ///   - permissions: The set of permissions for the GitHub app
                    ///   - slug: The slug name of the GitHub app
                    ///   - updatedAt:
                    public init(
                        createdAt: Foundation.Date? = nil,
                        description: Swift.String? = nil,
                        events: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.EventsPayload? = nil,
                        externalUrl: Swift.String? = nil,
                        htmlUrl: Swift.String,
                        id: Swift.Int? = nil,
                        name: Swift.String,
                        nodeId: Swift.String,
                        owner: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.OwnerPayload? = nil,
                        permissions: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload.PermissionsPayload? = nil,
                        slug: Swift.String? = nil,
                        updatedAt: Foundation.Date? = nil
                    ) {
                        self.createdAt = createdAt
                        self.description = description
                        self.events = events
                        self.externalUrl = externalUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.name = name
                        self.nodeId = nodeId
                        self.owner = owner
                        self.permissions = permissions
                        self.slug = slug
                        self.updatedAt = updatedAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case createdAt = "created_at"
                        case description
                        case events
                        case externalUrl = "external_url"
                        case htmlUrl = "html_url"
                        case id
                        case name
                        case nodeId = "node_id"
                        case owner
                        case permissions
                        case slug
                        case updatedAt = "updated_at"
                    }
                }
                /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/performed_via_github_app`.
                public var performedViaGithubApp: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/pull_request`.
                public struct PullRequestPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/pull_request/diff_url`.
                    public var diffUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/pull_request/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/pull_request/merged_at`.
                    public var mergedAt: Foundation.Date?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/pull_request/patch_url`.
                    public var patchUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/pull_request/url`.
                    public var url: Swift.String?
                    /// Creates a new `PullRequestPayload`.
                    ///
                    /// - Parameters:
                    ///   - diffUrl:
                    ///   - htmlUrl:
                    ///   - mergedAt:
                    ///   - patchUrl:
                    ///   - url:
                    public init(
                        diffUrl: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        mergedAt: Foundation.Date? = nil,
                        patchUrl: Swift.String? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.diffUrl = diffUrl
                        self.htmlUrl = htmlUrl
                        self.mergedAt = mergedAt
                        self.patchUrl = patchUrl
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case diffUrl = "diff_url"
                        case htmlUrl = "html_url"
                        case mergedAt = "merged_at"
                        case patchUrl = "patch_url"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/pull_request`.
                public var pullRequest: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PullRequestPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/reactions`.
                public struct ReactionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/reactions/+1`.
                    public var _plus_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/reactions/-1`.
                    public var _hyphen_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/reactions/confused`.
                    public var confused: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/reactions/eyes`.
                    public var eyes: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/reactions/heart`.
                    public var heart: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/reactions/hooray`.
                    public var hooray: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/reactions/laugh`.
                    public var laugh: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/reactions/rocket`.
                    public var rocket: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/reactions/total_count`.
                    public var totalCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/reactions/url`.
                    public var url: Swift.String
                    /// Creates a new `ReactionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - _plus_1:
                    ///   - _hyphen_1:
                    ///   - confused:
                    ///   - eyes:
                    ///   - heart:
                    ///   - hooray:
                    ///   - laugh:
                    ///   - rocket:
                    ///   - totalCount:
                    ///   - url:
                    public init(
                        _plus_1: Swift.Int,
                        _hyphen_1: Swift.Int,
                        confused: Swift.Int,
                        eyes: Swift.Int,
                        heart: Swift.Int,
                        hooray: Swift.Int,
                        laugh: Swift.Int,
                        rocket: Swift.Int,
                        totalCount: Swift.Int,
                        url: Swift.String
                    ) {
                        self._plus_1 = _plus_1
                        self._hyphen_1 = _hyphen_1
                        self.confused = confused
                        self.eyes = eyes
                        self.heart = heart
                        self.hooray = hooray
                        self.laugh = laugh
                        self.rocket = rocket
                        self.totalCount = totalCount
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _plus_1 = "+1"
                        case _hyphen_1 = "-1"
                        case confused
                        case eyes
                        case heart
                        case hooray
                        case laugh
                        case rocket
                        case totalCount = "total_count"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/reactions`.
                public var reactions: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.ReactionsPayload
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/repository_url`.
                public var repositoryUrl: Swift.String
                /// State of the issue; either 'open' or 'closed'
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/state`.
                @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case open = "open"
                    case closed = "closed"
                }
                /// State of the issue; either 'open' or 'closed'
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/state`.
                public var state: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.StatePayload?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/state_reason`.
                public var stateReason: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/timeline_url`.
                public var timelineUrl: Swift.String?
                /// Title of the issue
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/title`.
                public var title: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/updated_at`.
                public var updatedAt: Foundation.Date
                /// URL for the issue
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/user`.
                public struct UserPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/user/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/user/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/user/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/user/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/user/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/user/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/user/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/user/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/user/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/user/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/user/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/user/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/user/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/user/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/user/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/user/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/user/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/user/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/user/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/user/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/user/type`.
                    public var _type: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.UserPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/user/url`.
                    public var url: Swift.String?
                    /// Creates a new `UserPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.UserPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue/user`.
                public var user: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.UserPayload?
                /// Creates a new `IssuePayload`.
                ///
                /// - Parameters:
                ///   - activeLockReason:
                ///   - assignee:
                ///   - assignees:
                ///   - authorAssociation: How the author is associated with the repository.
                ///   - body: Contents of the issue
                ///   - closedAt:
                ///   - comments:
                ///   - commentsUrl:
                ///   - createdAt:
                ///   - draft:
                ///   - eventsUrl:
                ///   - htmlUrl:
                ///   - id:
                ///   - labels:
                ///   - labelsUrl:
                ///   - locked:
                ///   - milestone: A collection of related issues and pull requests.
                ///   - nodeId:
                ///   - number:
                ///   - performedViaGithubApp: GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                ///   - pullRequest:
                ///   - reactions:
                ///   - repositoryUrl:
                ///   - state: State of the issue; either 'open' or 'closed'
                ///   - stateReason:
                ///   - timelineUrl:
                ///   - title: Title of the issue
                ///   - updatedAt:
                ///   - url: URL for the issue
                ///   - user:
                public init(
                    activeLockReason: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.ActiveLockReasonPayload? = nil,
                    assignee: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.AssigneePayload? = nil,
                    assignees: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.AssigneesPayload,
                    authorAssociation: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.AuthorAssociationPayload,
                    body: Swift.String? = nil,
                    closedAt: Foundation.Date? = nil,
                    comments: Swift.Int,
                    commentsUrl: Swift.String,
                    createdAt: Foundation.Date,
                    draft: Swift.Bool? = nil,
                    eventsUrl: Swift.String,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    labels: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.LabelsPayload? = nil,
                    labelsUrl: Swift.String,
                    locked: Swift.Bool? = nil,
                    milestone: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.MilestonePayload? = nil,
                    nodeId: Swift.String,
                    number: Swift.Int,
                    performedViaGithubApp: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PerformedViaGithubAppPayload? = nil,
                    pullRequest: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.PullRequestPayload? = nil,
                    reactions: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.ReactionsPayload,
                    repositoryUrl: Swift.String,
                    state: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.StatePayload? = nil,
                    stateReason: Swift.String? = nil,
                    timelineUrl: Swift.String? = nil,
                    title: Swift.String,
                    updatedAt: Foundation.Date,
                    url: Swift.String,
                    user: Components.Schemas.WebhookIssuesUnpinned.IssuePayload.UserPayload? = nil
                ) {
                    self.activeLockReason = activeLockReason
                    self.assignee = assignee
                    self.assignees = assignees
                    self.authorAssociation = authorAssociation
                    self.body = body
                    self.closedAt = closedAt
                    self.comments = comments
                    self.commentsUrl = commentsUrl
                    self.createdAt = createdAt
                    self.draft = draft
                    self.eventsUrl = eventsUrl
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.labels = labels
                    self.labelsUrl = labelsUrl
                    self.locked = locked
                    self.milestone = milestone
                    self.nodeId = nodeId
                    self.number = number
                    self.performedViaGithubApp = performedViaGithubApp
                    self.pullRequest = pullRequest
                    self.reactions = reactions
                    self.repositoryUrl = repositoryUrl
                    self.state = state
                    self.stateReason = stateReason
                    self.timelineUrl = timelineUrl
                    self.title = title
                    self.updatedAt = updatedAt
                    self.url = url
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case activeLockReason = "active_lock_reason"
                    case assignee
                    case assignees
                    case authorAssociation = "author_association"
                    case body
                    case closedAt = "closed_at"
                    case comments
                    case commentsUrl = "comments_url"
                    case createdAt = "created_at"
                    case draft
                    case eventsUrl = "events_url"
                    case htmlUrl = "html_url"
                    case id
                    case labels
                    case labelsUrl = "labels_url"
                    case locked
                    case milestone
                    case nodeId = "node_id"
                    case number
                    case performedViaGithubApp = "performed_via_github_app"
                    case pullRequest = "pull_request"
                    case reactions
                    case repositoryUrl = "repository_url"
                    case state
                    case stateReason = "state_reason"
                    case timelineUrl = "timeline_url"
                    case title
                    case updatedAt = "updated_at"
                    case url
                    case user
                }
            }
            /// The [issue](https://docs.github.com/en/rest/reference/issues) itself.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/issue`.
            public var issue: Components.Schemas.WebhookIssuesUnpinned.IssuePayload
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-issues-unpinned/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Creates a new `WebhookIssuesUnpinned`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - enterprise:
            ///   - installation:
            ///   - issue: The [issue](https://docs.github.com/en/rest/reference/issues) itself.
            ///   - organization:
            ///   - repository:
            ///   - sender:
            public init(
                action: Components.Schemas.WebhookIssuesUnpinned.ActionPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                issue: Components.Schemas.WebhookIssuesUnpinned.IssuePayload,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser
            ) {
                self.action = action
                self.enterprise = enterprise
                self.installation = installation
                self.issue = issue
                self.organization = organization
                self.repository = repository
                self.sender = sender
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case enterprise
                case installation
                case issue
                case organization
                case repository
                case sender
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// This event occurs when there is activity relating to a comment on an issue of pull request.
    ///
    /// For more information about issues and pull requests, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)" and "[About pull requests](https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the Issue comments APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issuecomment) and [the REST API documentation](https://docs.github.com/rest/issues/comments).
    ///
    /// For activity relating to an issue as opposed to comments on an issue, see the `issue` event. For activity related to pull request reviews or pull request review comments, see the `pull_request_review` or `pull_request_review_comment` events. For mor information about the different types of pull request comments, see "[Working with comments](https://docs.github.com/rest/guides/working-with-comments)."
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level permission for issues or pull requests.
    ///
    /// A comment on an issue or pull request was created.
    ///
    /// - Remark: HTTP `POST /issue-comment-created`.
    /// - Remark: Generated from `#/paths//issue-comment-created/post(issue-comment/created)`.
    public enum IssueCommentCreated {
        public static let id: Swift.String = "issue-comment/created"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/issue-comment-created/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issue-comment-created/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/issue-comment-created/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/issue-comment-created/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/issue-comment-created/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/issue-comment-created/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/issue-comment-created/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/issue-comment-created/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.IssueCommentCreated.Input.Headers
            /// - Remark: Generated from `#/paths/issue-comment-created/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issue-comment-created/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookIssueCommentCreated)
            }
            public var body: Operations.IssueCommentCreated.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.IssueCommentCreated.Input.Headers = .init(),
                body: Operations.IssueCommentCreated.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issue-comment-created/post(issue-comment/created)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.IssueCommentCreated.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issue-comment-created/post(issue-comment/created)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.IssueCommentCreated.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to a comment on an issue of pull request.
    ///
    /// For more information about issues and pull requests, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)" and "[About pull requests](https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the Issue comments APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issuecomment) and [the REST API documentation](https://docs.github.com/rest/issues/comments).
    ///
    /// For activity relating to an issue as opposed to comments on an issue, see the `issue` event. For activity related to pull request reviews or pull request review comments, see the `pull_request_review` or `pull_request_review_comment` events. For mor information about the different types of pull request comments, see "[Working with comments](https://docs.github.com/rest/guides/working-with-comments)."
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level permission for issues or pull requests.
    ///
    /// A comment on an issue or pull request was deleted.
    ///
    /// - Remark: HTTP `POST /issue-comment-deleted`.
    /// - Remark: Generated from `#/paths//issue-comment-deleted/post(issue-comment/deleted)`.
    public enum IssueCommentDeleted {
        public static let id: Swift.String = "issue-comment/deleted"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/issue-comment-deleted/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issue-comment-deleted/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/issue-comment-deleted/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/issue-comment-deleted/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/issue-comment-deleted/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/issue-comment-deleted/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/issue-comment-deleted/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/issue-comment-deleted/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.IssueCommentDeleted.Input.Headers
            /// - Remark: Generated from `#/paths/issue-comment-deleted/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issue-comment-deleted/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookIssueCommentDeleted)
            }
            public var body: Operations.IssueCommentDeleted.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.IssueCommentDeleted.Input.Headers = .init(),
                body: Operations.IssueCommentDeleted.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issue-comment-deleted/post(issue-comment/deleted)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.IssueCommentDeleted.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issue-comment-deleted/post(issue-comment/deleted)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.IssueCommentDeleted.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to a comment on an issue of pull request.
    ///
    /// For more information about issues and pull requests, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)" and "[About pull requests](https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the Issue comments APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issuecomment) and [the REST API documentation](https://docs.github.com/rest/issues/comments).
    ///
    /// For activity relating to an issue as opposed to comments on an issue, see the `issue` event. For activity related to pull request reviews or pull request review comments, see the `pull_request_review` or `pull_request_review_comment` events. For mor information about the different types of pull request comments, see "[Working with comments](https://docs.github.com/rest/guides/working-with-comments)."
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level permission for issues or pull requests.
    ///
    /// A comment on an issue or pull request was edited.
    ///
    /// - Remark: HTTP `POST /issue-comment-edited`.
    /// - Remark: Generated from `#/paths//issue-comment-edited/post(issue-comment/edited)`.
    public enum IssueCommentEdited {
        public static let id: Swift.String = "issue-comment/edited"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/issue-comment-edited/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issue-comment-edited/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/issue-comment-edited/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/issue-comment-edited/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/issue-comment-edited/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/issue-comment-edited/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/issue-comment-edited/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/issue-comment-edited/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.IssueCommentEdited.Input.Headers
            /// - Remark: Generated from `#/paths/issue-comment-edited/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issue-comment-edited/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookIssueCommentEdited)
            }
            public var body: Operations.IssueCommentEdited.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.IssueCommentEdited.Input.Headers = .init(),
                body: Operations.IssueCommentEdited.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issue-comment-edited/post(issue-comment/edited)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.IssueCommentEdited.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issue-comment-edited/post(issue-comment/edited)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.IssueCommentEdited.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// An issue was assigned to a user.
    ///
    /// - Remark: HTTP `POST /issues-assigned`.
    /// - Remark: Generated from `#/paths//issues-assigned/post(issues/assigned)`.
    public enum IssuesAssigned {
        public static let id: Swift.String = "issues/assigned"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/issues-assigned/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issues-assigned/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/issues-assigned/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/issues-assigned/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/issues-assigned/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/issues-assigned/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/issues-assigned/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/issues-assigned/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.IssuesAssigned.Input.Headers
            /// - Remark: Generated from `#/paths/issues-assigned/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issues-assigned/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookIssuesAssigned)
            }
            public var body: Operations.IssuesAssigned.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.IssuesAssigned.Input.Headers = .init(),
                body: Operations.IssuesAssigned.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issues-assigned/post(issues/assigned)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.IssuesAssigned.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issues-assigned/post(issues/assigned)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.IssuesAssigned.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// An issue was closed.
    ///
    /// - Remark: HTTP `POST /issues-closed`.
    /// - Remark: Generated from `#/paths//issues-closed/post(issues/closed)`.
    public enum IssuesClosed {
        public static let id: Swift.String = "issues/closed"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/issues-closed/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issues-closed/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/issues-closed/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/issues-closed/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/issues-closed/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/issues-closed/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/issues-closed/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/issues-closed/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.IssuesClosed.Input.Headers
            /// - Remark: Generated from `#/paths/issues-closed/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issues-closed/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookIssuesClosed)
            }
            public var body: Operations.IssuesClosed.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.IssuesClosed.Input.Headers = .init(),
                body: Operations.IssuesClosed.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issues-closed/post(issues/closed)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.IssuesClosed.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issues-closed/post(issues/closed)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.IssuesClosed.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// An issue was deleted.
    ///
    /// - Remark: HTTP `POST /issues-deleted`.
    /// - Remark: Generated from `#/paths//issues-deleted/post(issues/deleted)`.
    public enum IssuesDeleted {
        public static let id: Swift.String = "issues/deleted"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/issues-deleted/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issues-deleted/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/issues-deleted/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/issues-deleted/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/issues-deleted/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/issues-deleted/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/issues-deleted/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/issues-deleted/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.IssuesDeleted.Input.Headers
            /// - Remark: Generated from `#/paths/issues-deleted/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issues-deleted/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookIssuesDeleted)
            }
            public var body: Operations.IssuesDeleted.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.IssuesDeleted.Input.Headers = .init(),
                body: Operations.IssuesDeleted.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issues-deleted/post(issues/deleted)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.IssuesDeleted.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issues-deleted/post(issues/deleted)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.IssuesDeleted.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// An issue was removed from a milestone.
    ///
    /// - Remark: HTTP `POST /issues-demilestoned`.
    /// - Remark: Generated from `#/paths//issues-demilestoned/post(issues/demilestoned)`.
    public enum IssuesDemilestoned {
        public static let id: Swift.String = "issues/demilestoned"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/issues-demilestoned/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issues-demilestoned/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/issues-demilestoned/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/issues-demilestoned/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/issues-demilestoned/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/issues-demilestoned/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/issues-demilestoned/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/issues-demilestoned/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.IssuesDemilestoned.Input.Headers
            /// - Remark: Generated from `#/paths/issues-demilestoned/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issues-demilestoned/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookIssuesDemilestoned)
            }
            public var body: Operations.IssuesDemilestoned.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.IssuesDemilestoned.Input.Headers = .init(),
                body: Operations.IssuesDemilestoned.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issues-demilestoned/post(issues/demilestoned)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.IssuesDemilestoned.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issues-demilestoned/post(issues/demilestoned)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.IssuesDemilestoned.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// The title or body on an issue was edited.
    ///
    /// - Remark: HTTP `POST /issues-edited`.
    /// - Remark: Generated from `#/paths//issues-edited/post(issues/edited)`.
    public enum IssuesEdited {
        public static let id: Swift.String = "issues/edited"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/issues-edited/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issues-edited/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/issues-edited/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/issues-edited/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/issues-edited/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/issues-edited/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/issues-edited/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/issues-edited/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.IssuesEdited.Input.Headers
            /// - Remark: Generated from `#/paths/issues-edited/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issues-edited/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookIssuesEdited)
            }
            public var body: Operations.IssuesEdited.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.IssuesEdited.Input.Headers = .init(),
                body: Operations.IssuesEdited.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issues-edited/post(issues/edited)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.IssuesEdited.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issues-edited/post(issues/edited)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.IssuesEdited.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// A label was added to an issue.
    ///
    /// - Remark: HTTP `POST /issues-labeled`.
    /// - Remark: Generated from `#/paths//issues-labeled/post(issues/labeled)`.
    public enum IssuesLabeled {
        public static let id: Swift.String = "issues/labeled"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/issues-labeled/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issues-labeled/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/issues-labeled/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/issues-labeled/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/issues-labeled/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/issues-labeled/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/issues-labeled/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/issues-labeled/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.IssuesLabeled.Input.Headers
            /// - Remark: Generated from `#/paths/issues-labeled/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issues-labeled/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookIssuesLabeled)
            }
            public var body: Operations.IssuesLabeled.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.IssuesLabeled.Input.Headers = .init(),
                body: Operations.IssuesLabeled.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issues-labeled/post(issues/labeled)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.IssuesLabeled.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issues-labeled/post(issues/labeled)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.IssuesLabeled.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// Conversation on an issue was locked. For more information, see "[Locking conversations](https://docs.github.com/communities/moderating-comments-and-conversations/locking-conversations)."
    ///
    /// - Remark: HTTP `POST /issues-locked`.
    /// - Remark: Generated from `#/paths//issues-locked/post(issues/locked)`.
    public enum IssuesLocked {
        public static let id: Swift.String = "issues/locked"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/issues-locked/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issues-locked/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/issues-locked/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/issues-locked/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/issues-locked/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/issues-locked/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/issues-locked/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/issues-locked/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.IssuesLocked.Input.Headers
            /// - Remark: Generated from `#/paths/issues-locked/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issues-locked/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookIssuesLocked)
            }
            public var body: Operations.IssuesLocked.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.IssuesLocked.Input.Headers = .init(),
                body: Operations.IssuesLocked.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issues-locked/post(issues/locked)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.IssuesLocked.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issues-locked/post(issues/locked)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.IssuesLocked.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// An issue was added to a milestone.
    ///
    /// - Remark: HTTP `POST /issues-milestoned`.
    /// - Remark: Generated from `#/paths//issues-milestoned/post(issues/milestoned)`.
    public enum IssuesMilestoned {
        public static let id: Swift.String = "issues/milestoned"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/issues-milestoned/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issues-milestoned/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/issues-milestoned/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/issues-milestoned/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/issues-milestoned/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/issues-milestoned/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/issues-milestoned/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/issues-milestoned/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.IssuesMilestoned.Input.Headers
            /// - Remark: Generated from `#/paths/issues-milestoned/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issues-milestoned/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookIssuesMilestoned)
            }
            public var body: Operations.IssuesMilestoned.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.IssuesMilestoned.Input.Headers = .init(),
                body: Operations.IssuesMilestoned.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issues-milestoned/post(issues/milestoned)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.IssuesMilestoned.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issues-milestoned/post(issues/milestoned)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.IssuesMilestoned.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// An issue was created. When a closed issue is reopened, the action will be `reopened` instead.
    ///
    /// - Remark: HTTP `POST /issues-opened`.
    /// - Remark: Generated from `#/paths//issues-opened/post(issues/opened)`.
    public enum IssuesOpened {
        public static let id: Swift.String = "issues/opened"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/issues-opened/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issues-opened/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/issues-opened/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/issues-opened/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/issues-opened/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/issues-opened/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/issues-opened/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/issues-opened/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.IssuesOpened.Input.Headers
            /// - Remark: Generated from `#/paths/issues-opened/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issues-opened/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookIssuesOpened)
            }
            public var body: Operations.IssuesOpened.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.IssuesOpened.Input.Headers = .init(),
                body: Operations.IssuesOpened.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issues-opened/post(issues/opened)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.IssuesOpened.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issues-opened/post(issues/opened)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.IssuesOpened.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// An issue was pinned to a repository. For more information, see "[Pinning an issue to your repository](https://docs.github.com/issues/tracking-your-work-with-issues/pinning-an-issue-to-your-repository)."
    ///
    /// - Remark: HTTP `POST /issues-pinned`.
    /// - Remark: Generated from `#/paths//issues-pinned/post(issues/pinned)`.
    public enum IssuesPinned {
        public static let id: Swift.String = "issues/pinned"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/issues-pinned/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issues-pinned/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/issues-pinned/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/issues-pinned/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/issues-pinned/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/issues-pinned/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/issues-pinned/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/issues-pinned/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.IssuesPinned.Input.Headers
            /// - Remark: Generated from `#/paths/issues-pinned/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issues-pinned/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookIssuesPinned)
            }
            public var body: Operations.IssuesPinned.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.IssuesPinned.Input.Headers = .init(),
                body: Operations.IssuesPinned.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issues-pinned/post(issues/pinned)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.IssuesPinned.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issues-pinned/post(issues/pinned)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.IssuesPinned.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// A closed issue was reopened.
    ///
    /// - Remark: HTTP `POST /issues-reopened`.
    /// - Remark: Generated from `#/paths//issues-reopened/post(issues/reopened)`.
    public enum IssuesReopened {
        public static let id: Swift.String = "issues/reopened"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/issues-reopened/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issues-reopened/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/issues-reopened/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/issues-reopened/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/issues-reopened/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/issues-reopened/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/issues-reopened/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/issues-reopened/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.IssuesReopened.Input.Headers
            /// - Remark: Generated from `#/paths/issues-reopened/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issues-reopened/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookIssuesReopened)
            }
            public var body: Operations.IssuesReopened.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.IssuesReopened.Input.Headers = .init(),
                body: Operations.IssuesReopened.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issues-reopened/post(issues/reopened)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.IssuesReopened.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issues-reopened/post(issues/reopened)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.IssuesReopened.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// An issue was transferred to another repository. For more information, see "[Transferring an issue to another repository](https://docs.github.com/issues/tracking-your-work-with-issues/transferring-an-issue-to-another-repository)."
    ///
    /// - Remark: HTTP `POST /issues-transferred`.
    /// - Remark: Generated from `#/paths//issues-transferred/post(issues/transferred)`.
    public enum IssuesTransferred {
        public static let id: Swift.String = "issues/transferred"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/issues-transferred/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issues-transferred/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/issues-transferred/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/issues-transferred/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/issues-transferred/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/issues-transferred/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/issues-transferred/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/issues-transferred/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.IssuesTransferred.Input.Headers
            /// - Remark: Generated from `#/paths/issues-transferred/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issues-transferred/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookIssuesTransferred)
            }
            public var body: Operations.IssuesTransferred.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.IssuesTransferred.Input.Headers = .init(),
                body: Operations.IssuesTransferred.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issues-transferred/post(issues/transferred)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.IssuesTransferred.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issues-transferred/post(issues/transferred)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.IssuesTransferred.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// A user was unassigned from an issue.
    ///
    /// - Remark: HTTP `POST /issues-unassigned`.
    /// - Remark: Generated from `#/paths//issues-unassigned/post(issues/unassigned)`.
    public enum IssuesUnassigned {
        public static let id: Swift.String = "issues/unassigned"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/issues-unassigned/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issues-unassigned/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/issues-unassigned/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/issues-unassigned/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/issues-unassigned/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/issues-unassigned/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/issues-unassigned/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/issues-unassigned/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.IssuesUnassigned.Input.Headers
            /// - Remark: Generated from `#/paths/issues-unassigned/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issues-unassigned/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookIssuesUnassigned)
            }
            public var body: Operations.IssuesUnassigned.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.IssuesUnassigned.Input.Headers = .init(),
                body: Operations.IssuesUnassigned.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issues-unassigned/post(issues/unassigned)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.IssuesUnassigned.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issues-unassigned/post(issues/unassigned)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.IssuesUnassigned.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// A label was removed from an issue.
    ///
    /// - Remark: HTTP `POST /issues-unlabeled`.
    /// - Remark: Generated from `#/paths//issues-unlabeled/post(issues/unlabeled)`.
    public enum IssuesUnlabeled {
        public static let id: Swift.String = "issues/unlabeled"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/issues-unlabeled/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issues-unlabeled/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/issues-unlabeled/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/issues-unlabeled/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/issues-unlabeled/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/issues-unlabeled/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/issues-unlabeled/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/issues-unlabeled/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.IssuesUnlabeled.Input.Headers
            /// - Remark: Generated from `#/paths/issues-unlabeled/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issues-unlabeled/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookIssuesUnlabeled)
            }
            public var body: Operations.IssuesUnlabeled.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.IssuesUnlabeled.Input.Headers = .init(),
                body: Operations.IssuesUnlabeled.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issues-unlabeled/post(issues/unlabeled)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.IssuesUnlabeled.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issues-unlabeled/post(issues/unlabeled)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.IssuesUnlabeled.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// Conversation on an issue was locked. For more information, see "[Locking conversations](https://docs.github.com/communities/moderating-comments-and-conversations/locking-conversations)."
    ///
    /// - Remark: HTTP `POST /issues-unlocked`.
    /// - Remark: Generated from `#/paths//issues-unlocked/post(issues/unlocked)`.
    public enum IssuesUnlocked {
        public static let id: Swift.String = "issues/unlocked"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/issues-unlocked/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issues-unlocked/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/issues-unlocked/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/issues-unlocked/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/issues-unlocked/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/issues-unlocked/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/issues-unlocked/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/issues-unlocked/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.IssuesUnlocked.Input.Headers
            /// - Remark: Generated from `#/paths/issues-unlocked/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issues-unlocked/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookIssuesUnlocked)
            }
            public var body: Operations.IssuesUnlocked.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.IssuesUnlocked.Input.Headers = .init(),
                body: Operations.IssuesUnlocked.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issues-unlocked/post(issues/unlocked)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.IssuesUnlocked.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issues-unlocked/post(issues/unlocked)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.IssuesUnlocked.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to an issue.
    ///
    /// For more information about issues, see "[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)." For information about the Issues APIs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) and [the REST API documentation](https://docs.github.com/rest/issues).
    ///
    /// For activity relating to a comment on an issue, see the `issue_comment` event.
    ///
    /// In order to install this event on a GitHub App, the app must have at least read-level `issues` permission.
    ///
    /// An issue was unpinned from a repository. For more information, see "[Pinning an issue to your repository](https://docs.github.com/issues/tracking-your-work-with-issues/pinning-an-issue-to-your-repository)."
    ///
    /// - Remark: HTTP `POST /issues-unpinned`.
    /// - Remark: Generated from `#/paths//issues-unpinned/post(issues/unpinned)`.
    public enum IssuesUnpinned {
        public static let id: Swift.String = "issues/unpinned"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/issues-unpinned/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issues-unpinned/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/issues-unpinned/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/issues-unpinned/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/issues-unpinned/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/issues-unpinned/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/issues-unpinned/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/issues-unpinned/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.IssuesUnpinned.Input.Headers
            /// - Remark: Generated from `#/paths/issues-unpinned/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issues-unpinned/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookIssuesUnpinned)
            }
            public var body: Operations.IssuesUnpinned.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.IssuesUnpinned.Input.Headers = .init(),
                body: Operations.IssuesUnpinned.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issues-unpinned/post(issues/unpinned)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.IssuesUnpinned.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//issues-unpinned/post(issues/unpinned)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.IssuesUnpinned.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
}
