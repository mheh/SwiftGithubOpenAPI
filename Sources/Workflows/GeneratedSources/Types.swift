// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// This event occurs when a GitHub Actions workflow is manually triggered.
    /// For more information, see "[Manually running a workflow](https://docs.github.com/actions/managing-workflow-runs/manually-running-a-workflow)."
    ///
    /// For activity relating to workflow runs, see the `workflow_run` event.
    ///
    ///   To install this event on a GitHub App, the app must have at least read-level access for the "Contents" repository permission.
    ///
    ///
    ///
    /// - Remark: HTTP `POST /workflow-dispatch`.
    /// - Remark: Generated from `#/paths//workflow-dispatch/post(workflow-dispatch)`.
    func workflowDispatch(_ input: Operations.WorkflowDispatch.Input) async throws -> Operations.WorkflowDispatch.Output
    /// This event occurs when there is activity relating to a job in a GitHub Actions workflow.
    ///
    /// For more information, see "[Using jobs in a workflow](https://docs.github.com/actions/using-jobs/using-jobs-in-a-workflow)." For information about the API to manage workflow jobs, see [the REST API documentation](https://docs.github.com/rest/actions/workflow-jobs).
    ///
    /// For activity relating to a workflow run instead of a job in a workflow run, see the `workflow_run` event.
    ///
    /// To install this event on a GitHub App, the app must have at least read-level access for the Actions metadata permission.
    ///
    /// A job in a workflow run finished. This event occurs when a job in a workflow is completed, regardless of whether the job was successful or unsuccessful.
    ///
    /// - Remark: HTTP `POST /workflow-job-completed`.
    /// - Remark: Generated from `#/paths//workflow-job-completed/post(workflow-job/completed)`.
    func workflowJobCompleted(_ input: Operations.WorkflowJobCompleted.Input) async throws -> Operations.WorkflowJobCompleted.Output
    /// This event occurs when there is activity relating to a job in a GitHub Actions workflow.
    ///
    /// For more information, see "[Using jobs in a workflow](https://docs.github.com/actions/using-jobs/using-jobs-in-a-workflow)." For information about the API to manage workflow jobs, see [the REST API documentation](https://docs.github.com/rest/actions/workflow-jobs).
    ///
    /// For activity relating to a workflow run instead of a job in a workflow run, see the `workflow_run` event.
    ///
    /// To install this event on a GitHub App, the app must have at least read-level access for the Actions metadata permission.
    ///
    /// A job in a workflow run started processing on a runner.
    ///
    /// - Remark: HTTP `POST /workflow-job-in-progress`.
    /// - Remark: Generated from `#/paths//workflow-job-in-progress/post(workflow-job/in-progress)`.
    func workflowJobInProgress(_ input: Operations.WorkflowJobInProgress.Input) async throws -> Operations.WorkflowJobInProgress.Output
    /// This event occurs when there is activity relating to a job in a GitHub Actions workflow.
    ///
    /// For more information, see "[Using jobs in a workflow](https://docs.github.com/actions/using-jobs/using-jobs-in-a-workflow)." For information about the API to manage workflow jobs, see [the REST API documentation](https://docs.github.com/rest/actions/workflow-jobs).
    ///
    /// For activity relating to a workflow run instead of a job in a workflow run, see the `workflow_run` event.
    ///
    /// To install this event on a GitHub App, the app must have at least read-level access for the Actions metadata permission.
    ///
    /// A job in a workflow run was created.
    ///
    /// - Remark: HTTP `POST /workflow-job-queued`.
    /// - Remark: Generated from `#/paths//workflow-job-queued/post(workflow-job/queued)`.
    func workflowJobQueued(_ input: Operations.WorkflowJobQueued.Input) async throws -> Operations.WorkflowJobQueued.Output
    /// This event occurs when there is activity relating to a run of a GitHub Actions workflow.
    ///
    /// For more information, see "[About workflows](https://docs.github.com/actions/using-workflows/about-workflows)." For information about the APIs to manage workflow runs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#workflowrun) and [the REST API documentation](https://docs.github.com/rest/actions/workflow-runs).
    ///
    /// For activity relating to job in a workflow run, see the `workflow_job` event.
    ///
    /// To install this event on a GitHub App, the app must have at least read-level access for the Actions or contents metadata permission.
    ///
    /// A workflow run finished. This event occurs when a workflow run is completed, regardless of whether the workflow was successful or unsuccessful.
    ///
    /// - Remark: HTTP `POST /workflow-run-completed`.
    /// - Remark: Generated from `#/paths//workflow-run-completed/post(workflow-run/completed)`.
    func workflowRunCompleted(_ input: Operations.WorkflowRunCompleted.Input) async throws -> Operations.WorkflowRunCompleted.Output
    /// This event occurs when there is activity relating to a run of a GitHub Actions workflow.
    ///
    /// For more information, see "[About workflows](https://docs.github.com/actions/using-workflows/about-workflows)." For information about the APIs to manage workflow runs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#workflowrun) and [the REST API documentation](https://docs.github.com/rest/actions/workflow-runs).
    ///
    /// For activity relating to job in a workflow run, see the `workflow_job` event.
    ///
    /// To install this event on a GitHub App, the app must have at least read-level access for the Actions or contents metadata permission.
    ///
    /// A workflow run started processing on a runner.
    ///
    /// - Remark: HTTP `POST /workflow-run-in-progress`.
    /// - Remark: Generated from `#/paths//workflow-run-in-progress/post(workflow-run/in-progress)`.
    func workflowRunInProgress(_ input: Operations.WorkflowRunInProgress.Input) async throws -> Operations.WorkflowRunInProgress.Output
    /// This event occurs when there is activity relating to a run of a GitHub Actions workflow.
    ///
    /// For more information, see "[About workflows](https://docs.github.com/actions/using-workflows/about-workflows)." For information about the APIs to manage workflow runs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#workflowrun) and [the REST API documentation](https://docs.github.com/rest/actions/workflow-runs).
    ///
    /// For activity relating to job in a workflow run, see the `workflow_job` event.
    ///
    /// To install this event on a GitHub App, the app must have at least read-level access for the Actions or contents metadata permission.
    ///
    /// A workflow run was triggered.
    ///
    /// - Remark: HTTP `POST /workflow-run-requested`.
    /// - Remark: Generated from `#/paths//workflow-run-requested/post(workflow-run/requested)`.
    func workflowRunRequested(_ input: Operations.WorkflowRunRequested.Input) async throws -> Operations.WorkflowRunRequested.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// This event occurs when a GitHub Actions workflow is manually triggered.
    /// For more information, see "[Manually running a workflow](https://docs.github.com/actions/managing-workflow-runs/manually-running-a-workflow)."
    ///
    /// For activity relating to workflow runs, see the `workflow_run` event.
    ///
    ///   To install this event on a GitHub App, the app must have at least read-level access for the "Contents" repository permission.
    ///
    ///
    ///
    /// - Remark: HTTP `POST /workflow-dispatch`.
    /// - Remark: Generated from `#/paths//workflow-dispatch/post(workflow-dispatch)`.
    public func workflowDispatch(
        headers: Operations.WorkflowDispatch.Input.Headers = .init(),
        body: Operations.WorkflowDispatch.Input.Body
    ) async throws -> Operations.WorkflowDispatch.Output {
        try await workflowDispatch(Operations.WorkflowDispatch.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to a job in a GitHub Actions workflow.
    ///
    /// For more information, see "[Using jobs in a workflow](https://docs.github.com/actions/using-jobs/using-jobs-in-a-workflow)." For information about the API to manage workflow jobs, see [the REST API documentation](https://docs.github.com/rest/actions/workflow-jobs).
    ///
    /// For activity relating to a workflow run instead of a job in a workflow run, see the `workflow_run` event.
    ///
    /// To install this event on a GitHub App, the app must have at least read-level access for the Actions metadata permission.
    ///
    /// A job in a workflow run finished. This event occurs when a job in a workflow is completed, regardless of whether the job was successful or unsuccessful.
    ///
    /// - Remark: HTTP `POST /workflow-job-completed`.
    /// - Remark: Generated from `#/paths//workflow-job-completed/post(workflow-job/completed)`.
    public func workflowJobCompleted(
        headers: Operations.WorkflowJobCompleted.Input.Headers = .init(),
        body: Operations.WorkflowJobCompleted.Input.Body
    ) async throws -> Operations.WorkflowJobCompleted.Output {
        try await workflowJobCompleted(Operations.WorkflowJobCompleted.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to a job in a GitHub Actions workflow.
    ///
    /// For more information, see "[Using jobs in a workflow](https://docs.github.com/actions/using-jobs/using-jobs-in-a-workflow)." For information about the API to manage workflow jobs, see [the REST API documentation](https://docs.github.com/rest/actions/workflow-jobs).
    ///
    /// For activity relating to a workflow run instead of a job in a workflow run, see the `workflow_run` event.
    ///
    /// To install this event on a GitHub App, the app must have at least read-level access for the Actions metadata permission.
    ///
    /// A job in a workflow run started processing on a runner.
    ///
    /// - Remark: HTTP `POST /workflow-job-in-progress`.
    /// - Remark: Generated from `#/paths//workflow-job-in-progress/post(workflow-job/in-progress)`.
    public func workflowJobInProgress(
        headers: Operations.WorkflowJobInProgress.Input.Headers = .init(),
        body: Operations.WorkflowJobInProgress.Input.Body
    ) async throws -> Operations.WorkflowJobInProgress.Output {
        try await workflowJobInProgress(Operations.WorkflowJobInProgress.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to a job in a GitHub Actions workflow.
    ///
    /// For more information, see "[Using jobs in a workflow](https://docs.github.com/actions/using-jobs/using-jobs-in-a-workflow)." For information about the API to manage workflow jobs, see [the REST API documentation](https://docs.github.com/rest/actions/workflow-jobs).
    ///
    /// For activity relating to a workflow run instead of a job in a workflow run, see the `workflow_run` event.
    ///
    /// To install this event on a GitHub App, the app must have at least read-level access for the Actions metadata permission.
    ///
    /// A job in a workflow run was created.
    ///
    /// - Remark: HTTP `POST /workflow-job-queued`.
    /// - Remark: Generated from `#/paths//workflow-job-queued/post(workflow-job/queued)`.
    public func workflowJobQueued(
        headers: Operations.WorkflowJobQueued.Input.Headers = .init(),
        body: Operations.WorkflowJobQueued.Input.Body
    ) async throws -> Operations.WorkflowJobQueued.Output {
        try await workflowJobQueued(Operations.WorkflowJobQueued.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to a run of a GitHub Actions workflow.
    ///
    /// For more information, see "[About workflows](https://docs.github.com/actions/using-workflows/about-workflows)." For information about the APIs to manage workflow runs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#workflowrun) and [the REST API documentation](https://docs.github.com/rest/actions/workflow-runs).
    ///
    /// For activity relating to job in a workflow run, see the `workflow_job` event.
    ///
    /// To install this event on a GitHub App, the app must have at least read-level access for the Actions or contents metadata permission.
    ///
    /// A workflow run finished. This event occurs when a workflow run is completed, regardless of whether the workflow was successful or unsuccessful.
    ///
    /// - Remark: HTTP `POST /workflow-run-completed`.
    /// - Remark: Generated from `#/paths//workflow-run-completed/post(workflow-run/completed)`.
    public func workflowRunCompleted(
        headers: Operations.WorkflowRunCompleted.Input.Headers = .init(),
        body: Operations.WorkflowRunCompleted.Input.Body
    ) async throws -> Operations.WorkflowRunCompleted.Output {
        try await workflowRunCompleted(Operations.WorkflowRunCompleted.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to a run of a GitHub Actions workflow.
    ///
    /// For more information, see "[About workflows](https://docs.github.com/actions/using-workflows/about-workflows)." For information about the APIs to manage workflow runs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#workflowrun) and [the REST API documentation](https://docs.github.com/rest/actions/workflow-runs).
    ///
    /// For activity relating to job in a workflow run, see the `workflow_job` event.
    ///
    /// To install this event on a GitHub App, the app must have at least read-level access for the Actions or contents metadata permission.
    ///
    /// A workflow run started processing on a runner.
    ///
    /// - Remark: HTTP `POST /workflow-run-in-progress`.
    /// - Remark: Generated from `#/paths//workflow-run-in-progress/post(workflow-run/in-progress)`.
    public func workflowRunInProgress(
        headers: Operations.WorkflowRunInProgress.Input.Headers = .init(),
        body: Operations.WorkflowRunInProgress.Input.Body
    ) async throws -> Operations.WorkflowRunInProgress.Output {
        try await workflowRunInProgress(Operations.WorkflowRunInProgress.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to a run of a GitHub Actions workflow.
    ///
    /// For more information, see "[About workflows](https://docs.github.com/actions/using-workflows/about-workflows)." For information about the APIs to manage workflow runs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#workflowrun) and [the REST API documentation](https://docs.github.com/rest/actions/workflow-runs).
    ///
    /// For activity relating to job in a workflow run, see the `workflow_job` event.
    ///
    /// To install this event on a GitHub App, the app must have at least read-level access for the Actions or contents metadata permission.
    ///
    /// A workflow run was triggered.
    ///
    /// - Remark: HTTP `POST /workflow-run-requested`.
    /// - Remark: Generated from `#/paths//workflow-run-requested/post(workflow-run/requested)`.
    public func workflowRunRequested(
        headers: Operations.WorkflowRunRequested.Input.Headers = .init(),
        body: Operations.WorkflowRunRequested.Input.Body
    ) async throws -> Operations.WorkflowRunRequested.Output {
        try await workflowRunRequested(Operations.WorkflowRunRequested.Input(
            headers: headers,
            body: body
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public enum Server1 {
        public static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://api.github.com",
                variables: []
            )
        }
    }
    @available(*, deprecated, renamed: "Servers.Server1.url")
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.github.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// Simple User
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-simple-user`.
        public struct NullableSimpleUser: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/node_id`.
            public var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/avatar_url`.
            public var avatarUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gravatar_id`.
            public var gravatarId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/html_url`.
            public var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/followers_url`.
            public var followersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/following_url`.
            public var followingUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gists_url`.
            public var gistsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_url`.
            public var starredUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/subscriptions_url`.
            public var subscriptionsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/organizations_url`.
            public var organizationsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/repos_url`.
            public var reposUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/events_url`.
            public var eventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/received_events_url`.
            public var receivedEventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/site_admin`.
            public var siteAdmin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_at`.
            public var starredAt: Swift.String?
            /// Creates a new `NullableSimpleUser`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - nodeId:
            ///   - avatarUrl:
            ///   - gravatarId:
            ///   - url:
            ///   - htmlUrl:
            ///   - followersUrl:
            ///   - followingUrl:
            ///   - gistsUrl:
            ///   - starredUrl:
            ///   - subscriptionsUrl:
            ///   - organizationsUrl:
            ///   - reposUrl:
            ///   - eventsUrl:
            ///   - receivedEventsUrl:
            ///   - _type:
            ///   - siteAdmin:
            ///   - starredAt:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int,
                nodeId: Swift.String,
                avatarUrl: Swift.String,
                gravatarId: Swift.String? = nil,
                url: Swift.String,
                htmlUrl: Swift.String,
                followersUrl: Swift.String,
                followingUrl: Swift.String,
                gistsUrl: Swift.String,
                starredUrl: Swift.String,
                subscriptionsUrl: Swift.String,
                organizationsUrl: Swift.String,
                reposUrl: Swift.String,
                eventsUrl: Swift.String,
                receivedEventsUrl: Swift.String,
                _type: Swift.String,
                siteAdmin: Swift.Bool,
                starredAt: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.nodeId = nodeId
                self.avatarUrl = avatarUrl
                self.gravatarId = gravatarId
                self.url = url
                self.htmlUrl = htmlUrl
                self.followersUrl = followersUrl
                self.followingUrl = followingUrl
                self.gistsUrl = gistsUrl
                self.starredUrl = starredUrl
                self.subscriptionsUrl = subscriptionsUrl
                self.organizationsUrl = organizationsUrl
                self.reposUrl = reposUrl
                self.eventsUrl = eventsUrl
                self.receivedEventsUrl = receivedEventsUrl
                self._type = _type
                self.siteAdmin = siteAdmin
                self.starredAt = starredAt
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case nodeId = "node_id"
                case avatarUrl = "avatar_url"
                case gravatarId = "gravatar_id"
                case url
                case htmlUrl = "html_url"
                case followersUrl = "followers_url"
                case followingUrl = "following_url"
                case gistsUrl = "gists_url"
                case starredUrl = "starred_url"
                case subscriptionsUrl = "subscriptions_url"
                case organizationsUrl = "organizations_url"
                case reposUrl = "repos_url"
                case eventsUrl = "events_url"
                case receivedEventsUrl = "received_events_url"
                case _type = "type"
                case siteAdmin = "site_admin"
                case starredAt = "starred_at"
            }
        }
        /// Simple User
        ///
        /// - Remark: Generated from `#/components/schemas/simple-user`.
        public struct SimpleUser: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/simple-user/node_id`.
            public var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/avatar_url`.
            public var avatarUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gravatar_id`.
            public var gravatarId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/html_url`.
            public var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/followers_url`.
            public var followersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/following_url`.
            public var followingUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gists_url`.
            public var gistsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_url`.
            public var starredUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/subscriptions_url`.
            public var subscriptionsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/organizations_url`.
            public var organizationsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/repos_url`.
            public var reposUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/events_url`.
            public var eventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/received_events_url`.
            public var receivedEventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/site_admin`.
            public var siteAdmin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_at`.
            public var starredAt: Swift.String?
            /// Creates a new `SimpleUser`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - nodeId:
            ///   - avatarUrl:
            ///   - gravatarId:
            ///   - url:
            ///   - htmlUrl:
            ///   - followersUrl:
            ///   - followingUrl:
            ///   - gistsUrl:
            ///   - starredUrl:
            ///   - subscriptionsUrl:
            ///   - organizationsUrl:
            ///   - reposUrl:
            ///   - eventsUrl:
            ///   - receivedEventsUrl:
            ///   - _type:
            ///   - siteAdmin:
            ///   - starredAt:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int,
                nodeId: Swift.String,
                avatarUrl: Swift.String,
                gravatarId: Swift.String? = nil,
                url: Swift.String,
                htmlUrl: Swift.String,
                followersUrl: Swift.String,
                followingUrl: Swift.String,
                gistsUrl: Swift.String,
                starredUrl: Swift.String,
                subscriptionsUrl: Swift.String,
                organizationsUrl: Swift.String,
                reposUrl: Swift.String,
                eventsUrl: Swift.String,
                receivedEventsUrl: Swift.String,
                _type: Swift.String,
                siteAdmin: Swift.Bool,
                starredAt: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.nodeId = nodeId
                self.avatarUrl = avatarUrl
                self.gravatarId = gravatarId
                self.url = url
                self.htmlUrl = htmlUrl
                self.followersUrl = followersUrl
                self.followingUrl = followingUrl
                self.gistsUrl = gistsUrl
                self.starredUrl = starredUrl
                self.subscriptionsUrl = subscriptionsUrl
                self.organizationsUrl = organizationsUrl
                self.reposUrl = reposUrl
                self.eventsUrl = eventsUrl
                self.receivedEventsUrl = receivedEventsUrl
                self._type = _type
                self.siteAdmin = siteAdmin
                self.starredAt = starredAt
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case nodeId = "node_id"
                case avatarUrl = "avatar_url"
                case gravatarId = "gravatar_id"
                case url
                case htmlUrl = "html_url"
                case followersUrl = "followers_url"
                case followingUrl = "following_url"
                case gistsUrl = "gists_url"
                case starredUrl = "starred_url"
                case subscriptionsUrl = "subscriptions_url"
                case organizationsUrl = "organizations_url"
                case reposUrl = "repos_url"
                case eventsUrl = "events_url"
                case receivedEventsUrl = "received_events_url"
                case _type = "type"
                case siteAdmin = "site_admin"
                case starredAt = "starred_at"
            }
        }
        /// An enterprise account
        ///
        /// - Remark: Generated from `#/components/schemas/enterprise`.
        public struct Enterprise: Codable, Hashable, Sendable {
            /// A short description of the enterprise.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/enterprise/html_url`.
            public var htmlUrl: Swift.String
            /// The enterprise's website URL.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/website_url`.
            public var websiteUrl: Swift.String?
            /// Unique identifier of the enterprise
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/enterprise/node_id`.
            public var nodeId: Swift.String
            /// The name of the enterprise.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/name`.
            public var name: Swift.String
            /// The slug url identifier for the enterprise.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/slug`.
            public var slug: Swift.String
            /// - Remark: Generated from `#/components/schemas/enterprise/created_at`.
            public var createdAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/enterprise/updated_at`.
            public var updatedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/enterprise/avatar_url`.
            public var avatarUrl: Swift.String
            /// Creates a new `Enterprise`.
            ///
            /// - Parameters:
            ///   - description: A short description of the enterprise.
            ///   - htmlUrl:
            ///   - websiteUrl: The enterprise's website URL.
            ///   - id: Unique identifier of the enterprise
            ///   - nodeId:
            ///   - name: The name of the enterprise.
            ///   - slug: The slug url identifier for the enterprise.
            ///   - createdAt:
            ///   - updatedAt:
            ///   - avatarUrl:
            public init(
                description: Swift.String? = nil,
                htmlUrl: Swift.String,
                websiteUrl: Swift.String? = nil,
                id: Swift.Int,
                nodeId: Swift.String,
                name: Swift.String,
                slug: Swift.String,
                createdAt: Foundation.Date? = nil,
                updatedAt: Foundation.Date? = nil,
                avatarUrl: Swift.String
            ) {
                self.description = description
                self.htmlUrl = htmlUrl
                self.websiteUrl = websiteUrl
                self.id = id
                self.nodeId = nodeId
                self.name = name
                self.slug = slug
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.avatarUrl = avatarUrl
            }
            public enum CodingKeys: String, CodingKey {
                case description
                case htmlUrl = "html_url"
                case websiteUrl = "website_url"
                case id
                case nodeId = "node_id"
                case name
                case slug
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case avatarUrl = "avatar_url"
            }
        }
        /// License Simple
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-license-simple`.
        public struct NullableLicenseSimple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/spdx_id`.
            public var spdxId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/node_id`.
            public var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/html_url`.
            public var htmlUrl: Swift.String?
            /// Creates a new `NullableLicenseSimple`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - url:
            ///   - spdxId:
            ///   - nodeId:
            ///   - htmlUrl:
            public init(
                key: Swift.String,
                name: Swift.String,
                url: Swift.String? = nil,
                spdxId: Swift.String? = nil,
                nodeId: Swift.String,
                htmlUrl: Swift.String? = nil
            ) {
                self.key = key
                self.name = name
                self.url = url
                self.spdxId = spdxId
                self.nodeId = nodeId
                self.htmlUrl = htmlUrl
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case url
                case spdxId = "spdx_id"
                case nodeId = "node_id"
                case htmlUrl = "html_url"
            }
        }
        /// A git repository
        ///
        /// - Remark: Generated from `#/components/schemas/repository`.
        public struct Repository: Codable, Hashable, Sendable {
            /// Unique identifier of the repository
            ///
            /// - Remark: Generated from `#/components/schemas/repository/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/node_id`.
            public var nodeId: Swift.String
            /// The name of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/full_name`.
            public var fullName: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/license`.
            public var license: Components.Schemas.NullableLicenseSimple?
            /// - Remark: Generated from `#/components/schemas/repository/organization`.
            public var organization: Components.Schemas.NullableSimpleUser?
            /// - Remark: Generated from `#/components/schemas/repository/forks`.
            public var forks: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/permissions`.
            public struct PermissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository/permissions/admin`.
                public var admin: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/pull`.
                public var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// Creates a new `PermissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                public init(
                    admin: Swift.Bool,
                    pull: Swift.Bool,
                    triage: Swift.Bool? = nil,
                    push: Swift.Bool,
                    maintain: Swift.Bool? = nil
                ) {
                    self.admin = admin
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                }
                public enum CodingKeys: String, CodingKey {
                    case admin
                    case pull
                    case triage
                    case push
                    case maintain
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository/permissions`.
            public var permissions: Components.Schemas.Repository.PermissionsPayload?
            /// - Remark: Generated from `#/components/schemas/repository/owner`.
            public var owner: Components.Schemas.SimpleUser
            /// Whether the repository is private or public.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/private`.
            public var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/html_url`.
            public var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/fork`.
            public var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/archive_url`.
            public var archiveUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/assignees_url`.
            public var assigneesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/blobs_url`.
            public var blobsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/branches_url`.
            public var branchesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/collaborators_url`.
            public var collaboratorsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/comments_url`.
            public var commentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/commits_url`.
            public var commitsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/compare_url`.
            public var compareUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/contents_url`.
            public var contentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/contributors_url`.
            public var contributorsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/deployments_url`.
            public var deploymentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/downloads_url`.
            public var downloadsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/events_url`.
            public var eventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/forks_url`.
            public var forksUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_commits_url`.
            public var gitCommitsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_refs_url`.
            public var gitRefsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_tags_url`.
            public var gitTagsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_url`.
            public var gitUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issue_comment_url`.
            public var issueCommentUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issue_events_url`.
            public var issueEventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issues_url`.
            public var issuesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/keys_url`.
            public var keysUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/labels_url`.
            public var labelsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/languages_url`.
            public var languagesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/merges_url`.
            public var mergesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/milestones_url`.
            public var milestonesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/notifications_url`.
            public var notificationsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/pulls_url`.
            public var pullsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/releases_url`.
            public var releasesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/ssh_url`.
            public var sshUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/stargazers_url`.
            public var stargazersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/statuses_url`.
            public var statusesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/subscribers_url`.
            public var subscribersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/subscription_url`.
            public var subscriptionUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/tags_url`.
            public var tagsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/teams_url`.
            public var teamsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/trees_url`.
            public var treesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/clone_url`.
            public var cloneUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/mirror_url`.
            public var mirrorUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/hooks_url`.
            public var hooksUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/svn_url`.
            public var svnUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/homepage`.
            public var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/language`.
            public var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/forks_count`.
            public var forksCount: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/stargazers_count`.
            public var stargazersCount: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/watchers_count`.
            public var watchersCount: Swift.Int
            /// The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/size`.
            public var size: Swift.Int
            /// The default branch of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/default_branch`.
            public var defaultBranch: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/open_issues_count`.
            public var openIssuesCount: Swift.Int
            /// Whether this repository acts as a template that can be used to generate new repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/is_template`.
            public var isTemplate: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/topics`.
            public var topics: [Swift.String]?
            /// Whether issues are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_issues`.
            public var hasIssues: Swift.Bool
            /// Whether projects are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_projects`.
            public var hasProjects: Swift.Bool
            /// Whether the wiki is enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_wiki`.
            public var hasWiki: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/has_pages`.
            public var hasPages: Swift.Bool
            /// Whether downloads are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_downloads`.
            public var hasDownloads: Swift.Bool
            /// Whether the repository is archived.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/archived`.
            public var archived: Swift.Bool
            /// Returns whether or not this repository disabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/disabled`.
            public var disabled: Swift.Bool
            /// The repository visibility: public, private, or internal.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/visibility`.
            public var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/pushed_at`.
            public var pushedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/repository/created_at`.
            public var createdAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/repository/updated_at`.
            public var updatedAt: Foundation.Date?
            /// Whether to allow rebase merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_rebase_merge`.
            public var allowRebaseMerge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/template_repository`.
            public struct TemplateRepositoryPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/id`.
                public var id: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/node_id`.
                public var nodeId: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/full_name`.
                public var fullName: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner`.
                public struct OwnerPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/login`.
                    public var login: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/id`.
                    public var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/url`.
                    public var url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/type`.
                    public var _type: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// Creates a new `OwnerPayload`.
                    ///
                    /// - Parameters:
                    ///   - login:
                    ///   - id:
                    ///   - nodeId:
                    ///   - avatarUrl:
                    ///   - gravatarId:
                    ///   - url:
                    ///   - htmlUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - organizationsUrl:
                    ///   - reposUrl:
                    ///   - eventsUrl:
                    ///   - receivedEventsUrl:
                    ///   - _type:
                    ///   - siteAdmin:
                    public init(
                        login: Swift.String? = nil,
                        id: Swift.Int? = nil,
                        nodeId: Swift.String? = nil,
                        avatarUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        url: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        _type: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil
                    ) {
                        self.login = login
                        self.id = id
                        self.nodeId = nodeId
                        self.avatarUrl = avatarUrl
                        self.gravatarId = gravatarId
                        self.url = url
                        self.htmlUrl = htmlUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self.organizationsUrl = organizationsUrl
                        self.reposUrl = reposUrl
                        self.eventsUrl = eventsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self._type = _type
                        self.siteAdmin = siteAdmin
                    }
                    public enum CodingKeys: String, CodingKey {
                        case login
                        case id
                        case nodeId = "node_id"
                        case avatarUrl = "avatar_url"
                        case gravatarId = "gravatar_id"
                        case url
                        case htmlUrl = "html_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case organizationsUrl = "organizations_url"
                        case reposUrl = "repos_url"
                        case eventsUrl = "events_url"
                        case receivedEventsUrl = "received_events_url"
                        case _type = "type"
                        case siteAdmin = "site_admin"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner`.
                public var owner: Components.Schemas.Repository.TemplateRepositoryPayload.OwnerPayload?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/private`.
                public var _private: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/html_url`.
                public var htmlUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/description`.
                public var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/fork`.
                public var fork: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/url`.
                public var url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/archive_url`.
                public var archiveUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/assignees_url`.
                public var assigneesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/blobs_url`.
                public var blobsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/branches_url`.
                public var branchesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/collaborators_url`.
                public var collaboratorsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/comments_url`.
                public var commentsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/commits_url`.
                public var commitsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/compare_url`.
                public var compareUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/contents_url`.
                public var contentsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/contributors_url`.
                public var contributorsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/deployments_url`.
                public var deploymentsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/downloads_url`.
                public var downloadsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/events_url`.
                public var eventsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/forks_url`.
                public var forksUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/git_commits_url`.
                public var gitCommitsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/git_refs_url`.
                public var gitRefsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/git_tags_url`.
                public var gitTagsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/git_url`.
                public var gitUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/issue_comment_url`.
                public var issueCommentUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/issue_events_url`.
                public var issueEventsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/issues_url`.
                public var issuesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/keys_url`.
                public var keysUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/labels_url`.
                public var labelsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/languages_url`.
                public var languagesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merges_url`.
                public var mergesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/milestones_url`.
                public var milestonesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/notifications_url`.
                public var notificationsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/pulls_url`.
                public var pullsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/releases_url`.
                public var releasesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/ssh_url`.
                public var sshUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/stargazers_url`.
                public var stargazersUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/statuses_url`.
                public var statusesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/subscribers_url`.
                public var subscribersUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/subscription_url`.
                public var subscriptionUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/tags_url`.
                public var tagsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/teams_url`.
                public var teamsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/trees_url`.
                public var treesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/clone_url`.
                public var cloneUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/mirror_url`.
                public var mirrorUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/hooks_url`.
                public var hooksUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/svn_url`.
                public var svnUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/homepage`.
                public var homepage: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/language`.
                public var language: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/forks_count`.
                public var forksCount: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/stargazers_count`.
                public var stargazersCount: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/watchers_count`.
                public var watchersCount: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/size`.
                public var size: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/default_branch`.
                public var defaultBranch: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/open_issues_count`.
                public var openIssuesCount: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/is_template`.
                public var isTemplate: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/topics`.
                public var topics: [Swift.String]?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_issues`.
                public var hasIssues: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_projects`.
                public var hasProjects: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_wiki`.
                public var hasWiki: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_pages`.
                public var hasPages: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_downloads`.
                public var hasDownloads: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/archived`.
                public var archived: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/disabled`.
                public var disabled: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/visibility`.
                public var visibility: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/pushed_at`.
                public var pushedAt: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/created_at`.
                public var createdAt: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/updated_at`.
                public var updatedAt: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions`.
                public struct PermissionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/admin`.
                    public var admin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/maintain`.
                    public var maintain: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/push`.
                    public var push: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/triage`.
                    public var triage: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/pull`.
                    public var pull: Swift.Bool?
                    /// Creates a new `PermissionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - admin:
                    ///   - maintain:
                    ///   - push:
                    ///   - triage:
                    ///   - pull:
                    public init(
                        admin: Swift.Bool? = nil,
                        maintain: Swift.Bool? = nil,
                        push: Swift.Bool? = nil,
                        triage: Swift.Bool? = nil,
                        pull: Swift.Bool? = nil
                    ) {
                        self.admin = admin
                        self.maintain = maintain
                        self.push = push
                        self.triage = triage
                        self.pull = pull
                    }
                    public enum CodingKeys: String, CodingKey {
                        case admin
                        case maintain
                        case push
                        case triage
                        case pull
                    }
                }
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions`.
                public var permissions: Components.Schemas.Repository.TemplateRepositoryPayload.PermissionsPayload?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_rebase_merge`.
                public var allowRebaseMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/temp_clone_token`.
                public var tempCloneToken: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_squash_merge`.
                public var allowSquashMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_auto_merge`.
                public var allowAutoMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/delete_branch_on_merge`.
                public var deleteBranchOnMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_update_branch`.
                public var allowUpdateBranch: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/use_squash_pr_title_as_default`.
                public var useSquashPrTitleAsDefault: Swift.Bool?
                /// The default value for a squash merge commit title:
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/squash_merge_commit_title`.
                @frozen public enum SquashMergeCommitTitlePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case prTitle = "PR_TITLE"
                    case commitOrPrTitle = "COMMIT_OR_PR_TITLE"
                }
                /// The default value for a squash merge commit title:
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/squash_merge_commit_title`.
                public var squashMergeCommitTitle: Components.Schemas.Repository.TemplateRepositoryPayload.SquashMergeCommitTitlePayload?
                /// The default value for a squash merge commit message:
                ///
                /// - `PR_BODY` - default to the pull request's body.
                /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/squash_merge_commit_message`.
                @frozen public enum SquashMergeCommitMessagePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case prBody = "PR_BODY"
                    case commitMessages = "COMMIT_MESSAGES"
                    case blank = "BLANK"
                }
                /// The default value for a squash merge commit message:
                ///
                /// - `PR_BODY` - default to the pull request's body.
                /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/squash_merge_commit_message`.
                public var squashMergeCommitMessage: Components.Schemas.Repository.TemplateRepositoryPayload.SquashMergeCommitMessagePayload?
                /// The default value for a merge commit title.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merge_commit_title`.
                @frozen public enum MergeCommitTitlePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case prTitle = "PR_TITLE"
                    case mergeMessage = "MERGE_MESSAGE"
                }
                /// The default value for a merge commit title.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merge_commit_title`.
                public var mergeCommitTitle: Components.Schemas.Repository.TemplateRepositoryPayload.MergeCommitTitlePayload?
                /// The default value for a merge commit message.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `PR_BODY` - default to the pull request's body.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merge_commit_message`.
                @frozen public enum MergeCommitMessagePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case prBody = "PR_BODY"
                    case prTitle = "PR_TITLE"
                    case blank = "BLANK"
                }
                /// The default value for a merge commit message.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `PR_BODY` - default to the pull request's body.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merge_commit_message`.
                public var mergeCommitMessage: Components.Schemas.Repository.TemplateRepositoryPayload.MergeCommitMessagePayload?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_merge_commit`.
                public var allowMergeCommit: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/subscribers_count`.
                public var subscribersCount: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/network_count`.
                public var networkCount: Swift.Int?
                /// Creates a new `TemplateRepositoryPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - nodeId:
                ///   - name:
                ///   - fullName:
                ///   - owner:
                ///   - _private:
                ///   - htmlUrl:
                ///   - description:
                ///   - fork:
                ///   - url:
                ///   - archiveUrl:
                ///   - assigneesUrl:
                ///   - blobsUrl:
                ///   - branchesUrl:
                ///   - collaboratorsUrl:
                ///   - commentsUrl:
                ///   - commitsUrl:
                ///   - compareUrl:
                ///   - contentsUrl:
                ///   - contributorsUrl:
                ///   - deploymentsUrl:
                ///   - downloadsUrl:
                ///   - eventsUrl:
                ///   - forksUrl:
                ///   - gitCommitsUrl:
                ///   - gitRefsUrl:
                ///   - gitTagsUrl:
                ///   - gitUrl:
                ///   - issueCommentUrl:
                ///   - issueEventsUrl:
                ///   - issuesUrl:
                ///   - keysUrl:
                ///   - labelsUrl:
                ///   - languagesUrl:
                ///   - mergesUrl:
                ///   - milestonesUrl:
                ///   - notificationsUrl:
                ///   - pullsUrl:
                ///   - releasesUrl:
                ///   - sshUrl:
                ///   - stargazersUrl:
                ///   - statusesUrl:
                ///   - subscribersUrl:
                ///   - subscriptionUrl:
                ///   - tagsUrl:
                ///   - teamsUrl:
                ///   - treesUrl:
                ///   - cloneUrl:
                ///   - mirrorUrl:
                ///   - hooksUrl:
                ///   - svnUrl:
                ///   - homepage:
                ///   - language:
                ///   - forksCount:
                ///   - stargazersCount:
                ///   - watchersCount:
                ///   - size:
                ///   - defaultBranch:
                ///   - openIssuesCount:
                ///   - isTemplate:
                ///   - topics:
                ///   - hasIssues:
                ///   - hasProjects:
                ///   - hasWiki:
                ///   - hasPages:
                ///   - hasDownloads:
                ///   - archived:
                ///   - disabled:
                ///   - visibility:
                ///   - pushedAt:
                ///   - createdAt:
                ///   - updatedAt:
                ///   - permissions:
                ///   - allowRebaseMerge:
                ///   - tempCloneToken:
                ///   - allowSquashMerge:
                ///   - allowAutoMerge:
                ///   - deleteBranchOnMerge:
                ///   - allowUpdateBranch:
                ///   - useSquashPrTitleAsDefault:
                ///   - squashMergeCommitTitle: The default value for a squash merge commit title:
                ///   - squashMergeCommitMessage: The default value for a squash merge commit message:
                ///   - mergeCommitTitle: The default value for a merge commit title.
                ///   - mergeCommitMessage: The default value for a merge commit message.
                ///   - allowMergeCommit:
                ///   - subscribersCount:
                ///   - networkCount:
                public init(
                    id: Swift.Int? = nil,
                    nodeId: Swift.String? = nil,
                    name: Swift.String? = nil,
                    fullName: Swift.String? = nil,
                    owner: Components.Schemas.Repository.TemplateRepositoryPayload.OwnerPayload? = nil,
                    _private: Swift.Bool? = nil,
                    htmlUrl: Swift.String? = nil,
                    description: Swift.String? = nil,
                    fork: Swift.Bool? = nil,
                    url: Swift.String? = nil,
                    archiveUrl: Swift.String? = nil,
                    assigneesUrl: Swift.String? = nil,
                    blobsUrl: Swift.String? = nil,
                    branchesUrl: Swift.String? = nil,
                    collaboratorsUrl: Swift.String? = nil,
                    commentsUrl: Swift.String? = nil,
                    commitsUrl: Swift.String? = nil,
                    compareUrl: Swift.String? = nil,
                    contentsUrl: Swift.String? = nil,
                    contributorsUrl: Swift.String? = nil,
                    deploymentsUrl: Swift.String? = nil,
                    downloadsUrl: Swift.String? = nil,
                    eventsUrl: Swift.String? = nil,
                    forksUrl: Swift.String? = nil,
                    gitCommitsUrl: Swift.String? = nil,
                    gitRefsUrl: Swift.String? = nil,
                    gitTagsUrl: Swift.String? = nil,
                    gitUrl: Swift.String? = nil,
                    issueCommentUrl: Swift.String? = nil,
                    issueEventsUrl: Swift.String? = nil,
                    issuesUrl: Swift.String? = nil,
                    keysUrl: Swift.String? = nil,
                    labelsUrl: Swift.String? = nil,
                    languagesUrl: Swift.String? = nil,
                    mergesUrl: Swift.String? = nil,
                    milestonesUrl: Swift.String? = nil,
                    notificationsUrl: Swift.String? = nil,
                    pullsUrl: Swift.String? = nil,
                    releasesUrl: Swift.String? = nil,
                    sshUrl: Swift.String? = nil,
                    stargazersUrl: Swift.String? = nil,
                    statusesUrl: Swift.String? = nil,
                    subscribersUrl: Swift.String? = nil,
                    subscriptionUrl: Swift.String? = nil,
                    tagsUrl: Swift.String? = nil,
                    teamsUrl: Swift.String? = nil,
                    treesUrl: Swift.String? = nil,
                    cloneUrl: Swift.String? = nil,
                    mirrorUrl: Swift.String? = nil,
                    hooksUrl: Swift.String? = nil,
                    svnUrl: Swift.String? = nil,
                    homepage: Swift.String? = nil,
                    language: Swift.String? = nil,
                    forksCount: Swift.Int? = nil,
                    stargazersCount: Swift.Int? = nil,
                    watchersCount: Swift.Int? = nil,
                    size: Swift.Int? = nil,
                    defaultBranch: Swift.String? = nil,
                    openIssuesCount: Swift.Int? = nil,
                    isTemplate: Swift.Bool? = nil,
                    topics: [Swift.String]? = nil,
                    hasIssues: Swift.Bool? = nil,
                    hasProjects: Swift.Bool? = nil,
                    hasWiki: Swift.Bool? = nil,
                    hasPages: Swift.Bool? = nil,
                    hasDownloads: Swift.Bool? = nil,
                    archived: Swift.Bool? = nil,
                    disabled: Swift.Bool? = nil,
                    visibility: Swift.String? = nil,
                    pushedAt: Swift.String? = nil,
                    createdAt: Swift.String? = nil,
                    updatedAt: Swift.String? = nil,
                    permissions: Components.Schemas.Repository.TemplateRepositoryPayload.PermissionsPayload? = nil,
                    allowRebaseMerge: Swift.Bool? = nil,
                    tempCloneToken: Swift.String? = nil,
                    allowSquashMerge: Swift.Bool? = nil,
                    allowAutoMerge: Swift.Bool? = nil,
                    deleteBranchOnMerge: Swift.Bool? = nil,
                    allowUpdateBranch: Swift.Bool? = nil,
                    useSquashPrTitleAsDefault: Swift.Bool? = nil,
                    squashMergeCommitTitle: Components.Schemas.Repository.TemplateRepositoryPayload.SquashMergeCommitTitlePayload? = nil,
                    squashMergeCommitMessage: Components.Schemas.Repository.TemplateRepositoryPayload.SquashMergeCommitMessagePayload? = nil,
                    mergeCommitTitle: Components.Schemas.Repository.TemplateRepositoryPayload.MergeCommitTitlePayload? = nil,
                    mergeCommitMessage: Components.Schemas.Repository.TemplateRepositoryPayload.MergeCommitMessagePayload? = nil,
                    allowMergeCommit: Swift.Bool? = nil,
                    subscribersCount: Swift.Int? = nil,
                    networkCount: Swift.Int? = nil
                ) {
                    self.id = id
                    self.nodeId = nodeId
                    self.name = name
                    self.fullName = fullName
                    self.owner = owner
                    self._private = _private
                    self.htmlUrl = htmlUrl
                    self.description = description
                    self.fork = fork
                    self.url = url
                    self.archiveUrl = archiveUrl
                    self.assigneesUrl = assigneesUrl
                    self.blobsUrl = blobsUrl
                    self.branchesUrl = branchesUrl
                    self.collaboratorsUrl = collaboratorsUrl
                    self.commentsUrl = commentsUrl
                    self.commitsUrl = commitsUrl
                    self.compareUrl = compareUrl
                    self.contentsUrl = contentsUrl
                    self.contributorsUrl = contributorsUrl
                    self.deploymentsUrl = deploymentsUrl
                    self.downloadsUrl = downloadsUrl
                    self.eventsUrl = eventsUrl
                    self.forksUrl = forksUrl
                    self.gitCommitsUrl = gitCommitsUrl
                    self.gitRefsUrl = gitRefsUrl
                    self.gitTagsUrl = gitTagsUrl
                    self.gitUrl = gitUrl
                    self.issueCommentUrl = issueCommentUrl
                    self.issueEventsUrl = issueEventsUrl
                    self.issuesUrl = issuesUrl
                    self.keysUrl = keysUrl
                    self.labelsUrl = labelsUrl
                    self.languagesUrl = languagesUrl
                    self.mergesUrl = mergesUrl
                    self.milestonesUrl = milestonesUrl
                    self.notificationsUrl = notificationsUrl
                    self.pullsUrl = pullsUrl
                    self.releasesUrl = releasesUrl
                    self.sshUrl = sshUrl
                    self.stargazersUrl = stargazersUrl
                    self.statusesUrl = statusesUrl
                    self.subscribersUrl = subscribersUrl
                    self.subscriptionUrl = subscriptionUrl
                    self.tagsUrl = tagsUrl
                    self.teamsUrl = teamsUrl
                    self.treesUrl = treesUrl
                    self.cloneUrl = cloneUrl
                    self.mirrorUrl = mirrorUrl
                    self.hooksUrl = hooksUrl
                    self.svnUrl = svnUrl
                    self.homepage = homepage
                    self.language = language
                    self.forksCount = forksCount
                    self.stargazersCount = stargazersCount
                    self.watchersCount = watchersCount
                    self.size = size
                    self.defaultBranch = defaultBranch
                    self.openIssuesCount = openIssuesCount
                    self.isTemplate = isTemplate
                    self.topics = topics
                    self.hasIssues = hasIssues
                    self.hasProjects = hasProjects
                    self.hasWiki = hasWiki
                    self.hasPages = hasPages
                    self.hasDownloads = hasDownloads
                    self.archived = archived
                    self.disabled = disabled
                    self.visibility = visibility
                    self.pushedAt = pushedAt
                    self.createdAt = createdAt
                    self.updatedAt = updatedAt
                    self.permissions = permissions
                    self.allowRebaseMerge = allowRebaseMerge
                    self.tempCloneToken = tempCloneToken
                    self.allowSquashMerge = allowSquashMerge
                    self.allowAutoMerge = allowAutoMerge
                    self.deleteBranchOnMerge = deleteBranchOnMerge
                    self.allowUpdateBranch = allowUpdateBranch
                    self.useSquashPrTitleAsDefault = useSquashPrTitleAsDefault
                    self.squashMergeCommitTitle = squashMergeCommitTitle
                    self.squashMergeCommitMessage = squashMergeCommitMessage
                    self.mergeCommitTitle = mergeCommitTitle
                    self.mergeCommitMessage = mergeCommitMessage
                    self.allowMergeCommit = allowMergeCommit
                    self.subscribersCount = subscribersCount
                    self.networkCount = networkCount
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case nodeId = "node_id"
                    case name
                    case fullName = "full_name"
                    case owner
                    case _private = "private"
                    case htmlUrl = "html_url"
                    case description
                    case fork
                    case url
                    case archiveUrl = "archive_url"
                    case assigneesUrl = "assignees_url"
                    case blobsUrl = "blobs_url"
                    case branchesUrl = "branches_url"
                    case collaboratorsUrl = "collaborators_url"
                    case commentsUrl = "comments_url"
                    case commitsUrl = "commits_url"
                    case compareUrl = "compare_url"
                    case contentsUrl = "contents_url"
                    case contributorsUrl = "contributors_url"
                    case deploymentsUrl = "deployments_url"
                    case downloadsUrl = "downloads_url"
                    case eventsUrl = "events_url"
                    case forksUrl = "forks_url"
                    case gitCommitsUrl = "git_commits_url"
                    case gitRefsUrl = "git_refs_url"
                    case gitTagsUrl = "git_tags_url"
                    case gitUrl = "git_url"
                    case issueCommentUrl = "issue_comment_url"
                    case issueEventsUrl = "issue_events_url"
                    case issuesUrl = "issues_url"
                    case keysUrl = "keys_url"
                    case labelsUrl = "labels_url"
                    case languagesUrl = "languages_url"
                    case mergesUrl = "merges_url"
                    case milestonesUrl = "milestones_url"
                    case notificationsUrl = "notifications_url"
                    case pullsUrl = "pulls_url"
                    case releasesUrl = "releases_url"
                    case sshUrl = "ssh_url"
                    case stargazersUrl = "stargazers_url"
                    case statusesUrl = "statuses_url"
                    case subscribersUrl = "subscribers_url"
                    case subscriptionUrl = "subscription_url"
                    case tagsUrl = "tags_url"
                    case teamsUrl = "teams_url"
                    case treesUrl = "trees_url"
                    case cloneUrl = "clone_url"
                    case mirrorUrl = "mirror_url"
                    case hooksUrl = "hooks_url"
                    case svnUrl = "svn_url"
                    case homepage
                    case language
                    case forksCount = "forks_count"
                    case stargazersCount = "stargazers_count"
                    case watchersCount = "watchers_count"
                    case size
                    case defaultBranch = "default_branch"
                    case openIssuesCount = "open_issues_count"
                    case isTemplate = "is_template"
                    case topics
                    case hasIssues = "has_issues"
                    case hasProjects = "has_projects"
                    case hasWiki = "has_wiki"
                    case hasPages = "has_pages"
                    case hasDownloads = "has_downloads"
                    case archived
                    case disabled
                    case visibility
                    case pushedAt = "pushed_at"
                    case createdAt = "created_at"
                    case updatedAt = "updated_at"
                    case permissions
                    case allowRebaseMerge = "allow_rebase_merge"
                    case tempCloneToken = "temp_clone_token"
                    case allowSquashMerge = "allow_squash_merge"
                    case allowAutoMerge = "allow_auto_merge"
                    case deleteBranchOnMerge = "delete_branch_on_merge"
                    case allowUpdateBranch = "allow_update_branch"
                    case useSquashPrTitleAsDefault = "use_squash_pr_title_as_default"
                    case squashMergeCommitTitle = "squash_merge_commit_title"
                    case squashMergeCommitMessage = "squash_merge_commit_message"
                    case mergeCommitTitle = "merge_commit_title"
                    case mergeCommitMessage = "merge_commit_message"
                    case allowMergeCommit = "allow_merge_commit"
                    case subscribersCount = "subscribers_count"
                    case networkCount = "network_count"
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository/template_repository`.
            public var templateRepository: Components.Schemas.Repository.TemplateRepositoryPayload?
            /// - Remark: Generated from `#/components/schemas/repository/temp_clone_token`.
            public var tempCloneToken: Swift.String?
            /// Whether to allow squash merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_squash_merge`.
            public var allowSquashMerge: Swift.Bool?
            /// Whether to allow Auto-merge to be used on pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_auto_merge`.
            public var allowAutoMerge: Swift.Bool?
            /// Whether to delete head branches when pull requests are merged
            ///
            /// - Remark: Generated from `#/components/schemas/repository/delete_branch_on_merge`.
            public var deleteBranchOnMerge: Swift.Bool?
            /// Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_update_branch`.
            public var allowUpdateBranch: Swift.Bool?
            /// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/use_squash_pr_title_as_default`.
            @available(*, deprecated)
            public var useSquashPrTitleAsDefault: Swift.Bool?
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_title`.
            @frozen public enum SquashMergeCommitTitlePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case prTitle = "PR_TITLE"
                case commitOrPrTitle = "COMMIT_OR_PR_TITLE"
            }
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_title`.
            public var squashMergeCommitTitle: Components.Schemas.Repository.SquashMergeCommitTitlePayload?
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_message`.
            @frozen public enum SquashMergeCommitMessagePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case prBody = "PR_BODY"
                case commitMessages = "COMMIT_MESSAGES"
                case blank = "BLANK"
            }
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_message`.
            public var squashMergeCommitMessage: Components.Schemas.Repository.SquashMergeCommitMessagePayload?
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_title`.
            @frozen public enum MergeCommitTitlePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case prTitle = "PR_TITLE"
                case mergeMessage = "MERGE_MESSAGE"
            }
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_title`.
            public var mergeCommitTitle: Components.Schemas.Repository.MergeCommitTitlePayload?
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_message`.
            @frozen public enum MergeCommitMessagePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case prBody = "PR_BODY"
                case prTitle = "PR_TITLE"
                case blank = "BLANK"
            }
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_message`.
            public var mergeCommitMessage: Components.Schemas.Repository.MergeCommitMessagePayload?
            /// Whether to allow merge commits for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_merge_commit`.
            public var allowMergeCommit: Swift.Bool?
            /// Whether to allow forking this repo
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_forking`.
            public var allowForking: Swift.Bool?
            /// Whether to require contributors to sign off on web-based commits
            ///
            /// - Remark: Generated from `#/components/schemas/repository/web_commit_signoff_required`.
            public var webCommitSignoffRequired: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/subscribers_count`.
            public var subscribersCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/repository/network_count`.
            public var networkCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/repository/open_issues`.
            public var openIssues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/watchers`.
            public var watchers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/master_branch`.
            public var masterBranch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/starred_at`.
            public var starredAt: Swift.String?
            /// Whether anonymous git access is enabled for this repository
            ///
            /// - Remark: Generated from `#/components/schemas/repository/anonymous_access_enabled`.
            public var anonymousAccessEnabled: Swift.Bool?
            /// Creates a new `Repository`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the repository
            ///   - nodeId:
            ///   - name: The name of the repository.
            ///   - fullName:
            ///   - license:
            ///   - organization:
            ///   - forks:
            ///   - permissions:
            ///   - owner:
            ///   - _private: Whether the repository is private or public.
            ///   - htmlUrl:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archiveUrl:
            ///   - assigneesUrl:
            ///   - blobsUrl:
            ///   - branchesUrl:
            ///   - collaboratorsUrl:
            ///   - commentsUrl:
            ///   - commitsUrl:
            ///   - compareUrl:
            ///   - contentsUrl:
            ///   - contributorsUrl:
            ///   - deploymentsUrl:
            ///   - downloadsUrl:
            ///   - eventsUrl:
            ///   - forksUrl:
            ///   - gitCommitsUrl:
            ///   - gitRefsUrl:
            ///   - gitTagsUrl:
            ///   - gitUrl:
            ///   - issueCommentUrl:
            ///   - issueEventsUrl:
            ///   - issuesUrl:
            ///   - keysUrl:
            ///   - labelsUrl:
            ///   - languagesUrl:
            ///   - mergesUrl:
            ///   - milestonesUrl:
            ///   - notificationsUrl:
            ///   - pullsUrl:
            ///   - releasesUrl:
            ///   - sshUrl:
            ///   - stargazersUrl:
            ///   - statusesUrl:
            ///   - subscribersUrl:
            ///   - subscriptionUrl:
            ///   - tagsUrl:
            ///   - teamsUrl:
            ///   - treesUrl:
            ///   - cloneUrl:
            ///   - mirrorUrl:
            ///   - hooksUrl:
            ///   - svnUrl:
            ///   - homepage:
            ///   - language:
            ///   - forksCount:
            ///   - stargazersCount:
            ///   - watchersCount:
            ///   - size: The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - defaultBranch: The default branch of the repository.
            ///   - openIssuesCount:
            ///   - isTemplate: Whether this repository acts as a template that can be used to generate new repositories.
            ///   - topics:
            ///   - hasIssues: Whether issues are enabled.
            ///   - hasProjects: Whether projects are enabled.
            ///   - hasWiki: Whether the wiki is enabled.
            ///   - hasPages:
            ///   - hasDownloads: Whether downloads are enabled.
            ///   - archived: Whether the repository is archived.
            ///   - disabled: Returns whether or not this repository disabled.
            ///   - visibility: The repository visibility: public, private, or internal.
            ///   - pushedAt:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - allowRebaseMerge: Whether to allow rebase merges for pull requests.
            ///   - templateRepository:
            ///   - tempCloneToken:
            ///   - allowSquashMerge: Whether to allow squash merges for pull requests.
            ///   - allowAutoMerge: Whether to allow Auto-merge to be used on pull requests.
            ///   - deleteBranchOnMerge: Whether to delete head branches when pull requests are merged
            ///   - allowUpdateBranch: Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///   - useSquashPrTitleAsDefault: Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///   - squashMergeCommitTitle: The default value for a squash merge commit title:
            ///   - squashMergeCommitMessage: The default value for a squash merge commit message:
            ///   - mergeCommitTitle: The default value for a merge commit title.
            ///   - mergeCommitMessage: The default value for a merge commit message.
            ///   - allowMergeCommit: Whether to allow merge commits for pull requests.
            ///   - allowForking: Whether to allow forking this repo
            ///   - webCommitSignoffRequired: Whether to require contributors to sign off on web-based commits
            ///   - subscribersCount:
            ///   - networkCount:
            ///   - openIssues:
            ///   - watchers:
            ///   - masterBranch:
            ///   - starredAt:
            ///   - anonymousAccessEnabled: Whether anonymous git access is enabled for this repository
            public init(
                id: Swift.Int,
                nodeId: Swift.String,
                name: Swift.String,
                fullName: Swift.String,
                license: Components.Schemas.NullableLicenseSimple? = nil,
                organization: Components.Schemas.NullableSimpleUser? = nil,
                forks: Swift.Int,
                permissions: Components.Schemas.Repository.PermissionsPayload? = nil,
                owner: Components.Schemas.SimpleUser,
                _private: Swift.Bool,
                htmlUrl: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archiveUrl: Swift.String,
                assigneesUrl: Swift.String,
                blobsUrl: Swift.String,
                branchesUrl: Swift.String,
                collaboratorsUrl: Swift.String,
                commentsUrl: Swift.String,
                commitsUrl: Swift.String,
                compareUrl: Swift.String,
                contentsUrl: Swift.String,
                contributorsUrl: Swift.String,
                deploymentsUrl: Swift.String,
                downloadsUrl: Swift.String,
                eventsUrl: Swift.String,
                forksUrl: Swift.String,
                gitCommitsUrl: Swift.String,
                gitRefsUrl: Swift.String,
                gitTagsUrl: Swift.String,
                gitUrl: Swift.String,
                issueCommentUrl: Swift.String,
                issueEventsUrl: Swift.String,
                issuesUrl: Swift.String,
                keysUrl: Swift.String,
                labelsUrl: Swift.String,
                languagesUrl: Swift.String,
                mergesUrl: Swift.String,
                milestonesUrl: Swift.String,
                notificationsUrl: Swift.String,
                pullsUrl: Swift.String,
                releasesUrl: Swift.String,
                sshUrl: Swift.String,
                stargazersUrl: Swift.String,
                statusesUrl: Swift.String,
                subscribersUrl: Swift.String,
                subscriptionUrl: Swift.String,
                tagsUrl: Swift.String,
                teamsUrl: Swift.String,
                treesUrl: Swift.String,
                cloneUrl: Swift.String,
                mirrorUrl: Swift.String? = nil,
                hooksUrl: Swift.String,
                svnUrl: Swift.String,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forksCount: Swift.Int,
                stargazersCount: Swift.Int,
                watchersCount: Swift.Int,
                size: Swift.Int,
                defaultBranch: Swift.String,
                openIssuesCount: Swift.Int,
                isTemplate: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                hasIssues: Swift.Bool,
                hasProjects: Swift.Bool,
                hasWiki: Swift.Bool,
                hasPages: Swift.Bool,
                hasDownloads: Swift.Bool,
                archived: Swift.Bool,
                disabled: Swift.Bool,
                visibility: Swift.String? = nil,
                pushedAt: Foundation.Date? = nil,
                createdAt: Foundation.Date? = nil,
                updatedAt: Foundation.Date? = nil,
                allowRebaseMerge: Swift.Bool? = nil,
                templateRepository: Components.Schemas.Repository.TemplateRepositoryPayload? = nil,
                tempCloneToken: Swift.String? = nil,
                allowSquashMerge: Swift.Bool? = nil,
                allowAutoMerge: Swift.Bool? = nil,
                deleteBranchOnMerge: Swift.Bool? = nil,
                allowUpdateBranch: Swift.Bool? = nil,
                useSquashPrTitleAsDefault: Swift.Bool? = nil,
                squashMergeCommitTitle: Components.Schemas.Repository.SquashMergeCommitTitlePayload? = nil,
                squashMergeCommitMessage: Components.Schemas.Repository.SquashMergeCommitMessagePayload? = nil,
                mergeCommitTitle: Components.Schemas.Repository.MergeCommitTitlePayload? = nil,
                mergeCommitMessage: Components.Schemas.Repository.MergeCommitMessagePayload? = nil,
                allowMergeCommit: Swift.Bool? = nil,
                allowForking: Swift.Bool? = nil,
                webCommitSignoffRequired: Swift.Bool? = nil,
                subscribersCount: Swift.Int? = nil,
                networkCount: Swift.Int? = nil,
                openIssues: Swift.Int,
                watchers: Swift.Int,
                masterBranch: Swift.String? = nil,
                starredAt: Swift.String? = nil,
                anonymousAccessEnabled: Swift.Bool? = nil
            ) {
                self.id = id
                self.nodeId = nodeId
                self.name = name
                self.fullName = fullName
                self.license = license
                self.organization = organization
                self.forks = forks
                self.permissions = permissions
                self.owner = owner
                self._private = _private
                self.htmlUrl = htmlUrl
                self.description = description
                self.fork = fork
                self.url = url
                self.archiveUrl = archiveUrl
                self.assigneesUrl = assigneesUrl
                self.blobsUrl = blobsUrl
                self.branchesUrl = branchesUrl
                self.collaboratorsUrl = collaboratorsUrl
                self.commentsUrl = commentsUrl
                self.commitsUrl = commitsUrl
                self.compareUrl = compareUrl
                self.contentsUrl = contentsUrl
                self.contributorsUrl = contributorsUrl
                self.deploymentsUrl = deploymentsUrl
                self.downloadsUrl = downloadsUrl
                self.eventsUrl = eventsUrl
                self.forksUrl = forksUrl
                self.gitCommitsUrl = gitCommitsUrl
                self.gitRefsUrl = gitRefsUrl
                self.gitTagsUrl = gitTagsUrl
                self.gitUrl = gitUrl
                self.issueCommentUrl = issueCommentUrl
                self.issueEventsUrl = issueEventsUrl
                self.issuesUrl = issuesUrl
                self.keysUrl = keysUrl
                self.labelsUrl = labelsUrl
                self.languagesUrl = languagesUrl
                self.mergesUrl = mergesUrl
                self.milestonesUrl = milestonesUrl
                self.notificationsUrl = notificationsUrl
                self.pullsUrl = pullsUrl
                self.releasesUrl = releasesUrl
                self.sshUrl = sshUrl
                self.stargazersUrl = stargazersUrl
                self.statusesUrl = statusesUrl
                self.subscribersUrl = subscribersUrl
                self.subscriptionUrl = subscriptionUrl
                self.tagsUrl = tagsUrl
                self.teamsUrl = teamsUrl
                self.treesUrl = treesUrl
                self.cloneUrl = cloneUrl
                self.mirrorUrl = mirrorUrl
                self.hooksUrl = hooksUrl
                self.svnUrl = svnUrl
                self.homepage = homepage
                self.language = language
                self.forksCount = forksCount
                self.stargazersCount = stargazersCount
                self.watchersCount = watchersCount
                self.size = size
                self.defaultBranch = defaultBranch
                self.openIssuesCount = openIssuesCount
                self.isTemplate = isTemplate
                self.topics = topics
                self.hasIssues = hasIssues
                self.hasProjects = hasProjects
                self.hasWiki = hasWiki
                self.hasPages = hasPages
                self.hasDownloads = hasDownloads
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushedAt = pushedAt
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.allowRebaseMerge = allowRebaseMerge
                self.templateRepository = templateRepository
                self.tempCloneToken = tempCloneToken
                self.allowSquashMerge = allowSquashMerge
                self.allowAutoMerge = allowAutoMerge
                self.deleteBranchOnMerge = deleteBranchOnMerge
                self.allowUpdateBranch = allowUpdateBranch
                self.useSquashPrTitleAsDefault = useSquashPrTitleAsDefault
                self.squashMergeCommitTitle = squashMergeCommitTitle
                self.squashMergeCommitMessage = squashMergeCommitMessage
                self.mergeCommitTitle = mergeCommitTitle
                self.mergeCommitMessage = mergeCommitMessage
                self.allowMergeCommit = allowMergeCommit
                self.allowForking = allowForking
                self.webCommitSignoffRequired = webCommitSignoffRequired
                self.subscribersCount = subscribersCount
                self.networkCount = networkCount
                self.openIssues = openIssues
                self.watchers = watchers
                self.masterBranch = masterBranch
                self.starredAt = starredAt
                self.anonymousAccessEnabled = anonymousAccessEnabled
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case name
                case fullName = "full_name"
                case license
                case organization
                case forks
                case permissions
                case owner
                case _private = "private"
                case htmlUrl = "html_url"
                case description
                case fork
                case url
                case archiveUrl = "archive_url"
                case assigneesUrl = "assignees_url"
                case blobsUrl = "blobs_url"
                case branchesUrl = "branches_url"
                case collaboratorsUrl = "collaborators_url"
                case commentsUrl = "comments_url"
                case commitsUrl = "commits_url"
                case compareUrl = "compare_url"
                case contentsUrl = "contents_url"
                case contributorsUrl = "contributors_url"
                case deploymentsUrl = "deployments_url"
                case downloadsUrl = "downloads_url"
                case eventsUrl = "events_url"
                case forksUrl = "forks_url"
                case gitCommitsUrl = "git_commits_url"
                case gitRefsUrl = "git_refs_url"
                case gitTagsUrl = "git_tags_url"
                case gitUrl = "git_url"
                case issueCommentUrl = "issue_comment_url"
                case issueEventsUrl = "issue_events_url"
                case issuesUrl = "issues_url"
                case keysUrl = "keys_url"
                case labelsUrl = "labels_url"
                case languagesUrl = "languages_url"
                case mergesUrl = "merges_url"
                case milestonesUrl = "milestones_url"
                case notificationsUrl = "notifications_url"
                case pullsUrl = "pulls_url"
                case releasesUrl = "releases_url"
                case sshUrl = "ssh_url"
                case stargazersUrl = "stargazers_url"
                case statusesUrl = "statuses_url"
                case subscribersUrl = "subscribers_url"
                case subscriptionUrl = "subscription_url"
                case tagsUrl = "tags_url"
                case teamsUrl = "teams_url"
                case treesUrl = "trees_url"
                case cloneUrl = "clone_url"
                case mirrorUrl = "mirror_url"
                case hooksUrl = "hooks_url"
                case svnUrl = "svn_url"
                case homepage
                case language
                case forksCount = "forks_count"
                case stargazersCount = "stargazers_count"
                case watchersCount = "watchers_count"
                case size
                case defaultBranch = "default_branch"
                case openIssuesCount = "open_issues_count"
                case isTemplate = "is_template"
                case topics
                case hasIssues = "has_issues"
                case hasProjects = "has_projects"
                case hasWiki = "has_wiki"
                case hasPages = "has_pages"
                case hasDownloads = "has_downloads"
                case archived
                case disabled
                case visibility
                case pushedAt = "pushed_at"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case allowRebaseMerge = "allow_rebase_merge"
                case templateRepository = "template_repository"
                case tempCloneToken = "temp_clone_token"
                case allowSquashMerge = "allow_squash_merge"
                case allowAutoMerge = "allow_auto_merge"
                case deleteBranchOnMerge = "delete_branch_on_merge"
                case allowUpdateBranch = "allow_update_branch"
                case useSquashPrTitleAsDefault = "use_squash_pr_title_as_default"
                case squashMergeCommitTitle = "squash_merge_commit_title"
                case squashMergeCommitMessage = "squash_merge_commit_message"
                case mergeCommitTitle = "merge_commit_title"
                case mergeCommitMessage = "merge_commit_message"
                case allowMergeCommit = "allow_merge_commit"
                case allowForking = "allow_forking"
                case webCommitSignoffRequired = "web_commit_signoff_required"
                case subscribersCount = "subscribers_count"
                case networkCount = "network_count"
                case openIssues = "open_issues"
                case watchers
                case masterBranch = "master_branch"
                case starredAt = "starred_at"
                case anonymousAccessEnabled = "anonymous_access_enabled"
            }
        }
        /// Organization Simple
        ///
        /// - Remark: Generated from `#/components/schemas/organization-simple`.
        public struct OrganizationSimple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/organization-simple/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization-simple/node_id`.
            public var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/repos_url`.
            public var reposUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/events_url`.
            public var eventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/hooks_url`.
            public var hooksUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/issues_url`.
            public var issuesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/members_url`.
            public var membersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/public_members_url`.
            public var publicMembersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/avatar_url`.
            public var avatarUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/description`.
            public var description: Swift.String?
            /// Creates a new `OrganizationSimple`.
            ///
            /// - Parameters:
            ///   - login:
            ///   - id:
            ///   - nodeId:
            ///   - url:
            ///   - reposUrl:
            ///   - eventsUrl:
            ///   - hooksUrl:
            ///   - issuesUrl:
            ///   - membersUrl:
            ///   - publicMembersUrl:
            ///   - avatarUrl:
            ///   - description:
            public init(
                login: Swift.String,
                id: Swift.Int,
                nodeId: Swift.String,
                url: Swift.String,
                reposUrl: Swift.String,
                eventsUrl: Swift.String,
                hooksUrl: Swift.String,
                issuesUrl: Swift.String,
                membersUrl: Swift.String,
                publicMembersUrl: Swift.String,
                avatarUrl: Swift.String,
                description: Swift.String? = nil
            ) {
                self.login = login
                self.id = id
                self.nodeId = nodeId
                self.url = url
                self.reposUrl = reposUrl
                self.eventsUrl = eventsUrl
                self.hooksUrl = hooksUrl
                self.issuesUrl = issuesUrl
                self.membersUrl = membersUrl
                self.publicMembersUrl = publicMembersUrl
                self.avatarUrl = avatarUrl
                self.description = description
            }
            public enum CodingKeys: String, CodingKey {
                case login
                case id
                case nodeId = "node_id"
                case url
                case reposUrl = "repos_url"
                case eventsUrl = "events_url"
                case hooksUrl = "hooks_url"
                case issuesUrl = "issues_url"
                case membersUrl = "members_url"
                case publicMembersUrl = "public_members_url"
                case avatarUrl = "avatar_url"
                case description
            }
        }
        /// Simple Installation
        ///
        /// - Remark: Generated from `#/components/schemas/simple-installation`.
        public struct SimpleInstallation: Codable, Hashable, Sendable {
            /// The ID of the installation.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-installation/id`.
            public var id: Swift.Int
            /// The global node ID of the installation.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-installation/node_id`.
            public var nodeId: Swift.String
            /// Creates a new `SimpleInstallation`.
            ///
            /// - Parameters:
            ///   - id: The ID of the installation.
            ///   - nodeId: The global node ID of the installation.
            public init(
                id: Swift.Int,
                nodeId: Swift.String
            ) {
                self.id = id
                self.nodeId = nodeId
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-workflow-dispatch`.
        public struct WebhookWorkflowDispatch: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-dispatch/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-dispatch/inputs`.
            public struct InputsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-dispatch/inputs/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-dispatch/inputs/number`.
                public var number: Swift.String?
                /// Creates a new `InputsPayload`.
                ///
                /// - Parameters:
                ///   - name:
                ///   - number:
                public init(
                    name: Swift.String? = nil,
                    number: Swift.String? = nil
                ) {
                    self.name = name
                    self.number = number
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case number
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-dispatch/inputs`.
            public var inputs: Components.Schemas.WebhookWorkflowDispatch.InputsPayload?
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-dispatch/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-dispatch/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-dispatch/ref`.
            public var ref: Swift.String
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-dispatch/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-dispatch/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-dispatch/workflow`.
            public var workflow: Swift.String
            /// Creates a new `WebhookWorkflowDispatch`.
            ///
            /// - Parameters:
            ///   - enterprise:
            ///   - inputs:
            ///   - installation:
            ///   - organization:
            ///   - ref:
            ///   - repository:
            ///   - sender:
            ///   - workflow:
            public init(
                enterprise: Components.Schemas.Enterprise? = nil,
                inputs: Components.Schemas.WebhookWorkflowDispatch.InputsPayload? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                organization: Components.Schemas.OrganizationSimple? = nil,
                ref: Swift.String,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser,
                workflow: Swift.String
            ) {
                self.enterprise = enterprise
                self.inputs = inputs
                self.installation = installation
                self.organization = organization
                self.ref = ref
                self.repository = repository
                self.sender = sender
                self.workflow = workflow
            }
            public enum CodingKeys: String, CodingKey {
                case enterprise
                case inputs
                case installation
                case organization
                case ref
                case repository
                case sender
                case workflow
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed`.
        public struct WebhookWorkflowJobCompleted: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case completed = "completed"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/action`.
            public var action: Components.Schemas.WebhookWorkflowJobCompleted.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job`.
            public struct WorkflowJobPayload: Codable, Hashable, Sendable {
                /// The workflow job. Many `workflow_job` keys, such as `head_sha`, `conclusion`, and `started_at` are the same as those in a [`check_run`](#check_run) object.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value1/check_run_url`.
                    public var checkRunUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value1/completed_at`.
                    public var completedAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value1/conclusion`.
                    @frozen public enum ConclusionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case success = "success"
                        case failure = "failure"
                        case _empty_ = ""
                        case skipped = "skipped"
                        case cancelled = "cancelled"
                        case actionRequired = "action_required"
                        case neutral = "neutral"
                        case timedOut = "timed_out"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value1/conclusion`.
                    public var conclusion: Components.Schemas.WebhookWorkflowJobCompleted.WorkflowJobPayload.Value1Payload.ConclusionPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value1/head_sha`.
                    public var headSha: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value1/html_url`.
                    public var htmlUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value1/id`.
                    public var id: Swift.Int
                    /// Custom labels for the job. Specified by the [`"runs-on"` attribute](https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on) in the workflow YAML.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value1/labels`.
                    public var labels: [Swift.String]
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value1/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value1/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value1/run_attempt`.
                    public var runAttempt: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value1/run_id`.
                    public var runId: Swift.Double
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value1/run_url`.
                    public var runUrl: Swift.String
                    /// The ID of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value1/runner_group_id`.
                    public var runnerGroupId: Swift.Int?
                    /// The name of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value1/runner_group_name`.
                    public var runnerGroupName: Swift.String?
                    /// The ID of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value1/runner_id`.
                    public var runnerId: Swift.Int?
                    /// The name of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value1/runner_name`.
                    public var runnerName: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value1/started_at`.
                    public var startedAt: Swift.String
                    /// The current status of the job. Can be `queued`, `in_progress`, or `completed`.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value1/status`.
                    @frozen public enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case queued = "queued"
                        case inProgress = "in_progress"
                        case completed = "completed"
                        case waiting = "waiting"
                    }
                    /// The current status of the job. Can be `queued`, `in_progress`, or `completed`.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value1/status`.
                    public var status: Components.Schemas.WebhookWorkflowJobCompleted.WorkflowJobPayload.Value1Payload.StatusPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value1/StepsPayload`.
                    public struct StepsPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value1/StepsPayload/completed_at`.
                        public var completedAt: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value1/StepsPayload/conclusion`.
                        @frozen public enum ConclusionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case failure = "failure"
                            case skipped = "skipped"
                            case success = "success"
                            case cancelled = "cancelled"
                            case _empty_ = ""
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value1/StepsPayload/conclusion`.
                        public var conclusion: Components.Schemas.WebhookWorkflowJobCompleted.WorkflowJobPayload.Value1Payload.StepsPayloadPayload.ConclusionPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value1/StepsPayload/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value1/StepsPayload/number`.
                        public var number: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value1/StepsPayload/started_at`.
                        public var startedAt: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value1/StepsPayload/status`.
                        @frozen public enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case inProgress = "in_progress"
                            case completed = "completed"
                            case queued = "queued"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value1/StepsPayload/status`.
                        public var status: Components.Schemas.WebhookWorkflowJobCompleted.WorkflowJobPayload.Value1Payload.StepsPayloadPayload.StatusPayload
                        /// Creates a new `StepsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - completedAt:
                        ///   - conclusion:
                        ///   - name:
                        ///   - number:
                        ///   - startedAt:
                        ///   - status:
                        public init(
                            completedAt: Swift.String? = nil,
                            conclusion: Components.Schemas.WebhookWorkflowJobCompleted.WorkflowJobPayload.Value1Payload.StepsPayloadPayload.ConclusionPayload? = nil,
                            name: Swift.String,
                            number: Swift.Int,
                            startedAt: Swift.String? = nil,
                            status: Components.Schemas.WebhookWorkflowJobCompleted.WorkflowJobPayload.Value1Payload.StepsPayloadPayload.StatusPayload
                        ) {
                            self.completedAt = completedAt
                            self.conclusion = conclusion
                            self.name = name
                            self.number = number
                            self.startedAt = startedAt
                            self.status = status
                        }
                        public enum CodingKeys: String, CodingKey {
                            case completedAt = "completed_at"
                            case conclusion
                            case name
                            case number
                            case startedAt = "started_at"
                            case status
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value1/steps`.
                    public typealias StepsPayload = [Components.Schemas.WebhookWorkflowJobCompleted.WorkflowJobPayload.Value1Payload.StepsPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value1/steps`.
                    public var steps: Components.Schemas.WebhookWorkflowJobCompleted.WorkflowJobPayload.Value1Payload.StepsPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value1/url`.
                    public var url: Swift.String
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - checkRunUrl:
                    ///   - completedAt:
                    ///   - conclusion:
                    ///   - headSha:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - labels: Custom labels for the job. Specified by the [`"runs-on"` attribute](https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on) in the workflow YAML.
                    ///   - name:
                    ///   - nodeId:
                    ///   - runAttempt:
                    ///   - runId:
                    ///   - runUrl:
                    ///   - runnerGroupId: The ID of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
                    ///   - runnerGroupName: The name of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
                    ///   - runnerId: The ID of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
                    ///   - runnerName: The name of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
                    ///   - startedAt:
                    ///   - status: The current status of the job. Can be `queued`, `in_progress`, or `completed`.
                    ///   - steps:
                    ///   - url:
                    public init(
                        checkRunUrl: Swift.String,
                        completedAt: Swift.String? = nil,
                        conclusion: Components.Schemas.WebhookWorkflowJobCompleted.WorkflowJobPayload.Value1Payload.ConclusionPayload? = nil,
                        headSha: Swift.String,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        labels: [Swift.String],
                        name: Swift.String,
                        nodeId: Swift.String,
                        runAttempt: Swift.Int,
                        runId: Swift.Double,
                        runUrl: Swift.String,
                        runnerGroupId: Swift.Int? = nil,
                        runnerGroupName: Swift.String? = nil,
                        runnerId: Swift.Int? = nil,
                        runnerName: Swift.String? = nil,
                        startedAt: Swift.String,
                        status: Components.Schemas.WebhookWorkflowJobCompleted.WorkflowJobPayload.Value1Payload.StatusPayload,
                        steps: Components.Schemas.WebhookWorkflowJobCompleted.WorkflowJobPayload.Value1Payload.StepsPayload,
                        url: Swift.String
                    ) {
                        self.checkRunUrl = checkRunUrl
                        self.completedAt = completedAt
                        self.conclusion = conclusion
                        self.headSha = headSha
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.labels = labels
                        self.name = name
                        self.nodeId = nodeId
                        self.runAttempt = runAttempt
                        self.runId = runId
                        self.runUrl = runUrl
                        self.runnerGroupId = runnerGroupId
                        self.runnerGroupName = runnerGroupName
                        self.runnerId = runnerId
                        self.runnerName = runnerName
                        self.startedAt = startedAt
                        self.status = status
                        self.steps = steps
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case checkRunUrl = "check_run_url"
                        case completedAt = "completed_at"
                        case conclusion
                        case headSha = "head_sha"
                        case htmlUrl = "html_url"
                        case id
                        case labels
                        case name
                        case nodeId = "node_id"
                        case runAttempt = "run_attempt"
                        case runId = "run_id"
                        case runUrl = "run_url"
                        case runnerGroupId = "runner_group_id"
                        case runnerGroupName = "runner_group_name"
                        case runnerId = "runner_id"
                        case runnerName = "runner_name"
                        case startedAt = "started_at"
                        case status
                        case steps
                        case url
                    }
                }
                /// The workflow job. Many `workflow_job` keys, such as `head_sha`, `conclusion`, and `started_at` are the same as those in a [`check_run`](#check_run) object.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value1`.
                public var value1: Components.Schemas.WebhookWorkflowJobCompleted.WorkflowJobPayload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value2/check_run_url`.
                    public var checkRunUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value2/completed_at`.
                    public var completedAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value2/conclusion`.
                    @frozen public enum ConclusionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case success = "success"
                        case failure = "failure"
                        case skipped = "skipped"
                        case cancelled = "cancelled"
                        case actionRequired = "action_required"
                        case neutral = "neutral"
                        case timedOut = "timed_out"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value2/conclusion`.
                    public var conclusion: Components.Schemas.WebhookWorkflowJobCompleted.WorkflowJobPayload.Value2Payload.ConclusionPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value2/head_sha`.
                    public var headSha: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value2/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value2/id`.
                    public var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value2/labels`.
                    public var labels: [Swift.String?]?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value2/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value2/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value2/run_attempt`.
                    public var runAttempt: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value2/run_id`.
                    public var runId: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value2/run_url`.
                    public var runUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value2/runner_group_id`.
                    public var runnerGroupId: Swift.Double?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value2/runner_group_name`.
                    public var runnerGroupName: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value2/runner_id`.
                    public var runnerId: Swift.Double?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value2/runner_name`.
                    public var runnerName: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value2/started_at`.
                    public var startedAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value2/status`.
                    public var status: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value2/steps`.
                    public var steps: [OpenAPIRuntime.OpenAPIObjectContainer?]?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value2/url`.
                    public var url: Swift.String?
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - checkRunUrl:
                    ///   - completedAt:
                    ///   - conclusion:
                    ///   - headSha:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - labels:
                    ///   - name:
                    ///   - nodeId:
                    ///   - runAttempt:
                    ///   - runId:
                    ///   - runUrl:
                    ///   - runnerGroupId:
                    ///   - runnerGroupName:
                    ///   - runnerId:
                    ///   - runnerName:
                    ///   - startedAt:
                    ///   - status:
                    ///   - steps:
                    ///   - url:
                    public init(
                        checkRunUrl: Swift.String? = nil,
                        completedAt: Swift.String? = nil,
                        conclusion: Components.Schemas.WebhookWorkflowJobCompleted.WorkflowJobPayload.Value2Payload.ConclusionPayload,
                        headSha: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int? = nil,
                        labels: [Swift.String?]? = nil,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        runAttempt: Swift.Int? = nil,
                        runId: Swift.Int? = nil,
                        runUrl: Swift.String? = nil,
                        runnerGroupId: Swift.Double? = nil,
                        runnerGroupName: Swift.String? = nil,
                        runnerId: Swift.Double? = nil,
                        runnerName: Swift.String? = nil,
                        startedAt: Swift.String? = nil,
                        status: Swift.String? = nil,
                        steps: [OpenAPIRuntime.OpenAPIObjectContainer?]? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.checkRunUrl = checkRunUrl
                        self.completedAt = completedAt
                        self.conclusion = conclusion
                        self.headSha = headSha
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.labels = labels
                        self.name = name
                        self.nodeId = nodeId
                        self.runAttempt = runAttempt
                        self.runId = runId
                        self.runUrl = runUrl
                        self.runnerGroupId = runnerGroupId
                        self.runnerGroupName = runnerGroupName
                        self.runnerId = runnerId
                        self.runnerName = runnerName
                        self.startedAt = startedAt
                        self.status = status
                        self.steps = steps
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case checkRunUrl = "check_run_url"
                        case completedAt = "completed_at"
                        case conclusion
                        case headSha = "head_sha"
                        case htmlUrl = "html_url"
                        case id
                        case labels
                        case name
                        case nodeId = "node_id"
                        case runAttempt = "run_attempt"
                        case runId = "run_id"
                        case runUrl = "run_url"
                        case runnerGroupId = "runner_group_id"
                        case runnerGroupName = "runner_group_name"
                        case runnerId = "runner_id"
                        case runnerName = "runner_name"
                        case startedAt = "started_at"
                        case status
                        case steps
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job/value2`.
                public var value2: Components.Schemas.WebhookWorkflowJobCompleted.WorkflowJobPayload.Value2Payload
                /// Creates a new `WorkflowJobPayload`.
                ///
                /// - Parameters:
                ///   - value1: The workflow job. Many `workflow_job` keys, such as `head_sha`, `conclusion`, and `started_at` are the same as those in a [`check_run`](#check_run) object.
                ///   - value2:
                public init(
                    value1: Components.Schemas.WebhookWorkflowJobCompleted.WorkflowJobPayload.Value1Payload,
                    value2: Components.Schemas.WebhookWorkflowJobCompleted.WorkflowJobPayload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-completed/workflow_job`.
            public var workflowJob: Components.Schemas.WebhookWorkflowJobCompleted.WorkflowJobPayload
            /// Creates a new `WebhookWorkflowJobCompleted`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - enterprise:
            ///   - installation:
            ///   - organization:
            ///   - repository:
            ///   - sender:
            ///   - workflowJob:
            public init(
                action: Components.Schemas.WebhookWorkflowJobCompleted.ActionPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser,
                workflowJob: Components.Schemas.WebhookWorkflowJobCompleted.WorkflowJobPayload
            ) {
                self.action = action
                self.enterprise = enterprise
                self.installation = installation
                self.organization = organization
                self.repository = repository
                self.sender = sender
                self.workflowJob = workflowJob
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case enterprise
                case installation
                case organization
                case repository
                case sender
                case workflowJob = "workflow_job"
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress`.
        public struct WebhookWorkflowJobInProgress: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case inProgress = "in_progress"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/action`.
            public var action: Components.Schemas.WebhookWorkflowJobInProgress.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job`.
            public struct WorkflowJobPayload: Codable, Hashable, Sendable {
                /// The workflow job. Many `workflow_job` keys, such as `head_sha`, `conclusion`, and `started_at` are the same as those in a [`check_run`](#check_run) object.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value1/check_run_url`.
                    public var checkRunUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value1/completed_at`.
                    public var completedAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value1/conclusion`.
                    @frozen public enum ConclusionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case success = "success"
                        case failure = "failure"
                        case _empty_ = ""
                        case cancelled = "cancelled"
                        case neutral = "neutral"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value1/conclusion`.
                    public var conclusion: Components.Schemas.WebhookWorkflowJobInProgress.WorkflowJobPayload.Value1Payload.ConclusionPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value1/head_sha`.
                    public var headSha: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value1/html_url`.
                    public var htmlUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value1/id`.
                    public var id: Swift.Int
                    /// Custom labels for the job. Specified by the [`"runs-on"` attribute](https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on) in the workflow YAML.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value1/labels`.
                    public var labels: [Swift.String]
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value1/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value1/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value1/run_attempt`.
                    public var runAttempt: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value1/run_id`.
                    public var runId: Swift.Double
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value1/run_url`.
                    public var runUrl: Swift.String
                    /// The ID of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value1/runner_group_id`.
                    public var runnerGroupId: Swift.Int?
                    /// The name of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value1/runner_group_name`.
                    public var runnerGroupName: Swift.String?
                    /// The ID of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value1/runner_id`.
                    public var runnerId: Swift.Int?
                    /// The name of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value1/runner_name`.
                    public var runnerName: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value1/started_at`.
                    public var startedAt: Swift.String
                    /// The current status of the job. Can be `queued`, `in_progress`, or `completed`.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value1/status`.
                    @frozen public enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case queued = "queued"
                        case inProgress = "in_progress"
                        case completed = "completed"
                    }
                    /// The current status of the job. Can be `queued`, `in_progress`, or `completed`.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value1/status`.
                    public var status: Components.Schemas.WebhookWorkflowJobInProgress.WorkflowJobPayload.Value1Payload.StatusPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value1/StepsPayload`.
                    public struct StepsPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value1/StepsPayload/completed_at`.
                        public var completedAt: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value1/StepsPayload/conclusion`.
                        @frozen public enum ConclusionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case failure = "failure"
                            case skipped = "skipped"
                            case success = "success"
                            case _empty_ = ""
                            case cancelled = "cancelled"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value1/StepsPayload/conclusion`.
                        public var conclusion: Components.Schemas.WebhookWorkflowJobInProgress.WorkflowJobPayload.Value1Payload.StepsPayloadPayload.ConclusionPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value1/StepsPayload/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value1/StepsPayload/number`.
                        public var number: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value1/StepsPayload/started_at`.
                        public var startedAt: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value1/StepsPayload/status`.
                        @frozen public enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case inProgress = "in_progress"
                            case completed = "completed"
                            case queued = "queued"
                            case pending = "pending"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value1/StepsPayload/status`.
                        public var status: Components.Schemas.WebhookWorkflowJobInProgress.WorkflowJobPayload.Value1Payload.StepsPayloadPayload.StatusPayload
                        /// Creates a new `StepsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - completedAt:
                        ///   - conclusion:
                        ///   - name:
                        ///   - number:
                        ///   - startedAt:
                        ///   - status:
                        public init(
                            completedAt: Swift.String? = nil,
                            conclusion: Components.Schemas.WebhookWorkflowJobInProgress.WorkflowJobPayload.Value1Payload.StepsPayloadPayload.ConclusionPayload? = nil,
                            name: Swift.String,
                            number: Swift.Int,
                            startedAt: Swift.String? = nil,
                            status: Components.Schemas.WebhookWorkflowJobInProgress.WorkflowJobPayload.Value1Payload.StepsPayloadPayload.StatusPayload
                        ) {
                            self.completedAt = completedAt
                            self.conclusion = conclusion
                            self.name = name
                            self.number = number
                            self.startedAt = startedAt
                            self.status = status
                        }
                        public enum CodingKeys: String, CodingKey {
                            case completedAt = "completed_at"
                            case conclusion
                            case name
                            case number
                            case startedAt = "started_at"
                            case status
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value1/steps`.
                    public typealias StepsPayload = [Components.Schemas.WebhookWorkflowJobInProgress.WorkflowJobPayload.Value1Payload.StepsPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value1/steps`.
                    public var steps: Components.Schemas.WebhookWorkflowJobInProgress.WorkflowJobPayload.Value1Payload.StepsPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value1/url`.
                    public var url: Swift.String
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - checkRunUrl:
                    ///   - completedAt:
                    ///   - conclusion:
                    ///   - headSha:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - labels: Custom labels for the job. Specified by the [`"runs-on"` attribute](https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on) in the workflow YAML.
                    ///   - name:
                    ///   - nodeId:
                    ///   - runAttempt:
                    ///   - runId:
                    ///   - runUrl:
                    ///   - runnerGroupId: The ID of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
                    ///   - runnerGroupName: The name of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
                    ///   - runnerId: The ID of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
                    ///   - runnerName: The name of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
                    ///   - startedAt:
                    ///   - status: The current status of the job. Can be `queued`, `in_progress`, or `completed`.
                    ///   - steps:
                    ///   - url:
                    public init(
                        checkRunUrl: Swift.String,
                        completedAt: Swift.String? = nil,
                        conclusion: Components.Schemas.WebhookWorkflowJobInProgress.WorkflowJobPayload.Value1Payload.ConclusionPayload? = nil,
                        headSha: Swift.String,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        labels: [Swift.String],
                        name: Swift.String,
                        nodeId: Swift.String,
                        runAttempt: Swift.Int,
                        runId: Swift.Double,
                        runUrl: Swift.String,
                        runnerGroupId: Swift.Int? = nil,
                        runnerGroupName: Swift.String? = nil,
                        runnerId: Swift.Int? = nil,
                        runnerName: Swift.String? = nil,
                        startedAt: Swift.String,
                        status: Components.Schemas.WebhookWorkflowJobInProgress.WorkflowJobPayload.Value1Payload.StatusPayload,
                        steps: Components.Schemas.WebhookWorkflowJobInProgress.WorkflowJobPayload.Value1Payload.StepsPayload,
                        url: Swift.String
                    ) {
                        self.checkRunUrl = checkRunUrl
                        self.completedAt = completedAt
                        self.conclusion = conclusion
                        self.headSha = headSha
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.labels = labels
                        self.name = name
                        self.nodeId = nodeId
                        self.runAttempt = runAttempt
                        self.runId = runId
                        self.runUrl = runUrl
                        self.runnerGroupId = runnerGroupId
                        self.runnerGroupName = runnerGroupName
                        self.runnerId = runnerId
                        self.runnerName = runnerName
                        self.startedAt = startedAt
                        self.status = status
                        self.steps = steps
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case checkRunUrl = "check_run_url"
                        case completedAt = "completed_at"
                        case conclusion
                        case headSha = "head_sha"
                        case htmlUrl = "html_url"
                        case id
                        case labels
                        case name
                        case nodeId = "node_id"
                        case runAttempt = "run_attempt"
                        case runId = "run_id"
                        case runUrl = "run_url"
                        case runnerGroupId = "runner_group_id"
                        case runnerGroupName = "runner_group_name"
                        case runnerId = "runner_id"
                        case runnerName = "runner_name"
                        case startedAt = "started_at"
                        case status
                        case steps
                        case url
                    }
                }
                /// The workflow job. Many `workflow_job` keys, such as `head_sha`, `conclusion`, and `started_at` are the same as those in a [`check_run`](#check_run) object.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value1`.
                public var value1: Components.Schemas.WebhookWorkflowJobInProgress.WorkflowJobPayload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value2/check_run_url`.
                    public var checkRunUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value2/completed_at`.
                    public var completedAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value2/conclusion`.
                    public var conclusion: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value2/head_sha`.
                    public var headSha: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value2/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value2/id`.
                    public var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value2/labels`.
                    public var labels: [Swift.String]?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value2/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value2/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value2/run_attempt`.
                    public var runAttempt: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value2/run_id`.
                    public var runId: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value2/run_url`.
                    public var runUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value2/runner_group_id`.
                    public var runnerGroupId: Swift.Double?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value2/runner_group_name`.
                    public var runnerGroupName: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value2/runner_id`.
                    public var runnerId: Swift.Double?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value2/runner_name`.
                    public var runnerName: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value2/started_at`.
                    public var startedAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value2/status`.
                    @frozen public enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case inProgress = "in_progress"
                        case completed = "completed"
                        case queued = "queued"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value2/status`.
                    public var status: Components.Schemas.WebhookWorkflowJobInProgress.WorkflowJobPayload.Value2Payload.StatusPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value2/StepsPayload`.
                    public struct StepsPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value2/StepsPayload/completed_at`.
                        public var completedAt: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value2/StepsPayload/conclusion`.
                        public var conclusion: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value2/StepsPayload/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value2/StepsPayload/number`.
                        public var number: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value2/StepsPayload/started_at`.
                        public var startedAt: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value2/StepsPayload/status`.
                        @frozen public enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case inProgress = "in_progress"
                            case completed = "completed"
                            case pending = "pending"
                            case queued = "queued"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value2/StepsPayload/status`.
                        public var status: Components.Schemas.WebhookWorkflowJobInProgress.WorkflowJobPayload.Value2Payload.StepsPayloadPayload.StatusPayload
                        /// Creates a new `StepsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - completedAt:
                        ///   - conclusion:
                        ///   - name:
                        ///   - number:
                        ///   - startedAt:
                        ///   - status:
                        public init(
                            completedAt: Swift.String? = nil,
                            conclusion: Swift.String? = nil,
                            name: Swift.String,
                            number: Swift.Int,
                            startedAt: Swift.String? = nil,
                            status: Components.Schemas.WebhookWorkflowJobInProgress.WorkflowJobPayload.Value2Payload.StepsPayloadPayload.StatusPayload
                        ) {
                            self.completedAt = completedAt
                            self.conclusion = conclusion
                            self.name = name
                            self.number = number
                            self.startedAt = startedAt
                            self.status = status
                        }
                        public enum CodingKeys: String, CodingKey {
                            case completedAt = "completed_at"
                            case conclusion
                            case name
                            case number
                            case startedAt = "started_at"
                            case status
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value2/steps`.
                    public typealias StepsPayload = [Components.Schemas.WebhookWorkflowJobInProgress.WorkflowJobPayload.Value2Payload.StepsPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value2/steps`.
                    public var steps: Components.Schemas.WebhookWorkflowJobInProgress.WorkflowJobPayload.Value2Payload.StepsPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value2/url`.
                    public var url: Swift.String?
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - checkRunUrl:
                    ///   - completedAt:
                    ///   - conclusion:
                    ///   - headSha:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - labels:
                    ///   - name:
                    ///   - nodeId:
                    ///   - runAttempt:
                    ///   - runId:
                    ///   - runUrl:
                    ///   - runnerGroupId:
                    ///   - runnerGroupName:
                    ///   - runnerId:
                    ///   - runnerName:
                    ///   - startedAt:
                    ///   - status:
                    ///   - steps:
                    ///   - url:
                    public init(
                        checkRunUrl: Swift.String? = nil,
                        completedAt: Swift.String? = nil,
                        conclusion: Swift.String? = nil,
                        headSha: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int? = nil,
                        labels: [Swift.String]? = nil,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        runAttempt: Swift.Int? = nil,
                        runId: Swift.Int? = nil,
                        runUrl: Swift.String? = nil,
                        runnerGroupId: Swift.Double? = nil,
                        runnerGroupName: Swift.String? = nil,
                        runnerId: Swift.Double? = nil,
                        runnerName: Swift.String? = nil,
                        startedAt: Swift.String? = nil,
                        status: Components.Schemas.WebhookWorkflowJobInProgress.WorkflowJobPayload.Value2Payload.StatusPayload,
                        steps: Components.Schemas.WebhookWorkflowJobInProgress.WorkflowJobPayload.Value2Payload.StepsPayload,
                        url: Swift.String? = nil
                    ) {
                        self.checkRunUrl = checkRunUrl
                        self.completedAt = completedAt
                        self.conclusion = conclusion
                        self.headSha = headSha
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.labels = labels
                        self.name = name
                        self.nodeId = nodeId
                        self.runAttempt = runAttempt
                        self.runId = runId
                        self.runUrl = runUrl
                        self.runnerGroupId = runnerGroupId
                        self.runnerGroupName = runnerGroupName
                        self.runnerId = runnerId
                        self.runnerName = runnerName
                        self.startedAt = startedAt
                        self.status = status
                        self.steps = steps
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case checkRunUrl = "check_run_url"
                        case completedAt = "completed_at"
                        case conclusion
                        case headSha = "head_sha"
                        case htmlUrl = "html_url"
                        case id
                        case labels
                        case name
                        case nodeId = "node_id"
                        case runAttempt = "run_attempt"
                        case runId = "run_id"
                        case runUrl = "run_url"
                        case runnerGroupId = "runner_group_id"
                        case runnerGroupName = "runner_group_name"
                        case runnerId = "runner_id"
                        case runnerName = "runner_name"
                        case startedAt = "started_at"
                        case status
                        case steps
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job/value2`.
                public var value2: Components.Schemas.WebhookWorkflowJobInProgress.WorkflowJobPayload.Value2Payload
                /// Creates a new `WorkflowJobPayload`.
                ///
                /// - Parameters:
                ///   - value1: The workflow job. Many `workflow_job` keys, such as `head_sha`, `conclusion`, and `started_at` are the same as those in a [`check_run`](#check_run) object.
                ///   - value2:
                public init(
                    value1: Components.Schemas.WebhookWorkflowJobInProgress.WorkflowJobPayload.Value1Payload,
                    value2: Components.Schemas.WebhookWorkflowJobInProgress.WorkflowJobPayload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-in-progress/workflow_job`.
            public var workflowJob: Components.Schemas.WebhookWorkflowJobInProgress.WorkflowJobPayload
            /// Creates a new `WebhookWorkflowJobInProgress`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - enterprise:
            ///   - installation:
            ///   - organization:
            ///   - repository:
            ///   - sender:
            ///   - workflowJob:
            public init(
                action: Components.Schemas.WebhookWorkflowJobInProgress.ActionPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser,
                workflowJob: Components.Schemas.WebhookWorkflowJobInProgress.WorkflowJobPayload
            ) {
                self.action = action
                self.enterprise = enterprise
                self.installation = installation
                self.organization = organization
                self.repository = repository
                self.sender = sender
                self.workflowJob = workflowJob
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case enterprise
                case installation
                case organization
                case repository
                case sender
                case workflowJob = "workflow_job"
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued`.
        public struct WebhookWorkflowJobQueued: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case queued = "queued"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/action`.
            public var action: Components.Schemas.WebhookWorkflowJobQueued.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/workflow_job`.
            public struct WorkflowJobPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/workflow_job/check_run_url`.
                public var checkRunUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/workflow_job/completed_at`.
                public var completedAt: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/workflow_job/conclusion`.
                public var conclusion: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/workflow_job/head_sha`.
                public var headSha: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/workflow_job/html_url`.
                public var htmlUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/workflow_job/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/workflow_job/labels`.
                public var labels: [Swift.String]
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/workflow_job/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/workflow_job/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/workflow_job/run_attempt`.
                public var runAttempt: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/workflow_job/run_id`.
                public var runId: Swift.Double
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/workflow_job/run_url`.
                public var runUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/workflow_job/runner_group_id`.
                public var runnerGroupId: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/workflow_job/runner_group_name`.
                public var runnerGroupName: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/workflow_job/runner_id`.
                public var runnerId: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/workflow_job/runner_name`.
                public var runnerName: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/workflow_job/started_at`.
                public var startedAt: Foundation.Date
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/workflow_job/status`.
                @frozen public enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case queued = "queued"
                    case inProgress = "in_progress"
                    case completed = "completed"
                    case waiting = "waiting"
                }
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/workflow_job/status`.
                public var status: Components.Schemas.WebhookWorkflowJobQueued.WorkflowJobPayload.StatusPayload
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/workflow_job/StepsPayload`.
                public struct StepsPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/workflow_job/StepsPayload/completed_at`.
                    public var completedAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/workflow_job/StepsPayload/conclusion`.
                    @frozen public enum ConclusionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case failure = "failure"
                        case skipped = "skipped"
                        case success = "success"
                        case cancelled = "cancelled"
                        case _empty_ = ""
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/workflow_job/StepsPayload/conclusion`.
                    public var conclusion: Components.Schemas.WebhookWorkflowJobQueued.WorkflowJobPayload.StepsPayloadPayload.ConclusionPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/workflow_job/StepsPayload/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/workflow_job/StepsPayload/number`.
                    public var number: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/workflow_job/StepsPayload/started_at`.
                    public var startedAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/workflow_job/StepsPayload/status`.
                    @frozen public enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case completed = "completed"
                        case inProgress = "in_progress"
                        case queued = "queued"
                        case pending = "pending"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/workflow_job/StepsPayload/status`.
                    public var status: Components.Schemas.WebhookWorkflowJobQueued.WorkflowJobPayload.StepsPayloadPayload.StatusPayload
                    /// Creates a new `StepsPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - completedAt:
                    ///   - conclusion:
                    ///   - name:
                    ///   - number:
                    ///   - startedAt:
                    ///   - status:
                    public init(
                        completedAt: Swift.String? = nil,
                        conclusion: Components.Schemas.WebhookWorkflowJobQueued.WorkflowJobPayload.StepsPayloadPayload.ConclusionPayload? = nil,
                        name: Swift.String,
                        number: Swift.Int,
                        startedAt: Swift.String? = nil,
                        status: Components.Schemas.WebhookWorkflowJobQueued.WorkflowJobPayload.StepsPayloadPayload.StatusPayload
                    ) {
                        self.completedAt = completedAt
                        self.conclusion = conclusion
                        self.name = name
                        self.number = number
                        self.startedAt = startedAt
                        self.status = status
                    }
                    public enum CodingKeys: String, CodingKey {
                        case completedAt = "completed_at"
                        case conclusion
                        case name
                        case number
                        case startedAt = "started_at"
                        case status
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/workflow_job/steps`.
                public typealias StepsPayload = [Components.Schemas.WebhookWorkflowJobQueued.WorkflowJobPayload.StepsPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/workflow_job/steps`.
                public var steps: Components.Schemas.WebhookWorkflowJobQueued.WorkflowJobPayload.StepsPayload
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/workflow_job/url`.
                public var url: Swift.String
                /// Creates a new `WorkflowJobPayload`.
                ///
                /// - Parameters:
                ///   - checkRunUrl:
                ///   - completedAt:
                ///   - conclusion:
                ///   - headSha:
                ///   - htmlUrl:
                ///   - id:
                ///   - labels:
                ///   - name:
                ///   - nodeId:
                ///   - runAttempt:
                ///   - runId:
                ///   - runUrl:
                ///   - runnerGroupId:
                ///   - runnerGroupName:
                ///   - runnerId:
                ///   - runnerName:
                ///   - startedAt:
                ///   - status:
                ///   - steps:
                ///   - url:
                public init(
                    checkRunUrl: Swift.String,
                    completedAt: Swift.String? = nil,
                    conclusion: Swift.String? = nil,
                    headSha: Swift.String,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    labels: [Swift.String],
                    name: Swift.String,
                    nodeId: Swift.String,
                    runAttempt: Swift.Int,
                    runId: Swift.Double,
                    runUrl: Swift.String,
                    runnerGroupId: Swift.Int? = nil,
                    runnerGroupName: Swift.String? = nil,
                    runnerId: Swift.Int? = nil,
                    runnerName: Swift.String? = nil,
                    startedAt: Foundation.Date,
                    status: Components.Schemas.WebhookWorkflowJobQueued.WorkflowJobPayload.StatusPayload,
                    steps: Components.Schemas.WebhookWorkflowJobQueued.WorkflowJobPayload.StepsPayload,
                    url: Swift.String
                ) {
                    self.checkRunUrl = checkRunUrl
                    self.completedAt = completedAt
                    self.conclusion = conclusion
                    self.headSha = headSha
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.labels = labels
                    self.name = name
                    self.nodeId = nodeId
                    self.runAttempt = runAttempt
                    self.runId = runId
                    self.runUrl = runUrl
                    self.runnerGroupId = runnerGroupId
                    self.runnerGroupName = runnerGroupName
                    self.runnerId = runnerId
                    self.runnerName = runnerName
                    self.startedAt = startedAt
                    self.status = status
                    self.steps = steps
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case checkRunUrl = "check_run_url"
                    case completedAt = "completed_at"
                    case conclusion
                    case headSha = "head_sha"
                    case htmlUrl = "html_url"
                    case id
                    case labels
                    case name
                    case nodeId = "node_id"
                    case runAttempt = "run_attempt"
                    case runId = "run_id"
                    case runUrl = "run_url"
                    case runnerGroupId = "runner_group_id"
                    case runnerGroupName = "runner_group_name"
                    case runnerId = "runner_id"
                    case runnerName = "runner_name"
                    case startedAt = "started_at"
                    case status
                    case steps
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-job-queued/workflow_job`.
            public var workflowJob: Components.Schemas.WebhookWorkflowJobQueued.WorkflowJobPayload
            /// Creates a new `WebhookWorkflowJobQueued`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - enterprise:
            ///   - installation:
            ///   - organization:
            ///   - repository:
            ///   - sender:
            ///   - workflowJob:
            public init(
                action: Components.Schemas.WebhookWorkflowJobQueued.ActionPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser,
                workflowJob: Components.Schemas.WebhookWorkflowJobQueued.WorkflowJobPayload
            ) {
                self.action = action
                self.enterprise = enterprise
                self.installation = installation
                self.organization = organization
                self.repository = repository
                self.sender = sender
                self.workflowJob = workflowJob
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case enterprise
                case installation
                case organization
                case repository
                case sender
                case workflowJob = "workflow_job"
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed`.
        public struct WebhookWorkflowRunCompleted: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case completed = "completed"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/action`.
            public var action: Components.Schemas.WebhookWorkflowRunCompleted.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow`.
            public struct WorkflowPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow/badge_url`.
                public var badgeUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow/created_at`.
                public var createdAt: Foundation.Date
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow/html_url`.
                public var htmlUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow/path`.
                public var path: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow/state`.
                public var state: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow/updated_at`.
                public var updatedAt: Foundation.Date
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow/url`.
                public var url: Swift.String
                /// Creates a new `WorkflowPayload`.
                ///
                /// - Parameters:
                ///   - badgeUrl:
                ///   - createdAt:
                ///   - htmlUrl:
                ///   - id:
                ///   - name:
                ///   - nodeId:
                ///   - path:
                ///   - state:
                ///   - updatedAt:
                ///   - url:
                public init(
                    badgeUrl: Swift.String,
                    createdAt: Foundation.Date,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    name: Swift.String,
                    nodeId: Swift.String,
                    path: Swift.String,
                    state: Swift.String,
                    updatedAt: Foundation.Date,
                    url: Swift.String
                ) {
                    self.badgeUrl = badgeUrl
                    self.createdAt = createdAt
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.name = name
                    self.nodeId = nodeId
                    self.path = path
                    self.state = state
                    self.updatedAt = updatedAt
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case badgeUrl = "badge_url"
                    case createdAt = "created_at"
                    case htmlUrl = "html_url"
                    case id
                    case name
                    case nodeId = "node_id"
                    case path
                    case state
                    case updatedAt = "updated_at"
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow`.
            public var workflow: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowPayload?
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run`.
            public struct WorkflowRunPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/actor`.
                    public struct ActorPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/actor/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/actor/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/actor/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/actor/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/actor/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/actor/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/actor/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/actor/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/actor/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/actor/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/actor/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/actor/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/actor/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/actor/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/actor/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/actor/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/actor/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/actor/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/actor/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/actor/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/actor/type`.
                        public var _type: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.ActorPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/actor/url`.
                        public var url: Swift.String?
                        /// Creates a new `ActorPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.ActorPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/actor`.
                    public var actor: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.ActorPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/artifacts_url`.
                    public var artifactsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/cancel_url`.
                    public var cancelUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/check_suite_id`.
                    public var checkSuiteId: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/check_suite_node_id`.
                    public var checkSuiteNodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/check_suite_url`.
                    public var checkSuiteUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/conclusion`.
                    @frozen public enum ConclusionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case success = "success"
                        case failure = "failure"
                        case neutral = "neutral"
                        case cancelled = "cancelled"
                        case timedOut = "timed_out"
                        case actionRequired = "action_required"
                        case stale = "stale"
                        case _empty_ = ""
                        case skipped = "skipped"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/conclusion`.
                    public var conclusion: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.ConclusionPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/created_at`.
                    public var createdAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/event`.
                    public var event: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_branch`.
                    public var headBranch: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_commit`.
                    public struct HeadCommitPayload: Codable, Hashable, Sendable {
                        /// Metaproperties for Git author/committer information.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_commit/author`.
                        public struct AuthorPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_commit/author/date`.
                            public var date: Foundation.Date?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_commit/author/email`.
                            public var email: Swift.String?
                            /// The git author's name.
                            ///
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_commit/author/name`.
                            public var name: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_commit/author/username`.
                            public var username: Swift.String?
                            /// Creates a new `AuthorPayload`.
                            ///
                            /// - Parameters:
                            ///   - date:
                            ///   - email:
                            ///   - name: The git author's name.
                            ///   - username:
                            public init(
                                date: Foundation.Date? = nil,
                                email: Swift.String? = nil,
                                name: Swift.String,
                                username: Swift.String? = nil
                            ) {
                                self.date = date
                                self.email = email
                                self.name = name
                                self.username = username
                            }
                            public enum CodingKeys: String, CodingKey {
                                case date
                                case email
                                case name
                                case username
                            }
                        }
                        /// Metaproperties for Git author/committer information.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_commit/author`.
                        public var author: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.HeadCommitPayload.AuthorPayload
                        /// Metaproperties for Git author/committer information.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_commit/committer`.
                        public struct CommitterPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_commit/committer/date`.
                            public var date: Foundation.Date?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_commit/committer/email`.
                            public var email: Swift.String?
                            /// The git author's name.
                            ///
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_commit/committer/name`.
                            public var name: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_commit/committer/username`.
                            public var username: Swift.String?
                            /// Creates a new `CommitterPayload`.
                            ///
                            /// - Parameters:
                            ///   - date:
                            ///   - email:
                            ///   - name: The git author's name.
                            ///   - username:
                            public init(
                                date: Foundation.Date? = nil,
                                email: Swift.String? = nil,
                                name: Swift.String,
                                username: Swift.String? = nil
                            ) {
                                self.date = date
                                self.email = email
                                self.name = name
                                self.username = username
                            }
                            public enum CodingKeys: String, CodingKey {
                                case date
                                case email
                                case name
                                case username
                            }
                        }
                        /// Metaproperties for Git author/committer information.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_commit/committer`.
                        public var committer: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.HeadCommitPayload.CommitterPayload
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_commit/id`.
                        public var id: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_commit/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_commit/timestamp`.
                        public var timestamp: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_commit/tree_id`.
                        public var treeId: Swift.String
                        /// Creates a new `HeadCommitPayload`.
                        ///
                        /// - Parameters:
                        ///   - author: Metaproperties for Git author/committer information.
                        ///   - committer: Metaproperties for Git author/committer information.
                        ///   - id:
                        ///   - message:
                        ///   - timestamp:
                        ///   - treeId:
                        public init(
                            author: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.HeadCommitPayload.AuthorPayload,
                            committer: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.HeadCommitPayload.CommitterPayload,
                            id: Swift.String,
                            message: Swift.String,
                            timestamp: Swift.String,
                            treeId: Swift.String
                        ) {
                            self.author = author
                            self.committer = committer
                            self.id = id
                            self.message = message
                            self.timestamp = timestamp
                            self.treeId = treeId
                        }
                        public enum CodingKeys: String, CodingKey {
                            case author
                            case committer
                            case id
                            case message
                            case timestamp
                            case treeId = "tree_id"
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_commit`.
                    public var headCommit: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.HeadCommitPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository`.
                    public struct HeadRepositoryPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/archive_url`.
                        public var archiveUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/assignees_url`.
                        public var assigneesUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/blobs_url`.
                        public var blobsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/branches_url`.
                        public var branchesUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/collaborators_url`.
                        public var collaboratorsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/comments_url`.
                        public var commentsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/commits_url`.
                        public var commitsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/compare_url`.
                        public var compareUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/contents_url`.
                        public var contentsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/contributors_url`.
                        public var contributorsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/deployments_url`.
                        public var deploymentsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/downloads_url`.
                        public var downloadsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/events_url`.
                        public var eventsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/fork`.
                        public var fork: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/forks_url`.
                        public var forksUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/full_name`.
                        public var fullName: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/git_commits_url`.
                        public var gitCommitsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/git_refs_url`.
                        public var gitRefsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/git_tags_url`.
                        public var gitTagsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/hooks_url`.
                        public var hooksUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/html_url`.
                        public var htmlUrl: Swift.String
                        /// Unique identifier of the repository
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/issue_comment_url`.
                        public var issueCommentUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/issue_events_url`.
                        public var issueEventsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/issues_url`.
                        public var issuesUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/keys_url`.
                        public var keysUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/labels_url`.
                        public var labelsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/languages_url`.
                        public var languagesUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/merges_url`.
                        public var mergesUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/milestones_url`.
                        public var milestonesUrl: Swift.String
                        /// The name of the repository.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/node_id`.
                        public var nodeId: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/notifications_url`.
                        public var notificationsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/owner`.
                        public struct OwnerPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/owner/avatar_url`.
                            public var avatarUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/owner/deleted`.
                            public var deleted: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/owner/email`.
                            public var email: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/owner/events_url`.
                            public var eventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/owner/followers_url`.
                            public var followersUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/owner/following_url`.
                            public var followingUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/owner/gists_url`.
                            public var gistsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/owner/gravatar_id`.
                            public var gravatarId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/owner/html_url`.
                            public var htmlUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/owner/id`.
                            public var id: Swift.Int
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/owner/login`.
                            public var login: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/owner/name`.
                            public var name: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/owner/node_id`.
                            public var nodeId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/owner/organizations_url`.
                            public var organizationsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/owner/received_events_url`.
                            public var receivedEventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/owner/repos_url`.
                            public var reposUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/owner/site_admin`.
                            public var siteAdmin: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/owner/starred_url`.
                            public var starredUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/owner/subscriptions_url`.
                            public var subscriptionsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/owner/type`.
                            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case bot = "Bot"
                                case user = "User"
                                case organization = "Organization"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/owner/type`.
                            public var _type: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.HeadRepositoryPayload.OwnerPayload._TypePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/owner/url`.
                            public var url: Swift.String?
                            /// Creates a new `OwnerPayload`.
                            ///
                            /// - Parameters:
                            ///   - avatarUrl:
                            ///   - deleted:
                            ///   - email:
                            ///   - eventsUrl:
                            ///   - followersUrl:
                            ///   - followingUrl:
                            ///   - gistsUrl:
                            ///   - gravatarId:
                            ///   - htmlUrl:
                            ///   - id:
                            ///   - login:
                            ///   - name:
                            ///   - nodeId:
                            ///   - organizationsUrl:
                            ///   - receivedEventsUrl:
                            ///   - reposUrl:
                            ///   - siteAdmin:
                            ///   - starredUrl:
                            ///   - subscriptionsUrl:
                            ///   - _type:
                            ///   - url:
                            public init(
                                avatarUrl: Swift.String? = nil,
                                deleted: Swift.Bool? = nil,
                                email: Swift.String? = nil,
                                eventsUrl: Swift.String? = nil,
                                followersUrl: Swift.String? = nil,
                                followingUrl: Swift.String? = nil,
                                gistsUrl: Swift.String? = nil,
                                gravatarId: Swift.String? = nil,
                                htmlUrl: Swift.String? = nil,
                                id: Swift.Int,
                                login: Swift.String,
                                name: Swift.String? = nil,
                                nodeId: Swift.String? = nil,
                                organizationsUrl: Swift.String? = nil,
                                receivedEventsUrl: Swift.String? = nil,
                                reposUrl: Swift.String? = nil,
                                siteAdmin: Swift.Bool? = nil,
                                starredUrl: Swift.String? = nil,
                                subscriptionsUrl: Swift.String? = nil,
                                _type: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.HeadRepositoryPayload.OwnerPayload._TypePayload? = nil,
                                url: Swift.String? = nil
                            ) {
                                self.avatarUrl = avatarUrl
                                self.deleted = deleted
                                self.email = email
                                self.eventsUrl = eventsUrl
                                self.followersUrl = followersUrl
                                self.followingUrl = followingUrl
                                self.gistsUrl = gistsUrl
                                self.gravatarId = gravatarId
                                self.htmlUrl = htmlUrl
                                self.id = id
                                self.login = login
                                self.name = name
                                self.nodeId = nodeId
                                self.organizationsUrl = organizationsUrl
                                self.receivedEventsUrl = receivedEventsUrl
                                self.reposUrl = reposUrl
                                self.siteAdmin = siteAdmin
                                self.starredUrl = starredUrl
                                self.subscriptionsUrl = subscriptionsUrl
                                self._type = _type
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case avatarUrl = "avatar_url"
                                case deleted
                                case email
                                case eventsUrl = "events_url"
                                case followersUrl = "followers_url"
                                case followingUrl = "following_url"
                                case gistsUrl = "gists_url"
                                case gravatarId = "gravatar_id"
                                case htmlUrl = "html_url"
                                case id
                                case login
                                case name
                                case nodeId = "node_id"
                                case organizationsUrl = "organizations_url"
                                case receivedEventsUrl = "received_events_url"
                                case reposUrl = "repos_url"
                                case siteAdmin = "site_admin"
                                case starredUrl = "starred_url"
                                case subscriptionsUrl = "subscriptions_url"
                                case _type = "type"
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/owner`.
                        public var owner: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.HeadRepositoryPayload.OwnerPayload?
                        /// Whether the repository is private or public.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/private`.
                        public var _private: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/pulls_url`.
                        public var pullsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/releases_url`.
                        public var releasesUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/stargazers_url`.
                        public var stargazersUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/statuses_url`.
                        public var statusesUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/subscribers_url`.
                        public var subscribersUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/subscription_url`.
                        public var subscriptionUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/tags_url`.
                        public var tagsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/teams_url`.
                        public var teamsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/trees_url`.
                        public var treesUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository/url`.
                        public var url: Swift.String
                        /// Creates a new `HeadRepositoryPayload`.
                        ///
                        /// - Parameters:
                        ///   - archiveUrl:
                        ///   - assigneesUrl:
                        ///   - blobsUrl:
                        ///   - branchesUrl:
                        ///   - collaboratorsUrl:
                        ///   - commentsUrl:
                        ///   - commitsUrl:
                        ///   - compareUrl:
                        ///   - contentsUrl:
                        ///   - contributorsUrl:
                        ///   - deploymentsUrl:
                        ///   - description:
                        ///   - downloadsUrl:
                        ///   - eventsUrl:
                        ///   - fork:
                        ///   - forksUrl:
                        ///   - fullName:
                        ///   - gitCommitsUrl:
                        ///   - gitRefsUrl:
                        ///   - gitTagsUrl:
                        ///   - hooksUrl:
                        ///   - htmlUrl:
                        ///   - id: Unique identifier of the repository
                        ///   - issueCommentUrl:
                        ///   - issueEventsUrl:
                        ///   - issuesUrl:
                        ///   - keysUrl:
                        ///   - labelsUrl:
                        ///   - languagesUrl:
                        ///   - mergesUrl:
                        ///   - milestonesUrl:
                        ///   - name: The name of the repository.
                        ///   - nodeId:
                        ///   - notificationsUrl:
                        ///   - owner:
                        ///   - _private: Whether the repository is private or public.
                        ///   - pullsUrl:
                        ///   - releasesUrl:
                        ///   - stargazersUrl:
                        ///   - statusesUrl:
                        ///   - subscribersUrl:
                        ///   - subscriptionUrl:
                        ///   - tagsUrl:
                        ///   - teamsUrl:
                        ///   - treesUrl:
                        ///   - url:
                        public init(
                            archiveUrl: Swift.String,
                            assigneesUrl: Swift.String,
                            blobsUrl: Swift.String,
                            branchesUrl: Swift.String,
                            collaboratorsUrl: Swift.String,
                            commentsUrl: Swift.String,
                            commitsUrl: Swift.String,
                            compareUrl: Swift.String,
                            contentsUrl: Swift.String,
                            contributorsUrl: Swift.String,
                            deploymentsUrl: Swift.String,
                            description: Swift.String? = nil,
                            downloadsUrl: Swift.String,
                            eventsUrl: Swift.String,
                            fork: Swift.Bool,
                            forksUrl: Swift.String,
                            fullName: Swift.String,
                            gitCommitsUrl: Swift.String,
                            gitRefsUrl: Swift.String,
                            gitTagsUrl: Swift.String,
                            hooksUrl: Swift.String,
                            htmlUrl: Swift.String,
                            id: Swift.Int,
                            issueCommentUrl: Swift.String,
                            issueEventsUrl: Swift.String,
                            issuesUrl: Swift.String,
                            keysUrl: Swift.String,
                            labelsUrl: Swift.String,
                            languagesUrl: Swift.String,
                            mergesUrl: Swift.String,
                            milestonesUrl: Swift.String,
                            name: Swift.String,
                            nodeId: Swift.String,
                            notificationsUrl: Swift.String,
                            owner: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.HeadRepositoryPayload.OwnerPayload? = nil,
                            _private: Swift.Bool,
                            pullsUrl: Swift.String,
                            releasesUrl: Swift.String,
                            stargazersUrl: Swift.String,
                            statusesUrl: Swift.String,
                            subscribersUrl: Swift.String,
                            subscriptionUrl: Swift.String,
                            tagsUrl: Swift.String,
                            teamsUrl: Swift.String,
                            treesUrl: Swift.String,
                            url: Swift.String
                        ) {
                            self.archiveUrl = archiveUrl
                            self.assigneesUrl = assigneesUrl
                            self.blobsUrl = blobsUrl
                            self.branchesUrl = branchesUrl
                            self.collaboratorsUrl = collaboratorsUrl
                            self.commentsUrl = commentsUrl
                            self.commitsUrl = commitsUrl
                            self.compareUrl = compareUrl
                            self.contentsUrl = contentsUrl
                            self.contributorsUrl = contributorsUrl
                            self.deploymentsUrl = deploymentsUrl
                            self.description = description
                            self.downloadsUrl = downloadsUrl
                            self.eventsUrl = eventsUrl
                            self.fork = fork
                            self.forksUrl = forksUrl
                            self.fullName = fullName
                            self.gitCommitsUrl = gitCommitsUrl
                            self.gitRefsUrl = gitRefsUrl
                            self.gitTagsUrl = gitTagsUrl
                            self.hooksUrl = hooksUrl
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.issueCommentUrl = issueCommentUrl
                            self.issueEventsUrl = issueEventsUrl
                            self.issuesUrl = issuesUrl
                            self.keysUrl = keysUrl
                            self.labelsUrl = labelsUrl
                            self.languagesUrl = languagesUrl
                            self.mergesUrl = mergesUrl
                            self.milestonesUrl = milestonesUrl
                            self.name = name
                            self.nodeId = nodeId
                            self.notificationsUrl = notificationsUrl
                            self.owner = owner
                            self._private = _private
                            self.pullsUrl = pullsUrl
                            self.releasesUrl = releasesUrl
                            self.stargazersUrl = stargazersUrl
                            self.statusesUrl = statusesUrl
                            self.subscribersUrl = subscribersUrl
                            self.subscriptionUrl = subscriptionUrl
                            self.tagsUrl = tagsUrl
                            self.teamsUrl = teamsUrl
                            self.treesUrl = treesUrl
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case archiveUrl = "archive_url"
                            case assigneesUrl = "assignees_url"
                            case blobsUrl = "blobs_url"
                            case branchesUrl = "branches_url"
                            case collaboratorsUrl = "collaborators_url"
                            case commentsUrl = "comments_url"
                            case commitsUrl = "commits_url"
                            case compareUrl = "compare_url"
                            case contentsUrl = "contents_url"
                            case contributorsUrl = "contributors_url"
                            case deploymentsUrl = "deployments_url"
                            case description
                            case downloadsUrl = "downloads_url"
                            case eventsUrl = "events_url"
                            case fork
                            case forksUrl = "forks_url"
                            case fullName = "full_name"
                            case gitCommitsUrl = "git_commits_url"
                            case gitRefsUrl = "git_refs_url"
                            case gitTagsUrl = "git_tags_url"
                            case hooksUrl = "hooks_url"
                            case htmlUrl = "html_url"
                            case id
                            case issueCommentUrl = "issue_comment_url"
                            case issueEventsUrl = "issue_events_url"
                            case issuesUrl = "issues_url"
                            case keysUrl = "keys_url"
                            case labelsUrl = "labels_url"
                            case languagesUrl = "languages_url"
                            case mergesUrl = "merges_url"
                            case milestonesUrl = "milestones_url"
                            case name
                            case nodeId = "node_id"
                            case notificationsUrl = "notifications_url"
                            case owner
                            case _private = "private"
                            case pullsUrl = "pulls_url"
                            case releasesUrl = "releases_url"
                            case stargazersUrl = "stargazers_url"
                            case statusesUrl = "statuses_url"
                            case subscribersUrl = "subscribers_url"
                            case subscriptionUrl = "subscription_url"
                            case tagsUrl = "tags_url"
                            case teamsUrl = "teams_url"
                            case treesUrl = "trees_url"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_repository`.
                    public var headRepository: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.HeadRepositoryPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/head_sha`.
                    public var headSha: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/html_url`.
                    public var htmlUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/jobs_url`.
                    public var jobsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/logs_url`.
                    public var logsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/path`.
                    public var path: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/previous_attempt_url`.
                    public var previousAttemptUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/PullRequestsPayload`.
                    public struct PullRequestsPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/PullRequestsPayload/base`.
                        public struct BasePayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/PullRequestsPayload/base/ref`.
                            public var ref: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/PullRequestsPayload/base/repo`.
                            public struct RepoPayload: Codable, Hashable, Sendable {
                                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/PullRequestsPayload/base/repo/id`.
                                public var id: Swift.Int
                                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/PullRequestsPayload/base/repo/name`.
                                public var name: Swift.String
                                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/PullRequestsPayload/base/repo/url`.
                                public var url: Swift.String
                                /// Creates a new `RepoPayload`.
                                ///
                                /// - Parameters:
                                ///   - id:
                                ///   - name:
                                ///   - url:
                                public init(
                                    id: Swift.Int,
                                    name: Swift.String,
                                    url: Swift.String
                                ) {
                                    self.id = id
                                    self.name = name
                                    self.url = url
                                }
                                public enum CodingKeys: String, CodingKey {
                                    case id
                                    case name
                                    case url
                                }
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/PullRequestsPayload/base/repo`.
                            public var repo: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.PullRequestsPayloadPayload.BasePayload.RepoPayload
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/PullRequestsPayload/base/sha`.
                            public var sha: Swift.String
                            /// Creates a new `BasePayload`.
                            ///
                            /// - Parameters:
                            ///   - ref:
                            ///   - repo:
                            ///   - sha:
                            public init(
                                ref: Swift.String,
                                repo: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.PullRequestsPayloadPayload.BasePayload.RepoPayload,
                                sha: Swift.String
                            ) {
                                self.ref = ref
                                self.repo = repo
                                self.sha = sha
                            }
                            public enum CodingKeys: String, CodingKey {
                                case ref
                                case repo
                                case sha
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/PullRequestsPayload/base`.
                        public var base: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.PullRequestsPayloadPayload.BasePayload
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/PullRequestsPayload/head`.
                        public struct HeadPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/PullRequestsPayload/head/ref`.
                            public var ref: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/PullRequestsPayload/head/repo`.
                            public struct RepoPayload: Codable, Hashable, Sendable {
                                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/PullRequestsPayload/head/repo/id`.
                                public var id: Swift.Int
                                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/PullRequestsPayload/head/repo/name`.
                                public var name: Swift.String
                                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/PullRequestsPayload/head/repo/url`.
                                public var url: Swift.String
                                /// Creates a new `RepoPayload`.
                                ///
                                /// - Parameters:
                                ///   - id:
                                ///   - name:
                                ///   - url:
                                public init(
                                    id: Swift.Int,
                                    name: Swift.String,
                                    url: Swift.String
                                ) {
                                    self.id = id
                                    self.name = name
                                    self.url = url
                                }
                                public enum CodingKeys: String, CodingKey {
                                    case id
                                    case name
                                    case url
                                }
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/PullRequestsPayload/head/repo`.
                            public var repo: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.PullRequestsPayloadPayload.HeadPayload.RepoPayload
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/PullRequestsPayload/head/sha`.
                            public var sha: Swift.String
                            /// Creates a new `HeadPayload`.
                            ///
                            /// - Parameters:
                            ///   - ref:
                            ///   - repo:
                            ///   - sha:
                            public init(
                                ref: Swift.String,
                                repo: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.PullRequestsPayloadPayload.HeadPayload.RepoPayload,
                                sha: Swift.String
                            ) {
                                self.ref = ref
                                self.repo = repo
                                self.sha = sha
                            }
                            public enum CodingKeys: String, CodingKey {
                                case ref
                                case repo
                                case sha
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/PullRequestsPayload/head`.
                        public var head: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.PullRequestsPayloadPayload.HeadPayload
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/PullRequestsPayload/id`.
                        public var id: Swift.Double
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/PullRequestsPayload/number`.
                        public var number: Swift.Double
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/PullRequestsPayload/url`.
                        public var url: Swift.String
                        /// Creates a new `PullRequestsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - base:
                        ///   - head:
                        ///   - id:
                        ///   - number:
                        ///   - url:
                        public init(
                            base: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.PullRequestsPayloadPayload.BasePayload,
                            head: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.PullRequestsPayloadPayload.HeadPayload,
                            id: Swift.Double,
                            number: Swift.Double,
                            url: Swift.String
                        ) {
                            self.base = base
                            self.head = head
                            self.id = id
                            self.number = number
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case base
                            case head
                            case id
                            case number
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/pull_requests`.
                    public typealias PullRequestsPayload = [Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.PullRequestsPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/pull_requests`.
                    public var pullRequests: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.PullRequestsPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/ReferencedWorkflowsPayload`.
                    public struct ReferencedWorkflowsPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/ReferencedWorkflowsPayload/path`.
                        public var path: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/ReferencedWorkflowsPayload/ref`.
                        public var ref: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/ReferencedWorkflowsPayload/sha`.
                        public var sha: Swift.String
                        /// Creates a new `ReferencedWorkflowsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - path:
                        ///   - ref:
                        ///   - sha:
                        public init(
                            path: Swift.String,
                            ref: Swift.String? = nil,
                            sha: Swift.String
                        ) {
                            self.path = path
                            self.ref = ref
                            self.sha = sha
                        }
                        public enum CodingKeys: String, CodingKey {
                            case path
                            case ref
                            case sha
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/referenced_workflows`.
                    public typealias ReferencedWorkflowsPayload = [Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.ReferencedWorkflowsPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/referenced_workflows`.
                    public var referencedWorkflows: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.ReferencedWorkflowsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository`.
                    public struct RepositoryPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/archive_url`.
                        public var archiveUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/assignees_url`.
                        public var assigneesUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/blobs_url`.
                        public var blobsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/branches_url`.
                        public var branchesUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/collaborators_url`.
                        public var collaboratorsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/comments_url`.
                        public var commentsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/commits_url`.
                        public var commitsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/compare_url`.
                        public var compareUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/contents_url`.
                        public var contentsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/contributors_url`.
                        public var contributorsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/deployments_url`.
                        public var deploymentsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/downloads_url`.
                        public var downloadsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/events_url`.
                        public var eventsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/fork`.
                        public var fork: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/forks_url`.
                        public var forksUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/full_name`.
                        public var fullName: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/git_commits_url`.
                        public var gitCommitsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/git_refs_url`.
                        public var gitRefsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/git_tags_url`.
                        public var gitTagsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/hooks_url`.
                        public var hooksUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/html_url`.
                        public var htmlUrl: Swift.String
                        /// Unique identifier of the repository
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/issue_comment_url`.
                        public var issueCommentUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/issue_events_url`.
                        public var issueEventsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/issues_url`.
                        public var issuesUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/keys_url`.
                        public var keysUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/labels_url`.
                        public var labelsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/languages_url`.
                        public var languagesUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/merges_url`.
                        public var mergesUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/milestones_url`.
                        public var milestonesUrl: Swift.String
                        /// The name of the repository.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/node_id`.
                        public var nodeId: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/notifications_url`.
                        public var notificationsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/owner`.
                        public struct OwnerPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/owner/avatar_url`.
                            public var avatarUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/owner/deleted`.
                            public var deleted: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/owner/email`.
                            public var email: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/owner/events_url`.
                            public var eventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/owner/followers_url`.
                            public var followersUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/owner/following_url`.
                            public var followingUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/owner/gists_url`.
                            public var gistsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/owner/gravatar_id`.
                            public var gravatarId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/owner/html_url`.
                            public var htmlUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/owner/id`.
                            public var id: Swift.Int
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/owner/login`.
                            public var login: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/owner/name`.
                            public var name: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/owner/node_id`.
                            public var nodeId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/owner/organizations_url`.
                            public var organizationsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/owner/received_events_url`.
                            public var receivedEventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/owner/repos_url`.
                            public var reposUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/owner/site_admin`.
                            public var siteAdmin: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/owner/starred_url`.
                            public var starredUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/owner/subscriptions_url`.
                            public var subscriptionsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/owner/type`.
                            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case bot = "Bot"
                                case user = "User"
                                case organization = "Organization"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/owner/type`.
                            public var _type: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.RepositoryPayload.OwnerPayload._TypePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/owner/url`.
                            public var url: Swift.String?
                            /// Creates a new `OwnerPayload`.
                            ///
                            /// - Parameters:
                            ///   - avatarUrl:
                            ///   - deleted:
                            ///   - email:
                            ///   - eventsUrl:
                            ///   - followersUrl:
                            ///   - followingUrl:
                            ///   - gistsUrl:
                            ///   - gravatarId:
                            ///   - htmlUrl:
                            ///   - id:
                            ///   - login:
                            ///   - name:
                            ///   - nodeId:
                            ///   - organizationsUrl:
                            ///   - receivedEventsUrl:
                            ///   - reposUrl:
                            ///   - siteAdmin:
                            ///   - starredUrl:
                            ///   - subscriptionsUrl:
                            ///   - _type:
                            ///   - url:
                            public init(
                                avatarUrl: Swift.String? = nil,
                                deleted: Swift.Bool? = nil,
                                email: Swift.String? = nil,
                                eventsUrl: Swift.String? = nil,
                                followersUrl: Swift.String? = nil,
                                followingUrl: Swift.String? = nil,
                                gistsUrl: Swift.String? = nil,
                                gravatarId: Swift.String? = nil,
                                htmlUrl: Swift.String? = nil,
                                id: Swift.Int,
                                login: Swift.String,
                                name: Swift.String? = nil,
                                nodeId: Swift.String? = nil,
                                organizationsUrl: Swift.String? = nil,
                                receivedEventsUrl: Swift.String? = nil,
                                reposUrl: Swift.String? = nil,
                                siteAdmin: Swift.Bool? = nil,
                                starredUrl: Swift.String? = nil,
                                subscriptionsUrl: Swift.String? = nil,
                                _type: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.RepositoryPayload.OwnerPayload._TypePayload? = nil,
                                url: Swift.String? = nil
                            ) {
                                self.avatarUrl = avatarUrl
                                self.deleted = deleted
                                self.email = email
                                self.eventsUrl = eventsUrl
                                self.followersUrl = followersUrl
                                self.followingUrl = followingUrl
                                self.gistsUrl = gistsUrl
                                self.gravatarId = gravatarId
                                self.htmlUrl = htmlUrl
                                self.id = id
                                self.login = login
                                self.name = name
                                self.nodeId = nodeId
                                self.organizationsUrl = organizationsUrl
                                self.receivedEventsUrl = receivedEventsUrl
                                self.reposUrl = reposUrl
                                self.siteAdmin = siteAdmin
                                self.starredUrl = starredUrl
                                self.subscriptionsUrl = subscriptionsUrl
                                self._type = _type
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case avatarUrl = "avatar_url"
                                case deleted
                                case email
                                case eventsUrl = "events_url"
                                case followersUrl = "followers_url"
                                case followingUrl = "following_url"
                                case gistsUrl = "gists_url"
                                case gravatarId = "gravatar_id"
                                case htmlUrl = "html_url"
                                case id
                                case login
                                case name
                                case nodeId = "node_id"
                                case organizationsUrl = "organizations_url"
                                case receivedEventsUrl = "received_events_url"
                                case reposUrl = "repos_url"
                                case siteAdmin = "site_admin"
                                case starredUrl = "starred_url"
                                case subscriptionsUrl = "subscriptions_url"
                                case _type = "type"
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/owner`.
                        public var owner: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.RepositoryPayload.OwnerPayload?
                        /// Whether the repository is private or public.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/private`.
                        public var _private: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/pulls_url`.
                        public var pullsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/releases_url`.
                        public var releasesUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/stargazers_url`.
                        public var stargazersUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/statuses_url`.
                        public var statusesUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/subscribers_url`.
                        public var subscribersUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/subscription_url`.
                        public var subscriptionUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/tags_url`.
                        public var tagsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/teams_url`.
                        public var teamsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/trees_url`.
                        public var treesUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository/url`.
                        public var url: Swift.String
                        /// Creates a new `RepositoryPayload`.
                        ///
                        /// - Parameters:
                        ///   - archiveUrl:
                        ///   - assigneesUrl:
                        ///   - blobsUrl:
                        ///   - branchesUrl:
                        ///   - collaboratorsUrl:
                        ///   - commentsUrl:
                        ///   - commitsUrl:
                        ///   - compareUrl:
                        ///   - contentsUrl:
                        ///   - contributorsUrl:
                        ///   - deploymentsUrl:
                        ///   - description:
                        ///   - downloadsUrl:
                        ///   - eventsUrl:
                        ///   - fork:
                        ///   - forksUrl:
                        ///   - fullName:
                        ///   - gitCommitsUrl:
                        ///   - gitRefsUrl:
                        ///   - gitTagsUrl:
                        ///   - hooksUrl:
                        ///   - htmlUrl:
                        ///   - id: Unique identifier of the repository
                        ///   - issueCommentUrl:
                        ///   - issueEventsUrl:
                        ///   - issuesUrl:
                        ///   - keysUrl:
                        ///   - labelsUrl:
                        ///   - languagesUrl:
                        ///   - mergesUrl:
                        ///   - milestonesUrl:
                        ///   - name: The name of the repository.
                        ///   - nodeId:
                        ///   - notificationsUrl:
                        ///   - owner:
                        ///   - _private: Whether the repository is private or public.
                        ///   - pullsUrl:
                        ///   - releasesUrl:
                        ///   - stargazersUrl:
                        ///   - statusesUrl:
                        ///   - subscribersUrl:
                        ///   - subscriptionUrl:
                        ///   - tagsUrl:
                        ///   - teamsUrl:
                        ///   - treesUrl:
                        ///   - url:
                        public init(
                            archiveUrl: Swift.String,
                            assigneesUrl: Swift.String,
                            blobsUrl: Swift.String,
                            branchesUrl: Swift.String,
                            collaboratorsUrl: Swift.String,
                            commentsUrl: Swift.String,
                            commitsUrl: Swift.String,
                            compareUrl: Swift.String,
                            contentsUrl: Swift.String,
                            contributorsUrl: Swift.String,
                            deploymentsUrl: Swift.String,
                            description: Swift.String? = nil,
                            downloadsUrl: Swift.String,
                            eventsUrl: Swift.String,
                            fork: Swift.Bool,
                            forksUrl: Swift.String,
                            fullName: Swift.String,
                            gitCommitsUrl: Swift.String,
                            gitRefsUrl: Swift.String,
                            gitTagsUrl: Swift.String,
                            hooksUrl: Swift.String,
                            htmlUrl: Swift.String,
                            id: Swift.Int,
                            issueCommentUrl: Swift.String,
                            issueEventsUrl: Swift.String,
                            issuesUrl: Swift.String,
                            keysUrl: Swift.String,
                            labelsUrl: Swift.String,
                            languagesUrl: Swift.String,
                            mergesUrl: Swift.String,
                            milestonesUrl: Swift.String,
                            name: Swift.String,
                            nodeId: Swift.String,
                            notificationsUrl: Swift.String,
                            owner: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.RepositoryPayload.OwnerPayload? = nil,
                            _private: Swift.Bool,
                            pullsUrl: Swift.String,
                            releasesUrl: Swift.String,
                            stargazersUrl: Swift.String,
                            statusesUrl: Swift.String,
                            subscribersUrl: Swift.String,
                            subscriptionUrl: Swift.String,
                            tagsUrl: Swift.String,
                            teamsUrl: Swift.String,
                            treesUrl: Swift.String,
                            url: Swift.String
                        ) {
                            self.archiveUrl = archiveUrl
                            self.assigneesUrl = assigneesUrl
                            self.blobsUrl = blobsUrl
                            self.branchesUrl = branchesUrl
                            self.collaboratorsUrl = collaboratorsUrl
                            self.commentsUrl = commentsUrl
                            self.commitsUrl = commitsUrl
                            self.compareUrl = compareUrl
                            self.contentsUrl = contentsUrl
                            self.contributorsUrl = contributorsUrl
                            self.deploymentsUrl = deploymentsUrl
                            self.description = description
                            self.downloadsUrl = downloadsUrl
                            self.eventsUrl = eventsUrl
                            self.fork = fork
                            self.forksUrl = forksUrl
                            self.fullName = fullName
                            self.gitCommitsUrl = gitCommitsUrl
                            self.gitRefsUrl = gitRefsUrl
                            self.gitTagsUrl = gitTagsUrl
                            self.hooksUrl = hooksUrl
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.issueCommentUrl = issueCommentUrl
                            self.issueEventsUrl = issueEventsUrl
                            self.issuesUrl = issuesUrl
                            self.keysUrl = keysUrl
                            self.labelsUrl = labelsUrl
                            self.languagesUrl = languagesUrl
                            self.mergesUrl = mergesUrl
                            self.milestonesUrl = milestonesUrl
                            self.name = name
                            self.nodeId = nodeId
                            self.notificationsUrl = notificationsUrl
                            self.owner = owner
                            self._private = _private
                            self.pullsUrl = pullsUrl
                            self.releasesUrl = releasesUrl
                            self.stargazersUrl = stargazersUrl
                            self.statusesUrl = statusesUrl
                            self.subscribersUrl = subscribersUrl
                            self.subscriptionUrl = subscriptionUrl
                            self.tagsUrl = tagsUrl
                            self.teamsUrl = teamsUrl
                            self.treesUrl = treesUrl
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case archiveUrl = "archive_url"
                            case assigneesUrl = "assignees_url"
                            case blobsUrl = "blobs_url"
                            case branchesUrl = "branches_url"
                            case collaboratorsUrl = "collaborators_url"
                            case commentsUrl = "comments_url"
                            case commitsUrl = "commits_url"
                            case compareUrl = "compare_url"
                            case contentsUrl = "contents_url"
                            case contributorsUrl = "contributors_url"
                            case deploymentsUrl = "deployments_url"
                            case description
                            case downloadsUrl = "downloads_url"
                            case eventsUrl = "events_url"
                            case fork
                            case forksUrl = "forks_url"
                            case fullName = "full_name"
                            case gitCommitsUrl = "git_commits_url"
                            case gitRefsUrl = "git_refs_url"
                            case gitTagsUrl = "git_tags_url"
                            case hooksUrl = "hooks_url"
                            case htmlUrl = "html_url"
                            case id
                            case issueCommentUrl = "issue_comment_url"
                            case issueEventsUrl = "issue_events_url"
                            case issuesUrl = "issues_url"
                            case keysUrl = "keys_url"
                            case labelsUrl = "labels_url"
                            case languagesUrl = "languages_url"
                            case mergesUrl = "merges_url"
                            case milestonesUrl = "milestones_url"
                            case name
                            case nodeId = "node_id"
                            case notificationsUrl = "notifications_url"
                            case owner
                            case _private = "private"
                            case pullsUrl = "pulls_url"
                            case releasesUrl = "releases_url"
                            case stargazersUrl = "stargazers_url"
                            case statusesUrl = "statuses_url"
                            case subscribersUrl = "subscribers_url"
                            case subscriptionUrl = "subscription_url"
                            case tagsUrl = "tags_url"
                            case teamsUrl = "teams_url"
                            case treesUrl = "trees_url"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/repository`.
                    public var repository: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.RepositoryPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/rerun_url`.
                    public var rerunUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/run_attempt`.
                    public var runAttempt: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/run_number`.
                    public var runNumber: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/run_started_at`.
                    public var runStartedAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/status`.
                    @frozen public enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case requested = "requested"
                        case inProgress = "in_progress"
                        case completed = "completed"
                        case queued = "queued"
                        case pending = "pending"
                        case waiting = "waiting"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/status`.
                    public var status: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.StatusPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/triggering_actor`.
                    public struct TriggeringActorPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/triggering_actor/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/triggering_actor/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/triggering_actor/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/triggering_actor/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/triggering_actor/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/triggering_actor/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/triggering_actor/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/triggering_actor/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/triggering_actor/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/triggering_actor/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/triggering_actor/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/triggering_actor/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/triggering_actor/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/triggering_actor/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/triggering_actor/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/triggering_actor/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/triggering_actor/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/triggering_actor/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/triggering_actor/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/triggering_actor/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/triggering_actor/type`.
                        public var _type: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.TriggeringActorPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/triggering_actor/url`.
                        public var url: Swift.String?
                        /// Creates a new `TriggeringActorPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.TriggeringActorPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/triggering_actor`.
                    public var triggeringActor: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.TriggeringActorPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/updated_at`.
                    public var updatedAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/url`.
                    public var url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/workflow_id`.
                    public var workflowId: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1/workflow_url`.
                    public var workflowUrl: Swift.String
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - actor:
                    ///   - artifactsUrl:
                    ///   - cancelUrl:
                    ///   - checkSuiteId:
                    ///   - checkSuiteNodeId:
                    ///   - checkSuiteUrl:
                    ///   - conclusion:
                    ///   - createdAt:
                    ///   - event:
                    ///   - headBranch:
                    ///   - headCommit:
                    ///   - headRepository:
                    ///   - headSha:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - jobsUrl:
                    ///   - logsUrl:
                    ///   - name:
                    ///   - nodeId:
                    ///   - path:
                    ///   - previousAttemptUrl:
                    ///   - pullRequests:
                    ///   - referencedWorkflows:
                    ///   - repository:
                    ///   - rerunUrl:
                    ///   - runAttempt:
                    ///   - runNumber:
                    ///   - runStartedAt:
                    ///   - status:
                    ///   - triggeringActor:
                    ///   - updatedAt:
                    ///   - url:
                    ///   - workflowId:
                    ///   - workflowUrl:
                    public init(
                        actor: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.ActorPayload? = nil,
                        artifactsUrl: Swift.String,
                        cancelUrl: Swift.String,
                        checkSuiteId: Swift.Int,
                        checkSuiteNodeId: Swift.String,
                        checkSuiteUrl: Swift.String,
                        conclusion: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.ConclusionPayload? = nil,
                        createdAt: Foundation.Date,
                        event: Swift.String,
                        headBranch: Swift.String? = nil,
                        headCommit: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.HeadCommitPayload,
                        headRepository: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.HeadRepositoryPayload,
                        headSha: Swift.String,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        jobsUrl: Swift.String,
                        logsUrl: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String,
                        path: Swift.String,
                        previousAttemptUrl: Swift.String? = nil,
                        pullRequests: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.PullRequestsPayload,
                        referencedWorkflows: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.ReferencedWorkflowsPayload? = nil,
                        repository: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.RepositoryPayload,
                        rerunUrl: Swift.String,
                        runAttempt: Swift.Int,
                        runNumber: Swift.Int,
                        runStartedAt: Foundation.Date,
                        status: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.StatusPayload,
                        triggeringActor: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload.TriggeringActorPayload? = nil,
                        updatedAt: Foundation.Date,
                        url: Swift.String,
                        workflowId: Swift.Int,
                        workflowUrl: Swift.String
                    ) {
                        self.actor = actor
                        self.artifactsUrl = artifactsUrl
                        self.cancelUrl = cancelUrl
                        self.checkSuiteId = checkSuiteId
                        self.checkSuiteNodeId = checkSuiteNodeId
                        self.checkSuiteUrl = checkSuiteUrl
                        self.conclusion = conclusion
                        self.createdAt = createdAt
                        self.event = event
                        self.headBranch = headBranch
                        self.headCommit = headCommit
                        self.headRepository = headRepository
                        self.headSha = headSha
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.jobsUrl = jobsUrl
                        self.logsUrl = logsUrl
                        self.name = name
                        self.nodeId = nodeId
                        self.path = path
                        self.previousAttemptUrl = previousAttemptUrl
                        self.pullRequests = pullRequests
                        self.referencedWorkflows = referencedWorkflows
                        self.repository = repository
                        self.rerunUrl = rerunUrl
                        self.runAttempt = runAttempt
                        self.runNumber = runNumber
                        self.runStartedAt = runStartedAt
                        self.status = status
                        self.triggeringActor = triggeringActor
                        self.updatedAt = updatedAt
                        self.url = url
                        self.workflowId = workflowId
                        self.workflowUrl = workflowUrl
                    }
                    public enum CodingKeys: String, CodingKey {
                        case actor
                        case artifactsUrl = "artifacts_url"
                        case cancelUrl = "cancel_url"
                        case checkSuiteId = "check_suite_id"
                        case checkSuiteNodeId = "check_suite_node_id"
                        case checkSuiteUrl = "check_suite_url"
                        case conclusion
                        case createdAt = "created_at"
                        case event
                        case headBranch = "head_branch"
                        case headCommit = "head_commit"
                        case headRepository = "head_repository"
                        case headSha = "head_sha"
                        case htmlUrl = "html_url"
                        case id
                        case jobsUrl = "jobs_url"
                        case logsUrl = "logs_url"
                        case name
                        case nodeId = "node_id"
                        case path
                        case previousAttemptUrl = "previous_attempt_url"
                        case pullRequests = "pull_requests"
                        case referencedWorkflows = "referenced_workflows"
                        case repository
                        case rerunUrl = "rerun_url"
                        case runAttempt = "run_attempt"
                        case runNumber = "run_number"
                        case runStartedAt = "run_started_at"
                        case status
                        case triggeringActor = "triggering_actor"
                        case updatedAt = "updated_at"
                        case url
                        case workflowId = "workflow_id"
                        case workflowUrl = "workflow_url"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value1`.
                public var value1: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/actor`.
                    public struct ActorPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/actor/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/actor/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/actor/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/actor/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/actor/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/actor/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/actor/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/actor/id`.
                        public var id: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/actor/login`.
                        public var login: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/actor/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/actor/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/actor/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/actor/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/actor/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/actor/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/actor/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/actor/type`.
                        public var _type: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/actor/url`.
                        public var url: Swift.String?
                        /// Creates a new `ActorPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int? = nil,
                            login: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/actor`.
                    public var actor: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value2Payload.ActorPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/artifacts_url`.
                    public var artifactsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/cancel_url`.
                    public var cancelUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/check_suite_id`.
                    public var checkSuiteId: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/check_suite_node_id`.
                    public var checkSuiteNodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/check_suite_url`.
                    public var checkSuiteUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/conclusion`.
                    @frozen public enum ConclusionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case success = "success"
                        case failure = "failure"
                        case neutral = "neutral"
                        case cancelled = "cancelled"
                        case timedOut = "timed_out"
                        case actionRequired = "action_required"
                        case stale = "stale"
                        case skipped = "skipped"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/conclusion`.
                    public var conclusion: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value2Payload.ConclusionPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/created_at`.
                    public var createdAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/event`.
                    public var event: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_branch`.
                    public var headBranch: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_commit`.
                    public struct HeadCommitPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_commit/author`.
                        public struct AuthorPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_commit/author/email`.
                            public var email: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_commit/author/name`.
                            public var name: Swift.String?
                            /// Creates a new `AuthorPayload`.
                            ///
                            /// - Parameters:
                            ///   - email:
                            ///   - name:
                            public init(
                                email: Swift.String? = nil,
                                name: Swift.String? = nil
                            ) {
                                self.email = email
                                self.name = name
                            }
                            public enum CodingKeys: String, CodingKey {
                                case email
                                case name
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_commit/author`.
                        public var author: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value2Payload.HeadCommitPayload.AuthorPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_commit/committer`.
                        public struct CommitterPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_commit/committer/email`.
                            public var email: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_commit/committer/name`.
                            public var name: Swift.String?
                            /// Creates a new `CommitterPayload`.
                            ///
                            /// - Parameters:
                            ///   - email:
                            ///   - name:
                            public init(
                                email: Swift.String? = nil,
                                name: Swift.String? = nil
                            ) {
                                self.email = email
                                self.name = name
                            }
                            public enum CodingKeys: String, CodingKey {
                                case email
                                case name
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_commit/committer`.
                        public var committer: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value2Payload.HeadCommitPayload.CommitterPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_commit/id`.
                        public var id: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_commit/message`.
                        public var message: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_commit/timestamp`.
                        public var timestamp: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_commit/tree_id`.
                        public var treeId: Swift.String?
                        /// Creates a new `HeadCommitPayload`.
                        ///
                        /// - Parameters:
                        ///   - author:
                        ///   - committer:
                        ///   - id:
                        ///   - message:
                        ///   - timestamp:
                        ///   - treeId:
                        public init(
                            author: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value2Payload.HeadCommitPayload.AuthorPayload? = nil,
                            committer: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value2Payload.HeadCommitPayload.CommitterPayload? = nil,
                            id: Swift.String? = nil,
                            message: Swift.String? = nil,
                            timestamp: Swift.String? = nil,
                            treeId: Swift.String? = nil
                        ) {
                            self.author = author
                            self.committer = committer
                            self.id = id
                            self.message = message
                            self.timestamp = timestamp
                            self.treeId = treeId
                        }
                        public enum CodingKeys: String, CodingKey {
                            case author
                            case committer
                            case id
                            case message
                            case timestamp
                            case treeId = "tree_id"
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_commit`.
                    public var headCommit: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value2Payload.HeadCommitPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository`.
                    public struct HeadRepositoryPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/archive_url`.
                        public var archiveUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/assignees_url`.
                        public var assigneesUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/blobs_url`.
                        public var blobsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/branches_url`.
                        public var branchesUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/collaborators_url`.
                        public var collaboratorsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/comments_url`.
                        public var commentsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/commits_url`.
                        public var commitsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/compare_url`.
                        public var compareUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/contents_url`.
                        public var contentsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/contributors_url`.
                        public var contributorsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/deployments_url`.
                        public var deploymentsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/downloads_url`.
                        public var downloadsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/fork`.
                        public var fork: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/forks_url`.
                        public var forksUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/full_name`.
                        public var fullName: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/git_commits_url`.
                        public var gitCommitsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/git_refs_url`.
                        public var gitRefsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/git_tags_url`.
                        public var gitTagsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/hooks_url`.
                        public var hooksUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/id`.
                        public var id: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/issue_comment_url`.
                        public var issueCommentUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/issue_events_url`.
                        public var issueEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/issues_url`.
                        public var issuesUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/keys_url`.
                        public var keysUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/labels_url`.
                        public var labelsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/languages_url`.
                        public var languagesUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/merges_url`.
                        public var mergesUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/milestones_url`.
                        public var milestonesUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/notifications_url`.
                        public var notificationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/owner`.
                        public struct OwnerPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/owner/avatar_url`.
                            public var avatarUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/owner/events_url`.
                            public var eventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/owner/followers_url`.
                            public var followersUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/owner/following_url`.
                            public var followingUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/owner/gists_url`.
                            public var gistsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/owner/gravatar_id`.
                            public var gravatarId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/owner/html_url`.
                            public var htmlUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/owner/id`.
                            public var id: Swift.Int?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/owner/login`.
                            public var login: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/owner/node_id`.
                            public var nodeId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/owner/organizations_url`.
                            public var organizationsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/owner/received_events_url`.
                            public var receivedEventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/owner/repos_url`.
                            public var reposUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/owner/site_admin`.
                            public var siteAdmin: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/owner/starred_url`.
                            public var starredUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/owner/subscriptions_url`.
                            public var subscriptionsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/owner/type`.
                            public var _type: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/owner/url`.
                            public var url: Swift.String?
                            /// Creates a new `OwnerPayload`.
                            ///
                            /// - Parameters:
                            ///   - avatarUrl:
                            ///   - eventsUrl:
                            ///   - followersUrl:
                            ///   - followingUrl:
                            ///   - gistsUrl:
                            ///   - gravatarId:
                            ///   - htmlUrl:
                            ///   - id:
                            ///   - login:
                            ///   - nodeId:
                            ///   - organizationsUrl:
                            ///   - receivedEventsUrl:
                            ///   - reposUrl:
                            ///   - siteAdmin:
                            ///   - starredUrl:
                            ///   - subscriptionsUrl:
                            ///   - _type:
                            ///   - url:
                            public init(
                                avatarUrl: Swift.String? = nil,
                                eventsUrl: Swift.String? = nil,
                                followersUrl: Swift.String? = nil,
                                followingUrl: Swift.String? = nil,
                                gistsUrl: Swift.String? = nil,
                                gravatarId: Swift.String? = nil,
                                htmlUrl: Swift.String? = nil,
                                id: Swift.Int? = nil,
                                login: Swift.String? = nil,
                                nodeId: Swift.String? = nil,
                                organizationsUrl: Swift.String? = nil,
                                receivedEventsUrl: Swift.String? = nil,
                                reposUrl: Swift.String? = nil,
                                siteAdmin: Swift.Bool? = nil,
                                starredUrl: Swift.String? = nil,
                                subscriptionsUrl: Swift.String? = nil,
                                _type: Swift.String? = nil,
                                url: Swift.String? = nil
                            ) {
                                self.avatarUrl = avatarUrl
                                self.eventsUrl = eventsUrl
                                self.followersUrl = followersUrl
                                self.followingUrl = followingUrl
                                self.gistsUrl = gistsUrl
                                self.gravatarId = gravatarId
                                self.htmlUrl = htmlUrl
                                self.id = id
                                self.login = login
                                self.nodeId = nodeId
                                self.organizationsUrl = organizationsUrl
                                self.receivedEventsUrl = receivedEventsUrl
                                self.reposUrl = reposUrl
                                self.siteAdmin = siteAdmin
                                self.starredUrl = starredUrl
                                self.subscriptionsUrl = subscriptionsUrl
                                self._type = _type
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case avatarUrl = "avatar_url"
                                case eventsUrl = "events_url"
                                case followersUrl = "followers_url"
                                case followingUrl = "following_url"
                                case gistsUrl = "gists_url"
                                case gravatarId = "gravatar_id"
                                case htmlUrl = "html_url"
                                case id
                                case login
                                case nodeId = "node_id"
                                case organizationsUrl = "organizations_url"
                                case receivedEventsUrl = "received_events_url"
                                case reposUrl = "repos_url"
                                case siteAdmin = "site_admin"
                                case starredUrl = "starred_url"
                                case subscriptionsUrl = "subscriptions_url"
                                case _type = "type"
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/owner`.
                        public var owner: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value2Payload.HeadRepositoryPayload.OwnerPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/private`.
                        public var _private: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/pulls_url`.
                        public var pullsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/releases_url`.
                        public var releasesUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/stargazers_url`.
                        public var stargazersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/statuses_url`.
                        public var statusesUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/subscribers_url`.
                        public var subscribersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/subscription_url`.
                        public var subscriptionUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/tags_url`.
                        public var tagsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/teams_url`.
                        public var teamsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/trees_url`.
                        public var treesUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository/url`.
                        public var url: Swift.String?
                        /// Creates a new `HeadRepositoryPayload`.
                        ///
                        /// - Parameters:
                        ///   - archiveUrl:
                        ///   - assigneesUrl:
                        ///   - blobsUrl:
                        ///   - branchesUrl:
                        ///   - collaboratorsUrl:
                        ///   - commentsUrl:
                        ///   - commitsUrl:
                        ///   - compareUrl:
                        ///   - contentsUrl:
                        ///   - contributorsUrl:
                        ///   - deploymentsUrl:
                        ///   - description:
                        ///   - downloadsUrl:
                        ///   - eventsUrl:
                        ///   - fork:
                        ///   - forksUrl:
                        ///   - fullName:
                        ///   - gitCommitsUrl:
                        ///   - gitRefsUrl:
                        ///   - gitTagsUrl:
                        ///   - hooksUrl:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - issueCommentUrl:
                        ///   - issueEventsUrl:
                        ///   - issuesUrl:
                        ///   - keysUrl:
                        ///   - labelsUrl:
                        ///   - languagesUrl:
                        ///   - mergesUrl:
                        ///   - milestonesUrl:
                        ///   - name:
                        ///   - nodeId:
                        ///   - notificationsUrl:
                        ///   - owner:
                        ///   - _private:
                        ///   - pullsUrl:
                        ///   - releasesUrl:
                        ///   - stargazersUrl:
                        ///   - statusesUrl:
                        ///   - subscribersUrl:
                        ///   - subscriptionUrl:
                        ///   - tagsUrl:
                        ///   - teamsUrl:
                        ///   - treesUrl:
                        ///   - url:
                        public init(
                            archiveUrl: Swift.String? = nil,
                            assigneesUrl: Swift.String? = nil,
                            blobsUrl: Swift.String? = nil,
                            branchesUrl: Swift.String? = nil,
                            collaboratorsUrl: Swift.String? = nil,
                            commentsUrl: Swift.String? = nil,
                            commitsUrl: Swift.String? = nil,
                            compareUrl: Swift.String? = nil,
                            contentsUrl: Swift.String? = nil,
                            contributorsUrl: Swift.String? = nil,
                            deploymentsUrl: Swift.String? = nil,
                            description: Swift.String? = nil,
                            downloadsUrl: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            fork: Swift.Bool? = nil,
                            forksUrl: Swift.String? = nil,
                            fullName: Swift.String? = nil,
                            gitCommitsUrl: Swift.String? = nil,
                            gitRefsUrl: Swift.String? = nil,
                            gitTagsUrl: Swift.String? = nil,
                            hooksUrl: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int? = nil,
                            issueCommentUrl: Swift.String? = nil,
                            issueEventsUrl: Swift.String? = nil,
                            issuesUrl: Swift.String? = nil,
                            keysUrl: Swift.String? = nil,
                            labelsUrl: Swift.String? = nil,
                            languagesUrl: Swift.String? = nil,
                            mergesUrl: Swift.String? = nil,
                            milestonesUrl: Swift.String? = nil,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            notificationsUrl: Swift.String? = nil,
                            owner: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value2Payload.HeadRepositoryPayload.OwnerPayload? = nil,
                            _private: Swift.Bool? = nil,
                            pullsUrl: Swift.String? = nil,
                            releasesUrl: Swift.String? = nil,
                            stargazersUrl: Swift.String? = nil,
                            statusesUrl: Swift.String? = nil,
                            subscribersUrl: Swift.String? = nil,
                            subscriptionUrl: Swift.String? = nil,
                            tagsUrl: Swift.String? = nil,
                            teamsUrl: Swift.String? = nil,
                            treesUrl: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.archiveUrl = archiveUrl
                            self.assigneesUrl = assigneesUrl
                            self.blobsUrl = blobsUrl
                            self.branchesUrl = branchesUrl
                            self.collaboratorsUrl = collaboratorsUrl
                            self.commentsUrl = commentsUrl
                            self.commitsUrl = commitsUrl
                            self.compareUrl = compareUrl
                            self.contentsUrl = contentsUrl
                            self.contributorsUrl = contributorsUrl
                            self.deploymentsUrl = deploymentsUrl
                            self.description = description
                            self.downloadsUrl = downloadsUrl
                            self.eventsUrl = eventsUrl
                            self.fork = fork
                            self.forksUrl = forksUrl
                            self.fullName = fullName
                            self.gitCommitsUrl = gitCommitsUrl
                            self.gitRefsUrl = gitRefsUrl
                            self.gitTagsUrl = gitTagsUrl
                            self.hooksUrl = hooksUrl
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.issueCommentUrl = issueCommentUrl
                            self.issueEventsUrl = issueEventsUrl
                            self.issuesUrl = issuesUrl
                            self.keysUrl = keysUrl
                            self.labelsUrl = labelsUrl
                            self.languagesUrl = languagesUrl
                            self.mergesUrl = mergesUrl
                            self.milestonesUrl = milestonesUrl
                            self.name = name
                            self.nodeId = nodeId
                            self.notificationsUrl = notificationsUrl
                            self.owner = owner
                            self._private = _private
                            self.pullsUrl = pullsUrl
                            self.releasesUrl = releasesUrl
                            self.stargazersUrl = stargazersUrl
                            self.statusesUrl = statusesUrl
                            self.subscribersUrl = subscribersUrl
                            self.subscriptionUrl = subscriptionUrl
                            self.tagsUrl = tagsUrl
                            self.teamsUrl = teamsUrl
                            self.treesUrl = treesUrl
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case archiveUrl = "archive_url"
                            case assigneesUrl = "assignees_url"
                            case blobsUrl = "blobs_url"
                            case branchesUrl = "branches_url"
                            case collaboratorsUrl = "collaborators_url"
                            case commentsUrl = "comments_url"
                            case commitsUrl = "commits_url"
                            case compareUrl = "compare_url"
                            case contentsUrl = "contents_url"
                            case contributorsUrl = "contributors_url"
                            case deploymentsUrl = "deployments_url"
                            case description
                            case downloadsUrl = "downloads_url"
                            case eventsUrl = "events_url"
                            case fork
                            case forksUrl = "forks_url"
                            case fullName = "full_name"
                            case gitCommitsUrl = "git_commits_url"
                            case gitRefsUrl = "git_refs_url"
                            case gitTagsUrl = "git_tags_url"
                            case hooksUrl = "hooks_url"
                            case htmlUrl = "html_url"
                            case id
                            case issueCommentUrl = "issue_comment_url"
                            case issueEventsUrl = "issue_events_url"
                            case issuesUrl = "issues_url"
                            case keysUrl = "keys_url"
                            case labelsUrl = "labels_url"
                            case languagesUrl = "languages_url"
                            case mergesUrl = "merges_url"
                            case milestonesUrl = "milestones_url"
                            case name
                            case nodeId = "node_id"
                            case notificationsUrl = "notifications_url"
                            case owner
                            case _private = "private"
                            case pullsUrl = "pulls_url"
                            case releasesUrl = "releases_url"
                            case stargazersUrl = "stargazers_url"
                            case statusesUrl = "statuses_url"
                            case subscribersUrl = "subscribers_url"
                            case subscriptionUrl = "subscription_url"
                            case tagsUrl = "tags_url"
                            case teamsUrl = "teams_url"
                            case treesUrl = "trees_url"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_repository`.
                    public var headRepository: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value2Payload.HeadRepositoryPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/head_sha`.
                    public var headSha: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/id`.
                    public var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/jobs_url`.
                    public var jobsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/logs_url`.
                    public var logsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/path`.
                    public var path: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/previous_attempt_url`.
                    public var previousAttemptUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/pull_requests`.
                    public var pullRequests: [OpenAPIRuntime.OpenAPIObjectContainer?]?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/ReferencedWorkflowsPayload`.
                    public struct ReferencedWorkflowsPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/ReferencedWorkflowsPayload/path`.
                        public var path: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/ReferencedWorkflowsPayload/ref`.
                        public var ref: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/ReferencedWorkflowsPayload/sha`.
                        public var sha: Swift.String
                        /// Creates a new `ReferencedWorkflowsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - path:
                        ///   - ref:
                        ///   - sha:
                        public init(
                            path: Swift.String,
                            ref: Swift.String? = nil,
                            sha: Swift.String
                        ) {
                            self.path = path
                            self.ref = ref
                            self.sha = sha
                        }
                        public enum CodingKeys: String, CodingKey {
                            case path
                            case ref
                            case sha
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/referenced_workflows`.
                    public typealias ReferencedWorkflowsPayload = [Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value2Payload.ReferencedWorkflowsPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/referenced_workflows`.
                    public var referencedWorkflows: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value2Payload.ReferencedWorkflowsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository`.
                    public struct RepositoryPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/archive_url`.
                        public var archiveUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/assignees_url`.
                        public var assigneesUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/blobs_url`.
                        public var blobsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/branches_url`.
                        public var branchesUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/collaborators_url`.
                        public var collaboratorsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/comments_url`.
                        public var commentsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/commits_url`.
                        public var commitsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/compare_url`.
                        public var compareUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/contents_url`.
                        public var contentsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/contributors_url`.
                        public var contributorsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/deployments_url`.
                        public var deploymentsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/downloads_url`.
                        public var downloadsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/fork`.
                        public var fork: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/forks_url`.
                        public var forksUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/full_name`.
                        public var fullName: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/git_commits_url`.
                        public var gitCommitsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/git_refs_url`.
                        public var gitRefsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/git_tags_url`.
                        public var gitTagsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/hooks_url`.
                        public var hooksUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/id`.
                        public var id: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/issue_comment_url`.
                        public var issueCommentUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/issue_events_url`.
                        public var issueEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/issues_url`.
                        public var issuesUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/keys_url`.
                        public var keysUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/labels_url`.
                        public var labelsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/languages_url`.
                        public var languagesUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/merges_url`.
                        public var mergesUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/milestones_url`.
                        public var milestonesUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/notifications_url`.
                        public var notificationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/owner`.
                        public struct OwnerPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/owner/avatar_url`.
                            public var avatarUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/owner/events_url`.
                            public var eventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/owner/followers_url`.
                            public var followersUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/owner/following_url`.
                            public var followingUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/owner/gists_url`.
                            public var gistsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/owner/gravatar_id`.
                            public var gravatarId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/owner/html_url`.
                            public var htmlUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/owner/id`.
                            public var id: Swift.Int?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/owner/login`.
                            public var login: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/owner/node_id`.
                            public var nodeId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/owner/organizations_url`.
                            public var organizationsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/owner/received_events_url`.
                            public var receivedEventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/owner/repos_url`.
                            public var reposUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/owner/site_admin`.
                            public var siteAdmin: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/owner/starred_url`.
                            public var starredUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/owner/subscriptions_url`.
                            public var subscriptionsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/owner/type`.
                            public var _type: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/owner/url`.
                            public var url: Swift.String?
                            /// Creates a new `OwnerPayload`.
                            ///
                            /// - Parameters:
                            ///   - avatarUrl:
                            ///   - eventsUrl:
                            ///   - followersUrl:
                            ///   - followingUrl:
                            ///   - gistsUrl:
                            ///   - gravatarId:
                            ///   - htmlUrl:
                            ///   - id:
                            ///   - login:
                            ///   - nodeId:
                            ///   - organizationsUrl:
                            ///   - receivedEventsUrl:
                            ///   - reposUrl:
                            ///   - siteAdmin:
                            ///   - starredUrl:
                            ///   - subscriptionsUrl:
                            ///   - _type:
                            ///   - url:
                            public init(
                                avatarUrl: Swift.String? = nil,
                                eventsUrl: Swift.String? = nil,
                                followersUrl: Swift.String? = nil,
                                followingUrl: Swift.String? = nil,
                                gistsUrl: Swift.String? = nil,
                                gravatarId: Swift.String? = nil,
                                htmlUrl: Swift.String? = nil,
                                id: Swift.Int? = nil,
                                login: Swift.String? = nil,
                                nodeId: Swift.String? = nil,
                                organizationsUrl: Swift.String? = nil,
                                receivedEventsUrl: Swift.String? = nil,
                                reposUrl: Swift.String? = nil,
                                siteAdmin: Swift.Bool? = nil,
                                starredUrl: Swift.String? = nil,
                                subscriptionsUrl: Swift.String? = nil,
                                _type: Swift.String? = nil,
                                url: Swift.String? = nil
                            ) {
                                self.avatarUrl = avatarUrl
                                self.eventsUrl = eventsUrl
                                self.followersUrl = followersUrl
                                self.followingUrl = followingUrl
                                self.gistsUrl = gistsUrl
                                self.gravatarId = gravatarId
                                self.htmlUrl = htmlUrl
                                self.id = id
                                self.login = login
                                self.nodeId = nodeId
                                self.organizationsUrl = organizationsUrl
                                self.receivedEventsUrl = receivedEventsUrl
                                self.reposUrl = reposUrl
                                self.siteAdmin = siteAdmin
                                self.starredUrl = starredUrl
                                self.subscriptionsUrl = subscriptionsUrl
                                self._type = _type
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case avatarUrl = "avatar_url"
                                case eventsUrl = "events_url"
                                case followersUrl = "followers_url"
                                case followingUrl = "following_url"
                                case gistsUrl = "gists_url"
                                case gravatarId = "gravatar_id"
                                case htmlUrl = "html_url"
                                case id
                                case login
                                case nodeId = "node_id"
                                case organizationsUrl = "organizations_url"
                                case receivedEventsUrl = "received_events_url"
                                case reposUrl = "repos_url"
                                case siteAdmin = "site_admin"
                                case starredUrl = "starred_url"
                                case subscriptionsUrl = "subscriptions_url"
                                case _type = "type"
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/owner`.
                        public var owner: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value2Payload.RepositoryPayload.OwnerPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/private`.
                        public var _private: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/pulls_url`.
                        public var pullsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/releases_url`.
                        public var releasesUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/stargazers_url`.
                        public var stargazersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/statuses_url`.
                        public var statusesUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/subscribers_url`.
                        public var subscribersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/subscription_url`.
                        public var subscriptionUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/tags_url`.
                        public var tagsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/teams_url`.
                        public var teamsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/trees_url`.
                        public var treesUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository/url`.
                        public var url: Swift.String?
                        /// Creates a new `RepositoryPayload`.
                        ///
                        /// - Parameters:
                        ///   - archiveUrl:
                        ///   - assigneesUrl:
                        ///   - blobsUrl:
                        ///   - branchesUrl:
                        ///   - collaboratorsUrl:
                        ///   - commentsUrl:
                        ///   - commitsUrl:
                        ///   - compareUrl:
                        ///   - contentsUrl:
                        ///   - contributorsUrl:
                        ///   - deploymentsUrl:
                        ///   - description:
                        ///   - downloadsUrl:
                        ///   - eventsUrl:
                        ///   - fork:
                        ///   - forksUrl:
                        ///   - fullName:
                        ///   - gitCommitsUrl:
                        ///   - gitRefsUrl:
                        ///   - gitTagsUrl:
                        ///   - hooksUrl:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - issueCommentUrl:
                        ///   - issueEventsUrl:
                        ///   - issuesUrl:
                        ///   - keysUrl:
                        ///   - labelsUrl:
                        ///   - languagesUrl:
                        ///   - mergesUrl:
                        ///   - milestonesUrl:
                        ///   - name:
                        ///   - nodeId:
                        ///   - notificationsUrl:
                        ///   - owner:
                        ///   - _private:
                        ///   - pullsUrl:
                        ///   - releasesUrl:
                        ///   - stargazersUrl:
                        ///   - statusesUrl:
                        ///   - subscribersUrl:
                        ///   - subscriptionUrl:
                        ///   - tagsUrl:
                        ///   - teamsUrl:
                        ///   - treesUrl:
                        ///   - url:
                        public init(
                            archiveUrl: Swift.String? = nil,
                            assigneesUrl: Swift.String? = nil,
                            blobsUrl: Swift.String? = nil,
                            branchesUrl: Swift.String? = nil,
                            collaboratorsUrl: Swift.String? = nil,
                            commentsUrl: Swift.String? = nil,
                            commitsUrl: Swift.String? = nil,
                            compareUrl: Swift.String? = nil,
                            contentsUrl: Swift.String? = nil,
                            contributorsUrl: Swift.String? = nil,
                            deploymentsUrl: Swift.String? = nil,
                            description: Swift.String? = nil,
                            downloadsUrl: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            fork: Swift.Bool? = nil,
                            forksUrl: Swift.String? = nil,
                            fullName: Swift.String? = nil,
                            gitCommitsUrl: Swift.String? = nil,
                            gitRefsUrl: Swift.String? = nil,
                            gitTagsUrl: Swift.String? = nil,
                            hooksUrl: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int? = nil,
                            issueCommentUrl: Swift.String? = nil,
                            issueEventsUrl: Swift.String? = nil,
                            issuesUrl: Swift.String? = nil,
                            keysUrl: Swift.String? = nil,
                            labelsUrl: Swift.String? = nil,
                            languagesUrl: Swift.String? = nil,
                            mergesUrl: Swift.String? = nil,
                            milestonesUrl: Swift.String? = nil,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            notificationsUrl: Swift.String? = nil,
                            owner: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value2Payload.RepositoryPayload.OwnerPayload? = nil,
                            _private: Swift.Bool? = nil,
                            pullsUrl: Swift.String? = nil,
                            releasesUrl: Swift.String? = nil,
                            stargazersUrl: Swift.String? = nil,
                            statusesUrl: Swift.String? = nil,
                            subscribersUrl: Swift.String? = nil,
                            subscriptionUrl: Swift.String? = nil,
                            tagsUrl: Swift.String? = nil,
                            teamsUrl: Swift.String? = nil,
                            treesUrl: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.archiveUrl = archiveUrl
                            self.assigneesUrl = assigneesUrl
                            self.blobsUrl = blobsUrl
                            self.branchesUrl = branchesUrl
                            self.collaboratorsUrl = collaboratorsUrl
                            self.commentsUrl = commentsUrl
                            self.commitsUrl = commitsUrl
                            self.compareUrl = compareUrl
                            self.contentsUrl = contentsUrl
                            self.contributorsUrl = contributorsUrl
                            self.deploymentsUrl = deploymentsUrl
                            self.description = description
                            self.downloadsUrl = downloadsUrl
                            self.eventsUrl = eventsUrl
                            self.fork = fork
                            self.forksUrl = forksUrl
                            self.fullName = fullName
                            self.gitCommitsUrl = gitCommitsUrl
                            self.gitRefsUrl = gitRefsUrl
                            self.gitTagsUrl = gitTagsUrl
                            self.hooksUrl = hooksUrl
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.issueCommentUrl = issueCommentUrl
                            self.issueEventsUrl = issueEventsUrl
                            self.issuesUrl = issuesUrl
                            self.keysUrl = keysUrl
                            self.labelsUrl = labelsUrl
                            self.languagesUrl = languagesUrl
                            self.mergesUrl = mergesUrl
                            self.milestonesUrl = milestonesUrl
                            self.name = name
                            self.nodeId = nodeId
                            self.notificationsUrl = notificationsUrl
                            self.owner = owner
                            self._private = _private
                            self.pullsUrl = pullsUrl
                            self.releasesUrl = releasesUrl
                            self.stargazersUrl = stargazersUrl
                            self.statusesUrl = statusesUrl
                            self.subscribersUrl = subscribersUrl
                            self.subscriptionUrl = subscriptionUrl
                            self.tagsUrl = tagsUrl
                            self.teamsUrl = teamsUrl
                            self.treesUrl = treesUrl
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case archiveUrl = "archive_url"
                            case assigneesUrl = "assignees_url"
                            case blobsUrl = "blobs_url"
                            case branchesUrl = "branches_url"
                            case collaboratorsUrl = "collaborators_url"
                            case commentsUrl = "comments_url"
                            case commitsUrl = "commits_url"
                            case compareUrl = "compare_url"
                            case contentsUrl = "contents_url"
                            case contributorsUrl = "contributors_url"
                            case deploymentsUrl = "deployments_url"
                            case description
                            case downloadsUrl = "downloads_url"
                            case eventsUrl = "events_url"
                            case fork
                            case forksUrl = "forks_url"
                            case fullName = "full_name"
                            case gitCommitsUrl = "git_commits_url"
                            case gitRefsUrl = "git_refs_url"
                            case gitTagsUrl = "git_tags_url"
                            case hooksUrl = "hooks_url"
                            case htmlUrl = "html_url"
                            case id
                            case issueCommentUrl = "issue_comment_url"
                            case issueEventsUrl = "issue_events_url"
                            case issuesUrl = "issues_url"
                            case keysUrl = "keys_url"
                            case labelsUrl = "labels_url"
                            case languagesUrl = "languages_url"
                            case mergesUrl = "merges_url"
                            case milestonesUrl = "milestones_url"
                            case name
                            case nodeId = "node_id"
                            case notificationsUrl = "notifications_url"
                            case owner
                            case _private = "private"
                            case pullsUrl = "pulls_url"
                            case releasesUrl = "releases_url"
                            case stargazersUrl = "stargazers_url"
                            case statusesUrl = "statuses_url"
                            case subscribersUrl = "subscribers_url"
                            case subscriptionUrl = "subscription_url"
                            case tagsUrl = "tags_url"
                            case teamsUrl = "teams_url"
                            case treesUrl = "trees_url"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/repository`.
                    public var repository: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value2Payload.RepositoryPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/rerun_url`.
                    public var rerunUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/run_attempt`.
                    public var runAttempt: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/run_number`.
                    public var runNumber: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/run_started_at`.
                    public var runStartedAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/status`.
                    public var status: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/triggering_actor`.
                    public struct TriggeringActorPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/triggering_actor/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/triggering_actor/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/triggering_actor/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/triggering_actor/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/triggering_actor/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/triggering_actor/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/triggering_actor/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/triggering_actor/id`.
                        public var id: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/triggering_actor/login`.
                        public var login: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/triggering_actor/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/triggering_actor/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/triggering_actor/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/triggering_actor/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/triggering_actor/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/triggering_actor/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/triggering_actor/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/triggering_actor/type`.
                        public var _type: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/triggering_actor/url`.
                        public var url: Swift.String?
                        /// Creates a new `TriggeringActorPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int? = nil,
                            login: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/triggering_actor`.
                    public var triggeringActor: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value2Payload.TriggeringActorPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/updated_at`.
                    public var updatedAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/url`.
                    public var url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/workflow_id`.
                    public var workflowId: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2/workflow_url`.
                    public var workflowUrl: Swift.String?
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - actor:
                    ///   - artifactsUrl:
                    ///   - cancelUrl:
                    ///   - checkSuiteId:
                    ///   - checkSuiteNodeId:
                    ///   - checkSuiteUrl:
                    ///   - conclusion:
                    ///   - createdAt:
                    ///   - event:
                    ///   - headBranch:
                    ///   - headCommit:
                    ///   - headRepository:
                    ///   - headSha:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - jobsUrl:
                    ///   - logsUrl:
                    ///   - name:
                    ///   - nodeId:
                    ///   - path:
                    ///   - previousAttemptUrl:
                    ///   - pullRequests:
                    ///   - referencedWorkflows:
                    ///   - repository:
                    ///   - rerunUrl:
                    ///   - runAttempt:
                    ///   - runNumber:
                    ///   - runStartedAt:
                    ///   - status:
                    ///   - triggeringActor:
                    ///   - updatedAt:
                    ///   - url:
                    ///   - workflowId:
                    ///   - workflowUrl:
                    public init(
                        actor: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value2Payload.ActorPayload? = nil,
                        artifactsUrl: Swift.String? = nil,
                        cancelUrl: Swift.String? = nil,
                        checkSuiteId: Swift.Int? = nil,
                        checkSuiteNodeId: Swift.String? = nil,
                        checkSuiteUrl: Swift.String? = nil,
                        conclusion: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value2Payload.ConclusionPayload,
                        createdAt: Swift.String? = nil,
                        event: Swift.String? = nil,
                        headBranch: Swift.String? = nil,
                        headCommit: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value2Payload.HeadCommitPayload? = nil,
                        headRepository: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value2Payload.HeadRepositoryPayload? = nil,
                        headSha: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int? = nil,
                        jobsUrl: Swift.String? = nil,
                        logsUrl: Swift.String? = nil,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        path: Swift.String? = nil,
                        previousAttemptUrl: Swift.String? = nil,
                        pullRequests: [OpenAPIRuntime.OpenAPIObjectContainer?]? = nil,
                        referencedWorkflows: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value2Payload.ReferencedWorkflowsPayload? = nil,
                        repository: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value2Payload.RepositoryPayload? = nil,
                        rerunUrl: Swift.String? = nil,
                        runAttempt: Swift.Int? = nil,
                        runNumber: Swift.Int? = nil,
                        runStartedAt: Swift.String? = nil,
                        status: Swift.String? = nil,
                        triggeringActor: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value2Payload.TriggeringActorPayload? = nil,
                        updatedAt: Swift.String? = nil,
                        url: Swift.String? = nil,
                        workflowId: Swift.Int? = nil,
                        workflowUrl: Swift.String? = nil
                    ) {
                        self.actor = actor
                        self.artifactsUrl = artifactsUrl
                        self.cancelUrl = cancelUrl
                        self.checkSuiteId = checkSuiteId
                        self.checkSuiteNodeId = checkSuiteNodeId
                        self.checkSuiteUrl = checkSuiteUrl
                        self.conclusion = conclusion
                        self.createdAt = createdAt
                        self.event = event
                        self.headBranch = headBranch
                        self.headCommit = headCommit
                        self.headRepository = headRepository
                        self.headSha = headSha
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.jobsUrl = jobsUrl
                        self.logsUrl = logsUrl
                        self.name = name
                        self.nodeId = nodeId
                        self.path = path
                        self.previousAttemptUrl = previousAttemptUrl
                        self.pullRequests = pullRequests
                        self.referencedWorkflows = referencedWorkflows
                        self.repository = repository
                        self.rerunUrl = rerunUrl
                        self.runAttempt = runAttempt
                        self.runNumber = runNumber
                        self.runStartedAt = runStartedAt
                        self.status = status
                        self.triggeringActor = triggeringActor
                        self.updatedAt = updatedAt
                        self.url = url
                        self.workflowId = workflowId
                        self.workflowUrl = workflowUrl
                    }
                    public enum CodingKeys: String, CodingKey {
                        case actor
                        case artifactsUrl = "artifacts_url"
                        case cancelUrl = "cancel_url"
                        case checkSuiteId = "check_suite_id"
                        case checkSuiteNodeId = "check_suite_node_id"
                        case checkSuiteUrl = "check_suite_url"
                        case conclusion
                        case createdAt = "created_at"
                        case event
                        case headBranch = "head_branch"
                        case headCommit = "head_commit"
                        case headRepository = "head_repository"
                        case headSha = "head_sha"
                        case htmlUrl = "html_url"
                        case id
                        case jobsUrl = "jobs_url"
                        case logsUrl = "logs_url"
                        case name
                        case nodeId = "node_id"
                        case path
                        case previousAttemptUrl = "previous_attempt_url"
                        case pullRequests = "pull_requests"
                        case referencedWorkflows = "referenced_workflows"
                        case repository
                        case rerunUrl = "rerun_url"
                        case runAttempt = "run_attempt"
                        case runNumber = "run_number"
                        case runStartedAt = "run_started_at"
                        case status
                        case triggeringActor = "triggering_actor"
                        case updatedAt = "updated_at"
                        case url
                        case workflowId = "workflow_id"
                        case workflowUrl = "workflow_url"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run/value2`.
                public var value2: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value2Payload
                /// Creates a new `WorkflowRunPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value1Payload,
                    value2: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-completed/workflow_run`.
            public var workflowRun: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload
            /// Creates a new `WebhookWorkflowRunCompleted`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - enterprise:
            ///   - installation:
            ///   - organization:
            ///   - repository:
            ///   - sender:
            ///   - workflow:
            ///   - workflowRun:
            public init(
                action: Components.Schemas.WebhookWorkflowRunCompleted.ActionPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser,
                workflow: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowPayload? = nil,
                workflowRun: Components.Schemas.WebhookWorkflowRunCompleted.WorkflowRunPayload
            ) {
                self.action = action
                self.enterprise = enterprise
                self.installation = installation
                self.organization = organization
                self.repository = repository
                self.sender = sender
                self.workflow = workflow
                self.workflowRun = workflowRun
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case enterprise
                case installation
                case organization
                case repository
                case sender
                case workflow
                case workflowRun = "workflow_run"
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress`.
        public struct WebhookWorkflowRunInProgress: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case inProgress = "in_progress"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/action`.
            public var action: Components.Schemas.WebhookWorkflowRunInProgress.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow`.
            public struct WorkflowPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow/badge_url`.
                public var badgeUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow/created_at`.
                public var createdAt: Foundation.Date
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow/html_url`.
                public var htmlUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow/path`.
                public var path: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow/state`.
                public var state: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow/updated_at`.
                public var updatedAt: Foundation.Date
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow/url`.
                public var url: Swift.String
                /// Creates a new `WorkflowPayload`.
                ///
                /// - Parameters:
                ///   - badgeUrl:
                ///   - createdAt:
                ///   - htmlUrl:
                ///   - id:
                ///   - name:
                ///   - nodeId:
                ///   - path:
                ///   - state:
                ///   - updatedAt:
                ///   - url:
                public init(
                    badgeUrl: Swift.String,
                    createdAt: Foundation.Date,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    name: Swift.String,
                    nodeId: Swift.String,
                    path: Swift.String,
                    state: Swift.String,
                    updatedAt: Foundation.Date,
                    url: Swift.String
                ) {
                    self.badgeUrl = badgeUrl
                    self.createdAt = createdAt
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.name = name
                    self.nodeId = nodeId
                    self.path = path
                    self.state = state
                    self.updatedAt = updatedAt
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case badgeUrl = "badge_url"
                    case createdAt = "created_at"
                    case htmlUrl = "html_url"
                    case id
                    case name
                    case nodeId = "node_id"
                    case path
                    case state
                    case updatedAt = "updated_at"
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow`.
            public var workflow: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowPayload?
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run`.
            public struct WorkflowRunPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/actor`.
                    public struct ActorPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/actor/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/actor/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/actor/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/actor/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/actor/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/actor/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/actor/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/actor/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/actor/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/actor/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/actor/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/actor/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/actor/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/actor/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/actor/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/actor/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/actor/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/actor/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/actor/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/actor/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/actor/type`.
                        public var _type: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.ActorPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/actor/url`.
                        public var url: Swift.String?
                        /// Creates a new `ActorPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.ActorPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/actor`.
                    public var actor: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.ActorPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/artifacts_url`.
                    public var artifactsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/cancel_url`.
                    public var cancelUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/check_suite_id`.
                    public var checkSuiteId: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/check_suite_node_id`.
                    public var checkSuiteNodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/check_suite_url`.
                    public var checkSuiteUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/conclusion`.
                    @frozen public enum ConclusionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case success = "success"
                        case failure = "failure"
                        case neutral = "neutral"
                        case cancelled = "cancelled"
                        case timedOut = "timed_out"
                        case actionRequired = "action_required"
                        case stale = "stale"
                        case skipped = "skipped"
                        case _empty_ = ""
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/conclusion`.
                    public var conclusion: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.ConclusionPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/created_at`.
                    public var createdAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/event`.
                    public var event: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_branch`.
                    public var headBranch: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_commit`.
                    public struct HeadCommitPayload: Codable, Hashable, Sendable {
                        /// Metaproperties for Git author/committer information.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_commit/author`.
                        public struct AuthorPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_commit/author/date`.
                            public var date: Foundation.Date?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_commit/author/email`.
                            public var email: Swift.String?
                            /// The git author's name.
                            ///
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_commit/author/name`.
                            public var name: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_commit/author/username`.
                            public var username: Swift.String?
                            /// Creates a new `AuthorPayload`.
                            ///
                            /// - Parameters:
                            ///   - date:
                            ///   - email:
                            ///   - name: The git author's name.
                            ///   - username:
                            public init(
                                date: Foundation.Date? = nil,
                                email: Swift.String? = nil,
                                name: Swift.String,
                                username: Swift.String? = nil
                            ) {
                                self.date = date
                                self.email = email
                                self.name = name
                                self.username = username
                            }
                            public enum CodingKeys: String, CodingKey {
                                case date
                                case email
                                case name
                                case username
                            }
                        }
                        /// Metaproperties for Git author/committer information.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_commit/author`.
                        public var author: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.HeadCommitPayload.AuthorPayload
                        /// Metaproperties for Git author/committer information.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_commit/committer`.
                        public struct CommitterPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_commit/committer/date`.
                            public var date: Foundation.Date?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_commit/committer/email`.
                            public var email: Swift.String?
                            /// The git author's name.
                            ///
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_commit/committer/name`.
                            public var name: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_commit/committer/username`.
                            public var username: Swift.String?
                            /// Creates a new `CommitterPayload`.
                            ///
                            /// - Parameters:
                            ///   - date:
                            ///   - email:
                            ///   - name: The git author's name.
                            ///   - username:
                            public init(
                                date: Foundation.Date? = nil,
                                email: Swift.String? = nil,
                                name: Swift.String,
                                username: Swift.String? = nil
                            ) {
                                self.date = date
                                self.email = email
                                self.name = name
                                self.username = username
                            }
                            public enum CodingKeys: String, CodingKey {
                                case date
                                case email
                                case name
                                case username
                            }
                        }
                        /// Metaproperties for Git author/committer information.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_commit/committer`.
                        public var committer: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.HeadCommitPayload.CommitterPayload
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_commit/id`.
                        public var id: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_commit/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_commit/timestamp`.
                        public var timestamp: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_commit/tree_id`.
                        public var treeId: Swift.String
                        /// Creates a new `HeadCommitPayload`.
                        ///
                        /// - Parameters:
                        ///   - author: Metaproperties for Git author/committer information.
                        ///   - committer: Metaproperties for Git author/committer information.
                        ///   - id:
                        ///   - message:
                        ///   - timestamp:
                        ///   - treeId:
                        public init(
                            author: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.HeadCommitPayload.AuthorPayload,
                            committer: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.HeadCommitPayload.CommitterPayload,
                            id: Swift.String,
                            message: Swift.String,
                            timestamp: Swift.String,
                            treeId: Swift.String
                        ) {
                            self.author = author
                            self.committer = committer
                            self.id = id
                            self.message = message
                            self.timestamp = timestamp
                            self.treeId = treeId
                        }
                        public enum CodingKeys: String, CodingKey {
                            case author
                            case committer
                            case id
                            case message
                            case timestamp
                            case treeId = "tree_id"
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_commit`.
                    public var headCommit: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.HeadCommitPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository`.
                    public struct HeadRepositoryPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/archive_url`.
                        public var archiveUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/assignees_url`.
                        public var assigneesUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/blobs_url`.
                        public var blobsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/branches_url`.
                        public var branchesUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/collaborators_url`.
                        public var collaboratorsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/comments_url`.
                        public var commentsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/commits_url`.
                        public var commitsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/compare_url`.
                        public var compareUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/contents_url`.
                        public var contentsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/contributors_url`.
                        public var contributorsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/deployments_url`.
                        public var deploymentsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/downloads_url`.
                        public var downloadsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/events_url`.
                        public var eventsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/fork`.
                        public var fork: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/forks_url`.
                        public var forksUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/full_name`.
                        public var fullName: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/git_commits_url`.
                        public var gitCommitsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/git_refs_url`.
                        public var gitRefsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/git_tags_url`.
                        public var gitTagsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/hooks_url`.
                        public var hooksUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/html_url`.
                        public var htmlUrl: Swift.String
                        /// Unique identifier of the repository
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/issue_comment_url`.
                        public var issueCommentUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/issue_events_url`.
                        public var issueEventsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/issues_url`.
                        public var issuesUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/keys_url`.
                        public var keysUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/labels_url`.
                        public var labelsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/languages_url`.
                        public var languagesUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/merges_url`.
                        public var mergesUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/milestones_url`.
                        public var milestonesUrl: Swift.String
                        /// The name of the repository.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/node_id`.
                        public var nodeId: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/notifications_url`.
                        public var notificationsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/owner`.
                        public struct OwnerPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/owner/avatar_url`.
                            public var avatarUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/owner/deleted`.
                            public var deleted: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/owner/email`.
                            public var email: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/owner/events_url`.
                            public var eventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/owner/followers_url`.
                            public var followersUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/owner/following_url`.
                            public var followingUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/owner/gists_url`.
                            public var gistsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/owner/gravatar_id`.
                            public var gravatarId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/owner/html_url`.
                            public var htmlUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/owner/id`.
                            public var id: Swift.Int
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/owner/login`.
                            public var login: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/owner/name`.
                            public var name: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/owner/node_id`.
                            public var nodeId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/owner/organizations_url`.
                            public var organizationsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/owner/received_events_url`.
                            public var receivedEventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/owner/repos_url`.
                            public var reposUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/owner/site_admin`.
                            public var siteAdmin: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/owner/starred_url`.
                            public var starredUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/owner/subscriptions_url`.
                            public var subscriptionsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/owner/type`.
                            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case bot = "Bot"
                                case user = "User"
                                case organization = "Organization"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/owner/type`.
                            public var _type: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.HeadRepositoryPayload.OwnerPayload._TypePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/owner/url`.
                            public var url: Swift.String?
                            /// Creates a new `OwnerPayload`.
                            ///
                            /// - Parameters:
                            ///   - avatarUrl:
                            ///   - deleted:
                            ///   - email:
                            ///   - eventsUrl:
                            ///   - followersUrl:
                            ///   - followingUrl:
                            ///   - gistsUrl:
                            ///   - gravatarId:
                            ///   - htmlUrl:
                            ///   - id:
                            ///   - login:
                            ///   - name:
                            ///   - nodeId:
                            ///   - organizationsUrl:
                            ///   - receivedEventsUrl:
                            ///   - reposUrl:
                            ///   - siteAdmin:
                            ///   - starredUrl:
                            ///   - subscriptionsUrl:
                            ///   - _type:
                            ///   - url:
                            public init(
                                avatarUrl: Swift.String? = nil,
                                deleted: Swift.Bool? = nil,
                                email: Swift.String? = nil,
                                eventsUrl: Swift.String? = nil,
                                followersUrl: Swift.String? = nil,
                                followingUrl: Swift.String? = nil,
                                gistsUrl: Swift.String? = nil,
                                gravatarId: Swift.String? = nil,
                                htmlUrl: Swift.String? = nil,
                                id: Swift.Int,
                                login: Swift.String,
                                name: Swift.String? = nil,
                                nodeId: Swift.String? = nil,
                                organizationsUrl: Swift.String? = nil,
                                receivedEventsUrl: Swift.String? = nil,
                                reposUrl: Swift.String? = nil,
                                siteAdmin: Swift.Bool? = nil,
                                starredUrl: Swift.String? = nil,
                                subscriptionsUrl: Swift.String? = nil,
                                _type: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.HeadRepositoryPayload.OwnerPayload._TypePayload? = nil,
                                url: Swift.String? = nil
                            ) {
                                self.avatarUrl = avatarUrl
                                self.deleted = deleted
                                self.email = email
                                self.eventsUrl = eventsUrl
                                self.followersUrl = followersUrl
                                self.followingUrl = followingUrl
                                self.gistsUrl = gistsUrl
                                self.gravatarId = gravatarId
                                self.htmlUrl = htmlUrl
                                self.id = id
                                self.login = login
                                self.name = name
                                self.nodeId = nodeId
                                self.organizationsUrl = organizationsUrl
                                self.receivedEventsUrl = receivedEventsUrl
                                self.reposUrl = reposUrl
                                self.siteAdmin = siteAdmin
                                self.starredUrl = starredUrl
                                self.subscriptionsUrl = subscriptionsUrl
                                self._type = _type
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case avatarUrl = "avatar_url"
                                case deleted
                                case email
                                case eventsUrl = "events_url"
                                case followersUrl = "followers_url"
                                case followingUrl = "following_url"
                                case gistsUrl = "gists_url"
                                case gravatarId = "gravatar_id"
                                case htmlUrl = "html_url"
                                case id
                                case login
                                case name
                                case nodeId = "node_id"
                                case organizationsUrl = "organizations_url"
                                case receivedEventsUrl = "received_events_url"
                                case reposUrl = "repos_url"
                                case siteAdmin = "site_admin"
                                case starredUrl = "starred_url"
                                case subscriptionsUrl = "subscriptions_url"
                                case _type = "type"
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/owner`.
                        public var owner: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.HeadRepositoryPayload.OwnerPayload?
                        /// Whether the repository is private or public.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/private`.
                        public var _private: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/pulls_url`.
                        public var pullsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/releases_url`.
                        public var releasesUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/stargazers_url`.
                        public var stargazersUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/statuses_url`.
                        public var statusesUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/subscribers_url`.
                        public var subscribersUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/subscription_url`.
                        public var subscriptionUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/tags_url`.
                        public var tagsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/teams_url`.
                        public var teamsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/trees_url`.
                        public var treesUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository/url`.
                        public var url: Swift.String
                        /// Creates a new `HeadRepositoryPayload`.
                        ///
                        /// - Parameters:
                        ///   - archiveUrl:
                        ///   - assigneesUrl:
                        ///   - blobsUrl:
                        ///   - branchesUrl:
                        ///   - collaboratorsUrl:
                        ///   - commentsUrl:
                        ///   - commitsUrl:
                        ///   - compareUrl:
                        ///   - contentsUrl:
                        ///   - contributorsUrl:
                        ///   - deploymentsUrl:
                        ///   - description:
                        ///   - downloadsUrl:
                        ///   - eventsUrl:
                        ///   - fork:
                        ///   - forksUrl:
                        ///   - fullName:
                        ///   - gitCommitsUrl:
                        ///   - gitRefsUrl:
                        ///   - gitTagsUrl:
                        ///   - hooksUrl:
                        ///   - htmlUrl:
                        ///   - id: Unique identifier of the repository
                        ///   - issueCommentUrl:
                        ///   - issueEventsUrl:
                        ///   - issuesUrl:
                        ///   - keysUrl:
                        ///   - labelsUrl:
                        ///   - languagesUrl:
                        ///   - mergesUrl:
                        ///   - milestonesUrl:
                        ///   - name: The name of the repository.
                        ///   - nodeId:
                        ///   - notificationsUrl:
                        ///   - owner:
                        ///   - _private: Whether the repository is private or public.
                        ///   - pullsUrl:
                        ///   - releasesUrl:
                        ///   - stargazersUrl:
                        ///   - statusesUrl:
                        ///   - subscribersUrl:
                        ///   - subscriptionUrl:
                        ///   - tagsUrl:
                        ///   - teamsUrl:
                        ///   - treesUrl:
                        ///   - url:
                        public init(
                            archiveUrl: Swift.String,
                            assigneesUrl: Swift.String,
                            blobsUrl: Swift.String,
                            branchesUrl: Swift.String,
                            collaboratorsUrl: Swift.String,
                            commentsUrl: Swift.String,
                            commitsUrl: Swift.String,
                            compareUrl: Swift.String,
                            contentsUrl: Swift.String,
                            contributorsUrl: Swift.String,
                            deploymentsUrl: Swift.String,
                            description: Swift.String? = nil,
                            downloadsUrl: Swift.String,
                            eventsUrl: Swift.String,
                            fork: Swift.Bool,
                            forksUrl: Swift.String,
                            fullName: Swift.String,
                            gitCommitsUrl: Swift.String,
                            gitRefsUrl: Swift.String,
                            gitTagsUrl: Swift.String,
                            hooksUrl: Swift.String,
                            htmlUrl: Swift.String,
                            id: Swift.Int,
                            issueCommentUrl: Swift.String,
                            issueEventsUrl: Swift.String,
                            issuesUrl: Swift.String,
                            keysUrl: Swift.String,
                            labelsUrl: Swift.String,
                            languagesUrl: Swift.String,
                            mergesUrl: Swift.String,
                            milestonesUrl: Swift.String,
                            name: Swift.String,
                            nodeId: Swift.String,
                            notificationsUrl: Swift.String,
                            owner: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.HeadRepositoryPayload.OwnerPayload? = nil,
                            _private: Swift.Bool,
                            pullsUrl: Swift.String,
                            releasesUrl: Swift.String,
                            stargazersUrl: Swift.String,
                            statusesUrl: Swift.String,
                            subscribersUrl: Swift.String,
                            subscriptionUrl: Swift.String,
                            tagsUrl: Swift.String,
                            teamsUrl: Swift.String,
                            treesUrl: Swift.String,
                            url: Swift.String
                        ) {
                            self.archiveUrl = archiveUrl
                            self.assigneesUrl = assigneesUrl
                            self.blobsUrl = blobsUrl
                            self.branchesUrl = branchesUrl
                            self.collaboratorsUrl = collaboratorsUrl
                            self.commentsUrl = commentsUrl
                            self.commitsUrl = commitsUrl
                            self.compareUrl = compareUrl
                            self.contentsUrl = contentsUrl
                            self.contributorsUrl = contributorsUrl
                            self.deploymentsUrl = deploymentsUrl
                            self.description = description
                            self.downloadsUrl = downloadsUrl
                            self.eventsUrl = eventsUrl
                            self.fork = fork
                            self.forksUrl = forksUrl
                            self.fullName = fullName
                            self.gitCommitsUrl = gitCommitsUrl
                            self.gitRefsUrl = gitRefsUrl
                            self.gitTagsUrl = gitTagsUrl
                            self.hooksUrl = hooksUrl
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.issueCommentUrl = issueCommentUrl
                            self.issueEventsUrl = issueEventsUrl
                            self.issuesUrl = issuesUrl
                            self.keysUrl = keysUrl
                            self.labelsUrl = labelsUrl
                            self.languagesUrl = languagesUrl
                            self.mergesUrl = mergesUrl
                            self.milestonesUrl = milestonesUrl
                            self.name = name
                            self.nodeId = nodeId
                            self.notificationsUrl = notificationsUrl
                            self.owner = owner
                            self._private = _private
                            self.pullsUrl = pullsUrl
                            self.releasesUrl = releasesUrl
                            self.stargazersUrl = stargazersUrl
                            self.statusesUrl = statusesUrl
                            self.subscribersUrl = subscribersUrl
                            self.subscriptionUrl = subscriptionUrl
                            self.tagsUrl = tagsUrl
                            self.teamsUrl = teamsUrl
                            self.treesUrl = treesUrl
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case archiveUrl = "archive_url"
                            case assigneesUrl = "assignees_url"
                            case blobsUrl = "blobs_url"
                            case branchesUrl = "branches_url"
                            case collaboratorsUrl = "collaborators_url"
                            case commentsUrl = "comments_url"
                            case commitsUrl = "commits_url"
                            case compareUrl = "compare_url"
                            case contentsUrl = "contents_url"
                            case contributorsUrl = "contributors_url"
                            case deploymentsUrl = "deployments_url"
                            case description
                            case downloadsUrl = "downloads_url"
                            case eventsUrl = "events_url"
                            case fork
                            case forksUrl = "forks_url"
                            case fullName = "full_name"
                            case gitCommitsUrl = "git_commits_url"
                            case gitRefsUrl = "git_refs_url"
                            case gitTagsUrl = "git_tags_url"
                            case hooksUrl = "hooks_url"
                            case htmlUrl = "html_url"
                            case id
                            case issueCommentUrl = "issue_comment_url"
                            case issueEventsUrl = "issue_events_url"
                            case issuesUrl = "issues_url"
                            case keysUrl = "keys_url"
                            case labelsUrl = "labels_url"
                            case languagesUrl = "languages_url"
                            case mergesUrl = "merges_url"
                            case milestonesUrl = "milestones_url"
                            case name
                            case nodeId = "node_id"
                            case notificationsUrl = "notifications_url"
                            case owner
                            case _private = "private"
                            case pullsUrl = "pulls_url"
                            case releasesUrl = "releases_url"
                            case stargazersUrl = "stargazers_url"
                            case statusesUrl = "statuses_url"
                            case subscribersUrl = "subscribers_url"
                            case subscriptionUrl = "subscription_url"
                            case tagsUrl = "tags_url"
                            case teamsUrl = "teams_url"
                            case treesUrl = "trees_url"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_repository`.
                    public var headRepository: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.HeadRepositoryPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/head_sha`.
                    public var headSha: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/html_url`.
                    public var htmlUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/jobs_url`.
                    public var jobsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/logs_url`.
                    public var logsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/path`.
                    public var path: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/previous_attempt_url`.
                    public var previousAttemptUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/PullRequestsPayload`.
                    public struct PullRequestsPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/PullRequestsPayload/base`.
                        public struct BasePayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/PullRequestsPayload/base/ref`.
                            public var ref: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/PullRequestsPayload/base/repo`.
                            public struct RepoPayload: Codable, Hashable, Sendable {
                                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/PullRequestsPayload/base/repo/id`.
                                public var id: Swift.Int
                                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/PullRequestsPayload/base/repo/name`.
                                public var name: Swift.String
                                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/PullRequestsPayload/base/repo/url`.
                                public var url: Swift.String
                                /// Creates a new `RepoPayload`.
                                ///
                                /// - Parameters:
                                ///   - id:
                                ///   - name:
                                ///   - url:
                                public init(
                                    id: Swift.Int,
                                    name: Swift.String,
                                    url: Swift.String
                                ) {
                                    self.id = id
                                    self.name = name
                                    self.url = url
                                }
                                public enum CodingKeys: String, CodingKey {
                                    case id
                                    case name
                                    case url
                                }
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/PullRequestsPayload/base/repo`.
                            public var repo: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.PullRequestsPayloadPayload.BasePayload.RepoPayload
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/PullRequestsPayload/base/sha`.
                            public var sha: Swift.String
                            /// Creates a new `BasePayload`.
                            ///
                            /// - Parameters:
                            ///   - ref:
                            ///   - repo:
                            ///   - sha:
                            public init(
                                ref: Swift.String,
                                repo: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.PullRequestsPayloadPayload.BasePayload.RepoPayload,
                                sha: Swift.String
                            ) {
                                self.ref = ref
                                self.repo = repo
                                self.sha = sha
                            }
                            public enum CodingKeys: String, CodingKey {
                                case ref
                                case repo
                                case sha
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/PullRequestsPayload/base`.
                        public var base: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.PullRequestsPayloadPayload.BasePayload
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/PullRequestsPayload/head`.
                        public struct HeadPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/PullRequestsPayload/head/ref`.
                            public var ref: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/PullRequestsPayload/head/repo`.
                            public struct RepoPayload: Codable, Hashable, Sendable {
                                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/PullRequestsPayload/head/repo/id`.
                                public var id: Swift.Int
                                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/PullRequestsPayload/head/repo/name`.
                                public var name: Swift.String
                                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/PullRequestsPayload/head/repo/url`.
                                public var url: Swift.String
                                /// Creates a new `RepoPayload`.
                                ///
                                /// - Parameters:
                                ///   - id:
                                ///   - name:
                                ///   - url:
                                public init(
                                    id: Swift.Int,
                                    name: Swift.String,
                                    url: Swift.String
                                ) {
                                    self.id = id
                                    self.name = name
                                    self.url = url
                                }
                                public enum CodingKeys: String, CodingKey {
                                    case id
                                    case name
                                    case url
                                }
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/PullRequestsPayload/head/repo`.
                            public var repo: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.PullRequestsPayloadPayload.HeadPayload.RepoPayload
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/PullRequestsPayload/head/sha`.
                            public var sha: Swift.String
                            /// Creates a new `HeadPayload`.
                            ///
                            /// - Parameters:
                            ///   - ref:
                            ///   - repo:
                            ///   - sha:
                            public init(
                                ref: Swift.String,
                                repo: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.PullRequestsPayloadPayload.HeadPayload.RepoPayload,
                                sha: Swift.String
                            ) {
                                self.ref = ref
                                self.repo = repo
                                self.sha = sha
                            }
                            public enum CodingKeys: String, CodingKey {
                                case ref
                                case repo
                                case sha
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/PullRequestsPayload/head`.
                        public var head: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.PullRequestsPayloadPayload.HeadPayload
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/PullRequestsPayload/id`.
                        public var id: Swift.Double
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/PullRequestsPayload/number`.
                        public var number: Swift.Double
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/PullRequestsPayload/url`.
                        public var url: Swift.String
                        /// Creates a new `PullRequestsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - base:
                        ///   - head:
                        ///   - id:
                        ///   - number:
                        ///   - url:
                        public init(
                            base: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.PullRequestsPayloadPayload.BasePayload,
                            head: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.PullRequestsPayloadPayload.HeadPayload,
                            id: Swift.Double,
                            number: Swift.Double,
                            url: Swift.String
                        ) {
                            self.base = base
                            self.head = head
                            self.id = id
                            self.number = number
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case base
                            case head
                            case id
                            case number
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/pull_requests`.
                    public typealias PullRequestsPayload = [Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.PullRequestsPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/pull_requests`.
                    public var pullRequests: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.PullRequestsPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/ReferencedWorkflowsPayload`.
                    public struct ReferencedWorkflowsPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/ReferencedWorkflowsPayload/path`.
                        public var path: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/ReferencedWorkflowsPayload/ref`.
                        public var ref: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/ReferencedWorkflowsPayload/sha`.
                        public var sha: Swift.String
                        /// Creates a new `ReferencedWorkflowsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - path:
                        ///   - ref:
                        ///   - sha:
                        public init(
                            path: Swift.String,
                            ref: Swift.String? = nil,
                            sha: Swift.String
                        ) {
                            self.path = path
                            self.ref = ref
                            self.sha = sha
                        }
                        public enum CodingKeys: String, CodingKey {
                            case path
                            case ref
                            case sha
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/referenced_workflows`.
                    public typealias ReferencedWorkflowsPayload = [Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.ReferencedWorkflowsPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/referenced_workflows`.
                    public var referencedWorkflows: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.ReferencedWorkflowsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository`.
                    public struct RepositoryPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/archive_url`.
                        public var archiveUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/assignees_url`.
                        public var assigneesUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/blobs_url`.
                        public var blobsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/branches_url`.
                        public var branchesUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/collaborators_url`.
                        public var collaboratorsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/comments_url`.
                        public var commentsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/commits_url`.
                        public var commitsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/compare_url`.
                        public var compareUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/contents_url`.
                        public var contentsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/contributors_url`.
                        public var contributorsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/deployments_url`.
                        public var deploymentsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/downloads_url`.
                        public var downloadsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/events_url`.
                        public var eventsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/fork`.
                        public var fork: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/forks_url`.
                        public var forksUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/full_name`.
                        public var fullName: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/git_commits_url`.
                        public var gitCommitsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/git_refs_url`.
                        public var gitRefsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/git_tags_url`.
                        public var gitTagsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/hooks_url`.
                        public var hooksUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/html_url`.
                        public var htmlUrl: Swift.String
                        /// Unique identifier of the repository
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/issue_comment_url`.
                        public var issueCommentUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/issue_events_url`.
                        public var issueEventsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/issues_url`.
                        public var issuesUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/keys_url`.
                        public var keysUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/labels_url`.
                        public var labelsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/languages_url`.
                        public var languagesUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/merges_url`.
                        public var mergesUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/milestones_url`.
                        public var milestonesUrl: Swift.String
                        /// The name of the repository.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/node_id`.
                        public var nodeId: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/notifications_url`.
                        public var notificationsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/owner`.
                        public struct OwnerPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/owner/avatar_url`.
                            public var avatarUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/owner/deleted`.
                            public var deleted: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/owner/email`.
                            public var email: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/owner/events_url`.
                            public var eventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/owner/followers_url`.
                            public var followersUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/owner/following_url`.
                            public var followingUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/owner/gists_url`.
                            public var gistsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/owner/gravatar_id`.
                            public var gravatarId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/owner/html_url`.
                            public var htmlUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/owner/id`.
                            public var id: Swift.Int
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/owner/login`.
                            public var login: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/owner/name`.
                            public var name: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/owner/node_id`.
                            public var nodeId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/owner/organizations_url`.
                            public var organizationsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/owner/received_events_url`.
                            public var receivedEventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/owner/repos_url`.
                            public var reposUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/owner/site_admin`.
                            public var siteAdmin: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/owner/starred_url`.
                            public var starredUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/owner/subscriptions_url`.
                            public var subscriptionsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/owner/type`.
                            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                                case bot = "Bot"
                                case user = "User"
                                case organization = "Organization"
                            }
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/owner/type`.
                            public var _type: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.RepositoryPayload.OwnerPayload._TypePayload?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/owner/url`.
                            public var url: Swift.String?
                            /// Creates a new `OwnerPayload`.
                            ///
                            /// - Parameters:
                            ///   - avatarUrl:
                            ///   - deleted:
                            ///   - email:
                            ///   - eventsUrl:
                            ///   - followersUrl:
                            ///   - followingUrl:
                            ///   - gistsUrl:
                            ///   - gravatarId:
                            ///   - htmlUrl:
                            ///   - id:
                            ///   - login:
                            ///   - name:
                            ///   - nodeId:
                            ///   - organizationsUrl:
                            ///   - receivedEventsUrl:
                            ///   - reposUrl:
                            ///   - siteAdmin:
                            ///   - starredUrl:
                            ///   - subscriptionsUrl:
                            ///   - _type:
                            ///   - url:
                            public init(
                                avatarUrl: Swift.String? = nil,
                                deleted: Swift.Bool? = nil,
                                email: Swift.String? = nil,
                                eventsUrl: Swift.String? = nil,
                                followersUrl: Swift.String? = nil,
                                followingUrl: Swift.String? = nil,
                                gistsUrl: Swift.String? = nil,
                                gravatarId: Swift.String? = nil,
                                htmlUrl: Swift.String? = nil,
                                id: Swift.Int,
                                login: Swift.String,
                                name: Swift.String? = nil,
                                nodeId: Swift.String? = nil,
                                organizationsUrl: Swift.String? = nil,
                                receivedEventsUrl: Swift.String? = nil,
                                reposUrl: Swift.String? = nil,
                                siteAdmin: Swift.Bool? = nil,
                                starredUrl: Swift.String? = nil,
                                subscriptionsUrl: Swift.String? = nil,
                                _type: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.RepositoryPayload.OwnerPayload._TypePayload? = nil,
                                url: Swift.String? = nil
                            ) {
                                self.avatarUrl = avatarUrl
                                self.deleted = deleted
                                self.email = email
                                self.eventsUrl = eventsUrl
                                self.followersUrl = followersUrl
                                self.followingUrl = followingUrl
                                self.gistsUrl = gistsUrl
                                self.gravatarId = gravatarId
                                self.htmlUrl = htmlUrl
                                self.id = id
                                self.login = login
                                self.name = name
                                self.nodeId = nodeId
                                self.organizationsUrl = organizationsUrl
                                self.receivedEventsUrl = receivedEventsUrl
                                self.reposUrl = reposUrl
                                self.siteAdmin = siteAdmin
                                self.starredUrl = starredUrl
                                self.subscriptionsUrl = subscriptionsUrl
                                self._type = _type
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case avatarUrl = "avatar_url"
                                case deleted
                                case email
                                case eventsUrl = "events_url"
                                case followersUrl = "followers_url"
                                case followingUrl = "following_url"
                                case gistsUrl = "gists_url"
                                case gravatarId = "gravatar_id"
                                case htmlUrl = "html_url"
                                case id
                                case login
                                case name
                                case nodeId = "node_id"
                                case organizationsUrl = "organizations_url"
                                case receivedEventsUrl = "received_events_url"
                                case reposUrl = "repos_url"
                                case siteAdmin = "site_admin"
                                case starredUrl = "starred_url"
                                case subscriptionsUrl = "subscriptions_url"
                                case _type = "type"
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/owner`.
                        public var owner: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.RepositoryPayload.OwnerPayload?
                        /// Whether the repository is private or public.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/private`.
                        public var _private: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/pulls_url`.
                        public var pullsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/releases_url`.
                        public var releasesUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/stargazers_url`.
                        public var stargazersUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/statuses_url`.
                        public var statusesUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/subscribers_url`.
                        public var subscribersUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/subscription_url`.
                        public var subscriptionUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/tags_url`.
                        public var tagsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/teams_url`.
                        public var teamsUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/trees_url`.
                        public var treesUrl: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository/url`.
                        public var url: Swift.String
                        /// Creates a new `RepositoryPayload`.
                        ///
                        /// - Parameters:
                        ///   - archiveUrl:
                        ///   - assigneesUrl:
                        ///   - blobsUrl:
                        ///   - branchesUrl:
                        ///   - collaboratorsUrl:
                        ///   - commentsUrl:
                        ///   - commitsUrl:
                        ///   - compareUrl:
                        ///   - contentsUrl:
                        ///   - contributorsUrl:
                        ///   - deploymentsUrl:
                        ///   - description:
                        ///   - downloadsUrl:
                        ///   - eventsUrl:
                        ///   - fork:
                        ///   - forksUrl:
                        ///   - fullName:
                        ///   - gitCommitsUrl:
                        ///   - gitRefsUrl:
                        ///   - gitTagsUrl:
                        ///   - hooksUrl:
                        ///   - htmlUrl:
                        ///   - id: Unique identifier of the repository
                        ///   - issueCommentUrl:
                        ///   - issueEventsUrl:
                        ///   - issuesUrl:
                        ///   - keysUrl:
                        ///   - labelsUrl:
                        ///   - languagesUrl:
                        ///   - mergesUrl:
                        ///   - milestonesUrl:
                        ///   - name: The name of the repository.
                        ///   - nodeId:
                        ///   - notificationsUrl:
                        ///   - owner:
                        ///   - _private: Whether the repository is private or public.
                        ///   - pullsUrl:
                        ///   - releasesUrl:
                        ///   - stargazersUrl:
                        ///   - statusesUrl:
                        ///   - subscribersUrl:
                        ///   - subscriptionUrl:
                        ///   - tagsUrl:
                        ///   - teamsUrl:
                        ///   - treesUrl:
                        ///   - url:
                        public init(
                            archiveUrl: Swift.String,
                            assigneesUrl: Swift.String,
                            blobsUrl: Swift.String,
                            branchesUrl: Swift.String,
                            collaboratorsUrl: Swift.String,
                            commentsUrl: Swift.String,
                            commitsUrl: Swift.String,
                            compareUrl: Swift.String,
                            contentsUrl: Swift.String,
                            contributorsUrl: Swift.String,
                            deploymentsUrl: Swift.String,
                            description: Swift.String? = nil,
                            downloadsUrl: Swift.String,
                            eventsUrl: Swift.String,
                            fork: Swift.Bool,
                            forksUrl: Swift.String,
                            fullName: Swift.String,
                            gitCommitsUrl: Swift.String,
                            gitRefsUrl: Swift.String,
                            gitTagsUrl: Swift.String,
                            hooksUrl: Swift.String,
                            htmlUrl: Swift.String,
                            id: Swift.Int,
                            issueCommentUrl: Swift.String,
                            issueEventsUrl: Swift.String,
                            issuesUrl: Swift.String,
                            keysUrl: Swift.String,
                            labelsUrl: Swift.String,
                            languagesUrl: Swift.String,
                            mergesUrl: Swift.String,
                            milestonesUrl: Swift.String,
                            name: Swift.String,
                            nodeId: Swift.String,
                            notificationsUrl: Swift.String,
                            owner: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.RepositoryPayload.OwnerPayload? = nil,
                            _private: Swift.Bool,
                            pullsUrl: Swift.String,
                            releasesUrl: Swift.String,
                            stargazersUrl: Swift.String,
                            statusesUrl: Swift.String,
                            subscribersUrl: Swift.String,
                            subscriptionUrl: Swift.String,
                            tagsUrl: Swift.String,
                            teamsUrl: Swift.String,
                            treesUrl: Swift.String,
                            url: Swift.String
                        ) {
                            self.archiveUrl = archiveUrl
                            self.assigneesUrl = assigneesUrl
                            self.blobsUrl = blobsUrl
                            self.branchesUrl = branchesUrl
                            self.collaboratorsUrl = collaboratorsUrl
                            self.commentsUrl = commentsUrl
                            self.commitsUrl = commitsUrl
                            self.compareUrl = compareUrl
                            self.contentsUrl = contentsUrl
                            self.contributorsUrl = contributorsUrl
                            self.deploymentsUrl = deploymentsUrl
                            self.description = description
                            self.downloadsUrl = downloadsUrl
                            self.eventsUrl = eventsUrl
                            self.fork = fork
                            self.forksUrl = forksUrl
                            self.fullName = fullName
                            self.gitCommitsUrl = gitCommitsUrl
                            self.gitRefsUrl = gitRefsUrl
                            self.gitTagsUrl = gitTagsUrl
                            self.hooksUrl = hooksUrl
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.issueCommentUrl = issueCommentUrl
                            self.issueEventsUrl = issueEventsUrl
                            self.issuesUrl = issuesUrl
                            self.keysUrl = keysUrl
                            self.labelsUrl = labelsUrl
                            self.languagesUrl = languagesUrl
                            self.mergesUrl = mergesUrl
                            self.milestonesUrl = milestonesUrl
                            self.name = name
                            self.nodeId = nodeId
                            self.notificationsUrl = notificationsUrl
                            self.owner = owner
                            self._private = _private
                            self.pullsUrl = pullsUrl
                            self.releasesUrl = releasesUrl
                            self.stargazersUrl = stargazersUrl
                            self.statusesUrl = statusesUrl
                            self.subscribersUrl = subscribersUrl
                            self.subscriptionUrl = subscriptionUrl
                            self.tagsUrl = tagsUrl
                            self.teamsUrl = teamsUrl
                            self.treesUrl = treesUrl
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case archiveUrl = "archive_url"
                            case assigneesUrl = "assignees_url"
                            case blobsUrl = "blobs_url"
                            case branchesUrl = "branches_url"
                            case collaboratorsUrl = "collaborators_url"
                            case commentsUrl = "comments_url"
                            case commitsUrl = "commits_url"
                            case compareUrl = "compare_url"
                            case contentsUrl = "contents_url"
                            case contributorsUrl = "contributors_url"
                            case deploymentsUrl = "deployments_url"
                            case description
                            case downloadsUrl = "downloads_url"
                            case eventsUrl = "events_url"
                            case fork
                            case forksUrl = "forks_url"
                            case fullName = "full_name"
                            case gitCommitsUrl = "git_commits_url"
                            case gitRefsUrl = "git_refs_url"
                            case gitTagsUrl = "git_tags_url"
                            case hooksUrl = "hooks_url"
                            case htmlUrl = "html_url"
                            case id
                            case issueCommentUrl = "issue_comment_url"
                            case issueEventsUrl = "issue_events_url"
                            case issuesUrl = "issues_url"
                            case keysUrl = "keys_url"
                            case labelsUrl = "labels_url"
                            case languagesUrl = "languages_url"
                            case mergesUrl = "merges_url"
                            case milestonesUrl = "milestones_url"
                            case name
                            case nodeId = "node_id"
                            case notificationsUrl = "notifications_url"
                            case owner
                            case _private = "private"
                            case pullsUrl = "pulls_url"
                            case releasesUrl = "releases_url"
                            case stargazersUrl = "stargazers_url"
                            case statusesUrl = "statuses_url"
                            case subscribersUrl = "subscribers_url"
                            case subscriptionUrl = "subscription_url"
                            case tagsUrl = "tags_url"
                            case teamsUrl = "teams_url"
                            case treesUrl = "trees_url"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/repository`.
                    public var repository: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.RepositoryPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/rerun_url`.
                    public var rerunUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/run_attempt`.
                    public var runAttempt: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/run_number`.
                    public var runNumber: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/run_started_at`.
                    public var runStartedAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/status`.
                    @frozen public enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case requested = "requested"
                        case inProgress = "in_progress"
                        case completed = "completed"
                        case queued = "queued"
                        case pending = "pending"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/status`.
                    public var status: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.StatusPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/triggering_actor`.
                    public struct TriggeringActorPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/triggering_actor/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/triggering_actor/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/triggering_actor/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/triggering_actor/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/triggering_actor/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/triggering_actor/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/triggering_actor/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/triggering_actor/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/triggering_actor/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/triggering_actor/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/triggering_actor/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/triggering_actor/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/triggering_actor/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/triggering_actor/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/triggering_actor/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/triggering_actor/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/triggering_actor/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/triggering_actor/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/triggering_actor/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/triggering_actor/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/triggering_actor/type`.
                        public var _type: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.TriggeringActorPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/triggering_actor/url`.
                        public var url: Swift.String?
                        /// Creates a new `TriggeringActorPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.TriggeringActorPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/triggering_actor`.
                    public var triggeringActor: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.TriggeringActorPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/updated_at`.
                    public var updatedAt: Foundation.Date
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/url`.
                    public var url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/workflow_id`.
                    public var workflowId: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1/workflow_url`.
                    public var workflowUrl: Swift.String
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - actor:
                    ///   - artifactsUrl:
                    ///   - cancelUrl:
                    ///   - checkSuiteId:
                    ///   - checkSuiteNodeId:
                    ///   - checkSuiteUrl:
                    ///   - conclusion:
                    ///   - createdAt:
                    ///   - event:
                    ///   - headBranch:
                    ///   - headCommit:
                    ///   - headRepository:
                    ///   - headSha:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - jobsUrl:
                    ///   - logsUrl:
                    ///   - name:
                    ///   - nodeId:
                    ///   - path:
                    ///   - previousAttemptUrl:
                    ///   - pullRequests:
                    ///   - referencedWorkflows:
                    ///   - repository:
                    ///   - rerunUrl:
                    ///   - runAttempt:
                    ///   - runNumber:
                    ///   - runStartedAt:
                    ///   - status:
                    ///   - triggeringActor:
                    ///   - updatedAt:
                    ///   - url:
                    ///   - workflowId:
                    ///   - workflowUrl:
                    public init(
                        actor: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.ActorPayload? = nil,
                        artifactsUrl: Swift.String,
                        cancelUrl: Swift.String,
                        checkSuiteId: Swift.Int,
                        checkSuiteNodeId: Swift.String,
                        checkSuiteUrl: Swift.String,
                        conclusion: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.ConclusionPayload? = nil,
                        createdAt: Foundation.Date,
                        event: Swift.String,
                        headBranch: Swift.String? = nil,
                        headCommit: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.HeadCommitPayload,
                        headRepository: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.HeadRepositoryPayload,
                        headSha: Swift.String,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        jobsUrl: Swift.String,
                        logsUrl: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String,
                        path: Swift.String,
                        previousAttemptUrl: Swift.String? = nil,
                        pullRequests: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.PullRequestsPayload,
                        referencedWorkflows: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.ReferencedWorkflowsPayload? = nil,
                        repository: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.RepositoryPayload,
                        rerunUrl: Swift.String,
                        runAttempt: Swift.Int,
                        runNumber: Swift.Int,
                        runStartedAt: Foundation.Date,
                        status: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.StatusPayload,
                        triggeringActor: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload.TriggeringActorPayload? = nil,
                        updatedAt: Foundation.Date,
                        url: Swift.String,
                        workflowId: Swift.Int,
                        workflowUrl: Swift.String
                    ) {
                        self.actor = actor
                        self.artifactsUrl = artifactsUrl
                        self.cancelUrl = cancelUrl
                        self.checkSuiteId = checkSuiteId
                        self.checkSuiteNodeId = checkSuiteNodeId
                        self.checkSuiteUrl = checkSuiteUrl
                        self.conclusion = conclusion
                        self.createdAt = createdAt
                        self.event = event
                        self.headBranch = headBranch
                        self.headCommit = headCommit
                        self.headRepository = headRepository
                        self.headSha = headSha
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.jobsUrl = jobsUrl
                        self.logsUrl = logsUrl
                        self.name = name
                        self.nodeId = nodeId
                        self.path = path
                        self.previousAttemptUrl = previousAttemptUrl
                        self.pullRequests = pullRequests
                        self.referencedWorkflows = referencedWorkflows
                        self.repository = repository
                        self.rerunUrl = rerunUrl
                        self.runAttempt = runAttempt
                        self.runNumber = runNumber
                        self.runStartedAt = runStartedAt
                        self.status = status
                        self.triggeringActor = triggeringActor
                        self.updatedAt = updatedAt
                        self.url = url
                        self.workflowId = workflowId
                        self.workflowUrl = workflowUrl
                    }
                    public enum CodingKeys: String, CodingKey {
                        case actor
                        case artifactsUrl = "artifacts_url"
                        case cancelUrl = "cancel_url"
                        case checkSuiteId = "check_suite_id"
                        case checkSuiteNodeId = "check_suite_node_id"
                        case checkSuiteUrl = "check_suite_url"
                        case conclusion
                        case createdAt = "created_at"
                        case event
                        case headBranch = "head_branch"
                        case headCommit = "head_commit"
                        case headRepository = "head_repository"
                        case headSha = "head_sha"
                        case htmlUrl = "html_url"
                        case id
                        case jobsUrl = "jobs_url"
                        case logsUrl = "logs_url"
                        case name
                        case nodeId = "node_id"
                        case path
                        case previousAttemptUrl = "previous_attempt_url"
                        case pullRequests = "pull_requests"
                        case referencedWorkflows = "referenced_workflows"
                        case repository
                        case rerunUrl = "rerun_url"
                        case runAttempt = "run_attempt"
                        case runNumber = "run_number"
                        case runStartedAt = "run_started_at"
                        case status
                        case triggeringActor = "triggering_actor"
                        case updatedAt = "updated_at"
                        case url
                        case workflowId = "workflow_id"
                        case workflowUrl = "workflow_url"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value1`.
                public var value1: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/actor`.
                    public struct ActorPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/actor/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/actor/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/actor/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/actor/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/actor/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/actor/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/actor/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/actor/id`.
                        public var id: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/actor/login`.
                        public var login: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/actor/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/actor/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/actor/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/actor/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/actor/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/actor/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/actor/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/actor/type`.
                        public var _type: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/actor/url`.
                        public var url: Swift.String?
                        /// Creates a new `ActorPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int? = nil,
                            login: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/actor`.
                    public var actor: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value2Payload.ActorPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/artifacts_url`.
                    public var artifactsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/cancel_url`.
                    public var cancelUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/check_suite_id`.
                    public var checkSuiteId: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/check_suite_node_id`.
                    public var checkSuiteNodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/check_suite_url`.
                    public var checkSuiteUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/conclusion`.
                    @frozen public enum ConclusionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case success = "success"
                        case failure = "failure"
                        case neutral = "neutral"
                        case cancelled = "cancelled"
                        case timedOut = "timed_out"
                        case actionRequired = "action_required"
                        case skipped = "skipped"
                        case stale = "stale"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/conclusion`.
                    public var conclusion: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value2Payload.ConclusionPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/created_at`.
                    public var createdAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/event`.
                    public var event: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_branch`.
                    public var headBranch: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_commit`.
                    public struct HeadCommitPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_commit/author`.
                        public struct AuthorPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_commit/author/email`.
                            public var email: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_commit/author/name`.
                            public var name: Swift.String?
                            /// Creates a new `AuthorPayload`.
                            ///
                            /// - Parameters:
                            ///   - email:
                            ///   - name:
                            public init(
                                email: Swift.String? = nil,
                                name: Swift.String? = nil
                            ) {
                                self.email = email
                                self.name = name
                            }
                            public enum CodingKeys: String, CodingKey {
                                case email
                                case name
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_commit/author`.
                        public var author: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value2Payload.HeadCommitPayload.AuthorPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_commit/committer`.
                        public struct CommitterPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_commit/committer/email`.
                            public var email: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_commit/committer/name`.
                            public var name: Swift.String?
                            /// Creates a new `CommitterPayload`.
                            ///
                            /// - Parameters:
                            ///   - email:
                            ///   - name:
                            public init(
                                email: Swift.String? = nil,
                                name: Swift.String? = nil
                            ) {
                                self.email = email
                                self.name = name
                            }
                            public enum CodingKeys: String, CodingKey {
                                case email
                                case name
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_commit/committer`.
                        public var committer: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value2Payload.HeadCommitPayload.CommitterPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_commit/id`.
                        public var id: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_commit/message`.
                        public var message: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_commit/timestamp`.
                        public var timestamp: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_commit/tree_id`.
                        public var treeId: Swift.String?
                        /// Creates a new `HeadCommitPayload`.
                        ///
                        /// - Parameters:
                        ///   - author:
                        ///   - committer:
                        ///   - id:
                        ///   - message:
                        ///   - timestamp:
                        ///   - treeId:
                        public init(
                            author: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value2Payload.HeadCommitPayload.AuthorPayload? = nil,
                            committer: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value2Payload.HeadCommitPayload.CommitterPayload? = nil,
                            id: Swift.String? = nil,
                            message: Swift.String? = nil,
                            timestamp: Swift.String? = nil,
                            treeId: Swift.String? = nil
                        ) {
                            self.author = author
                            self.committer = committer
                            self.id = id
                            self.message = message
                            self.timestamp = timestamp
                            self.treeId = treeId
                        }
                        public enum CodingKeys: String, CodingKey {
                            case author
                            case committer
                            case id
                            case message
                            case timestamp
                            case treeId = "tree_id"
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_commit`.
                    public var headCommit: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value2Payload.HeadCommitPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository`.
                    public struct HeadRepositoryPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/archive_url`.
                        public var archiveUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/assignees_url`.
                        public var assigneesUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/blobs_url`.
                        public var blobsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/branches_url`.
                        public var branchesUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/collaborators_url`.
                        public var collaboratorsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/comments_url`.
                        public var commentsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/commits_url`.
                        public var commitsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/compare_url`.
                        public var compareUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/contents_url`.
                        public var contentsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/contributors_url`.
                        public var contributorsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/deployments_url`.
                        public var deploymentsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/downloads_url`.
                        public var downloadsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/fork`.
                        public var fork: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/forks_url`.
                        public var forksUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/full_name`.
                        public var fullName: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/git_commits_url`.
                        public var gitCommitsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/git_refs_url`.
                        public var gitRefsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/git_tags_url`.
                        public var gitTagsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/hooks_url`.
                        public var hooksUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/id`.
                        public var id: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/issue_comment_url`.
                        public var issueCommentUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/issue_events_url`.
                        public var issueEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/issues_url`.
                        public var issuesUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/keys_url`.
                        public var keysUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/labels_url`.
                        public var labelsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/languages_url`.
                        public var languagesUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/merges_url`.
                        public var mergesUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/milestones_url`.
                        public var milestonesUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/notifications_url`.
                        public var notificationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/owner`.
                        public struct OwnerPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/owner/avatar_url`.
                            public var avatarUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/owner/events_url`.
                            public var eventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/owner/followers_url`.
                            public var followersUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/owner/following_url`.
                            public var followingUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/owner/gists_url`.
                            public var gistsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/owner/gravatar_id`.
                            public var gravatarId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/owner/html_url`.
                            public var htmlUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/owner/id`.
                            public var id: Swift.Int?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/owner/login`.
                            public var login: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/owner/node_id`.
                            public var nodeId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/owner/organizations_url`.
                            public var organizationsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/owner/received_events_url`.
                            public var receivedEventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/owner/repos_url`.
                            public var reposUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/owner/site_admin`.
                            public var siteAdmin: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/owner/starred_url`.
                            public var starredUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/owner/subscriptions_url`.
                            public var subscriptionsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/owner/type`.
                            public var _type: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/owner/url`.
                            public var url: Swift.String?
                            /// Creates a new `OwnerPayload`.
                            ///
                            /// - Parameters:
                            ///   - avatarUrl:
                            ///   - eventsUrl:
                            ///   - followersUrl:
                            ///   - followingUrl:
                            ///   - gistsUrl:
                            ///   - gravatarId:
                            ///   - htmlUrl:
                            ///   - id:
                            ///   - login:
                            ///   - nodeId:
                            ///   - organizationsUrl:
                            ///   - receivedEventsUrl:
                            ///   - reposUrl:
                            ///   - siteAdmin:
                            ///   - starredUrl:
                            ///   - subscriptionsUrl:
                            ///   - _type:
                            ///   - url:
                            public init(
                                avatarUrl: Swift.String? = nil,
                                eventsUrl: Swift.String? = nil,
                                followersUrl: Swift.String? = nil,
                                followingUrl: Swift.String? = nil,
                                gistsUrl: Swift.String? = nil,
                                gravatarId: Swift.String? = nil,
                                htmlUrl: Swift.String? = nil,
                                id: Swift.Int? = nil,
                                login: Swift.String? = nil,
                                nodeId: Swift.String? = nil,
                                organizationsUrl: Swift.String? = nil,
                                receivedEventsUrl: Swift.String? = nil,
                                reposUrl: Swift.String? = nil,
                                siteAdmin: Swift.Bool? = nil,
                                starredUrl: Swift.String? = nil,
                                subscriptionsUrl: Swift.String? = nil,
                                _type: Swift.String? = nil,
                                url: Swift.String? = nil
                            ) {
                                self.avatarUrl = avatarUrl
                                self.eventsUrl = eventsUrl
                                self.followersUrl = followersUrl
                                self.followingUrl = followingUrl
                                self.gistsUrl = gistsUrl
                                self.gravatarId = gravatarId
                                self.htmlUrl = htmlUrl
                                self.id = id
                                self.login = login
                                self.nodeId = nodeId
                                self.organizationsUrl = organizationsUrl
                                self.receivedEventsUrl = receivedEventsUrl
                                self.reposUrl = reposUrl
                                self.siteAdmin = siteAdmin
                                self.starredUrl = starredUrl
                                self.subscriptionsUrl = subscriptionsUrl
                                self._type = _type
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case avatarUrl = "avatar_url"
                                case eventsUrl = "events_url"
                                case followersUrl = "followers_url"
                                case followingUrl = "following_url"
                                case gistsUrl = "gists_url"
                                case gravatarId = "gravatar_id"
                                case htmlUrl = "html_url"
                                case id
                                case login
                                case nodeId = "node_id"
                                case organizationsUrl = "organizations_url"
                                case receivedEventsUrl = "received_events_url"
                                case reposUrl = "repos_url"
                                case siteAdmin = "site_admin"
                                case starredUrl = "starred_url"
                                case subscriptionsUrl = "subscriptions_url"
                                case _type = "type"
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/owner`.
                        public var owner: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value2Payload.HeadRepositoryPayload.OwnerPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/private`.
                        public var _private: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/pulls_url`.
                        public var pullsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/releases_url`.
                        public var releasesUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/stargazers_url`.
                        public var stargazersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/statuses_url`.
                        public var statusesUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/subscribers_url`.
                        public var subscribersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/subscription_url`.
                        public var subscriptionUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/tags_url`.
                        public var tagsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/teams_url`.
                        public var teamsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/trees_url`.
                        public var treesUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository/url`.
                        public var url: Swift.String?
                        /// Creates a new `HeadRepositoryPayload`.
                        ///
                        /// - Parameters:
                        ///   - archiveUrl:
                        ///   - assigneesUrl:
                        ///   - blobsUrl:
                        ///   - branchesUrl:
                        ///   - collaboratorsUrl:
                        ///   - commentsUrl:
                        ///   - commitsUrl:
                        ///   - compareUrl:
                        ///   - contentsUrl:
                        ///   - contributorsUrl:
                        ///   - deploymentsUrl:
                        ///   - description:
                        ///   - downloadsUrl:
                        ///   - eventsUrl:
                        ///   - fork:
                        ///   - forksUrl:
                        ///   - fullName:
                        ///   - gitCommitsUrl:
                        ///   - gitRefsUrl:
                        ///   - gitTagsUrl:
                        ///   - hooksUrl:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - issueCommentUrl:
                        ///   - issueEventsUrl:
                        ///   - issuesUrl:
                        ///   - keysUrl:
                        ///   - labelsUrl:
                        ///   - languagesUrl:
                        ///   - mergesUrl:
                        ///   - milestonesUrl:
                        ///   - name:
                        ///   - nodeId:
                        ///   - notificationsUrl:
                        ///   - owner:
                        ///   - _private:
                        ///   - pullsUrl:
                        ///   - releasesUrl:
                        ///   - stargazersUrl:
                        ///   - statusesUrl:
                        ///   - subscribersUrl:
                        ///   - subscriptionUrl:
                        ///   - tagsUrl:
                        ///   - teamsUrl:
                        ///   - treesUrl:
                        ///   - url:
                        public init(
                            archiveUrl: Swift.String? = nil,
                            assigneesUrl: Swift.String? = nil,
                            blobsUrl: Swift.String? = nil,
                            branchesUrl: Swift.String? = nil,
                            collaboratorsUrl: Swift.String? = nil,
                            commentsUrl: Swift.String? = nil,
                            commitsUrl: Swift.String? = nil,
                            compareUrl: Swift.String? = nil,
                            contentsUrl: Swift.String? = nil,
                            contributorsUrl: Swift.String? = nil,
                            deploymentsUrl: Swift.String? = nil,
                            description: Swift.String? = nil,
                            downloadsUrl: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            fork: Swift.Bool? = nil,
                            forksUrl: Swift.String? = nil,
                            fullName: Swift.String? = nil,
                            gitCommitsUrl: Swift.String? = nil,
                            gitRefsUrl: Swift.String? = nil,
                            gitTagsUrl: Swift.String? = nil,
                            hooksUrl: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int? = nil,
                            issueCommentUrl: Swift.String? = nil,
                            issueEventsUrl: Swift.String? = nil,
                            issuesUrl: Swift.String? = nil,
                            keysUrl: Swift.String? = nil,
                            labelsUrl: Swift.String? = nil,
                            languagesUrl: Swift.String? = nil,
                            mergesUrl: Swift.String? = nil,
                            milestonesUrl: Swift.String? = nil,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            notificationsUrl: Swift.String? = nil,
                            owner: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value2Payload.HeadRepositoryPayload.OwnerPayload? = nil,
                            _private: Swift.Bool? = nil,
                            pullsUrl: Swift.String? = nil,
                            releasesUrl: Swift.String? = nil,
                            stargazersUrl: Swift.String? = nil,
                            statusesUrl: Swift.String? = nil,
                            subscribersUrl: Swift.String? = nil,
                            subscriptionUrl: Swift.String? = nil,
                            tagsUrl: Swift.String? = nil,
                            teamsUrl: Swift.String? = nil,
                            treesUrl: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.archiveUrl = archiveUrl
                            self.assigneesUrl = assigneesUrl
                            self.blobsUrl = blobsUrl
                            self.branchesUrl = branchesUrl
                            self.collaboratorsUrl = collaboratorsUrl
                            self.commentsUrl = commentsUrl
                            self.commitsUrl = commitsUrl
                            self.compareUrl = compareUrl
                            self.contentsUrl = contentsUrl
                            self.contributorsUrl = contributorsUrl
                            self.deploymentsUrl = deploymentsUrl
                            self.description = description
                            self.downloadsUrl = downloadsUrl
                            self.eventsUrl = eventsUrl
                            self.fork = fork
                            self.forksUrl = forksUrl
                            self.fullName = fullName
                            self.gitCommitsUrl = gitCommitsUrl
                            self.gitRefsUrl = gitRefsUrl
                            self.gitTagsUrl = gitTagsUrl
                            self.hooksUrl = hooksUrl
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.issueCommentUrl = issueCommentUrl
                            self.issueEventsUrl = issueEventsUrl
                            self.issuesUrl = issuesUrl
                            self.keysUrl = keysUrl
                            self.labelsUrl = labelsUrl
                            self.languagesUrl = languagesUrl
                            self.mergesUrl = mergesUrl
                            self.milestonesUrl = milestonesUrl
                            self.name = name
                            self.nodeId = nodeId
                            self.notificationsUrl = notificationsUrl
                            self.owner = owner
                            self._private = _private
                            self.pullsUrl = pullsUrl
                            self.releasesUrl = releasesUrl
                            self.stargazersUrl = stargazersUrl
                            self.statusesUrl = statusesUrl
                            self.subscribersUrl = subscribersUrl
                            self.subscriptionUrl = subscriptionUrl
                            self.tagsUrl = tagsUrl
                            self.teamsUrl = teamsUrl
                            self.treesUrl = treesUrl
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case archiveUrl = "archive_url"
                            case assigneesUrl = "assignees_url"
                            case blobsUrl = "blobs_url"
                            case branchesUrl = "branches_url"
                            case collaboratorsUrl = "collaborators_url"
                            case commentsUrl = "comments_url"
                            case commitsUrl = "commits_url"
                            case compareUrl = "compare_url"
                            case contentsUrl = "contents_url"
                            case contributorsUrl = "contributors_url"
                            case deploymentsUrl = "deployments_url"
                            case description
                            case downloadsUrl = "downloads_url"
                            case eventsUrl = "events_url"
                            case fork
                            case forksUrl = "forks_url"
                            case fullName = "full_name"
                            case gitCommitsUrl = "git_commits_url"
                            case gitRefsUrl = "git_refs_url"
                            case gitTagsUrl = "git_tags_url"
                            case hooksUrl = "hooks_url"
                            case htmlUrl = "html_url"
                            case id
                            case issueCommentUrl = "issue_comment_url"
                            case issueEventsUrl = "issue_events_url"
                            case issuesUrl = "issues_url"
                            case keysUrl = "keys_url"
                            case labelsUrl = "labels_url"
                            case languagesUrl = "languages_url"
                            case mergesUrl = "merges_url"
                            case milestonesUrl = "milestones_url"
                            case name
                            case nodeId = "node_id"
                            case notificationsUrl = "notifications_url"
                            case owner
                            case _private = "private"
                            case pullsUrl = "pulls_url"
                            case releasesUrl = "releases_url"
                            case stargazersUrl = "stargazers_url"
                            case statusesUrl = "statuses_url"
                            case subscribersUrl = "subscribers_url"
                            case subscriptionUrl = "subscription_url"
                            case tagsUrl = "tags_url"
                            case teamsUrl = "teams_url"
                            case treesUrl = "trees_url"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_repository`.
                    public var headRepository: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value2Payload.HeadRepositoryPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/head_sha`.
                    public var headSha: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/id`.
                    public var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/jobs_url`.
                    public var jobsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/logs_url`.
                    public var logsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/path`.
                    public var path: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/previous_attempt_url`.
                    public var previousAttemptUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/pull_requests`.
                    public var pullRequests: [OpenAPIRuntime.OpenAPIObjectContainer?]?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/ReferencedWorkflowsPayload`.
                    public struct ReferencedWorkflowsPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/ReferencedWorkflowsPayload/path`.
                        public var path: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/ReferencedWorkflowsPayload/ref`.
                        public var ref: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/ReferencedWorkflowsPayload/sha`.
                        public var sha: Swift.String
                        /// Creates a new `ReferencedWorkflowsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - path:
                        ///   - ref:
                        ///   - sha:
                        public init(
                            path: Swift.String,
                            ref: Swift.String? = nil,
                            sha: Swift.String
                        ) {
                            self.path = path
                            self.ref = ref
                            self.sha = sha
                        }
                        public enum CodingKeys: String, CodingKey {
                            case path
                            case ref
                            case sha
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/referenced_workflows`.
                    public typealias ReferencedWorkflowsPayload = [Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value2Payload.ReferencedWorkflowsPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/referenced_workflows`.
                    public var referencedWorkflows: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value2Payload.ReferencedWorkflowsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository`.
                    public struct RepositoryPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/archive_url`.
                        public var archiveUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/assignees_url`.
                        public var assigneesUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/blobs_url`.
                        public var blobsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/branches_url`.
                        public var branchesUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/collaborators_url`.
                        public var collaboratorsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/comments_url`.
                        public var commentsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/commits_url`.
                        public var commitsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/compare_url`.
                        public var compareUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/contents_url`.
                        public var contentsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/contributors_url`.
                        public var contributorsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/deployments_url`.
                        public var deploymentsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/downloads_url`.
                        public var downloadsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/fork`.
                        public var fork: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/forks_url`.
                        public var forksUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/full_name`.
                        public var fullName: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/git_commits_url`.
                        public var gitCommitsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/git_refs_url`.
                        public var gitRefsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/git_tags_url`.
                        public var gitTagsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/hooks_url`.
                        public var hooksUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/id`.
                        public var id: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/issue_comment_url`.
                        public var issueCommentUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/issue_events_url`.
                        public var issueEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/issues_url`.
                        public var issuesUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/keys_url`.
                        public var keysUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/labels_url`.
                        public var labelsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/languages_url`.
                        public var languagesUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/merges_url`.
                        public var mergesUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/milestones_url`.
                        public var milestonesUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/notifications_url`.
                        public var notificationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/owner`.
                        public struct OwnerPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/owner/avatar_url`.
                            public var avatarUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/owner/events_url`.
                            public var eventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/owner/followers_url`.
                            public var followersUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/owner/following_url`.
                            public var followingUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/owner/gists_url`.
                            public var gistsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/owner/gravatar_id`.
                            public var gravatarId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/owner/html_url`.
                            public var htmlUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/owner/id`.
                            public var id: Swift.Int?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/owner/login`.
                            public var login: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/owner/node_id`.
                            public var nodeId: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/owner/organizations_url`.
                            public var organizationsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/owner/received_events_url`.
                            public var receivedEventsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/owner/repos_url`.
                            public var reposUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/owner/site_admin`.
                            public var siteAdmin: Swift.Bool?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/owner/starred_url`.
                            public var starredUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/owner/subscriptions_url`.
                            public var subscriptionsUrl: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/owner/type`.
                            public var _type: Swift.String?
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/owner/url`.
                            public var url: Swift.String?
                            /// Creates a new `OwnerPayload`.
                            ///
                            /// - Parameters:
                            ///   - avatarUrl:
                            ///   - eventsUrl:
                            ///   - followersUrl:
                            ///   - followingUrl:
                            ///   - gistsUrl:
                            ///   - gravatarId:
                            ///   - htmlUrl:
                            ///   - id:
                            ///   - login:
                            ///   - nodeId:
                            ///   - organizationsUrl:
                            ///   - receivedEventsUrl:
                            ///   - reposUrl:
                            ///   - siteAdmin:
                            ///   - starredUrl:
                            ///   - subscriptionsUrl:
                            ///   - _type:
                            ///   - url:
                            public init(
                                avatarUrl: Swift.String? = nil,
                                eventsUrl: Swift.String? = nil,
                                followersUrl: Swift.String? = nil,
                                followingUrl: Swift.String? = nil,
                                gistsUrl: Swift.String? = nil,
                                gravatarId: Swift.String? = nil,
                                htmlUrl: Swift.String? = nil,
                                id: Swift.Int? = nil,
                                login: Swift.String? = nil,
                                nodeId: Swift.String? = nil,
                                organizationsUrl: Swift.String? = nil,
                                receivedEventsUrl: Swift.String? = nil,
                                reposUrl: Swift.String? = nil,
                                siteAdmin: Swift.Bool? = nil,
                                starredUrl: Swift.String? = nil,
                                subscriptionsUrl: Swift.String? = nil,
                                _type: Swift.String? = nil,
                                url: Swift.String? = nil
                            ) {
                                self.avatarUrl = avatarUrl
                                self.eventsUrl = eventsUrl
                                self.followersUrl = followersUrl
                                self.followingUrl = followingUrl
                                self.gistsUrl = gistsUrl
                                self.gravatarId = gravatarId
                                self.htmlUrl = htmlUrl
                                self.id = id
                                self.login = login
                                self.nodeId = nodeId
                                self.organizationsUrl = organizationsUrl
                                self.receivedEventsUrl = receivedEventsUrl
                                self.reposUrl = reposUrl
                                self.siteAdmin = siteAdmin
                                self.starredUrl = starredUrl
                                self.subscriptionsUrl = subscriptionsUrl
                                self._type = _type
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case avatarUrl = "avatar_url"
                                case eventsUrl = "events_url"
                                case followersUrl = "followers_url"
                                case followingUrl = "following_url"
                                case gistsUrl = "gists_url"
                                case gravatarId = "gravatar_id"
                                case htmlUrl = "html_url"
                                case id
                                case login
                                case nodeId = "node_id"
                                case organizationsUrl = "organizations_url"
                                case receivedEventsUrl = "received_events_url"
                                case reposUrl = "repos_url"
                                case siteAdmin = "site_admin"
                                case starredUrl = "starred_url"
                                case subscriptionsUrl = "subscriptions_url"
                                case _type = "type"
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/owner`.
                        public var owner: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value2Payload.RepositoryPayload.OwnerPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/private`.
                        public var _private: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/pulls_url`.
                        public var pullsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/releases_url`.
                        public var releasesUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/stargazers_url`.
                        public var stargazersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/statuses_url`.
                        public var statusesUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/subscribers_url`.
                        public var subscribersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/subscription_url`.
                        public var subscriptionUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/tags_url`.
                        public var tagsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/teams_url`.
                        public var teamsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/trees_url`.
                        public var treesUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository/url`.
                        public var url: Swift.String?
                        /// Creates a new `RepositoryPayload`.
                        ///
                        /// - Parameters:
                        ///   - archiveUrl:
                        ///   - assigneesUrl:
                        ///   - blobsUrl:
                        ///   - branchesUrl:
                        ///   - collaboratorsUrl:
                        ///   - commentsUrl:
                        ///   - commitsUrl:
                        ///   - compareUrl:
                        ///   - contentsUrl:
                        ///   - contributorsUrl:
                        ///   - deploymentsUrl:
                        ///   - description:
                        ///   - downloadsUrl:
                        ///   - eventsUrl:
                        ///   - fork:
                        ///   - forksUrl:
                        ///   - fullName:
                        ///   - gitCommitsUrl:
                        ///   - gitRefsUrl:
                        ///   - gitTagsUrl:
                        ///   - hooksUrl:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - issueCommentUrl:
                        ///   - issueEventsUrl:
                        ///   - issuesUrl:
                        ///   - keysUrl:
                        ///   - labelsUrl:
                        ///   - languagesUrl:
                        ///   - mergesUrl:
                        ///   - milestonesUrl:
                        ///   - name:
                        ///   - nodeId:
                        ///   - notificationsUrl:
                        ///   - owner:
                        ///   - _private:
                        ///   - pullsUrl:
                        ///   - releasesUrl:
                        ///   - stargazersUrl:
                        ///   - statusesUrl:
                        ///   - subscribersUrl:
                        ///   - subscriptionUrl:
                        ///   - tagsUrl:
                        ///   - teamsUrl:
                        ///   - treesUrl:
                        ///   - url:
                        public init(
                            archiveUrl: Swift.String? = nil,
                            assigneesUrl: Swift.String? = nil,
                            blobsUrl: Swift.String? = nil,
                            branchesUrl: Swift.String? = nil,
                            collaboratorsUrl: Swift.String? = nil,
                            commentsUrl: Swift.String? = nil,
                            commitsUrl: Swift.String? = nil,
                            compareUrl: Swift.String? = nil,
                            contentsUrl: Swift.String? = nil,
                            contributorsUrl: Swift.String? = nil,
                            deploymentsUrl: Swift.String? = nil,
                            description: Swift.String? = nil,
                            downloadsUrl: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            fork: Swift.Bool? = nil,
                            forksUrl: Swift.String? = nil,
                            fullName: Swift.String? = nil,
                            gitCommitsUrl: Swift.String? = nil,
                            gitRefsUrl: Swift.String? = nil,
                            gitTagsUrl: Swift.String? = nil,
                            hooksUrl: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int? = nil,
                            issueCommentUrl: Swift.String? = nil,
                            issueEventsUrl: Swift.String? = nil,
                            issuesUrl: Swift.String? = nil,
                            keysUrl: Swift.String? = nil,
                            labelsUrl: Swift.String? = nil,
                            languagesUrl: Swift.String? = nil,
                            mergesUrl: Swift.String? = nil,
                            milestonesUrl: Swift.String? = nil,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            notificationsUrl: Swift.String? = nil,
                            owner: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value2Payload.RepositoryPayload.OwnerPayload? = nil,
                            _private: Swift.Bool? = nil,
                            pullsUrl: Swift.String? = nil,
                            releasesUrl: Swift.String? = nil,
                            stargazersUrl: Swift.String? = nil,
                            statusesUrl: Swift.String? = nil,
                            subscribersUrl: Swift.String? = nil,
                            subscriptionUrl: Swift.String? = nil,
                            tagsUrl: Swift.String? = nil,
                            teamsUrl: Swift.String? = nil,
                            treesUrl: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.archiveUrl = archiveUrl
                            self.assigneesUrl = assigneesUrl
                            self.blobsUrl = blobsUrl
                            self.branchesUrl = branchesUrl
                            self.collaboratorsUrl = collaboratorsUrl
                            self.commentsUrl = commentsUrl
                            self.commitsUrl = commitsUrl
                            self.compareUrl = compareUrl
                            self.contentsUrl = contentsUrl
                            self.contributorsUrl = contributorsUrl
                            self.deploymentsUrl = deploymentsUrl
                            self.description = description
                            self.downloadsUrl = downloadsUrl
                            self.eventsUrl = eventsUrl
                            self.fork = fork
                            self.forksUrl = forksUrl
                            self.fullName = fullName
                            self.gitCommitsUrl = gitCommitsUrl
                            self.gitRefsUrl = gitRefsUrl
                            self.gitTagsUrl = gitTagsUrl
                            self.hooksUrl = hooksUrl
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.issueCommentUrl = issueCommentUrl
                            self.issueEventsUrl = issueEventsUrl
                            self.issuesUrl = issuesUrl
                            self.keysUrl = keysUrl
                            self.labelsUrl = labelsUrl
                            self.languagesUrl = languagesUrl
                            self.mergesUrl = mergesUrl
                            self.milestonesUrl = milestonesUrl
                            self.name = name
                            self.nodeId = nodeId
                            self.notificationsUrl = notificationsUrl
                            self.owner = owner
                            self._private = _private
                            self.pullsUrl = pullsUrl
                            self.releasesUrl = releasesUrl
                            self.stargazersUrl = stargazersUrl
                            self.statusesUrl = statusesUrl
                            self.subscribersUrl = subscribersUrl
                            self.subscriptionUrl = subscriptionUrl
                            self.tagsUrl = tagsUrl
                            self.teamsUrl = teamsUrl
                            self.treesUrl = treesUrl
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case archiveUrl = "archive_url"
                            case assigneesUrl = "assignees_url"
                            case blobsUrl = "blobs_url"
                            case branchesUrl = "branches_url"
                            case collaboratorsUrl = "collaborators_url"
                            case commentsUrl = "comments_url"
                            case commitsUrl = "commits_url"
                            case compareUrl = "compare_url"
                            case contentsUrl = "contents_url"
                            case contributorsUrl = "contributors_url"
                            case deploymentsUrl = "deployments_url"
                            case description
                            case downloadsUrl = "downloads_url"
                            case eventsUrl = "events_url"
                            case fork
                            case forksUrl = "forks_url"
                            case fullName = "full_name"
                            case gitCommitsUrl = "git_commits_url"
                            case gitRefsUrl = "git_refs_url"
                            case gitTagsUrl = "git_tags_url"
                            case hooksUrl = "hooks_url"
                            case htmlUrl = "html_url"
                            case id
                            case issueCommentUrl = "issue_comment_url"
                            case issueEventsUrl = "issue_events_url"
                            case issuesUrl = "issues_url"
                            case keysUrl = "keys_url"
                            case labelsUrl = "labels_url"
                            case languagesUrl = "languages_url"
                            case mergesUrl = "merges_url"
                            case milestonesUrl = "milestones_url"
                            case name
                            case nodeId = "node_id"
                            case notificationsUrl = "notifications_url"
                            case owner
                            case _private = "private"
                            case pullsUrl = "pulls_url"
                            case releasesUrl = "releases_url"
                            case stargazersUrl = "stargazers_url"
                            case statusesUrl = "statuses_url"
                            case subscribersUrl = "subscribers_url"
                            case subscriptionUrl = "subscription_url"
                            case tagsUrl = "tags_url"
                            case teamsUrl = "teams_url"
                            case treesUrl = "trees_url"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/repository`.
                    public var repository: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value2Payload.RepositoryPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/rerun_url`.
                    public var rerunUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/run_attempt`.
                    public var runAttempt: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/run_number`.
                    public var runNumber: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/run_started_at`.
                    public var runStartedAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/status`.
                    public var status: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/triggering_actor`.
                    public struct TriggeringActorPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/triggering_actor/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/triggering_actor/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/triggering_actor/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/triggering_actor/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/triggering_actor/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/triggering_actor/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/triggering_actor/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/triggering_actor/id`.
                        public var id: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/triggering_actor/login`.
                        public var login: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/triggering_actor/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/triggering_actor/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/triggering_actor/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/triggering_actor/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/triggering_actor/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/triggering_actor/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/triggering_actor/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/triggering_actor/type`.
                        public var _type: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/triggering_actor/url`.
                        public var url: Swift.String?
                        /// Creates a new `TriggeringActorPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int? = nil,
                            login: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/triggering_actor`.
                    public var triggeringActor: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value2Payload.TriggeringActorPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/updated_at`.
                    public var updatedAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/url`.
                    public var url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/workflow_id`.
                    public var workflowId: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2/workflow_url`.
                    public var workflowUrl: Swift.String?
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - actor:
                    ///   - artifactsUrl:
                    ///   - cancelUrl:
                    ///   - checkSuiteId:
                    ///   - checkSuiteNodeId:
                    ///   - checkSuiteUrl:
                    ///   - conclusion:
                    ///   - createdAt:
                    ///   - event:
                    ///   - headBranch:
                    ///   - headCommit:
                    ///   - headRepository:
                    ///   - headSha:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - jobsUrl:
                    ///   - logsUrl:
                    ///   - name:
                    ///   - nodeId:
                    ///   - path:
                    ///   - previousAttemptUrl:
                    ///   - pullRequests:
                    ///   - referencedWorkflows:
                    ///   - repository:
                    ///   - rerunUrl:
                    ///   - runAttempt:
                    ///   - runNumber:
                    ///   - runStartedAt:
                    ///   - status:
                    ///   - triggeringActor:
                    ///   - updatedAt:
                    ///   - url:
                    ///   - workflowId:
                    ///   - workflowUrl:
                    public init(
                        actor: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value2Payload.ActorPayload? = nil,
                        artifactsUrl: Swift.String? = nil,
                        cancelUrl: Swift.String? = nil,
                        checkSuiteId: Swift.Int? = nil,
                        checkSuiteNodeId: Swift.String? = nil,
                        checkSuiteUrl: Swift.String? = nil,
                        conclusion: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value2Payload.ConclusionPayload? = nil,
                        createdAt: Swift.String? = nil,
                        event: Swift.String? = nil,
                        headBranch: Swift.String? = nil,
                        headCommit: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value2Payload.HeadCommitPayload? = nil,
                        headRepository: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value2Payload.HeadRepositoryPayload? = nil,
                        headSha: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int? = nil,
                        jobsUrl: Swift.String? = nil,
                        logsUrl: Swift.String? = nil,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        path: Swift.String? = nil,
                        previousAttemptUrl: Swift.String? = nil,
                        pullRequests: [OpenAPIRuntime.OpenAPIObjectContainer?]? = nil,
                        referencedWorkflows: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value2Payload.ReferencedWorkflowsPayload? = nil,
                        repository: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value2Payload.RepositoryPayload? = nil,
                        rerunUrl: Swift.String? = nil,
                        runAttempt: Swift.Int? = nil,
                        runNumber: Swift.Int? = nil,
                        runStartedAt: Swift.String? = nil,
                        status: Swift.String? = nil,
                        triggeringActor: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value2Payload.TriggeringActorPayload? = nil,
                        updatedAt: Swift.String? = nil,
                        url: Swift.String? = nil,
                        workflowId: Swift.Int? = nil,
                        workflowUrl: Swift.String? = nil
                    ) {
                        self.actor = actor
                        self.artifactsUrl = artifactsUrl
                        self.cancelUrl = cancelUrl
                        self.checkSuiteId = checkSuiteId
                        self.checkSuiteNodeId = checkSuiteNodeId
                        self.checkSuiteUrl = checkSuiteUrl
                        self.conclusion = conclusion
                        self.createdAt = createdAt
                        self.event = event
                        self.headBranch = headBranch
                        self.headCommit = headCommit
                        self.headRepository = headRepository
                        self.headSha = headSha
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.jobsUrl = jobsUrl
                        self.logsUrl = logsUrl
                        self.name = name
                        self.nodeId = nodeId
                        self.path = path
                        self.previousAttemptUrl = previousAttemptUrl
                        self.pullRequests = pullRequests
                        self.referencedWorkflows = referencedWorkflows
                        self.repository = repository
                        self.rerunUrl = rerunUrl
                        self.runAttempt = runAttempt
                        self.runNumber = runNumber
                        self.runStartedAt = runStartedAt
                        self.status = status
                        self.triggeringActor = triggeringActor
                        self.updatedAt = updatedAt
                        self.url = url
                        self.workflowId = workflowId
                        self.workflowUrl = workflowUrl
                    }
                    public enum CodingKeys: String, CodingKey {
                        case actor
                        case artifactsUrl = "artifacts_url"
                        case cancelUrl = "cancel_url"
                        case checkSuiteId = "check_suite_id"
                        case checkSuiteNodeId = "check_suite_node_id"
                        case checkSuiteUrl = "check_suite_url"
                        case conclusion
                        case createdAt = "created_at"
                        case event
                        case headBranch = "head_branch"
                        case headCommit = "head_commit"
                        case headRepository = "head_repository"
                        case headSha = "head_sha"
                        case htmlUrl = "html_url"
                        case id
                        case jobsUrl = "jobs_url"
                        case logsUrl = "logs_url"
                        case name
                        case nodeId = "node_id"
                        case path
                        case previousAttemptUrl = "previous_attempt_url"
                        case pullRequests = "pull_requests"
                        case referencedWorkflows = "referenced_workflows"
                        case repository
                        case rerunUrl = "rerun_url"
                        case runAttempt = "run_attempt"
                        case runNumber = "run_number"
                        case runStartedAt = "run_started_at"
                        case status
                        case triggeringActor = "triggering_actor"
                        case updatedAt = "updated_at"
                        case url
                        case workflowId = "workflow_id"
                        case workflowUrl = "workflow_url"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run/value2`.
                public var value2: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value2Payload
                /// Creates a new `WorkflowRunPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value1Payload,
                    value2: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-in-progress/workflow_run`.
            public var workflowRun: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload
            /// Creates a new `WebhookWorkflowRunInProgress`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - enterprise:
            ///   - installation:
            ///   - organization:
            ///   - repository:
            ///   - sender:
            ///   - workflow:
            ///   - workflowRun:
            public init(
                action: Components.Schemas.WebhookWorkflowRunInProgress.ActionPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser,
                workflow: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowPayload? = nil,
                workflowRun: Components.Schemas.WebhookWorkflowRunInProgress.WorkflowRunPayload
            ) {
                self.action = action
                self.enterprise = enterprise
                self.installation = installation
                self.organization = organization
                self.repository = repository
                self.sender = sender
                self.workflow = workflow
                self.workflowRun = workflowRun
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case enterprise
                case installation
                case organization
                case repository
                case sender
                case workflow
                case workflowRun = "workflow_run"
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested`.
        public struct WebhookWorkflowRunRequested: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case requested = "requested"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/action`.
            public var action: Components.Schemas.WebhookWorkflowRunRequested.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow`.
            public struct WorkflowPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow/badge_url`.
                public var badgeUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow/created_at`.
                public var createdAt: Foundation.Date
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow/html_url`.
                public var htmlUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow/path`.
                public var path: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow/state`.
                public var state: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow/updated_at`.
                public var updatedAt: Foundation.Date
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow/url`.
                public var url: Swift.String
                /// Creates a new `WorkflowPayload`.
                ///
                /// - Parameters:
                ///   - badgeUrl:
                ///   - createdAt:
                ///   - htmlUrl:
                ///   - id:
                ///   - name:
                ///   - nodeId:
                ///   - path:
                ///   - state:
                ///   - updatedAt:
                ///   - url:
                public init(
                    badgeUrl: Swift.String,
                    createdAt: Foundation.Date,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    name: Swift.String,
                    nodeId: Swift.String,
                    path: Swift.String,
                    state: Swift.String,
                    updatedAt: Foundation.Date,
                    url: Swift.String
                ) {
                    self.badgeUrl = badgeUrl
                    self.createdAt = createdAt
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.name = name
                    self.nodeId = nodeId
                    self.path = path
                    self.state = state
                    self.updatedAt = updatedAt
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case badgeUrl = "badge_url"
                    case createdAt = "created_at"
                    case htmlUrl = "html_url"
                    case id
                    case name
                    case nodeId = "node_id"
                    case path
                    case state
                    case updatedAt = "updated_at"
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow`.
            public var workflow: Components.Schemas.WebhookWorkflowRunRequested.WorkflowPayload?
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run`.
            public struct WorkflowRunPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/actor`.
                public struct ActorPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/actor/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/actor/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/actor/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/actor/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/actor/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/actor/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/actor/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/actor/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/actor/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/actor/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/actor/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/actor/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/actor/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/actor/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/actor/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/actor/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/actor/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/actor/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/actor/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/actor/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/actor/type`.
                    public var _type: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.ActorPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/actor/url`.
                    public var url: Swift.String?
                    /// Creates a new `ActorPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.ActorPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/actor`.
                public var actor: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.ActorPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/artifacts_url`.
                public var artifactsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/cancel_url`.
                public var cancelUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/check_suite_id`.
                public var checkSuiteId: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/check_suite_node_id`.
                public var checkSuiteNodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/check_suite_url`.
                public var checkSuiteUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/conclusion`.
                @frozen public enum ConclusionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case success = "success"
                    case failure = "failure"
                    case neutral = "neutral"
                    case cancelled = "cancelled"
                    case timedOut = "timed_out"
                    case actionRequired = "action_required"
                    case stale = "stale"
                    case _empty_ = ""
                    case skipped = "skipped"
                    case startupFailure = "startup_failure"
                }
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/conclusion`.
                public var conclusion: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.ConclusionPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/created_at`.
                public var createdAt: Foundation.Date
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/event`.
                public var event: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_branch`.
                public var headBranch: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_commit`.
                public struct HeadCommitPayload: Codable, Hashable, Sendable {
                    /// Metaproperties for Git author/committer information.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_commit/author`.
                    public struct AuthorPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_commit/author/date`.
                        public var date: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_commit/author/email`.
                        public var email: Swift.String?
                        /// The git author's name.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_commit/author/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_commit/author/username`.
                        public var username: Swift.String?
                        /// Creates a new `AuthorPayload`.
                        ///
                        /// - Parameters:
                        ///   - date:
                        ///   - email:
                        ///   - name: The git author's name.
                        ///   - username:
                        public init(
                            date: Foundation.Date? = nil,
                            email: Swift.String? = nil,
                            name: Swift.String,
                            username: Swift.String? = nil
                        ) {
                            self.date = date
                            self.email = email
                            self.name = name
                            self.username = username
                        }
                        public enum CodingKeys: String, CodingKey {
                            case date
                            case email
                            case name
                            case username
                        }
                    }
                    /// Metaproperties for Git author/committer information.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_commit/author`.
                    public var author: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.HeadCommitPayload.AuthorPayload
                    /// Metaproperties for Git author/committer information.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_commit/committer`.
                    public struct CommitterPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_commit/committer/date`.
                        public var date: Foundation.Date?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_commit/committer/email`.
                        public var email: Swift.String?
                        /// The git author's name.
                        ///
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_commit/committer/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_commit/committer/username`.
                        public var username: Swift.String?
                        /// Creates a new `CommitterPayload`.
                        ///
                        /// - Parameters:
                        ///   - date:
                        ///   - email:
                        ///   - name: The git author's name.
                        ///   - username:
                        public init(
                            date: Foundation.Date? = nil,
                            email: Swift.String? = nil,
                            name: Swift.String,
                            username: Swift.String? = nil
                        ) {
                            self.date = date
                            self.email = email
                            self.name = name
                            self.username = username
                        }
                        public enum CodingKeys: String, CodingKey {
                            case date
                            case email
                            case name
                            case username
                        }
                    }
                    /// Metaproperties for Git author/committer information.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_commit/committer`.
                    public var committer: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.HeadCommitPayload.CommitterPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_commit/id`.
                    public var id: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_commit/message`.
                    public var message: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_commit/timestamp`.
                    public var timestamp: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_commit/tree_id`.
                    public var treeId: Swift.String
                    /// Creates a new `HeadCommitPayload`.
                    ///
                    /// - Parameters:
                    ///   - author: Metaproperties for Git author/committer information.
                    ///   - committer: Metaproperties for Git author/committer information.
                    ///   - id:
                    ///   - message:
                    ///   - timestamp:
                    ///   - treeId:
                    public init(
                        author: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.HeadCommitPayload.AuthorPayload,
                        committer: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.HeadCommitPayload.CommitterPayload,
                        id: Swift.String,
                        message: Swift.String,
                        timestamp: Swift.String,
                        treeId: Swift.String
                    ) {
                        self.author = author
                        self.committer = committer
                        self.id = id
                        self.message = message
                        self.timestamp = timestamp
                        self.treeId = treeId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case author
                        case committer
                        case id
                        case message
                        case timestamp
                        case treeId = "tree_id"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_commit`.
                public var headCommit: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.HeadCommitPayload
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository`.
                public struct HeadRepositoryPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/archive_url`.
                    public var archiveUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/assignees_url`.
                    public var assigneesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/blobs_url`.
                    public var blobsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/branches_url`.
                    public var branchesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/collaborators_url`.
                    public var collaboratorsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/comments_url`.
                    public var commentsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/commits_url`.
                    public var commitsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/compare_url`.
                    public var compareUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/contents_url`.
                    public var contentsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/contributors_url`.
                    public var contributorsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/deployments_url`.
                    public var deploymentsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/downloads_url`.
                    public var downloadsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/events_url`.
                    public var eventsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/fork`.
                    public var fork: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/forks_url`.
                    public var forksUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/full_name`.
                    public var fullName: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/git_commits_url`.
                    public var gitCommitsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/git_refs_url`.
                    public var gitRefsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/git_tags_url`.
                    public var gitTagsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/hooks_url`.
                    public var hooksUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/html_url`.
                    public var htmlUrl: Swift.String
                    /// Unique identifier of the repository
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/issue_comment_url`.
                    public var issueCommentUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/issue_events_url`.
                    public var issueEventsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/issues_url`.
                    public var issuesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/keys_url`.
                    public var keysUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/labels_url`.
                    public var labelsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/languages_url`.
                    public var languagesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/merges_url`.
                    public var mergesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/milestones_url`.
                    public var milestonesUrl: Swift.String
                    /// The name of the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/notifications_url`.
                    public var notificationsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/owner`.
                    public struct OwnerPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/owner/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/owner/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/owner/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/owner/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/owner/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/owner/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/owner/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/owner/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/owner/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/owner/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/owner/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/owner/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/owner/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/owner/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/owner/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/owner/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/owner/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/owner/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/owner/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/owner/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/owner/type`.
                        public var _type: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.HeadRepositoryPayload.OwnerPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/owner/url`.
                        public var url: Swift.String?
                        /// Creates a new `OwnerPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.HeadRepositoryPayload.OwnerPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/owner`.
                    public var owner: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.HeadRepositoryPayload.OwnerPayload?
                    /// Whether the repository is private or public.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/private`.
                    public var _private: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/pulls_url`.
                    public var pullsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/releases_url`.
                    public var releasesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/stargazers_url`.
                    public var stargazersUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/statuses_url`.
                    public var statusesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/subscribers_url`.
                    public var subscribersUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/subscription_url`.
                    public var subscriptionUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/tags_url`.
                    public var tagsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/teams_url`.
                    public var teamsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/trees_url`.
                    public var treesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository/url`.
                    public var url: Swift.String
                    /// Creates a new `HeadRepositoryPayload`.
                    ///
                    /// - Parameters:
                    ///   - archiveUrl:
                    ///   - assigneesUrl:
                    ///   - blobsUrl:
                    ///   - branchesUrl:
                    ///   - collaboratorsUrl:
                    ///   - commentsUrl:
                    ///   - commitsUrl:
                    ///   - compareUrl:
                    ///   - contentsUrl:
                    ///   - contributorsUrl:
                    ///   - deploymentsUrl:
                    ///   - description:
                    ///   - downloadsUrl:
                    ///   - eventsUrl:
                    ///   - fork:
                    ///   - forksUrl:
                    ///   - fullName:
                    ///   - gitCommitsUrl:
                    ///   - gitRefsUrl:
                    ///   - gitTagsUrl:
                    ///   - hooksUrl:
                    ///   - htmlUrl:
                    ///   - id: Unique identifier of the repository
                    ///   - issueCommentUrl:
                    ///   - issueEventsUrl:
                    ///   - issuesUrl:
                    ///   - keysUrl:
                    ///   - labelsUrl:
                    ///   - languagesUrl:
                    ///   - mergesUrl:
                    ///   - milestonesUrl:
                    ///   - name: The name of the repository.
                    ///   - nodeId:
                    ///   - notificationsUrl:
                    ///   - owner:
                    ///   - _private: Whether the repository is private or public.
                    ///   - pullsUrl:
                    ///   - releasesUrl:
                    ///   - stargazersUrl:
                    ///   - statusesUrl:
                    ///   - subscribersUrl:
                    ///   - subscriptionUrl:
                    ///   - tagsUrl:
                    ///   - teamsUrl:
                    ///   - treesUrl:
                    ///   - url:
                    public init(
                        archiveUrl: Swift.String,
                        assigneesUrl: Swift.String,
                        blobsUrl: Swift.String,
                        branchesUrl: Swift.String,
                        collaboratorsUrl: Swift.String,
                        commentsUrl: Swift.String,
                        commitsUrl: Swift.String,
                        compareUrl: Swift.String,
                        contentsUrl: Swift.String,
                        contributorsUrl: Swift.String,
                        deploymentsUrl: Swift.String,
                        description: Swift.String? = nil,
                        downloadsUrl: Swift.String,
                        eventsUrl: Swift.String,
                        fork: Swift.Bool,
                        forksUrl: Swift.String,
                        fullName: Swift.String,
                        gitCommitsUrl: Swift.String,
                        gitRefsUrl: Swift.String,
                        gitTagsUrl: Swift.String,
                        hooksUrl: Swift.String,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        issueCommentUrl: Swift.String,
                        issueEventsUrl: Swift.String,
                        issuesUrl: Swift.String,
                        keysUrl: Swift.String,
                        labelsUrl: Swift.String,
                        languagesUrl: Swift.String,
                        mergesUrl: Swift.String,
                        milestonesUrl: Swift.String,
                        name: Swift.String,
                        nodeId: Swift.String,
                        notificationsUrl: Swift.String,
                        owner: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.HeadRepositoryPayload.OwnerPayload? = nil,
                        _private: Swift.Bool,
                        pullsUrl: Swift.String,
                        releasesUrl: Swift.String,
                        stargazersUrl: Swift.String,
                        statusesUrl: Swift.String,
                        subscribersUrl: Swift.String,
                        subscriptionUrl: Swift.String,
                        tagsUrl: Swift.String,
                        teamsUrl: Swift.String,
                        treesUrl: Swift.String,
                        url: Swift.String
                    ) {
                        self.archiveUrl = archiveUrl
                        self.assigneesUrl = assigneesUrl
                        self.blobsUrl = blobsUrl
                        self.branchesUrl = branchesUrl
                        self.collaboratorsUrl = collaboratorsUrl
                        self.commentsUrl = commentsUrl
                        self.commitsUrl = commitsUrl
                        self.compareUrl = compareUrl
                        self.contentsUrl = contentsUrl
                        self.contributorsUrl = contributorsUrl
                        self.deploymentsUrl = deploymentsUrl
                        self.description = description
                        self.downloadsUrl = downloadsUrl
                        self.eventsUrl = eventsUrl
                        self.fork = fork
                        self.forksUrl = forksUrl
                        self.fullName = fullName
                        self.gitCommitsUrl = gitCommitsUrl
                        self.gitRefsUrl = gitRefsUrl
                        self.gitTagsUrl = gitTagsUrl
                        self.hooksUrl = hooksUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.issueCommentUrl = issueCommentUrl
                        self.issueEventsUrl = issueEventsUrl
                        self.issuesUrl = issuesUrl
                        self.keysUrl = keysUrl
                        self.labelsUrl = labelsUrl
                        self.languagesUrl = languagesUrl
                        self.mergesUrl = mergesUrl
                        self.milestonesUrl = milestonesUrl
                        self.name = name
                        self.nodeId = nodeId
                        self.notificationsUrl = notificationsUrl
                        self.owner = owner
                        self._private = _private
                        self.pullsUrl = pullsUrl
                        self.releasesUrl = releasesUrl
                        self.stargazersUrl = stargazersUrl
                        self.statusesUrl = statusesUrl
                        self.subscribersUrl = subscribersUrl
                        self.subscriptionUrl = subscriptionUrl
                        self.tagsUrl = tagsUrl
                        self.teamsUrl = teamsUrl
                        self.treesUrl = treesUrl
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case archiveUrl = "archive_url"
                        case assigneesUrl = "assignees_url"
                        case blobsUrl = "blobs_url"
                        case branchesUrl = "branches_url"
                        case collaboratorsUrl = "collaborators_url"
                        case commentsUrl = "comments_url"
                        case commitsUrl = "commits_url"
                        case compareUrl = "compare_url"
                        case contentsUrl = "contents_url"
                        case contributorsUrl = "contributors_url"
                        case deploymentsUrl = "deployments_url"
                        case description
                        case downloadsUrl = "downloads_url"
                        case eventsUrl = "events_url"
                        case fork
                        case forksUrl = "forks_url"
                        case fullName = "full_name"
                        case gitCommitsUrl = "git_commits_url"
                        case gitRefsUrl = "git_refs_url"
                        case gitTagsUrl = "git_tags_url"
                        case hooksUrl = "hooks_url"
                        case htmlUrl = "html_url"
                        case id
                        case issueCommentUrl = "issue_comment_url"
                        case issueEventsUrl = "issue_events_url"
                        case issuesUrl = "issues_url"
                        case keysUrl = "keys_url"
                        case labelsUrl = "labels_url"
                        case languagesUrl = "languages_url"
                        case mergesUrl = "merges_url"
                        case milestonesUrl = "milestones_url"
                        case name
                        case nodeId = "node_id"
                        case notificationsUrl = "notifications_url"
                        case owner
                        case _private = "private"
                        case pullsUrl = "pulls_url"
                        case releasesUrl = "releases_url"
                        case stargazersUrl = "stargazers_url"
                        case statusesUrl = "statuses_url"
                        case subscribersUrl = "subscribers_url"
                        case subscriptionUrl = "subscription_url"
                        case tagsUrl = "tags_url"
                        case teamsUrl = "teams_url"
                        case treesUrl = "trees_url"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_repository`.
                public var headRepository: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.HeadRepositoryPayload
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/head_sha`.
                public var headSha: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/html_url`.
                public var htmlUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/jobs_url`.
                public var jobsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/logs_url`.
                public var logsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/path`.
                public var path: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/previous_attempt_url`.
                public var previousAttemptUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/PullRequestsPayload`.
                public struct PullRequestsPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/PullRequestsPayload/base`.
                    public struct BasePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/PullRequestsPayload/base/ref`.
                        public var ref: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/PullRequestsPayload/base/repo`.
                        public struct RepoPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/PullRequestsPayload/base/repo/id`.
                            public var id: Swift.Int
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/PullRequestsPayload/base/repo/name`.
                            public var name: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/PullRequestsPayload/base/repo/url`.
                            public var url: Swift.String
                            /// Creates a new `RepoPayload`.
                            ///
                            /// - Parameters:
                            ///   - id:
                            ///   - name:
                            ///   - url:
                            public init(
                                id: Swift.Int,
                                name: Swift.String,
                                url: Swift.String
                            ) {
                                self.id = id
                                self.name = name
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case id
                                case name
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/PullRequestsPayload/base/repo`.
                        public var repo: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.PullRequestsPayloadPayload.BasePayload.RepoPayload
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/PullRequestsPayload/base/sha`.
                        public var sha: Swift.String
                        /// Creates a new `BasePayload`.
                        ///
                        /// - Parameters:
                        ///   - ref:
                        ///   - repo:
                        ///   - sha:
                        public init(
                            ref: Swift.String,
                            repo: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.PullRequestsPayloadPayload.BasePayload.RepoPayload,
                            sha: Swift.String
                        ) {
                            self.ref = ref
                            self.repo = repo
                            self.sha = sha
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ref
                            case repo
                            case sha
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/PullRequestsPayload/base`.
                    public var base: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.PullRequestsPayloadPayload.BasePayload
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/PullRequestsPayload/head`.
                    public struct HeadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/PullRequestsPayload/head/ref`.
                        public var ref: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/PullRequestsPayload/head/repo`.
                        public struct RepoPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/PullRequestsPayload/head/repo/id`.
                            public var id: Swift.Int
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/PullRequestsPayload/head/repo/name`.
                            public var name: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/PullRequestsPayload/head/repo/url`.
                            public var url: Swift.String
                            /// Creates a new `RepoPayload`.
                            ///
                            /// - Parameters:
                            ///   - id:
                            ///   - name:
                            ///   - url:
                            public init(
                                id: Swift.Int,
                                name: Swift.String,
                                url: Swift.String
                            ) {
                                self.id = id
                                self.name = name
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case id
                                case name
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/PullRequestsPayload/head/repo`.
                        public var repo: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.PullRequestsPayloadPayload.HeadPayload.RepoPayload
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/PullRequestsPayload/head/sha`.
                        public var sha: Swift.String
                        /// Creates a new `HeadPayload`.
                        ///
                        /// - Parameters:
                        ///   - ref:
                        ///   - repo:
                        ///   - sha:
                        public init(
                            ref: Swift.String,
                            repo: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.PullRequestsPayloadPayload.HeadPayload.RepoPayload,
                            sha: Swift.String
                        ) {
                            self.ref = ref
                            self.repo = repo
                            self.sha = sha
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ref
                            case repo
                            case sha
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/PullRequestsPayload/head`.
                    public var head: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.PullRequestsPayloadPayload.HeadPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/PullRequestsPayload/id`.
                    public var id: Swift.Double
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/PullRequestsPayload/number`.
                    public var number: Swift.Double
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/PullRequestsPayload/url`.
                    public var url: Swift.String
                    /// Creates a new `PullRequestsPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - base:
                    ///   - head:
                    ///   - id:
                    ///   - number:
                    ///   - url:
                    public init(
                        base: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.PullRequestsPayloadPayload.BasePayload,
                        head: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.PullRequestsPayloadPayload.HeadPayload,
                        id: Swift.Double,
                        number: Swift.Double,
                        url: Swift.String
                    ) {
                        self.base = base
                        self.head = head
                        self.id = id
                        self.number = number
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case base
                        case head
                        case id
                        case number
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/pull_requests`.
                public typealias PullRequestsPayload = [Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.PullRequestsPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/pull_requests`.
                public var pullRequests: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.PullRequestsPayload
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/ReferencedWorkflowsPayload`.
                public struct ReferencedWorkflowsPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/ReferencedWorkflowsPayload/path`.
                    public var path: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/ReferencedWorkflowsPayload/ref`.
                    public var ref: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/ReferencedWorkflowsPayload/sha`.
                    public var sha: Swift.String
                    /// Creates a new `ReferencedWorkflowsPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - path:
                    ///   - ref:
                    ///   - sha:
                    public init(
                        path: Swift.String,
                        ref: Swift.String? = nil,
                        sha: Swift.String
                    ) {
                        self.path = path
                        self.ref = ref
                        self.sha = sha
                    }
                    public enum CodingKeys: String, CodingKey {
                        case path
                        case ref
                        case sha
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/referenced_workflows`.
                public typealias ReferencedWorkflowsPayload = [Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.ReferencedWorkflowsPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/referenced_workflows`.
                public var referencedWorkflows: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.ReferencedWorkflowsPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository`.
                public struct RepositoryPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/archive_url`.
                    public var archiveUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/assignees_url`.
                    public var assigneesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/blobs_url`.
                    public var blobsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/branches_url`.
                    public var branchesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/collaborators_url`.
                    public var collaboratorsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/comments_url`.
                    public var commentsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/commits_url`.
                    public var commitsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/compare_url`.
                    public var compareUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/contents_url`.
                    public var contentsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/contributors_url`.
                    public var contributorsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/deployments_url`.
                    public var deploymentsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/downloads_url`.
                    public var downloadsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/events_url`.
                    public var eventsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/fork`.
                    public var fork: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/forks_url`.
                    public var forksUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/full_name`.
                    public var fullName: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/git_commits_url`.
                    public var gitCommitsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/git_refs_url`.
                    public var gitRefsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/git_tags_url`.
                    public var gitTagsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/hooks_url`.
                    public var hooksUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/html_url`.
                    public var htmlUrl: Swift.String
                    /// Unique identifier of the repository
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/issue_comment_url`.
                    public var issueCommentUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/issue_events_url`.
                    public var issueEventsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/issues_url`.
                    public var issuesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/keys_url`.
                    public var keysUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/labels_url`.
                    public var labelsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/languages_url`.
                    public var languagesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/merges_url`.
                    public var mergesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/milestones_url`.
                    public var milestonesUrl: Swift.String
                    /// The name of the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/notifications_url`.
                    public var notificationsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/owner`.
                    public struct OwnerPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/owner/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/owner/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/owner/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/owner/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/owner/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/owner/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/owner/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/owner/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/owner/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/owner/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/owner/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/owner/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/owner/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/owner/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/owner/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/owner/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/owner/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/owner/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/owner/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/owner/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/owner/type`.
                        public var _type: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.RepositoryPayload.OwnerPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/owner/url`.
                        public var url: Swift.String?
                        /// Creates a new `OwnerPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.RepositoryPayload.OwnerPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/owner`.
                    public var owner: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.RepositoryPayload.OwnerPayload?
                    /// Whether the repository is private or public.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/private`.
                    public var _private: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/pulls_url`.
                    public var pullsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/releases_url`.
                    public var releasesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/stargazers_url`.
                    public var stargazersUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/statuses_url`.
                    public var statusesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/subscribers_url`.
                    public var subscribersUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/subscription_url`.
                    public var subscriptionUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/tags_url`.
                    public var tagsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/teams_url`.
                    public var teamsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/trees_url`.
                    public var treesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository/url`.
                    public var url: Swift.String
                    /// Creates a new `RepositoryPayload`.
                    ///
                    /// - Parameters:
                    ///   - archiveUrl:
                    ///   - assigneesUrl:
                    ///   - blobsUrl:
                    ///   - branchesUrl:
                    ///   - collaboratorsUrl:
                    ///   - commentsUrl:
                    ///   - commitsUrl:
                    ///   - compareUrl:
                    ///   - contentsUrl:
                    ///   - contributorsUrl:
                    ///   - deploymentsUrl:
                    ///   - description:
                    ///   - downloadsUrl:
                    ///   - eventsUrl:
                    ///   - fork:
                    ///   - forksUrl:
                    ///   - fullName:
                    ///   - gitCommitsUrl:
                    ///   - gitRefsUrl:
                    ///   - gitTagsUrl:
                    ///   - hooksUrl:
                    ///   - htmlUrl:
                    ///   - id: Unique identifier of the repository
                    ///   - issueCommentUrl:
                    ///   - issueEventsUrl:
                    ///   - issuesUrl:
                    ///   - keysUrl:
                    ///   - labelsUrl:
                    ///   - languagesUrl:
                    ///   - mergesUrl:
                    ///   - milestonesUrl:
                    ///   - name: The name of the repository.
                    ///   - nodeId:
                    ///   - notificationsUrl:
                    ///   - owner:
                    ///   - _private: Whether the repository is private or public.
                    ///   - pullsUrl:
                    ///   - releasesUrl:
                    ///   - stargazersUrl:
                    ///   - statusesUrl:
                    ///   - subscribersUrl:
                    ///   - subscriptionUrl:
                    ///   - tagsUrl:
                    ///   - teamsUrl:
                    ///   - treesUrl:
                    ///   - url:
                    public init(
                        archiveUrl: Swift.String,
                        assigneesUrl: Swift.String,
                        blobsUrl: Swift.String,
                        branchesUrl: Swift.String,
                        collaboratorsUrl: Swift.String,
                        commentsUrl: Swift.String,
                        commitsUrl: Swift.String,
                        compareUrl: Swift.String,
                        contentsUrl: Swift.String,
                        contributorsUrl: Swift.String,
                        deploymentsUrl: Swift.String,
                        description: Swift.String? = nil,
                        downloadsUrl: Swift.String,
                        eventsUrl: Swift.String,
                        fork: Swift.Bool,
                        forksUrl: Swift.String,
                        fullName: Swift.String,
                        gitCommitsUrl: Swift.String,
                        gitRefsUrl: Swift.String,
                        gitTagsUrl: Swift.String,
                        hooksUrl: Swift.String,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        issueCommentUrl: Swift.String,
                        issueEventsUrl: Swift.String,
                        issuesUrl: Swift.String,
                        keysUrl: Swift.String,
                        labelsUrl: Swift.String,
                        languagesUrl: Swift.String,
                        mergesUrl: Swift.String,
                        milestonesUrl: Swift.String,
                        name: Swift.String,
                        nodeId: Swift.String,
                        notificationsUrl: Swift.String,
                        owner: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.RepositoryPayload.OwnerPayload? = nil,
                        _private: Swift.Bool,
                        pullsUrl: Swift.String,
                        releasesUrl: Swift.String,
                        stargazersUrl: Swift.String,
                        statusesUrl: Swift.String,
                        subscribersUrl: Swift.String,
                        subscriptionUrl: Swift.String,
                        tagsUrl: Swift.String,
                        teamsUrl: Swift.String,
                        treesUrl: Swift.String,
                        url: Swift.String
                    ) {
                        self.archiveUrl = archiveUrl
                        self.assigneesUrl = assigneesUrl
                        self.blobsUrl = blobsUrl
                        self.branchesUrl = branchesUrl
                        self.collaboratorsUrl = collaboratorsUrl
                        self.commentsUrl = commentsUrl
                        self.commitsUrl = commitsUrl
                        self.compareUrl = compareUrl
                        self.contentsUrl = contentsUrl
                        self.contributorsUrl = contributorsUrl
                        self.deploymentsUrl = deploymentsUrl
                        self.description = description
                        self.downloadsUrl = downloadsUrl
                        self.eventsUrl = eventsUrl
                        self.fork = fork
                        self.forksUrl = forksUrl
                        self.fullName = fullName
                        self.gitCommitsUrl = gitCommitsUrl
                        self.gitRefsUrl = gitRefsUrl
                        self.gitTagsUrl = gitTagsUrl
                        self.hooksUrl = hooksUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.issueCommentUrl = issueCommentUrl
                        self.issueEventsUrl = issueEventsUrl
                        self.issuesUrl = issuesUrl
                        self.keysUrl = keysUrl
                        self.labelsUrl = labelsUrl
                        self.languagesUrl = languagesUrl
                        self.mergesUrl = mergesUrl
                        self.milestonesUrl = milestonesUrl
                        self.name = name
                        self.nodeId = nodeId
                        self.notificationsUrl = notificationsUrl
                        self.owner = owner
                        self._private = _private
                        self.pullsUrl = pullsUrl
                        self.releasesUrl = releasesUrl
                        self.stargazersUrl = stargazersUrl
                        self.statusesUrl = statusesUrl
                        self.subscribersUrl = subscribersUrl
                        self.subscriptionUrl = subscriptionUrl
                        self.tagsUrl = tagsUrl
                        self.teamsUrl = teamsUrl
                        self.treesUrl = treesUrl
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case archiveUrl = "archive_url"
                        case assigneesUrl = "assignees_url"
                        case blobsUrl = "blobs_url"
                        case branchesUrl = "branches_url"
                        case collaboratorsUrl = "collaborators_url"
                        case commentsUrl = "comments_url"
                        case commitsUrl = "commits_url"
                        case compareUrl = "compare_url"
                        case contentsUrl = "contents_url"
                        case contributorsUrl = "contributors_url"
                        case deploymentsUrl = "deployments_url"
                        case description
                        case downloadsUrl = "downloads_url"
                        case eventsUrl = "events_url"
                        case fork
                        case forksUrl = "forks_url"
                        case fullName = "full_name"
                        case gitCommitsUrl = "git_commits_url"
                        case gitRefsUrl = "git_refs_url"
                        case gitTagsUrl = "git_tags_url"
                        case hooksUrl = "hooks_url"
                        case htmlUrl = "html_url"
                        case id
                        case issueCommentUrl = "issue_comment_url"
                        case issueEventsUrl = "issue_events_url"
                        case issuesUrl = "issues_url"
                        case keysUrl = "keys_url"
                        case labelsUrl = "labels_url"
                        case languagesUrl = "languages_url"
                        case mergesUrl = "merges_url"
                        case milestonesUrl = "milestones_url"
                        case name
                        case nodeId = "node_id"
                        case notificationsUrl = "notifications_url"
                        case owner
                        case _private = "private"
                        case pullsUrl = "pulls_url"
                        case releasesUrl = "releases_url"
                        case stargazersUrl = "stargazers_url"
                        case statusesUrl = "statuses_url"
                        case subscribersUrl = "subscribers_url"
                        case subscriptionUrl = "subscription_url"
                        case tagsUrl = "tags_url"
                        case teamsUrl = "teams_url"
                        case treesUrl = "trees_url"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/repository`.
                public var repository: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.RepositoryPayload
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/rerun_url`.
                public var rerunUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/run_attempt`.
                public var runAttempt: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/run_number`.
                public var runNumber: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/run_started_at`.
                public var runStartedAt: Foundation.Date
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/status`.
                @frozen public enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case requested = "requested"
                    case inProgress = "in_progress"
                    case completed = "completed"
                    case queued = "queued"
                    case pending = "pending"
                    case waiting = "waiting"
                }
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/status`.
                public var status: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.StatusPayload
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/triggering_actor`.
                public struct TriggeringActorPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/triggering_actor/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/triggering_actor/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/triggering_actor/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/triggering_actor/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/triggering_actor/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/triggering_actor/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/triggering_actor/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/triggering_actor/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/triggering_actor/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/triggering_actor/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/triggering_actor/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/triggering_actor/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/triggering_actor/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/triggering_actor/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/triggering_actor/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/triggering_actor/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/triggering_actor/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/triggering_actor/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/triggering_actor/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/triggering_actor/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/triggering_actor/type`.
                    public var _type: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.TriggeringActorPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/triggering_actor/url`.
                    public var url: Swift.String?
                    /// Creates a new `TriggeringActorPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.TriggeringActorPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/triggering_actor`.
                public var triggeringActor: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.TriggeringActorPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/updated_at`.
                public var updatedAt: Foundation.Date
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/workflow_id`.
                public var workflowId: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/workflow_url`.
                public var workflowUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run/display_title`.
                public var displayTitle: Swift.String
                /// Creates a new `WorkflowRunPayload`.
                ///
                /// - Parameters:
                ///   - actor:
                ///   - artifactsUrl:
                ///   - cancelUrl:
                ///   - checkSuiteId:
                ///   - checkSuiteNodeId:
                ///   - checkSuiteUrl:
                ///   - conclusion:
                ///   - createdAt:
                ///   - event:
                ///   - headBranch:
                ///   - headCommit:
                ///   - headRepository:
                ///   - headSha:
                ///   - htmlUrl:
                ///   - id:
                ///   - jobsUrl:
                ///   - logsUrl:
                ///   - name:
                ///   - nodeId:
                ///   - path:
                ///   - previousAttemptUrl:
                ///   - pullRequests:
                ///   - referencedWorkflows:
                ///   - repository:
                ///   - rerunUrl:
                ///   - runAttempt:
                ///   - runNumber:
                ///   - runStartedAt:
                ///   - status:
                ///   - triggeringActor:
                ///   - updatedAt:
                ///   - url:
                ///   - workflowId:
                ///   - workflowUrl:
                ///   - displayTitle:
                public init(
                    actor: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.ActorPayload? = nil,
                    artifactsUrl: Swift.String,
                    cancelUrl: Swift.String,
                    checkSuiteId: Swift.Int,
                    checkSuiteNodeId: Swift.String,
                    checkSuiteUrl: Swift.String,
                    conclusion: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.ConclusionPayload? = nil,
                    createdAt: Foundation.Date,
                    event: Swift.String,
                    headBranch: Swift.String? = nil,
                    headCommit: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.HeadCommitPayload,
                    headRepository: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.HeadRepositoryPayload,
                    headSha: Swift.String,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    jobsUrl: Swift.String,
                    logsUrl: Swift.String,
                    name: Swift.String? = nil,
                    nodeId: Swift.String,
                    path: Swift.String,
                    previousAttemptUrl: Swift.String? = nil,
                    pullRequests: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.PullRequestsPayload,
                    referencedWorkflows: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.ReferencedWorkflowsPayload? = nil,
                    repository: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.RepositoryPayload,
                    rerunUrl: Swift.String,
                    runAttempt: Swift.Int,
                    runNumber: Swift.Int,
                    runStartedAt: Foundation.Date,
                    status: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.StatusPayload,
                    triggeringActor: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload.TriggeringActorPayload? = nil,
                    updatedAt: Foundation.Date,
                    url: Swift.String,
                    workflowId: Swift.Int,
                    workflowUrl: Swift.String,
                    displayTitle: Swift.String
                ) {
                    self.actor = actor
                    self.artifactsUrl = artifactsUrl
                    self.cancelUrl = cancelUrl
                    self.checkSuiteId = checkSuiteId
                    self.checkSuiteNodeId = checkSuiteNodeId
                    self.checkSuiteUrl = checkSuiteUrl
                    self.conclusion = conclusion
                    self.createdAt = createdAt
                    self.event = event
                    self.headBranch = headBranch
                    self.headCommit = headCommit
                    self.headRepository = headRepository
                    self.headSha = headSha
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.jobsUrl = jobsUrl
                    self.logsUrl = logsUrl
                    self.name = name
                    self.nodeId = nodeId
                    self.path = path
                    self.previousAttemptUrl = previousAttemptUrl
                    self.pullRequests = pullRequests
                    self.referencedWorkflows = referencedWorkflows
                    self.repository = repository
                    self.rerunUrl = rerunUrl
                    self.runAttempt = runAttempt
                    self.runNumber = runNumber
                    self.runStartedAt = runStartedAt
                    self.status = status
                    self.triggeringActor = triggeringActor
                    self.updatedAt = updatedAt
                    self.url = url
                    self.workflowId = workflowId
                    self.workflowUrl = workflowUrl
                    self.displayTitle = displayTitle
                }
                public enum CodingKeys: String, CodingKey {
                    case actor
                    case artifactsUrl = "artifacts_url"
                    case cancelUrl = "cancel_url"
                    case checkSuiteId = "check_suite_id"
                    case checkSuiteNodeId = "check_suite_node_id"
                    case checkSuiteUrl = "check_suite_url"
                    case conclusion
                    case createdAt = "created_at"
                    case event
                    case headBranch = "head_branch"
                    case headCommit = "head_commit"
                    case headRepository = "head_repository"
                    case headSha = "head_sha"
                    case htmlUrl = "html_url"
                    case id
                    case jobsUrl = "jobs_url"
                    case logsUrl = "logs_url"
                    case name
                    case nodeId = "node_id"
                    case path
                    case previousAttemptUrl = "previous_attempt_url"
                    case pullRequests = "pull_requests"
                    case referencedWorkflows = "referenced_workflows"
                    case repository
                    case rerunUrl = "rerun_url"
                    case runAttempt = "run_attempt"
                    case runNumber = "run_number"
                    case runStartedAt = "run_started_at"
                    case status
                    case triggeringActor = "triggering_actor"
                    case updatedAt = "updated_at"
                    case url
                    case workflowId = "workflow_id"
                    case workflowUrl = "workflow_url"
                    case displayTitle = "display_title"
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-workflow-run-requested/workflow_run`.
            public var workflowRun: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload
            /// Creates a new `WebhookWorkflowRunRequested`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - enterprise:
            ///   - installation:
            ///   - organization:
            ///   - repository:
            ///   - sender:
            ///   - workflow:
            ///   - workflowRun:
            public init(
                action: Components.Schemas.WebhookWorkflowRunRequested.ActionPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser,
                workflow: Components.Schemas.WebhookWorkflowRunRequested.WorkflowPayload? = nil,
                workflowRun: Components.Schemas.WebhookWorkflowRunRequested.WorkflowRunPayload
            ) {
                self.action = action
                self.enterprise = enterprise
                self.installation = installation
                self.organization = organization
                self.repository = repository
                self.sender = sender
                self.workflow = workflow
                self.workflowRun = workflowRun
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case enterprise
                case installation
                case organization
                case repository
                case sender
                case workflow
                case workflowRun = "workflow_run"
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// This event occurs when a GitHub Actions workflow is manually triggered.
    /// For more information, see "[Manually running a workflow](https://docs.github.com/actions/managing-workflow-runs/manually-running-a-workflow)."
    ///
    /// For activity relating to workflow runs, see the `workflow_run` event.
    ///
    ///   To install this event on a GitHub App, the app must have at least read-level access for the "Contents" repository permission.
    ///
    ///
    ///
    /// - Remark: HTTP `POST /workflow-dispatch`.
    /// - Remark: Generated from `#/paths//workflow-dispatch/post(workflow-dispatch)`.
    public enum WorkflowDispatch {
        public static let id: Swift.String = "workflow-dispatch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/workflow-dispatch/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/workflow-dispatch/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-dispatch/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-dispatch/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-dispatch/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-dispatch/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-dispatch/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-dispatch/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.WorkflowDispatch.Input.Headers
            /// - Remark: Generated from `#/paths/workflow-dispatch/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/workflow-dispatch/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookWorkflowDispatch)
            }
            public var body: Operations.WorkflowDispatch.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.WorkflowDispatch.Input.Headers = .init(),
                body: Operations.WorkflowDispatch.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//workflow-dispatch/post(workflow-dispatch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.WorkflowDispatch.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//workflow-dispatch/post(workflow-dispatch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.WorkflowDispatch.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to a job in a GitHub Actions workflow.
    ///
    /// For more information, see "[Using jobs in a workflow](https://docs.github.com/actions/using-jobs/using-jobs-in-a-workflow)." For information about the API to manage workflow jobs, see [the REST API documentation](https://docs.github.com/rest/actions/workflow-jobs).
    ///
    /// For activity relating to a workflow run instead of a job in a workflow run, see the `workflow_run` event.
    ///
    /// To install this event on a GitHub App, the app must have at least read-level access for the Actions metadata permission.
    ///
    /// A job in a workflow run finished. This event occurs when a job in a workflow is completed, regardless of whether the job was successful or unsuccessful.
    ///
    /// - Remark: HTTP `POST /workflow-job-completed`.
    /// - Remark: Generated from `#/paths//workflow-job-completed/post(workflow-job/completed)`.
    public enum WorkflowJobCompleted {
        public static let id: Swift.String = "workflow-job/completed"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/workflow-job-completed/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/workflow-job-completed/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-job-completed/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-job-completed/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-job-completed/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-job-completed/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-job-completed/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-job-completed/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.WorkflowJobCompleted.Input.Headers
            /// - Remark: Generated from `#/paths/workflow-job-completed/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/workflow-job-completed/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookWorkflowJobCompleted)
            }
            public var body: Operations.WorkflowJobCompleted.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.WorkflowJobCompleted.Input.Headers = .init(),
                body: Operations.WorkflowJobCompleted.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//workflow-job-completed/post(workflow-job/completed)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.WorkflowJobCompleted.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//workflow-job-completed/post(workflow-job/completed)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.WorkflowJobCompleted.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to a job in a GitHub Actions workflow.
    ///
    /// For more information, see "[Using jobs in a workflow](https://docs.github.com/actions/using-jobs/using-jobs-in-a-workflow)." For information about the API to manage workflow jobs, see [the REST API documentation](https://docs.github.com/rest/actions/workflow-jobs).
    ///
    /// For activity relating to a workflow run instead of a job in a workflow run, see the `workflow_run` event.
    ///
    /// To install this event on a GitHub App, the app must have at least read-level access for the Actions metadata permission.
    ///
    /// A job in a workflow run started processing on a runner.
    ///
    /// - Remark: HTTP `POST /workflow-job-in-progress`.
    /// - Remark: Generated from `#/paths//workflow-job-in-progress/post(workflow-job/in-progress)`.
    public enum WorkflowJobInProgress {
        public static let id: Swift.String = "workflow-job/in-progress"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/workflow-job-in-progress/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/workflow-job-in-progress/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-job-in-progress/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-job-in-progress/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-job-in-progress/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-job-in-progress/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-job-in-progress/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-job-in-progress/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.WorkflowJobInProgress.Input.Headers
            /// - Remark: Generated from `#/paths/workflow-job-in-progress/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/workflow-job-in-progress/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookWorkflowJobInProgress)
            }
            public var body: Operations.WorkflowJobInProgress.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.WorkflowJobInProgress.Input.Headers = .init(),
                body: Operations.WorkflowJobInProgress.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//workflow-job-in-progress/post(workflow-job/in-progress)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.WorkflowJobInProgress.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//workflow-job-in-progress/post(workflow-job/in-progress)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.WorkflowJobInProgress.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to a job in a GitHub Actions workflow.
    ///
    /// For more information, see "[Using jobs in a workflow](https://docs.github.com/actions/using-jobs/using-jobs-in-a-workflow)." For information about the API to manage workflow jobs, see [the REST API documentation](https://docs.github.com/rest/actions/workflow-jobs).
    ///
    /// For activity relating to a workflow run instead of a job in a workflow run, see the `workflow_run` event.
    ///
    /// To install this event on a GitHub App, the app must have at least read-level access for the Actions metadata permission.
    ///
    /// A job in a workflow run was created.
    ///
    /// - Remark: HTTP `POST /workflow-job-queued`.
    /// - Remark: Generated from `#/paths//workflow-job-queued/post(workflow-job/queued)`.
    public enum WorkflowJobQueued {
        public static let id: Swift.String = "workflow-job/queued"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/workflow-job-queued/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/workflow-job-queued/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-job-queued/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-job-queued/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-job-queued/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-job-queued/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-job-queued/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-job-queued/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.WorkflowJobQueued.Input.Headers
            /// - Remark: Generated from `#/paths/workflow-job-queued/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/workflow-job-queued/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookWorkflowJobQueued)
            }
            public var body: Operations.WorkflowJobQueued.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.WorkflowJobQueued.Input.Headers = .init(),
                body: Operations.WorkflowJobQueued.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//workflow-job-queued/post(workflow-job/queued)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.WorkflowJobQueued.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//workflow-job-queued/post(workflow-job/queued)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.WorkflowJobQueued.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to a run of a GitHub Actions workflow.
    ///
    /// For more information, see "[About workflows](https://docs.github.com/actions/using-workflows/about-workflows)." For information about the APIs to manage workflow runs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#workflowrun) and [the REST API documentation](https://docs.github.com/rest/actions/workflow-runs).
    ///
    /// For activity relating to job in a workflow run, see the `workflow_job` event.
    ///
    /// To install this event on a GitHub App, the app must have at least read-level access for the Actions or contents metadata permission.
    ///
    /// A workflow run finished. This event occurs when a workflow run is completed, regardless of whether the workflow was successful or unsuccessful.
    ///
    /// - Remark: HTTP `POST /workflow-run-completed`.
    /// - Remark: Generated from `#/paths//workflow-run-completed/post(workflow-run/completed)`.
    public enum WorkflowRunCompleted {
        public static let id: Swift.String = "workflow-run/completed"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/workflow-run-completed/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/workflow-run-completed/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-run-completed/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-run-completed/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-run-completed/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-run-completed/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-run-completed/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-run-completed/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.WorkflowRunCompleted.Input.Headers
            /// - Remark: Generated from `#/paths/workflow-run-completed/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/workflow-run-completed/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookWorkflowRunCompleted)
            }
            public var body: Operations.WorkflowRunCompleted.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.WorkflowRunCompleted.Input.Headers = .init(),
                body: Operations.WorkflowRunCompleted.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//workflow-run-completed/post(workflow-run/completed)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.WorkflowRunCompleted.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//workflow-run-completed/post(workflow-run/completed)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.WorkflowRunCompleted.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to a run of a GitHub Actions workflow.
    ///
    /// For more information, see "[About workflows](https://docs.github.com/actions/using-workflows/about-workflows)." For information about the APIs to manage workflow runs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#workflowrun) and [the REST API documentation](https://docs.github.com/rest/actions/workflow-runs).
    ///
    /// For activity relating to job in a workflow run, see the `workflow_job` event.
    ///
    /// To install this event on a GitHub App, the app must have at least read-level access for the Actions or contents metadata permission.
    ///
    /// A workflow run started processing on a runner.
    ///
    /// - Remark: HTTP `POST /workflow-run-in-progress`.
    /// - Remark: Generated from `#/paths//workflow-run-in-progress/post(workflow-run/in-progress)`.
    public enum WorkflowRunInProgress {
        public static let id: Swift.String = "workflow-run/in-progress"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/workflow-run-in-progress/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/workflow-run-in-progress/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-run-in-progress/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-run-in-progress/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-run-in-progress/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-run-in-progress/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-run-in-progress/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-run-in-progress/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.WorkflowRunInProgress.Input.Headers
            /// - Remark: Generated from `#/paths/workflow-run-in-progress/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/workflow-run-in-progress/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookWorkflowRunInProgress)
            }
            public var body: Operations.WorkflowRunInProgress.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.WorkflowRunInProgress.Input.Headers = .init(),
                body: Operations.WorkflowRunInProgress.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//workflow-run-in-progress/post(workflow-run/in-progress)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.WorkflowRunInProgress.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//workflow-run-in-progress/post(workflow-run/in-progress)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.WorkflowRunInProgress.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to a run of a GitHub Actions workflow.
    ///
    /// For more information, see "[About workflows](https://docs.github.com/actions/using-workflows/about-workflows)." For information about the APIs to manage workflow runs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#workflowrun) and [the REST API documentation](https://docs.github.com/rest/actions/workflow-runs).
    ///
    /// For activity relating to job in a workflow run, see the `workflow_job` event.
    ///
    /// To install this event on a GitHub App, the app must have at least read-level access for the Actions or contents metadata permission.
    ///
    /// A workflow run was triggered.
    ///
    /// - Remark: HTTP `POST /workflow-run-requested`.
    /// - Remark: Generated from `#/paths//workflow-run-requested/post(workflow-run/requested)`.
    public enum WorkflowRunRequested {
        public static let id: Swift.String = "workflow-run/requested"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/workflow-run-requested/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/workflow-run-requested/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-run-requested/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-run-requested/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-run-requested/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-run-requested/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-run-requested/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/workflow-run-requested/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.WorkflowRunRequested.Input.Headers
            /// - Remark: Generated from `#/paths/workflow-run-requested/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/workflow-run-requested/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookWorkflowRunRequested)
            }
            public var body: Operations.WorkflowRunRequested.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.WorkflowRunRequested.Input.Headers = .init(),
                body: Operations.WorkflowRunRequested.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//workflow-run-requested/post(workflow-run/requested)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.WorkflowRunRequested.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//workflow-run-requested/post(workflow-run/requested)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.WorkflowRunRequested.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
}
