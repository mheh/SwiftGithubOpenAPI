// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
#else
import struct Foundation.URL
import struct Foundation.Data
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Push
    ///
    /// - Remark: HTTP `POST /push`.
    /// - Remark: Generated from `#/paths//push/post(push)`.
    func push(_ input: Operations.Push.Input) async throws -> Operations.Push.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Push
    ///
    /// - Remark: HTTP `POST /push`.
    /// - Remark: Generated from `#/paths//push/post(push)`.
    public func push(
        headers: Operations.Push.Input.Headers = .init(),
        body: Operations.Push.Input.Body
    ) async throws -> Operations.Push.Output {
        try await push(Operations.Push.Input(
            headers: headers,
            body: body
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public enum Server1 {
        public static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://api.github.com",
                variables: []
            )
        }
    }
    @available(*, deprecated, renamed: "Servers.Server1.url")
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.github.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// Simple User
        ///
        /// - Remark: Generated from `#/components/schemas/simple-user`.
        public struct SimpleUser: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/simple-user/node_id`.
            public var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/avatar_url`.
            public var avatarUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gravatar_id`.
            public var gravatarId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/html_url`.
            public var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/followers_url`.
            public var followersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/following_url`.
            public var followingUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gists_url`.
            public var gistsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_url`.
            public var starredUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/subscriptions_url`.
            public var subscriptionsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/organizations_url`.
            public var organizationsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/repos_url`.
            public var reposUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/events_url`.
            public var eventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/received_events_url`.
            public var receivedEventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/site_admin`.
            public var siteAdmin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_at`.
            public var starredAt: Swift.String?
            /// Creates a new `SimpleUser`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - nodeId:
            ///   - avatarUrl:
            ///   - gravatarId:
            ///   - url:
            ///   - htmlUrl:
            ///   - followersUrl:
            ///   - followingUrl:
            ///   - gistsUrl:
            ///   - starredUrl:
            ///   - subscriptionsUrl:
            ///   - organizationsUrl:
            ///   - reposUrl:
            ///   - eventsUrl:
            ///   - receivedEventsUrl:
            ///   - _type:
            ///   - siteAdmin:
            ///   - starredAt:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int,
                nodeId: Swift.String,
                avatarUrl: Swift.String,
                gravatarId: Swift.String? = nil,
                url: Swift.String,
                htmlUrl: Swift.String,
                followersUrl: Swift.String,
                followingUrl: Swift.String,
                gistsUrl: Swift.String,
                starredUrl: Swift.String,
                subscriptionsUrl: Swift.String,
                organizationsUrl: Swift.String,
                reposUrl: Swift.String,
                eventsUrl: Swift.String,
                receivedEventsUrl: Swift.String,
                _type: Swift.String,
                siteAdmin: Swift.Bool,
                starredAt: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.nodeId = nodeId
                self.avatarUrl = avatarUrl
                self.gravatarId = gravatarId
                self.url = url
                self.htmlUrl = htmlUrl
                self.followersUrl = followersUrl
                self.followingUrl = followingUrl
                self.gistsUrl = gistsUrl
                self.starredUrl = starredUrl
                self.subscriptionsUrl = subscriptionsUrl
                self.organizationsUrl = organizationsUrl
                self.reposUrl = reposUrl
                self.eventsUrl = eventsUrl
                self.receivedEventsUrl = receivedEventsUrl
                self._type = _type
                self.siteAdmin = siteAdmin
                self.starredAt = starredAt
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case nodeId = "node_id"
                case avatarUrl = "avatar_url"
                case gravatarId = "gravatar_id"
                case url
                case htmlUrl = "html_url"
                case followersUrl = "followers_url"
                case followingUrl = "following_url"
                case gistsUrl = "gists_url"
                case starredUrl = "starred_url"
                case subscriptionsUrl = "subscriptions_url"
                case organizationsUrl = "organizations_url"
                case reposUrl = "repos_url"
                case eventsUrl = "events_url"
                case receivedEventsUrl = "received_events_url"
                case _type = "type"
                case siteAdmin = "site_admin"
                case starredAt = "starred_at"
            }
        }
        /// An enterprise account
        ///
        /// - Remark: Generated from `#/components/schemas/enterprise`.
        public struct Enterprise: Codable, Hashable, Sendable {
            /// A short description of the enterprise.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/enterprise/html_url`.
            public var htmlUrl: Swift.String
            /// The enterprise's website URL.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/website_url`.
            public var websiteUrl: Swift.String?
            /// Unique identifier of the enterprise
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/enterprise/node_id`.
            public var nodeId: Swift.String
            /// The name of the enterprise.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/name`.
            public var name: Swift.String
            /// The slug url identifier for the enterprise.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/slug`.
            public var slug: Swift.String
            /// - Remark: Generated from `#/components/schemas/enterprise/created_at`.
            public var createdAt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/enterprise/updated_at`.
            public var updatedAt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/enterprise/avatar_url`.
            public var avatarUrl: Swift.String
            /// Creates a new `Enterprise`.
            ///
            /// - Parameters:
            ///   - description: A short description of the enterprise.
            ///   - htmlUrl:
            ///   - websiteUrl: The enterprise's website URL.
            ///   - id: Unique identifier of the enterprise
            ///   - nodeId:
            ///   - name: The name of the enterprise.
            ///   - slug: The slug url identifier for the enterprise.
            ///   - createdAt:
            ///   - updatedAt:
            ///   - avatarUrl:
            public init(
                description: Swift.String? = nil,
                htmlUrl: Swift.String,
                websiteUrl: Swift.String? = nil,
                id: Swift.Int,
                nodeId: Swift.String,
                name: Swift.String,
                slug: Swift.String,
                createdAt: Swift.String? = nil,
                updatedAt: Swift.String? = nil,
                avatarUrl: Swift.String
            ) {
                self.description = description
                self.htmlUrl = htmlUrl
                self.websiteUrl = websiteUrl
                self.id = id
                self.nodeId = nodeId
                self.name = name
                self.slug = slug
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.avatarUrl = avatarUrl
            }
            public enum CodingKeys: String, CodingKey {
                case description
                case htmlUrl = "html_url"
                case websiteUrl = "website_url"
                case id
                case nodeId = "node_id"
                case name
                case slug
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case avatarUrl = "avatar_url"
            }
        }
        /// Organization Simple
        ///
        /// - Remark: Generated from `#/components/schemas/organization-simple`.
        public struct OrganizationSimple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/organization-simple/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization-simple/node_id`.
            public var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/repos_url`.
            public var reposUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/events_url`.
            public var eventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/hooks_url`.
            public var hooksUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/issues_url`.
            public var issuesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/members_url`.
            public var membersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/public_members_url`.
            public var publicMembersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/avatar_url`.
            public var avatarUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/description`.
            public var description: Swift.String?
            /// Creates a new `OrganizationSimple`.
            ///
            /// - Parameters:
            ///   - login:
            ///   - id:
            ///   - nodeId:
            ///   - url:
            ///   - reposUrl:
            ///   - eventsUrl:
            ///   - hooksUrl:
            ///   - issuesUrl:
            ///   - membersUrl:
            ///   - publicMembersUrl:
            ///   - avatarUrl:
            ///   - description:
            public init(
                login: Swift.String,
                id: Swift.Int,
                nodeId: Swift.String,
                url: Swift.String,
                reposUrl: Swift.String,
                eventsUrl: Swift.String,
                hooksUrl: Swift.String,
                issuesUrl: Swift.String,
                membersUrl: Swift.String,
                publicMembersUrl: Swift.String,
                avatarUrl: Swift.String,
                description: Swift.String? = nil
            ) {
                self.login = login
                self.id = id
                self.nodeId = nodeId
                self.url = url
                self.reposUrl = reposUrl
                self.eventsUrl = eventsUrl
                self.hooksUrl = hooksUrl
                self.issuesUrl = issuesUrl
                self.membersUrl = membersUrl
                self.publicMembersUrl = publicMembersUrl
                self.avatarUrl = avatarUrl
                self.description = description
            }
            public enum CodingKeys: String, CodingKey {
                case login
                case id
                case nodeId = "node_id"
                case url
                case reposUrl = "repos_url"
                case eventsUrl = "events_url"
                case hooksUrl = "hooks_url"
                case issuesUrl = "issues_url"
                case membersUrl = "members_url"
                case publicMembersUrl = "public_members_url"
                case avatarUrl = "avatar_url"
                case description
            }
        }
        /// Simple Installation
        ///
        /// - Remark: Generated from `#/components/schemas/simple-installation`.
        public struct SimpleInstallation: Codable, Hashable, Sendable {
            /// The ID of the installation.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-installation/id`.
            public var id: Swift.Int
            /// The global node ID of the installation.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-installation/node_id`.
            public var nodeId: Swift.String
            /// Creates a new `SimpleInstallation`.
            ///
            /// - Parameters:
            ///   - id: The ID of the installation.
            ///   - nodeId: The global node ID of the installation.
            public init(
                id: Swift.Int,
                nodeId: Swift.String
            ) {
                self.id = id
                self.nodeId = nodeId
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-push`.
        public struct WebhookPush: Codable, Hashable, Sendable {
            /// The SHA of the most recent commit on `ref` after the push.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-push/after`.
            public var after: Swift.String
            /// - Remark: Generated from `#/components/schemas/webhook-push/base_ref`.
            public var baseRef: Swift.String?
            /// The SHA of the most recent commit on `ref` before the push.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-push/before`.
            public var before: Swift.String
            /// - Remark: Generated from `#/components/schemas/webhook-push/CommitsPayload`.
            public struct CommitsPayloadPayload: Codable, Hashable, Sendable {
                /// An array of files added in the commit.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/CommitsPayload/added`.
                public var added: [Swift.String]?
                /// Metaproperties for Git author/committer information.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/CommitsPayload/author`.
                public struct AuthorPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-push/CommitsPayload/author/date`.
                    public var date: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-push/CommitsPayload/author/email`.
                    public var email: Swift.String?
                    /// The git author's name.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-push/CommitsPayload/author/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-push/CommitsPayload/author/username`.
                    public var username: Swift.String?
                    /// Creates a new `AuthorPayload`.
                    ///
                    /// - Parameters:
                    ///   - date:
                    ///   - email:
                    ///   - name: The git author's name.
                    ///   - username:
                    public init(
                        date: Swift.String? = nil,
                        email: Swift.String? = nil,
                        name: Swift.String,
                        username: Swift.String? = nil
                    ) {
                        self.date = date
                        self.email = email
                        self.name = name
                        self.username = username
                    }
                    public enum CodingKeys: String, CodingKey {
                        case date
                        case email
                        case name
                        case username
                    }
                }
                /// Metaproperties for Git author/committer information.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/CommitsPayload/author`.
                public var author: Components.Schemas.WebhookPush.CommitsPayloadPayload.AuthorPayload
                /// Metaproperties for Git author/committer information.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/CommitsPayload/committer`.
                public struct CommitterPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-push/CommitsPayload/committer/date`.
                    public var date: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-push/CommitsPayload/committer/email`.
                    public var email: Swift.String?
                    /// The git author's name.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-push/CommitsPayload/committer/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-push/CommitsPayload/committer/username`.
                    public var username: Swift.String?
                    /// Creates a new `CommitterPayload`.
                    ///
                    /// - Parameters:
                    ///   - date:
                    ///   - email:
                    ///   - name: The git author's name.
                    ///   - username:
                    public init(
                        date: Swift.String? = nil,
                        email: Swift.String? = nil,
                        name: Swift.String,
                        username: Swift.String? = nil
                    ) {
                        self.date = date
                        self.email = email
                        self.name = name
                        self.username = username
                    }
                    public enum CodingKeys: String, CodingKey {
                        case date
                        case email
                        case name
                        case username
                    }
                }
                /// Metaproperties for Git author/committer information.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/CommitsPayload/committer`.
                public var committer: Components.Schemas.WebhookPush.CommitsPayloadPayload.CommitterPayload
                /// Whether this commit is distinct from any that have been pushed before.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/CommitsPayload/distinct`.
                public var distinct: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-push/CommitsPayload/id`.
                public var id: Swift.String
                /// The commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/CommitsPayload/message`.
                public var message: Swift.String
                /// An array of files modified by the commit.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/CommitsPayload/modified`.
                public var modified: [Swift.String]?
                /// An array of files removed in the commit.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/CommitsPayload/removed`.
                public var removed: [Swift.String]?
                /// The ISO 8601 timestamp of the commit.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/CommitsPayload/timestamp`.
                public var timestamp: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/CommitsPayload/tree_id`.
                public var treeId: Swift.String
                /// URL that points to the commit API resource.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/CommitsPayload/url`.
                public var url: Swift.String
                /// Creates a new `CommitsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - added: An array of files added in the commit.
                ///   - author: Metaproperties for Git author/committer information.
                ///   - committer: Metaproperties for Git author/committer information.
                ///   - distinct: Whether this commit is distinct from any that have been pushed before.
                ///   - id:
                ///   - message: The commit message.
                ///   - modified: An array of files modified by the commit.
                ///   - removed: An array of files removed in the commit.
                ///   - timestamp: The ISO 8601 timestamp of the commit.
                ///   - treeId:
                ///   - url: URL that points to the commit API resource.
                public init(
                    added: [Swift.String]? = nil,
                    author: Components.Schemas.WebhookPush.CommitsPayloadPayload.AuthorPayload,
                    committer: Components.Schemas.WebhookPush.CommitsPayloadPayload.CommitterPayload,
                    distinct: Swift.Bool,
                    id: Swift.String,
                    message: Swift.String,
                    modified: [Swift.String]? = nil,
                    removed: [Swift.String]? = nil,
                    timestamp: Swift.String,
                    treeId: Swift.String,
                    url: Swift.String
                ) {
                    self.added = added
                    self.author = author
                    self.committer = committer
                    self.distinct = distinct
                    self.id = id
                    self.message = message
                    self.modified = modified
                    self.removed = removed
                    self.timestamp = timestamp
                    self.treeId = treeId
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case added
                    case author
                    case committer
                    case distinct
                    case id
                    case message
                    case modified
                    case removed
                    case timestamp
                    case treeId = "tree_id"
                    case url
                }
            }
            /// An array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the `compare` between the `before` commit and the `after` commit.) The array includes a maximum of 20 commits. If necessary, you can use the [Commits API](https://docs.github.com/en/rest/reference/repos#commits) to fetch additional commits. This limit is applied to timeline events only and isn't applied to webhook deliveries.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-push/commits`.
            public typealias CommitsPayload = [Components.Schemas.WebhookPush.CommitsPayloadPayload]
            /// An array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the `compare` between the `before` commit and the `after` commit.) The array includes a maximum of 20 commits. If necessary, you can use the [Commits API](https://docs.github.com/en/rest/reference/repos#commits) to fetch additional commits. This limit is applied to timeline events only and isn't applied to webhook deliveries.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-push/commits`.
            public var commits: Components.Schemas.WebhookPush.CommitsPayload
            /// URL that shows the changes in this `ref` update, from the `before` commit to the `after` commit. For a newly created `ref` that is directly based on the default branch, this is the comparison between the head of the default branch and the `after` commit. Otherwise, this shows all commits until the `after` commit.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-push/compare`.
            public var compare: Swift.String
            /// Whether this push created the `ref`.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-push/created`.
            public var created: Swift.Bool
            /// Whether this push deleted the `ref`.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-push/deleted`.
            public var deleted: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/webhook-push/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// Whether this push was a force push of the `ref`.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-push/forced`.
            public var forced: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/webhook-push/head_commit`.
            public struct HeadCommitPayload: Codable, Hashable, Sendable {
                /// An array of files added in the commit.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/head_commit/added`.
                public var added: [Swift.String]?
                /// Metaproperties for Git author/committer information.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/head_commit/author`.
                public struct AuthorPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-push/head_commit/author/date`.
                    public var date: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-push/head_commit/author/email`.
                    public var email: Swift.String?
                    /// The git author's name.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-push/head_commit/author/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-push/head_commit/author/username`.
                    public var username: Swift.String?
                    /// Creates a new `AuthorPayload`.
                    ///
                    /// - Parameters:
                    ///   - date:
                    ///   - email:
                    ///   - name: The git author's name.
                    ///   - username:
                    public init(
                        date: Swift.String? = nil,
                        email: Swift.String? = nil,
                        name: Swift.String,
                        username: Swift.String? = nil
                    ) {
                        self.date = date
                        self.email = email
                        self.name = name
                        self.username = username
                    }
                    public enum CodingKeys: String, CodingKey {
                        case date
                        case email
                        case name
                        case username
                    }
                }
                /// Metaproperties for Git author/committer information.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/head_commit/author`.
                public var author: Components.Schemas.WebhookPush.HeadCommitPayload.AuthorPayload
                /// Metaproperties for Git author/committer information.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/head_commit/committer`.
                public struct CommitterPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-push/head_commit/committer/date`.
                    public var date: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-push/head_commit/committer/email`.
                    public var email: Swift.String?
                    /// The git author's name.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-push/head_commit/committer/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-push/head_commit/committer/username`.
                    public var username: Swift.String?
                    /// Creates a new `CommitterPayload`.
                    ///
                    /// - Parameters:
                    ///   - date:
                    ///   - email:
                    ///   - name: The git author's name.
                    ///   - username:
                    public init(
                        date: Swift.String? = nil,
                        email: Swift.String? = nil,
                        name: Swift.String,
                        username: Swift.String? = nil
                    ) {
                        self.date = date
                        self.email = email
                        self.name = name
                        self.username = username
                    }
                    public enum CodingKeys: String, CodingKey {
                        case date
                        case email
                        case name
                        case username
                    }
                }
                /// Metaproperties for Git author/committer information.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/head_commit/committer`.
                public var committer: Components.Schemas.WebhookPush.HeadCommitPayload.CommitterPayload
                /// Whether this commit is distinct from any that have been pushed before.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/head_commit/distinct`.
                public var distinct: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-push/head_commit/id`.
                public var id: Swift.String
                /// The commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/head_commit/message`.
                public var message: Swift.String
                /// An array of files modified by the commit.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/head_commit/modified`.
                public var modified: [Swift.String]?
                /// An array of files removed in the commit.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/head_commit/removed`.
                public var removed: [Swift.String]?
                /// The ISO 8601 timestamp of the commit.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/head_commit/timestamp`.
                public var timestamp: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/head_commit/tree_id`.
                public var treeId: Swift.String
                /// URL that points to the commit API resource.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/head_commit/url`.
                public var url: Swift.String
                /// Creates a new `HeadCommitPayload`.
                ///
                /// - Parameters:
                ///   - added: An array of files added in the commit.
                ///   - author: Metaproperties for Git author/committer information.
                ///   - committer: Metaproperties for Git author/committer information.
                ///   - distinct: Whether this commit is distinct from any that have been pushed before.
                ///   - id:
                ///   - message: The commit message.
                ///   - modified: An array of files modified by the commit.
                ///   - removed: An array of files removed in the commit.
                ///   - timestamp: The ISO 8601 timestamp of the commit.
                ///   - treeId:
                ///   - url: URL that points to the commit API resource.
                public init(
                    added: [Swift.String]? = nil,
                    author: Components.Schemas.WebhookPush.HeadCommitPayload.AuthorPayload,
                    committer: Components.Schemas.WebhookPush.HeadCommitPayload.CommitterPayload,
                    distinct: Swift.Bool,
                    id: Swift.String,
                    message: Swift.String,
                    modified: [Swift.String]? = nil,
                    removed: [Swift.String]? = nil,
                    timestamp: Swift.String,
                    treeId: Swift.String,
                    url: Swift.String
                ) {
                    self.added = added
                    self.author = author
                    self.committer = committer
                    self.distinct = distinct
                    self.id = id
                    self.message = message
                    self.modified = modified
                    self.removed = removed
                    self.timestamp = timestamp
                    self.treeId = treeId
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case added
                    case author
                    case committer
                    case distinct
                    case id
                    case message
                    case modified
                    case removed
                    case timestamp
                    case treeId = "tree_id"
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-push/head_commit`.
            public var headCommit: Components.Schemas.WebhookPush.HeadCommitPayload?
            /// - Remark: Generated from `#/components/schemas/webhook-push/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-push/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// Metaproperties for Git author/committer information.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-push/pusher`.
            public struct PusherPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-push/pusher/date`.
                public var date: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-push/pusher/email`.
                public var email: Swift.String?
                /// The git author's name.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/pusher/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/pusher/username`.
                public var username: Swift.String?
                /// Creates a new `PusherPayload`.
                ///
                /// - Parameters:
                ///   - date:
                ///   - email:
                ///   - name: The git author's name.
                ///   - username:
                public init(
                    date: Swift.String? = nil,
                    email: Swift.String? = nil,
                    name: Swift.String,
                    username: Swift.String? = nil
                ) {
                    self.date = date
                    self.email = email
                    self.name = name
                    self.username = username
                }
                public enum CodingKeys: String, CodingKey {
                    case date
                    case email
                    case name
                    case username
                }
            }
            /// Metaproperties for Git author/committer information.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-push/pusher`.
            public var pusher: Components.Schemas.WebhookPush.PusherPayload
            /// The full git ref that was pushed. Example: `refs/heads/main` or `refs/tags/v3.14.1`.
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-push/ref`.
            public var ref: Swift.String
            /// A git repository
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-push/repository`.
            public struct RepositoryPayload: Codable, Hashable, Sendable {
                /// Whether to allow auto-merge for pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/allow_auto_merge`.
                public var allowAutoMerge: Swift.Bool?
                /// Whether to allow private forks
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/allow_forking`.
                public var allowForking: Swift.Bool?
                /// Whether to allow merge commits for pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/allow_merge_commit`.
                public var allowMergeCommit: Swift.Bool?
                /// Whether to allow rebase merges for pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/allow_rebase_merge`.
                public var allowRebaseMerge: Swift.Bool?
                /// Whether to allow squash merges for pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/allow_squash_merge`.
                public var allowSquashMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/allow_update_branch`.
                public var allowUpdateBranch: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/archive_url`.
                public var archiveUrl: Swift.String
                /// Whether the repository is archived.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/archived`.
                public var archived: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/assignees_url`.
                public var assigneesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/blobs_url`.
                public var blobsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/branches_url`.
                public var branchesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/clone_url`.
                public var cloneUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/collaborators_url`.
                public var collaboratorsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/comments_url`.
                public var commentsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/commits_url`.
                public var commitsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/compare_url`.
                public var compareUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/contents_url`.
                public var contentsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/contributors_url`.
                public var contributorsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/created_at`.
                @frozen public enum CreatedAtPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-push/repository/created_at/case1`.
                    case case1(Swift.Int)
                    /// - Remark: Generated from `#/components/schemas/webhook-push/repository/created_at/case2`.
                    case case2(Swift.String)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/created_at`.
                public var createdAt: Components.Schemas.WebhookPush.RepositoryPayload.CreatedAtPayload
                /// The default branch of the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/default_branch`.
                public var defaultBranch: Swift.String
                /// Whether to delete head branches when pull requests are merged
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/delete_branch_on_merge`.
                public var deleteBranchOnMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/deployments_url`.
                public var deploymentsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/description`.
                public var description: Swift.String?
                /// Returns whether or not this repository is disabled.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/disabled`.
                public var disabled: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/downloads_url`.
                public var downloadsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/events_url`.
                public var eventsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/fork`.
                public var fork: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/forks`.
                public var forks: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/forks_count`.
                public var forksCount: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/forks_url`.
                public var forksUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/full_name`.
                public var fullName: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/git_commits_url`.
                public var gitCommitsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/git_refs_url`.
                public var gitRefsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/git_tags_url`.
                public var gitTagsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/git_url`.
                public var gitUrl: Swift.String
                /// Whether downloads are enabled.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/has_downloads`.
                public var hasDownloads: Swift.Bool
                /// Whether issues are enabled.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/has_issues`.
                public var hasIssues: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/has_pages`.
                public var hasPages: Swift.Bool
                /// Whether projects are enabled.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/has_projects`.
                public var hasProjects: Swift.Bool
                /// Whether the wiki is enabled.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/has_wiki`.
                public var hasWiki: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/homepage`.
                public var homepage: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/hooks_url`.
                public var hooksUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/html_url`.
                public var htmlUrl: Swift.String
                /// Unique identifier of the repository
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/is_template`.
                public var isTemplate: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/issue_comment_url`.
                public var issueCommentUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/issue_events_url`.
                public var issueEventsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/issues_url`.
                public var issuesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/keys_url`.
                public var keysUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/labels_url`.
                public var labelsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/language`.
                public var language: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/languages_url`.
                public var languagesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/license`.
                public struct LicensePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-push/repository/license/key`.
                    public var key: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-push/repository/license/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-push/repository/license/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-push/repository/license/spdx_id`.
                    public var spdxId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-push/repository/license/url`.
                    public var url: Swift.String?
                    /// Creates a new `LicensePayload`.
                    ///
                    /// - Parameters:
                    ///   - key:
                    ///   - name:
                    ///   - nodeId:
                    ///   - spdxId:
                    ///   - url:
                    public init(
                        key: Swift.String,
                        name: Swift.String,
                        nodeId: Swift.String,
                        spdxId: Swift.String,
                        url: Swift.String? = nil
                    ) {
                        self.key = key
                        self.name = name
                        self.nodeId = nodeId
                        self.spdxId = spdxId
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case key
                        case name
                        case nodeId = "node_id"
                        case spdxId = "spdx_id"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/license`.
                public var license: Components.Schemas.WebhookPush.RepositoryPayload.LicensePayload?
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/master_branch`.
                public var masterBranch: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/merges_url`.
                public var mergesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/milestones_url`.
                public var milestonesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/mirror_url`.
                public var mirrorUrl: Swift.String?
                /// The name of the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/notifications_url`.
                public var notificationsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/open_issues`.
                public var openIssues: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/open_issues_count`.
                public var openIssuesCount: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/organization`.
                public var organization: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/owner`.
                public struct OwnerPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-push/repository/owner/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-push/repository/owner/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-push/repository/owner/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-push/repository/owner/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-push/repository/owner/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-push/repository/owner/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-push/repository/owner/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-push/repository/owner/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-push/repository/owner/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-push/repository/owner/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-push/repository/owner/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-push/repository/owner/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-push/repository/owner/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-push/repository/owner/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-push/repository/owner/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-push/repository/owner/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-push/repository/owner/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-push/repository/owner/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-push/repository/owner/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-push/repository/owner/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-push/repository/owner/type`.
                    public var _type: Components.Schemas.WebhookPush.RepositoryPayload.OwnerPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-push/repository/owner/url`.
                    public var url: Swift.String?
                    /// Creates a new `OwnerPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookPush.RepositoryPayload.OwnerPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/owner`.
                public var owner: Components.Schemas.WebhookPush.RepositoryPayload.OwnerPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/permissions`.
                public struct PermissionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-push/repository/permissions/admin`.
                    public var admin: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-push/repository/permissions/maintain`.
                    public var maintain: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-push/repository/permissions/pull`.
                    public var pull: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-push/repository/permissions/push`.
                    public var push: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-push/repository/permissions/triage`.
                    public var triage: Swift.Bool?
                    /// Creates a new `PermissionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - admin:
                    ///   - maintain:
                    ///   - pull:
                    ///   - push:
                    ///   - triage:
                    public init(
                        admin: Swift.Bool,
                        maintain: Swift.Bool? = nil,
                        pull: Swift.Bool,
                        push: Swift.Bool,
                        triage: Swift.Bool? = nil
                    ) {
                        self.admin = admin
                        self.maintain = maintain
                        self.pull = pull
                        self.push = push
                        self.triage = triage
                    }
                    public enum CodingKeys: String, CodingKey {
                        case admin
                        case maintain
                        case pull
                        case push
                        case triage
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/permissions`.
                public var permissions: Components.Schemas.WebhookPush.RepositoryPayload.PermissionsPayload?
                /// Whether the repository is private or public.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/private`.
                public var _private: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/public`.
                public var _public: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/pulls_url`.
                public var pullsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/pushed_at`.
                @frozen public enum PushedAtPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-push/repository/pushed_at/case1`.
                    case case1(Swift.Int)
                    /// - Remark: Generated from `#/components/schemas/webhook-push/repository/pushed_at/case2`.
                    case case2(Swift.String)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/pushed_at`.
                public var pushedAt: Components.Schemas.WebhookPush.RepositoryPayload.PushedAtPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/releases_url`.
                public var releasesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/role_name`.
                public var roleName: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/size`.
                public var size: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/ssh_url`.
                public var sshUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/stargazers`.
                public var stargazers: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/stargazers_count`.
                public var stargazersCount: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/stargazers_url`.
                public var stargazersUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/statuses_url`.
                public var statusesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/subscribers_url`.
                public var subscribersUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/subscription_url`.
                public var subscriptionUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/svn_url`.
                public var svnUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/tags_url`.
                public var tagsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/teams_url`.
                public var teamsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/topics`.
                public var topics: [Swift.String]
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/trees_url`.
                public var treesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/updated_at`.
                public var updatedAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/visibility`.
                @frozen public enum VisibilityPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case _public = "public"
                    case _private = "private"
                    case _internal = "internal"
                }
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/visibility`.
                public var visibility: Components.Schemas.WebhookPush.RepositoryPayload.VisibilityPayload
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/watchers`.
                public var watchers: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/watchers_count`.
                public var watchersCount: Swift.Int
                /// Whether to require contributors to sign off on web-based commits
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-push/repository/web_commit_signoff_required`.
                public var webCommitSignoffRequired: Swift.Bool?
                /// Creates a new `RepositoryPayload`.
                ///
                /// - Parameters:
                ///   - allowAutoMerge: Whether to allow auto-merge for pull requests.
                ///   - allowForking: Whether to allow private forks
                ///   - allowMergeCommit: Whether to allow merge commits for pull requests.
                ///   - allowRebaseMerge: Whether to allow rebase merges for pull requests.
                ///   - allowSquashMerge: Whether to allow squash merges for pull requests.
                ///   - allowUpdateBranch:
                ///   - archiveUrl:
                ///   - archived: Whether the repository is archived.
                ///   - assigneesUrl:
                ///   - blobsUrl:
                ///   - branchesUrl:
                ///   - cloneUrl:
                ///   - collaboratorsUrl:
                ///   - commentsUrl:
                ///   - commitsUrl:
                ///   - compareUrl:
                ///   - contentsUrl:
                ///   - contributorsUrl:
                ///   - createdAt:
                ///   - defaultBranch: The default branch of the repository.
                ///   - deleteBranchOnMerge: Whether to delete head branches when pull requests are merged
                ///   - deploymentsUrl:
                ///   - description:
                ///   - disabled: Returns whether or not this repository is disabled.
                ///   - downloadsUrl:
                ///   - eventsUrl:
                ///   - fork:
                ///   - forks:
                ///   - forksCount:
                ///   - forksUrl:
                ///   - fullName:
                ///   - gitCommitsUrl:
                ///   - gitRefsUrl:
                ///   - gitTagsUrl:
                ///   - gitUrl:
                ///   - hasDownloads: Whether downloads are enabled.
                ///   - hasIssues: Whether issues are enabled.
                ///   - hasPages:
                ///   - hasProjects: Whether projects are enabled.
                ///   - hasWiki: Whether the wiki is enabled.
                ///   - homepage:
                ///   - hooksUrl:
                ///   - htmlUrl:
                ///   - id: Unique identifier of the repository
                ///   - isTemplate:
                ///   - issueCommentUrl:
                ///   - issueEventsUrl:
                ///   - issuesUrl:
                ///   - keysUrl:
                ///   - labelsUrl:
                ///   - language:
                ///   - languagesUrl:
                ///   - license:
                ///   - masterBranch:
                ///   - mergesUrl:
                ///   - milestonesUrl:
                ///   - mirrorUrl:
                ///   - name: The name of the repository.
                ///   - nodeId:
                ///   - notificationsUrl:
                ///   - openIssues:
                ///   - openIssuesCount:
                ///   - organization:
                ///   - owner:
                ///   - permissions:
                ///   - _private: Whether the repository is private or public.
                ///   - _public:
                ///   - pullsUrl:
                ///   - pushedAt:
                ///   - releasesUrl:
                ///   - roleName:
                ///   - size:
                ///   - sshUrl:
                ///   - stargazers:
                ///   - stargazersCount:
                ///   - stargazersUrl:
                ///   - statusesUrl:
                ///   - subscribersUrl:
                ///   - subscriptionUrl:
                ///   - svnUrl:
                ///   - tagsUrl:
                ///   - teamsUrl:
                ///   - topics:
                ///   - treesUrl:
                ///   - updatedAt:
                ///   - url:
                ///   - visibility:
                ///   - watchers:
                ///   - watchersCount:
                ///   - webCommitSignoffRequired: Whether to require contributors to sign off on web-based commits
                public init(
                    allowAutoMerge: Swift.Bool? = nil,
                    allowForking: Swift.Bool? = nil,
                    allowMergeCommit: Swift.Bool? = nil,
                    allowRebaseMerge: Swift.Bool? = nil,
                    allowSquashMerge: Swift.Bool? = nil,
                    allowUpdateBranch: Swift.Bool? = nil,
                    archiveUrl: Swift.String,
                    archived: Swift.Bool,
                    assigneesUrl: Swift.String,
                    blobsUrl: Swift.String,
                    branchesUrl: Swift.String,
                    cloneUrl: Swift.String,
                    collaboratorsUrl: Swift.String,
                    commentsUrl: Swift.String,
                    commitsUrl: Swift.String,
                    compareUrl: Swift.String,
                    contentsUrl: Swift.String,
                    contributorsUrl: Swift.String,
                    createdAt: Components.Schemas.WebhookPush.RepositoryPayload.CreatedAtPayload,
                    defaultBranch: Swift.String,
                    deleteBranchOnMerge: Swift.Bool? = nil,
                    deploymentsUrl: Swift.String,
                    description: Swift.String? = nil,
                    disabled: Swift.Bool? = nil,
                    downloadsUrl: Swift.String,
                    eventsUrl: Swift.String,
                    fork: Swift.Bool,
                    forks: Swift.Int,
                    forksCount: Swift.Int,
                    forksUrl: Swift.String,
                    fullName: Swift.String,
                    gitCommitsUrl: Swift.String,
                    gitRefsUrl: Swift.String,
                    gitTagsUrl: Swift.String,
                    gitUrl: Swift.String,
                    hasDownloads: Swift.Bool,
                    hasIssues: Swift.Bool,
                    hasPages: Swift.Bool,
                    hasProjects: Swift.Bool,
                    hasWiki: Swift.Bool,
                    homepage: Swift.String? = nil,
                    hooksUrl: Swift.String,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    isTemplate: Swift.Bool? = nil,
                    issueCommentUrl: Swift.String,
                    issueEventsUrl: Swift.String,
                    issuesUrl: Swift.String,
                    keysUrl: Swift.String,
                    labelsUrl: Swift.String,
                    language: Swift.String? = nil,
                    languagesUrl: Swift.String,
                    license: Components.Schemas.WebhookPush.RepositoryPayload.LicensePayload? = nil,
                    masterBranch: Swift.String? = nil,
                    mergesUrl: Swift.String,
                    milestonesUrl: Swift.String,
                    mirrorUrl: Swift.String? = nil,
                    name: Swift.String,
                    nodeId: Swift.String,
                    notificationsUrl: Swift.String,
                    openIssues: Swift.Int,
                    openIssuesCount: Swift.Int,
                    organization: Swift.String? = nil,
                    owner: Components.Schemas.WebhookPush.RepositoryPayload.OwnerPayload? = nil,
                    permissions: Components.Schemas.WebhookPush.RepositoryPayload.PermissionsPayload? = nil,
                    _private: Swift.Bool,
                    _public: Swift.Bool? = nil,
                    pullsUrl: Swift.String,
                    pushedAt: Components.Schemas.WebhookPush.RepositoryPayload.PushedAtPayload? = nil,
                    releasesUrl: Swift.String,
                    roleName: Swift.String? = nil,
                    size: Swift.Int,
                    sshUrl: Swift.String,
                    stargazers: Swift.Int? = nil,
                    stargazersCount: Swift.Int,
                    stargazersUrl: Swift.String,
                    statusesUrl: Swift.String,
                    subscribersUrl: Swift.String,
                    subscriptionUrl: Swift.String,
                    svnUrl: Swift.String,
                    tagsUrl: Swift.String,
                    teamsUrl: Swift.String,
                    topics: [Swift.String],
                    treesUrl: Swift.String,
                    updatedAt: Swift.String,
                    url: Swift.String,
                    visibility: Components.Schemas.WebhookPush.RepositoryPayload.VisibilityPayload,
                    watchers: Swift.Int,
                    watchersCount: Swift.Int,
                    webCommitSignoffRequired: Swift.Bool? = nil
                ) {
                    self.allowAutoMerge = allowAutoMerge
                    self.allowForking = allowForking
                    self.allowMergeCommit = allowMergeCommit
                    self.allowRebaseMerge = allowRebaseMerge
                    self.allowSquashMerge = allowSquashMerge
                    self.allowUpdateBranch = allowUpdateBranch
                    self.archiveUrl = archiveUrl
                    self.archived = archived
                    self.assigneesUrl = assigneesUrl
                    self.blobsUrl = blobsUrl
                    self.branchesUrl = branchesUrl
                    self.cloneUrl = cloneUrl
                    self.collaboratorsUrl = collaboratorsUrl
                    self.commentsUrl = commentsUrl
                    self.commitsUrl = commitsUrl
                    self.compareUrl = compareUrl
                    self.contentsUrl = contentsUrl
                    self.contributorsUrl = contributorsUrl
                    self.createdAt = createdAt
                    self.defaultBranch = defaultBranch
                    self.deleteBranchOnMerge = deleteBranchOnMerge
                    self.deploymentsUrl = deploymentsUrl
                    self.description = description
                    self.disabled = disabled
                    self.downloadsUrl = downloadsUrl
                    self.eventsUrl = eventsUrl
                    self.fork = fork
                    self.forks = forks
                    self.forksCount = forksCount
                    self.forksUrl = forksUrl
                    self.fullName = fullName
                    self.gitCommitsUrl = gitCommitsUrl
                    self.gitRefsUrl = gitRefsUrl
                    self.gitTagsUrl = gitTagsUrl
                    self.gitUrl = gitUrl
                    self.hasDownloads = hasDownloads
                    self.hasIssues = hasIssues
                    self.hasPages = hasPages
                    self.hasProjects = hasProjects
                    self.hasWiki = hasWiki
                    self.homepage = homepage
                    self.hooksUrl = hooksUrl
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.isTemplate = isTemplate
                    self.issueCommentUrl = issueCommentUrl
                    self.issueEventsUrl = issueEventsUrl
                    self.issuesUrl = issuesUrl
                    self.keysUrl = keysUrl
                    self.labelsUrl = labelsUrl
                    self.language = language
                    self.languagesUrl = languagesUrl
                    self.license = license
                    self.masterBranch = masterBranch
                    self.mergesUrl = mergesUrl
                    self.milestonesUrl = milestonesUrl
                    self.mirrorUrl = mirrorUrl
                    self.name = name
                    self.nodeId = nodeId
                    self.notificationsUrl = notificationsUrl
                    self.openIssues = openIssues
                    self.openIssuesCount = openIssuesCount
                    self.organization = organization
                    self.owner = owner
                    self.permissions = permissions
                    self._private = _private
                    self._public = _public
                    self.pullsUrl = pullsUrl
                    self.pushedAt = pushedAt
                    self.releasesUrl = releasesUrl
                    self.roleName = roleName
                    self.size = size
                    self.sshUrl = sshUrl
                    self.stargazers = stargazers
                    self.stargazersCount = stargazersCount
                    self.stargazersUrl = stargazersUrl
                    self.statusesUrl = statusesUrl
                    self.subscribersUrl = subscribersUrl
                    self.subscriptionUrl = subscriptionUrl
                    self.svnUrl = svnUrl
                    self.tagsUrl = tagsUrl
                    self.teamsUrl = teamsUrl
                    self.topics = topics
                    self.treesUrl = treesUrl
                    self.updatedAt = updatedAt
                    self.url = url
                    self.visibility = visibility
                    self.watchers = watchers
                    self.watchersCount = watchersCount
                    self.webCommitSignoffRequired = webCommitSignoffRequired
                }
                public enum CodingKeys: String, CodingKey {
                    case allowAutoMerge = "allow_auto_merge"
                    case allowForking = "allow_forking"
                    case allowMergeCommit = "allow_merge_commit"
                    case allowRebaseMerge = "allow_rebase_merge"
                    case allowSquashMerge = "allow_squash_merge"
                    case allowUpdateBranch = "allow_update_branch"
                    case archiveUrl = "archive_url"
                    case archived
                    case assigneesUrl = "assignees_url"
                    case blobsUrl = "blobs_url"
                    case branchesUrl = "branches_url"
                    case cloneUrl = "clone_url"
                    case collaboratorsUrl = "collaborators_url"
                    case commentsUrl = "comments_url"
                    case commitsUrl = "commits_url"
                    case compareUrl = "compare_url"
                    case contentsUrl = "contents_url"
                    case contributorsUrl = "contributors_url"
                    case createdAt = "created_at"
                    case defaultBranch = "default_branch"
                    case deleteBranchOnMerge = "delete_branch_on_merge"
                    case deploymentsUrl = "deployments_url"
                    case description
                    case disabled
                    case downloadsUrl = "downloads_url"
                    case eventsUrl = "events_url"
                    case fork
                    case forks
                    case forksCount = "forks_count"
                    case forksUrl = "forks_url"
                    case fullName = "full_name"
                    case gitCommitsUrl = "git_commits_url"
                    case gitRefsUrl = "git_refs_url"
                    case gitTagsUrl = "git_tags_url"
                    case gitUrl = "git_url"
                    case hasDownloads = "has_downloads"
                    case hasIssues = "has_issues"
                    case hasPages = "has_pages"
                    case hasProjects = "has_projects"
                    case hasWiki = "has_wiki"
                    case homepage
                    case hooksUrl = "hooks_url"
                    case htmlUrl = "html_url"
                    case id
                    case isTemplate = "is_template"
                    case issueCommentUrl = "issue_comment_url"
                    case issueEventsUrl = "issue_events_url"
                    case issuesUrl = "issues_url"
                    case keysUrl = "keys_url"
                    case labelsUrl = "labels_url"
                    case language
                    case languagesUrl = "languages_url"
                    case license
                    case masterBranch = "master_branch"
                    case mergesUrl = "merges_url"
                    case milestonesUrl = "milestones_url"
                    case mirrorUrl = "mirror_url"
                    case name
                    case nodeId = "node_id"
                    case notificationsUrl = "notifications_url"
                    case openIssues = "open_issues"
                    case openIssuesCount = "open_issues_count"
                    case organization
                    case owner
                    case permissions
                    case _private = "private"
                    case _public = "public"
                    case pullsUrl = "pulls_url"
                    case pushedAt = "pushed_at"
                    case releasesUrl = "releases_url"
                    case roleName = "role_name"
                    case size
                    case sshUrl = "ssh_url"
                    case stargazers
                    case stargazersCount = "stargazers_count"
                    case stargazersUrl = "stargazers_url"
                    case statusesUrl = "statuses_url"
                    case subscribersUrl = "subscribers_url"
                    case subscriptionUrl = "subscription_url"
                    case svnUrl = "svn_url"
                    case tagsUrl = "tags_url"
                    case teamsUrl = "teams_url"
                    case topics
                    case treesUrl = "trees_url"
                    case updatedAt = "updated_at"
                    case url
                    case visibility
                    case watchers
                    case watchersCount = "watchers_count"
                    case webCommitSignoffRequired = "web_commit_signoff_required"
                }
            }
            /// A git repository
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-push/repository`.
            public var repository: Components.Schemas.WebhookPush.RepositoryPayload
            /// - Remark: Generated from `#/components/schemas/webhook-push/sender`.
            public var sender: Components.Schemas.SimpleUser?
            /// Creates a new `WebhookPush`.
            ///
            /// - Parameters:
            ///   - after: The SHA of the most recent commit on `ref` after the push.
            ///   - baseRef:
            ///   - before: The SHA of the most recent commit on `ref` before the push.
            ///   - commits: An array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the `compare` between the `before` commit and the `after` commit.) The array includes a maximum of 20 commits. If necessary, you can use the [Commits API](https://docs.github.com/en/rest/reference/repos#commits) to fetch additional commits. This limit is applied to timeline events only and isn't applied to webhook deliveries.
            ///   - compare: URL that shows the changes in this `ref` update, from the `before` commit to the `after` commit. For a newly created `ref` that is directly based on the default branch, this is the comparison between the head of the default branch and the `after` commit. Otherwise, this shows all commits until the `after` commit.
            ///   - created: Whether this push created the `ref`.
            ///   - deleted: Whether this push deleted the `ref`.
            ///   - enterprise:
            ///   - forced: Whether this push was a force push of the `ref`.
            ///   - headCommit:
            ///   - installation:
            ///   - organization:
            ///   - pusher: Metaproperties for Git author/committer information.
            ///   - ref: The full git ref that was pushed. Example: `refs/heads/main` or `refs/tags/v3.14.1`.
            ///   - repository: A git repository
            ///   - sender:
            public init(
                after: Swift.String,
                baseRef: Swift.String? = nil,
                before: Swift.String,
                commits: Components.Schemas.WebhookPush.CommitsPayload,
                compare: Swift.String,
                created: Swift.Bool,
                deleted: Swift.Bool,
                enterprise: Components.Schemas.Enterprise? = nil,
                forced: Swift.Bool,
                headCommit: Components.Schemas.WebhookPush.HeadCommitPayload? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                organization: Components.Schemas.OrganizationSimple? = nil,
                pusher: Components.Schemas.WebhookPush.PusherPayload,
                ref: Swift.String,
                repository: Components.Schemas.WebhookPush.RepositoryPayload,
                sender: Components.Schemas.SimpleUser? = nil
            ) {
                self.after = after
                self.baseRef = baseRef
                self.before = before
                self.commits = commits
                self.compare = compare
                self.created = created
                self.deleted = deleted
                self.enterprise = enterprise
                self.forced = forced
                self.headCommit = headCommit
                self.installation = installation
                self.organization = organization
                self.pusher = pusher
                self.ref = ref
                self.repository = repository
                self.sender = sender
            }
            public enum CodingKeys: String, CodingKey {
                case after
                case baseRef = "base_ref"
                case before
                case commits
                case compare
                case created
                case deleted
                case enterprise
                case forced
                case headCommit = "head_commit"
                case installation
                case organization
                case pusher
                case ref
                case repository
                case sender
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Push
    ///
    /// - Remark: HTTP `POST /push`.
    /// - Remark: Generated from `#/paths//push/post(push)`.
    public enum Push {
        public static let id: Swift.String = "push"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/push/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/push/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/push/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/push/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/push/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/push/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/push/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/push/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.Push.Input.Headers
            /// - Remark: Generated from `#/paths/push/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/push/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookPush)
            }
            public var body: Operations.Push.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.Push.Input.Headers = .init(),
                body: Operations.Push.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//push/post(push)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Push.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//push/post(push)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Push.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
}
