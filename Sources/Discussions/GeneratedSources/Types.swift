// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
#else
import struct Foundation.URL
import struct Foundation.Data
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A comment on the discussion was marked as the answer.
    ///
    /// - Remark: HTTP `POST /discussion-answered`.
    /// - Remark: Generated from `#/paths//discussion-answered/post(discussion/answered)`.
    func discussionAnswered(_ input: Operations.DiscussionAnswered.Input) async throws -> Operations.DiscussionAnswered.Output
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// The category of a discussion was changed.
    ///
    /// - Remark: HTTP `POST /discussion-category-changed`.
    /// - Remark: Generated from `#/paths//discussion-category-changed/post(discussion/category-changed)`.
    func discussionCategoryChanged(_ input: Operations.DiscussionCategoryChanged.Input) async throws -> Operations.DiscussionCategoryChanged.Output
    /// This event occurs when there is activity relating to a comment on a discussion. For activity relating to a discussion as opposed to comments on a discussion, see the `discussion` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A comment on a discussion was created.
    ///
    /// - Remark: HTTP `POST /discussion-comment-created`.
    /// - Remark: Generated from `#/paths//discussion-comment-created/post(discussion-comment/created)`.
    func discussionCommentCreated(_ input: Operations.DiscussionCommentCreated.Input) async throws -> Operations.DiscussionCommentCreated.Output
    /// This event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)."
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A comment on a discussion was deleted.
    ///
    /// - Remark: HTTP `POST /discussion-comment-deleted`.
    /// - Remark: Generated from `#/paths//discussion-comment-deleted/post(discussion-comment/deleted)`.
    func discussionCommentDeleted(_ input: Operations.DiscussionCommentDeleted.Input) async throws -> Operations.DiscussionCommentDeleted.Output
    /// This event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)."
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A comment on a discussion was edited.
    ///
    /// - Remark: HTTP `POST /discussion-comment-edited`.
    /// - Remark: Generated from `#/paths//discussion-comment-edited/post(discussion-comment/edited)`.
    func discussionCommentEdited(_ input: Operations.DiscussionCommentEdited.Input) async throws -> Operations.DiscussionCommentEdited.Output
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A discussion was created.
    ///
    /// - Remark: HTTP `POST /discussion-created`.
    /// - Remark: Generated from `#/paths//discussion-created/post(discussion/created)`.
    func discussionCreated(_ input: Operations.DiscussionCreated.Input) async throws -> Operations.DiscussionCreated.Output
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A discussion was deleted.
    ///
    /// - Remark: HTTP `POST /discussion-deleted`.
    /// - Remark: Generated from `#/paths//discussion-deleted/post(discussion/deleted)`.
    func discussionDeleted(_ input: Operations.DiscussionDeleted.Input) async throws -> Operations.DiscussionDeleted.Output
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// The title or body on a discussion was edited, or the category of the discussion was changed.
    ///
    /// - Remark: HTTP `POST /discussion-edited`.
    /// - Remark: Generated from `#/paths//discussion-edited/post(discussion/edited)`.
    func discussionEdited(_ input: Operations.DiscussionEdited.Input) async throws -> Operations.DiscussionEdited.Output
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A label was added to a discussion.
    ///
    /// - Remark: HTTP `POST /discussion-labeled`.
    /// - Remark: Generated from `#/paths//discussion-labeled/post(discussion/labeled)`.
    func discussionLabeled(_ input: Operations.DiscussionLabeled.Input) async throws -> Operations.DiscussionLabeled.Output
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A discussion was locked.
    ///
    /// - Remark: HTTP `POST /discussion-locked`.
    /// - Remark: Generated from `#/paths//discussion-locked/post(discussion/locked)`.
    func discussionLocked(_ input: Operations.DiscussionLocked.Input) async throws -> Operations.DiscussionLocked.Output
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A discussion was pinned.
    ///
    /// - Remark: HTTP `POST /discussion-pinned`.
    /// - Remark: Generated from `#/paths//discussion-pinned/post(discussion/pinned)`.
    func discussionPinned(_ input: Operations.DiscussionPinned.Input) async throws -> Operations.DiscussionPinned.Output
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A discussion was transferred to another repository.
    ///
    /// - Remark: HTTP `POST /discussion-transferred`.
    /// - Remark: Generated from `#/paths//discussion-transferred/post(discussion/transferred)`.
    func discussionTransferred(_ input: Operations.DiscussionTransferred.Input) async throws -> Operations.DiscussionTransferred.Output
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A comment on the discussion was unmarked as the answer.
    ///
    /// - Remark: HTTP `POST /discussion-unanswered`.
    /// - Remark: Generated from `#/paths//discussion-unanswered/post(discussion/unanswered)`.
    func discussionUnanswered(_ input: Operations.DiscussionUnanswered.Input) async throws -> Operations.DiscussionUnanswered.Output
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A label was removed from a discussion.
    ///
    /// - Remark: HTTP `POST /discussion-unlabeled`.
    /// - Remark: Generated from `#/paths//discussion-unlabeled/post(discussion/unlabeled)`.
    func discussionUnlabeled(_ input: Operations.DiscussionUnlabeled.Input) async throws -> Operations.DiscussionUnlabeled.Output
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A discussion was unlocked.
    ///
    /// - Remark: HTTP `POST /discussion-unlocked`.
    /// - Remark: Generated from `#/paths//discussion-unlocked/post(discussion/unlocked)`.
    func discussionUnlocked(_ input: Operations.DiscussionUnlocked.Input) async throws -> Operations.DiscussionUnlocked.Output
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A discussion was unpinned.
    ///
    /// - Remark: HTTP `POST /discussion-unpinned`.
    /// - Remark: Generated from `#/paths//discussion-unpinned/post(discussion/unpinned)`.
    func discussionUnpinned(_ input: Operations.DiscussionUnpinned.Input) async throws -> Operations.DiscussionUnpinned.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A comment on the discussion was marked as the answer.
    ///
    /// - Remark: HTTP `POST /discussion-answered`.
    /// - Remark: Generated from `#/paths//discussion-answered/post(discussion/answered)`.
    public func discussionAnswered(
        headers: Operations.DiscussionAnswered.Input.Headers = .init(),
        body: Operations.DiscussionAnswered.Input.Body
    ) async throws -> Operations.DiscussionAnswered.Output {
        try await discussionAnswered(Operations.DiscussionAnswered.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// The category of a discussion was changed.
    ///
    /// - Remark: HTTP `POST /discussion-category-changed`.
    /// - Remark: Generated from `#/paths//discussion-category-changed/post(discussion/category-changed)`.
    public func discussionCategoryChanged(
        headers: Operations.DiscussionCategoryChanged.Input.Headers = .init(),
        body: Operations.DiscussionCategoryChanged.Input.Body
    ) async throws -> Operations.DiscussionCategoryChanged.Output {
        try await discussionCategoryChanged(Operations.DiscussionCategoryChanged.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to a comment on a discussion. For activity relating to a discussion as opposed to comments on a discussion, see the `discussion` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A comment on a discussion was created.
    ///
    /// - Remark: HTTP `POST /discussion-comment-created`.
    /// - Remark: Generated from `#/paths//discussion-comment-created/post(discussion-comment/created)`.
    public func discussionCommentCreated(
        headers: Operations.DiscussionCommentCreated.Input.Headers = .init(),
        body: Operations.DiscussionCommentCreated.Input.Body
    ) async throws -> Operations.DiscussionCommentCreated.Output {
        try await discussionCommentCreated(Operations.DiscussionCommentCreated.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)."
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A comment on a discussion was deleted.
    ///
    /// - Remark: HTTP `POST /discussion-comment-deleted`.
    /// - Remark: Generated from `#/paths//discussion-comment-deleted/post(discussion-comment/deleted)`.
    public func discussionCommentDeleted(
        headers: Operations.DiscussionCommentDeleted.Input.Headers = .init(),
        body: Operations.DiscussionCommentDeleted.Input.Body
    ) async throws -> Operations.DiscussionCommentDeleted.Output {
        try await discussionCommentDeleted(Operations.DiscussionCommentDeleted.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)."
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A comment on a discussion was edited.
    ///
    /// - Remark: HTTP `POST /discussion-comment-edited`.
    /// - Remark: Generated from `#/paths//discussion-comment-edited/post(discussion-comment/edited)`.
    public func discussionCommentEdited(
        headers: Operations.DiscussionCommentEdited.Input.Headers = .init(),
        body: Operations.DiscussionCommentEdited.Input.Body
    ) async throws -> Operations.DiscussionCommentEdited.Output {
        try await discussionCommentEdited(Operations.DiscussionCommentEdited.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A discussion was created.
    ///
    /// - Remark: HTTP `POST /discussion-created`.
    /// - Remark: Generated from `#/paths//discussion-created/post(discussion/created)`.
    public func discussionCreated(
        headers: Operations.DiscussionCreated.Input.Headers = .init(),
        body: Operations.DiscussionCreated.Input.Body
    ) async throws -> Operations.DiscussionCreated.Output {
        try await discussionCreated(Operations.DiscussionCreated.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A discussion was deleted.
    ///
    /// - Remark: HTTP `POST /discussion-deleted`.
    /// - Remark: Generated from `#/paths//discussion-deleted/post(discussion/deleted)`.
    public func discussionDeleted(
        headers: Operations.DiscussionDeleted.Input.Headers = .init(),
        body: Operations.DiscussionDeleted.Input.Body
    ) async throws -> Operations.DiscussionDeleted.Output {
        try await discussionDeleted(Operations.DiscussionDeleted.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// The title or body on a discussion was edited, or the category of the discussion was changed.
    ///
    /// - Remark: HTTP `POST /discussion-edited`.
    /// - Remark: Generated from `#/paths//discussion-edited/post(discussion/edited)`.
    public func discussionEdited(
        headers: Operations.DiscussionEdited.Input.Headers = .init(),
        body: Operations.DiscussionEdited.Input.Body
    ) async throws -> Operations.DiscussionEdited.Output {
        try await discussionEdited(Operations.DiscussionEdited.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A label was added to a discussion.
    ///
    /// - Remark: HTTP `POST /discussion-labeled`.
    /// - Remark: Generated from `#/paths//discussion-labeled/post(discussion/labeled)`.
    public func discussionLabeled(
        headers: Operations.DiscussionLabeled.Input.Headers = .init(),
        body: Operations.DiscussionLabeled.Input.Body
    ) async throws -> Operations.DiscussionLabeled.Output {
        try await discussionLabeled(Operations.DiscussionLabeled.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A discussion was locked.
    ///
    /// - Remark: HTTP `POST /discussion-locked`.
    /// - Remark: Generated from `#/paths//discussion-locked/post(discussion/locked)`.
    public func discussionLocked(
        headers: Operations.DiscussionLocked.Input.Headers = .init(),
        body: Operations.DiscussionLocked.Input.Body
    ) async throws -> Operations.DiscussionLocked.Output {
        try await discussionLocked(Operations.DiscussionLocked.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A discussion was pinned.
    ///
    /// - Remark: HTTP `POST /discussion-pinned`.
    /// - Remark: Generated from `#/paths//discussion-pinned/post(discussion/pinned)`.
    public func discussionPinned(
        headers: Operations.DiscussionPinned.Input.Headers = .init(),
        body: Operations.DiscussionPinned.Input.Body
    ) async throws -> Operations.DiscussionPinned.Output {
        try await discussionPinned(Operations.DiscussionPinned.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A discussion was transferred to another repository.
    ///
    /// - Remark: HTTP `POST /discussion-transferred`.
    /// - Remark: Generated from `#/paths//discussion-transferred/post(discussion/transferred)`.
    public func discussionTransferred(
        headers: Operations.DiscussionTransferred.Input.Headers = .init(),
        body: Operations.DiscussionTransferred.Input.Body
    ) async throws -> Operations.DiscussionTransferred.Output {
        try await discussionTransferred(Operations.DiscussionTransferred.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A comment on the discussion was unmarked as the answer.
    ///
    /// - Remark: HTTP `POST /discussion-unanswered`.
    /// - Remark: Generated from `#/paths//discussion-unanswered/post(discussion/unanswered)`.
    public func discussionUnanswered(
        headers: Operations.DiscussionUnanswered.Input.Headers = .init(),
        body: Operations.DiscussionUnanswered.Input.Body
    ) async throws -> Operations.DiscussionUnanswered.Output {
        try await discussionUnanswered(Operations.DiscussionUnanswered.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A label was removed from a discussion.
    ///
    /// - Remark: HTTP `POST /discussion-unlabeled`.
    /// - Remark: Generated from `#/paths//discussion-unlabeled/post(discussion/unlabeled)`.
    public func discussionUnlabeled(
        headers: Operations.DiscussionUnlabeled.Input.Headers = .init(),
        body: Operations.DiscussionUnlabeled.Input.Body
    ) async throws -> Operations.DiscussionUnlabeled.Output {
        try await discussionUnlabeled(Operations.DiscussionUnlabeled.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A discussion was unlocked.
    ///
    /// - Remark: HTTP `POST /discussion-unlocked`.
    /// - Remark: Generated from `#/paths//discussion-unlocked/post(discussion/unlocked)`.
    public func discussionUnlocked(
        headers: Operations.DiscussionUnlocked.Input.Headers = .init(),
        body: Operations.DiscussionUnlocked.Input.Body
    ) async throws -> Operations.DiscussionUnlocked.Output {
        try await discussionUnlocked(Operations.DiscussionUnlocked.Input(
            headers: headers,
            body: body
        ))
    }
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A discussion was unpinned.
    ///
    /// - Remark: HTTP `POST /discussion-unpinned`.
    /// - Remark: Generated from `#/paths//discussion-unpinned/post(discussion/unpinned)`.
    public func discussionUnpinned(
        headers: Operations.DiscussionUnpinned.Input.Headers = .init(),
        body: Operations.DiscussionUnpinned.Input.Body
    ) async throws -> Operations.DiscussionUnpinned.Output {
        try await discussionUnpinned(Operations.DiscussionUnpinned.Input(
            headers: headers,
            body: body
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public enum Server1 {
        public static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://api.github.com",
                variables: []
            )
        }
    }
    @available(*, deprecated, renamed: "Servers.Server1.url")
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.github.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// Simple User
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-simple-user`.
        public struct NullableSimpleUser: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/node_id`.
            public var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/avatar_url`.
            public var avatarUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gravatar_id`.
            public var gravatarId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/html_url`.
            public var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/followers_url`.
            public var followersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/following_url`.
            public var followingUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gists_url`.
            public var gistsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_url`.
            public var starredUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/subscriptions_url`.
            public var subscriptionsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/organizations_url`.
            public var organizationsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/repos_url`.
            public var reposUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/events_url`.
            public var eventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/received_events_url`.
            public var receivedEventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/site_admin`.
            public var siteAdmin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_at`.
            public var starredAt: Swift.String?
            /// Creates a new `NullableSimpleUser`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - nodeId:
            ///   - avatarUrl:
            ///   - gravatarId:
            ///   - url:
            ///   - htmlUrl:
            ///   - followersUrl:
            ///   - followingUrl:
            ///   - gistsUrl:
            ///   - starredUrl:
            ///   - subscriptionsUrl:
            ///   - organizationsUrl:
            ///   - reposUrl:
            ///   - eventsUrl:
            ///   - receivedEventsUrl:
            ///   - _type:
            ///   - siteAdmin:
            ///   - starredAt:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int,
                nodeId: Swift.String,
                avatarUrl: Swift.String,
                gravatarId: Swift.String? = nil,
                url: Swift.String,
                htmlUrl: Swift.String,
                followersUrl: Swift.String,
                followingUrl: Swift.String,
                gistsUrl: Swift.String,
                starredUrl: Swift.String,
                subscriptionsUrl: Swift.String,
                organizationsUrl: Swift.String,
                reposUrl: Swift.String,
                eventsUrl: Swift.String,
                receivedEventsUrl: Swift.String,
                _type: Swift.String,
                siteAdmin: Swift.Bool,
                starredAt: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.nodeId = nodeId
                self.avatarUrl = avatarUrl
                self.gravatarId = gravatarId
                self.url = url
                self.htmlUrl = htmlUrl
                self.followersUrl = followersUrl
                self.followingUrl = followingUrl
                self.gistsUrl = gistsUrl
                self.starredUrl = starredUrl
                self.subscriptionsUrl = subscriptionsUrl
                self.organizationsUrl = organizationsUrl
                self.reposUrl = reposUrl
                self.eventsUrl = eventsUrl
                self.receivedEventsUrl = receivedEventsUrl
                self._type = _type
                self.siteAdmin = siteAdmin
                self.starredAt = starredAt
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case nodeId = "node_id"
                case avatarUrl = "avatar_url"
                case gravatarId = "gravatar_id"
                case url
                case htmlUrl = "html_url"
                case followersUrl = "followers_url"
                case followingUrl = "following_url"
                case gistsUrl = "gists_url"
                case starredUrl = "starred_url"
                case subscriptionsUrl = "subscriptions_url"
                case organizationsUrl = "organizations_url"
                case reposUrl = "repos_url"
                case eventsUrl = "events_url"
                case receivedEventsUrl = "received_events_url"
                case _type = "type"
                case siteAdmin = "site_admin"
                case starredAt = "starred_at"
            }
        }
        /// Simple User
        ///
        /// - Remark: Generated from `#/components/schemas/simple-user`.
        public struct SimpleUser: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/simple-user/node_id`.
            public var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/avatar_url`.
            public var avatarUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gravatar_id`.
            public var gravatarId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/html_url`.
            public var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/followers_url`.
            public var followersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/following_url`.
            public var followingUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gists_url`.
            public var gistsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_url`.
            public var starredUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/subscriptions_url`.
            public var subscriptionsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/organizations_url`.
            public var organizationsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/repos_url`.
            public var reposUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/events_url`.
            public var eventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/received_events_url`.
            public var receivedEventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/site_admin`.
            public var siteAdmin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_at`.
            public var starredAt: Swift.String?
            /// Creates a new `SimpleUser`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - nodeId:
            ///   - avatarUrl:
            ///   - gravatarId:
            ///   - url:
            ///   - htmlUrl:
            ///   - followersUrl:
            ///   - followingUrl:
            ///   - gistsUrl:
            ///   - starredUrl:
            ///   - subscriptionsUrl:
            ///   - organizationsUrl:
            ///   - reposUrl:
            ///   - eventsUrl:
            ///   - receivedEventsUrl:
            ///   - _type:
            ///   - siteAdmin:
            ///   - starredAt:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int,
                nodeId: Swift.String,
                avatarUrl: Swift.String,
                gravatarId: Swift.String? = nil,
                url: Swift.String,
                htmlUrl: Swift.String,
                followersUrl: Swift.String,
                followingUrl: Swift.String,
                gistsUrl: Swift.String,
                starredUrl: Swift.String,
                subscriptionsUrl: Swift.String,
                organizationsUrl: Swift.String,
                reposUrl: Swift.String,
                eventsUrl: Swift.String,
                receivedEventsUrl: Swift.String,
                _type: Swift.String,
                siteAdmin: Swift.Bool,
                starredAt: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.nodeId = nodeId
                self.avatarUrl = avatarUrl
                self.gravatarId = gravatarId
                self.url = url
                self.htmlUrl = htmlUrl
                self.followersUrl = followersUrl
                self.followingUrl = followingUrl
                self.gistsUrl = gistsUrl
                self.starredUrl = starredUrl
                self.subscriptionsUrl = subscriptionsUrl
                self.organizationsUrl = organizationsUrl
                self.reposUrl = reposUrl
                self.eventsUrl = eventsUrl
                self.receivedEventsUrl = receivedEventsUrl
                self._type = _type
                self.siteAdmin = siteAdmin
                self.starredAt = starredAt
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case nodeId = "node_id"
                case avatarUrl = "avatar_url"
                case gravatarId = "gravatar_id"
                case url
                case htmlUrl = "html_url"
                case followersUrl = "followers_url"
                case followingUrl = "following_url"
                case gistsUrl = "gists_url"
                case starredUrl = "starred_url"
                case subscriptionsUrl = "subscriptions_url"
                case organizationsUrl = "organizations_url"
                case reposUrl = "repos_url"
                case eventsUrl = "events_url"
                case receivedEventsUrl = "received_events_url"
                case _type = "type"
                case siteAdmin = "site_admin"
                case starredAt = "starred_at"
            }
        }
        /// An enterprise account
        ///
        /// - Remark: Generated from `#/components/schemas/enterprise`.
        public struct Enterprise: Codable, Hashable, Sendable {
            /// A short description of the enterprise.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/enterprise/html_url`.
            public var htmlUrl: Swift.String
            /// The enterprise's website URL.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/website_url`.
            public var websiteUrl: Swift.String?
            /// Unique identifier of the enterprise
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/enterprise/node_id`.
            public var nodeId: Swift.String
            /// The name of the enterprise.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/name`.
            public var name: Swift.String
            /// The slug url identifier for the enterprise.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/slug`.
            public var slug: Swift.String
            /// - Remark: Generated from `#/components/schemas/enterprise/created_at`.
            public var createdAt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/enterprise/updated_at`.
            public var updatedAt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/enterprise/avatar_url`.
            public var avatarUrl: Swift.String
            /// Creates a new `Enterprise`.
            ///
            /// - Parameters:
            ///   - description: A short description of the enterprise.
            ///   - htmlUrl:
            ///   - websiteUrl: The enterprise's website URL.
            ///   - id: Unique identifier of the enterprise
            ///   - nodeId:
            ///   - name: The name of the enterprise.
            ///   - slug: The slug url identifier for the enterprise.
            ///   - createdAt:
            ///   - updatedAt:
            ///   - avatarUrl:
            public init(
                description: Swift.String? = nil,
                htmlUrl: Swift.String,
                websiteUrl: Swift.String? = nil,
                id: Swift.Int,
                nodeId: Swift.String,
                name: Swift.String,
                slug: Swift.String,
                createdAt: Swift.String? = nil,
                updatedAt: Swift.String? = nil,
                avatarUrl: Swift.String
            ) {
                self.description = description
                self.htmlUrl = htmlUrl
                self.websiteUrl = websiteUrl
                self.id = id
                self.nodeId = nodeId
                self.name = name
                self.slug = slug
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.avatarUrl = avatarUrl
            }
            public enum CodingKeys: String, CodingKey {
                case description
                case htmlUrl = "html_url"
                case websiteUrl = "website_url"
                case id
                case nodeId = "node_id"
                case name
                case slug
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case avatarUrl = "avatar_url"
            }
        }
        /// License Simple
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-license-simple`.
        public struct NullableLicenseSimple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/spdx_id`.
            public var spdxId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/node_id`.
            public var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/html_url`.
            public var htmlUrl: Swift.String?
            /// Creates a new `NullableLicenseSimple`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - url:
            ///   - spdxId:
            ///   - nodeId:
            ///   - htmlUrl:
            public init(
                key: Swift.String,
                name: Swift.String,
                url: Swift.String? = nil,
                spdxId: Swift.String? = nil,
                nodeId: Swift.String,
                htmlUrl: Swift.String? = nil
            ) {
                self.key = key
                self.name = name
                self.url = url
                self.spdxId = spdxId
                self.nodeId = nodeId
                self.htmlUrl = htmlUrl
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case url
                case spdxId = "spdx_id"
                case nodeId = "node_id"
                case htmlUrl = "html_url"
            }
        }
        /// A git repository
        ///
        /// - Remark: Generated from `#/components/schemas/repository`.
        public struct Repository: Codable, Hashable, Sendable {
            /// Unique identifier of the repository
            ///
            /// - Remark: Generated from `#/components/schemas/repository/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/node_id`.
            public var nodeId: Swift.String
            /// The name of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/full_name`.
            public var fullName: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/license`.
            public var license: Components.Schemas.NullableLicenseSimple?
            /// - Remark: Generated from `#/components/schemas/repository/organization`.
            public var organization: Components.Schemas.NullableSimpleUser?
            /// - Remark: Generated from `#/components/schemas/repository/forks`.
            public var forks: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/permissions`.
            public struct PermissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository/permissions/admin`.
                public var admin: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/pull`.
                public var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// Creates a new `PermissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                public init(
                    admin: Swift.Bool,
                    pull: Swift.Bool,
                    triage: Swift.Bool? = nil,
                    push: Swift.Bool,
                    maintain: Swift.Bool? = nil
                ) {
                    self.admin = admin
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                }
                public enum CodingKeys: String, CodingKey {
                    case admin
                    case pull
                    case triage
                    case push
                    case maintain
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository/permissions`.
            public var permissions: Components.Schemas.Repository.PermissionsPayload?
            /// - Remark: Generated from `#/components/schemas/repository/owner`.
            public var owner: Components.Schemas.SimpleUser
            /// Whether the repository is private or public.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/private`.
            public var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/html_url`.
            public var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/fork`.
            public var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/archive_url`.
            public var archiveUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/assignees_url`.
            public var assigneesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/blobs_url`.
            public var blobsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/branches_url`.
            public var branchesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/collaborators_url`.
            public var collaboratorsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/comments_url`.
            public var commentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/commits_url`.
            public var commitsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/compare_url`.
            public var compareUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/contents_url`.
            public var contentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/contributors_url`.
            public var contributorsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/deployments_url`.
            public var deploymentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/downloads_url`.
            public var downloadsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/events_url`.
            public var eventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/forks_url`.
            public var forksUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_commits_url`.
            public var gitCommitsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_refs_url`.
            public var gitRefsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_tags_url`.
            public var gitTagsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_url`.
            public var gitUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issue_comment_url`.
            public var issueCommentUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issue_events_url`.
            public var issueEventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issues_url`.
            public var issuesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/keys_url`.
            public var keysUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/labels_url`.
            public var labelsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/languages_url`.
            public var languagesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/merges_url`.
            public var mergesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/milestones_url`.
            public var milestonesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/notifications_url`.
            public var notificationsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/pulls_url`.
            public var pullsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/releases_url`.
            public var releasesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/ssh_url`.
            public var sshUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/stargazers_url`.
            public var stargazersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/statuses_url`.
            public var statusesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/subscribers_url`.
            public var subscribersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/subscription_url`.
            public var subscriptionUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/tags_url`.
            public var tagsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/teams_url`.
            public var teamsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/trees_url`.
            public var treesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/clone_url`.
            public var cloneUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/mirror_url`.
            public var mirrorUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/hooks_url`.
            public var hooksUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/svn_url`.
            public var svnUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/homepage`.
            public var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/language`.
            public var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/forks_count`.
            public var forksCount: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/stargazers_count`.
            public var stargazersCount: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/watchers_count`.
            public var watchersCount: Swift.Int
            /// The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/size`.
            public var size: Swift.Int
            /// The default branch of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/default_branch`.
            public var defaultBranch: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/open_issues_count`.
            public var openIssuesCount: Swift.Int
            /// Whether this repository acts as a template that can be used to generate new repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/is_template`.
            public var isTemplate: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/topics`.
            public var topics: [Swift.String]?
            /// Whether issues are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_issues`.
            public var hasIssues: Swift.Bool
            /// Whether projects are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_projects`.
            public var hasProjects: Swift.Bool
            /// Whether the wiki is enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_wiki`.
            public var hasWiki: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/has_pages`.
            public var hasPages: Swift.Bool
            /// Whether downloads are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_downloads`.
            public var hasDownloads: Swift.Bool
            /// Whether the repository is archived.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/archived`.
            public var archived: Swift.Bool
            /// Returns whether or not this repository disabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/disabled`.
            public var disabled: Swift.Bool
            /// The repository visibility: public, private, or internal.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/visibility`.
            public var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/pushed_at`.
            public var pushedAt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/created_at`.
            public var createdAt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/updated_at`.
            public var updatedAt: Swift.String?
            /// Whether to allow rebase merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_rebase_merge`.
            public var allowRebaseMerge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/template_repository`.
            public struct TemplateRepositoryPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/id`.
                public var id: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/node_id`.
                public var nodeId: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/full_name`.
                public var fullName: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner`.
                public struct OwnerPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/login`.
                    public var login: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/id`.
                    public var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/url`.
                    public var url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/type`.
                    public var _type: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// Creates a new `OwnerPayload`.
                    ///
                    /// - Parameters:
                    ///   - login:
                    ///   - id:
                    ///   - nodeId:
                    ///   - avatarUrl:
                    ///   - gravatarId:
                    ///   - url:
                    ///   - htmlUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - organizationsUrl:
                    ///   - reposUrl:
                    ///   - eventsUrl:
                    ///   - receivedEventsUrl:
                    ///   - _type:
                    ///   - siteAdmin:
                    public init(
                        login: Swift.String? = nil,
                        id: Swift.Int? = nil,
                        nodeId: Swift.String? = nil,
                        avatarUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        url: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        _type: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil
                    ) {
                        self.login = login
                        self.id = id
                        self.nodeId = nodeId
                        self.avatarUrl = avatarUrl
                        self.gravatarId = gravatarId
                        self.url = url
                        self.htmlUrl = htmlUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self.organizationsUrl = organizationsUrl
                        self.reposUrl = reposUrl
                        self.eventsUrl = eventsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self._type = _type
                        self.siteAdmin = siteAdmin
                    }
                    public enum CodingKeys: String, CodingKey {
                        case login
                        case id
                        case nodeId = "node_id"
                        case avatarUrl = "avatar_url"
                        case gravatarId = "gravatar_id"
                        case url
                        case htmlUrl = "html_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case organizationsUrl = "organizations_url"
                        case reposUrl = "repos_url"
                        case eventsUrl = "events_url"
                        case receivedEventsUrl = "received_events_url"
                        case _type = "type"
                        case siteAdmin = "site_admin"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner`.
                public var owner: Components.Schemas.Repository.TemplateRepositoryPayload.OwnerPayload?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/private`.
                public var _private: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/html_url`.
                public var htmlUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/description`.
                public var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/fork`.
                public var fork: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/url`.
                public var url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/archive_url`.
                public var archiveUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/assignees_url`.
                public var assigneesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/blobs_url`.
                public var blobsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/branches_url`.
                public var branchesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/collaborators_url`.
                public var collaboratorsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/comments_url`.
                public var commentsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/commits_url`.
                public var commitsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/compare_url`.
                public var compareUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/contents_url`.
                public var contentsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/contributors_url`.
                public var contributorsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/deployments_url`.
                public var deploymentsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/downloads_url`.
                public var downloadsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/events_url`.
                public var eventsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/forks_url`.
                public var forksUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/git_commits_url`.
                public var gitCommitsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/git_refs_url`.
                public var gitRefsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/git_tags_url`.
                public var gitTagsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/git_url`.
                public var gitUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/issue_comment_url`.
                public var issueCommentUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/issue_events_url`.
                public var issueEventsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/issues_url`.
                public var issuesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/keys_url`.
                public var keysUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/labels_url`.
                public var labelsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/languages_url`.
                public var languagesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merges_url`.
                public var mergesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/milestones_url`.
                public var milestonesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/notifications_url`.
                public var notificationsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/pulls_url`.
                public var pullsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/releases_url`.
                public var releasesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/ssh_url`.
                public var sshUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/stargazers_url`.
                public var stargazersUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/statuses_url`.
                public var statusesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/subscribers_url`.
                public var subscribersUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/subscription_url`.
                public var subscriptionUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/tags_url`.
                public var tagsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/teams_url`.
                public var teamsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/trees_url`.
                public var treesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/clone_url`.
                public var cloneUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/mirror_url`.
                public var mirrorUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/hooks_url`.
                public var hooksUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/svn_url`.
                public var svnUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/homepage`.
                public var homepage: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/language`.
                public var language: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/forks_count`.
                public var forksCount: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/stargazers_count`.
                public var stargazersCount: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/watchers_count`.
                public var watchersCount: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/size`.
                public var size: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/default_branch`.
                public var defaultBranch: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/open_issues_count`.
                public var openIssuesCount: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/is_template`.
                public var isTemplate: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/topics`.
                public var topics: [Swift.String]?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_issues`.
                public var hasIssues: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_projects`.
                public var hasProjects: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_wiki`.
                public var hasWiki: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_pages`.
                public var hasPages: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_downloads`.
                public var hasDownloads: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/archived`.
                public var archived: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/disabled`.
                public var disabled: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/visibility`.
                public var visibility: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/pushed_at`.
                public var pushedAt: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/created_at`.
                public var createdAt: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/updated_at`.
                public var updatedAt: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions`.
                public struct PermissionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/admin`.
                    public var admin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/maintain`.
                    public var maintain: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/push`.
                    public var push: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/triage`.
                    public var triage: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/pull`.
                    public var pull: Swift.Bool?
                    /// Creates a new `PermissionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - admin:
                    ///   - maintain:
                    ///   - push:
                    ///   - triage:
                    ///   - pull:
                    public init(
                        admin: Swift.Bool? = nil,
                        maintain: Swift.Bool? = nil,
                        push: Swift.Bool? = nil,
                        triage: Swift.Bool? = nil,
                        pull: Swift.Bool? = nil
                    ) {
                        self.admin = admin
                        self.maintain = maintain
                        self.push = push
                        self.triage = triage
                        self.pull = pull
                    }
                    public enum CodingKeys: String, CodingKey {
                        case admin
                        case maintain
                        case push
                        case triage
                        case pull
                    }
                }
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions`.
                public var permissions: Components.Schemas.Repository.TemplateRepositoryPayload.PermissionsPayload?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_rebase_merge`.
                public var allowRebaseMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/temp_clone_token`.
                public var tempCloneToken: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_squash_merge`.
                public var allowSquashMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_auto_merge`.
                public var allowAutoMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/delete_branch_on_merge`.
                public var deleteBranchOnMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_update_branch`.
                public var allowUpdateBranch: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/use_squash_pr_title_as_default`.
                public var useSquashPrTitleAsDefault: Swift.Bool?
                /// The default value for a squash merge commit title:
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/squash_merge_commit_title`.
                @frozen public enum SquashMergeCommitTitlePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case prTitle = "PR_TITLE"
                    case commitOrPrTitle = "COMMIT_OR_PR_TITLE"
                }
                /// The default value for a squash merge commit title:
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/squash_merge_commit_title`.
                public var squashMergeCommitTitle: Components.Schemas.Repository.TemplateRepositoryPayload.SquashMergeCommitTitlePayload?
                /// The default value for a squash merge commit message:
                ///
                /// - `PR_BODY` - default to the pull request's body.
                /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/squash_merge_commit_message`.
                @frozen public enum SquashMergeCommitMessagePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case prBody = "PR_BODY"
                    case commitMessages = "COMMIT_MESSAGES"
                    case blank = "BLANK"
                }
                /// The default value for a squash merge commit message:
                ///
                /// - `PR_BODY` - default to the pull request's body.
                /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/squash_merge_commit_message`.
                public var squashMergeCommitMessage: Components.Schemas.Repository.TemplateRepositoryPayload.SquashMergeCommitMessagePayload?
                /// The default value for a merge commit title.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merge_commit_title`.
                @frozen public enum MergeCommitTitlePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case prTitle = "PR_TITLE"
                    case mergeMessage = "MERGE_MESSAGE"
                }
                /// The default value for a merge commit title.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merge_commit_title`.
                public var mergeCommitTitle: Components.Schemas.Repository.TemplateRepositoryPayload.MergeCommitTitlePayload?
                /// The default value for a merge commit message.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `PR_BODY` - default to the pull request's body.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merge_commit_message`.
                @frozen public enum MergeCommitMessagePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case prBody = "PR_BODY"
                    case prTitle = "PR_TITLE"
                    case blank = "BLANK"
                }
                /// The default value for a merge commit message.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `PR_BODY` - default to the pull request's body.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merge_commit_message`.
                public var mergeCommitMessage: Components.Schemas.Repository.TemplateRepositoryPayload.MergeCommitMessagePayload?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_merge_commit`.
                public var allowMergeCommit: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/subscribers_count`.
                public var subscribersCount: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/network_count`.
                public var networkCount: Swift.Int?
                /// Creates a new `TemplateRepositoryPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - nodeId:
                ///   - name:
                ///   - fullName:
                ///   - owner:
                ///   - _private:
                ///   - htmlUrl:
                ///   - description:
                ///   - fork:
                ///   - url:
                ///   - archiveUrl:
                ///   - assigneesUrl:
                ///   - blobsUrl:
                ///   - branchesUrl:
                ///   - collaboratorsUrl:
                ///   - commentsUrl:
                ///   - commitsUrl:
                ///   - compareUrl:
                ///   - contentsUrl:
                ///   - contributorsUrl:
                ///   - deploymentsUrl:
                ///   - downloadsUrl:
                ///   - eventsUrl:
                ///   - forksUrl:
                ///   - gitCommitsUrl:
                ///   - gitRefsUrl:
                ///   - gitTagsUrl:
                ///   - gitUrl:
                ///   - issueCommentUrl:
                ///   - issueEventsUrl:
                ///   - issuesUrl:
                ///   - keysUrl:
                ///   - labelsUrl:
                ///   - languagesUrl:
                ///   - mergesUrl:
                ///   - milestonesUrl:
                ///   - notificationsUrl:
                ///   - pullsUrl:
                ///   - releasesUrl:
                ///   - sshUrl:
                ///   - stargazersUrl:
                ///   - statusesUrl:
                ///   - subscribersUrl:
                ///   - subscriptionUrl:
                ///   - tagsUrl:
                ///   - teamsUrl:
                ///   - treesUrl:
                ///   - cloneUrl:
                ///   - mirrorUrl:
                ///   - hooksUrl:
                ///   - svnUrl:
                ///   - homepage:
                ///   - language:
                ///   - forksCount:
                ///   - stargazersCount:
                ///   - watchersCount:
                ///   - size:
                ///   - defaultBranch:
                ///   - openIssuesCount:
                ///   - isTemplate:
                ///   - topics:
                ///   - hasIssues:
                ///   - hasProjects:
                ///   - hasWiki:
                ///   - hasPages:
                ///   - hasDownloads:
                ///   - archived:
                ///   - disabled:
                ///   - visibility:
                ///   - pushedAt:
                ///   - createdAt:
                ///   - updatedAt:
                ///   - permissions:
                ///   - allowRebaseMerge:
                ///   - tempCloneToken:
                ///   - allowSquashMerge:
                ///   - allowAutoMerge:
                ///   - deleteBranchOnMerge:
                ///   - allowUpdateBranch:
                ///   - useSquashPrTitleAsDefault:
                ///   - squashMergeCommitTitle: The default value for a squash merge commit title:
                ///   - squashMergeCommitMessage: The default value for a squash merge commit message:
                ///   - mergeCommitTitle: The default value for a merge commit title.
                ///   - mergeCommitMessage: The default value for a merge commit message.
                ///   - allowMergeCommit:
                ///   - subscribersCount:
                ///   - networkCount:
                public init(
                    id: Swift.Int? = nil,
                    nodeId: Swift.String? = nil,
                    name: Swift.String? = nil,
                    fullName: Swift.String? = nil,
                    owner: Components.Schemas.Repository.TemplateRepositoryPayload.OwnerPayload? = nil,
                    _private: Swift.Bool? = nil,
                    htmlUrl: Swift.String? = nil,
                    description: Swift.String? = nil,
                    fork: Swift.Bool? = nil,
                    url: Swift.String? = nil,
                    archiveUrl: Swift.String? = nil,
                    assigneesUrl: Swift.String? = nil,
                    blobsUrl: Swift.String? = nil,
                    branchesUrl: Swift.String? = nil,
                    collaboratorsUrl: Swift.String? = nil,
                    commentsUrl: Swift.String? = nil,
                    commitsUrl: Swift.String? = nil,
                    compareUrl: Swift.String? = nil,
                    contentsUrl: Swift.String? = nil,
                    contributorsUrl: Swift.String? = nil,
                    deploymentsUrl: Swift.String? = nil,
                    downloadsUrl: Swift.String? = nil,
                    eventsUrl: Swift.String? = nil,
                    forksUrl: Swift.String? = nil,
                    gitCommitsUrl: Swift.String? = nil,
                    gitRefsUrl: Swift.String? = nil,
                    gitTagsUrl: Swift.String? = nil,
                    gitUrl: Swift.String? = nil,
                    issueCommentUrl: Swift.String? = nil,
                    issueEventsUrl: Swift.String? = nil,
                    issuesUrl: Swift.String? = nil,
                    keysUrl: Swift.String? = nil,
                    labelsUrl: Swift.String? = nil,
                    languagesUrl: Swift.String? = nil,
                    mergesUrl: Swift.String? = nil,
                    milestonesUrl: Swift.String? = nil,
                    notificationsUrl: Swift.String? = nil,
                    pullsUrl: Swift.String? = nil,
                    releasesUrl: Swift.String? = nil,
                    sshUrl: Swift.String? = nil,
                    stargazersUrl: Swift.String? = nil,
                    statusesUrl: Swift.String? = nil,
                    subscribersUrl: Swift.String? = nil,
                    subscriptionUrl: Swift.String? = nil,
                    tagsUrl: Swift.String? = nil,
                    teamsUrl: Swift.String? = nil,
                    treesUrl: Swift.String? = nil,
                    cloneUrl: Swift.String? = nil,
                    mirrorUrl: Swift.String? = nil,
                    hooksUrl: Swift.String? = nil,
                    svnUrl: Swift.String? = nil,
                    homepage: Swift.String? = nil,
                    language: Swift.String? = nil,
                    forksCount: Swift.Int? = nil,
                    stargazersCount: Swift.Int? = nil,
                    watchersCount: Swift.Int? = nil,
                    size: Swift.Int? = nil,
                    defaultBranch: Swift.String? = nil,
                    openIssuesCount: Swift.Int? = nil,
                    isTemplate: Swift.Bool? = nil,
                    topics: [Swift.String]? = nil,
                    hasIssues: Swift.Bool? = nil,
                    hasProjects: Swift.Bool? = nil,
                    hasWiki: Swift.Bool? = nil,
                    hasPages: Swift.Bool? = nil,
                    hasDownloads: Swift.Bool? = nil,
                    archived: Swift.Bool? = nil,
                    disabled: Swift.Bool? = nil,
                    visibility: Swift.String? = nil,
                    pushedAt: Swift.String? = nil,
                    createdAt: Swift.String? = nil,
                    updatedAt: Swift.String? = nil,
                    permissions: Components.Schemas.Repository.TemplateRepositoryPayload.PermissionsPayload? = nil,
                    allowRebaseMerge: Swift.Bool? = nil,
                    tempCloneToken: Swift.String? = nil,
                    allowSquashMerge: Swift.Bool? = nil,
                    allowAutoMerge: Swift.Bool? = nil,
                    deleteBranchOnMerge: Swift.Bool? = nil,
                    allowUpdateBranch: Swift.Bool? = nil,
                    useSquashPrTitleAsDefault: Swift.Bool? = nil,
                    squashMergeCommitTitle: Components.Schemas.Repository.TemplateRepositoryPayload.SquashMergeCommitTitlePayload? = nil,
                    squashMergeCommitMessage: Components.Schemas.Repository.TemplateRepositoryPayload.SquashMergeCommitMessagePayload? = nil,
                    mergeCommitTitle: Components.Schemas.Repository.TemplateRepositoryPayload.MergeCommitTitlePayload? = nil,
                    mergeCommitMessage: Components.Schemas.Repository.TemplateRepositoryPayload.MergeCommitMessagePayload? = nil,
                    allowMergeCommit: Swift.Bool? = nil,
                    subscribersCount: Swift.Int? = nil,
                    networkCount: Swift.Int? = nil
                ) {
                    self.id = id
                    self.nodeId = nodeId
                    self.name = name
                    self.fullName = fullName
                    self.owner = owner
                    self._private = _private
                    self.htmlUrl = htmlUrl
                    self.description = description
                    self.fork = fork
                    self.url = url
                    self.archiveUrl = archiveUrl
                    self.assigneesUrl = assigneesUrl
                    self.blobsUrl = blobsUrl
                    self.branchesUrl = branchesUrl
                    self.collaboratorsUrl = collaboratorsUrl
                    self.commentsUrl = commentsUrl
                    self.commitsUrl = commitsUrl
                    self.compareUrl = compareUrl
                    self.contentsUrl = contentsUrl
                    self.contributorsUrl = contributorsUrl
                    self.deploymentsUrl = deploymentsUrl
                    self.downloadsUrl = downloadsUrl
                    self.eventsUrl = eventsUrl
                    self.forksUrl = forksUrl
                    self.gitCommitsUrl = gitCommitsUrl
                    self.gitRefsUrl = gitRefsUrl
                    self.gitTagsUrl = gitTagsUrl
                    self.gitUrl = gitUrl
                    self.issueCommentUrl = issueCommentUrl
                    self.issueEventsUrl = issueEventsUrl
                    self.issuesUrl = issuesUrl
                    self.keysUrl = keysUrl
                    self.labelsUrl = labelsUrl
                    self.languagesUrl = languagesUrl
                    self.mergesUrl = mergesUrl
                    self.milestonesUrl = milestonesUrl
                    self.notificationsUrl = notificationsUrl
                    self.pullsUrl = pullsUrl
                    self.releasesUrl = releasesUrl
                    self.sshUrl = sshUrl
                    self.stargazersUrl = stargazersUrl
                    self.statusesUrl = statusesUrl
                    self.subscribersUrl = subscribersUrl
                    self.subscriptionUrl = subscriptionUrl
                    self.tagsUrl = tagsUrl
                    self.teamsUrl = teamsUrl
                    self.treesUrl = treesUrl
                    self.cloneUrl = cloneUrl
                    self.mirrorUrl = mirrorUrl
                    self.hooksUrl = hooksUrl
                    self.svnUrl = svnUrl
                    self.homepage = homepage
                    self.language = language
                    self.forksCount = forksCount
                    self.stargazersCount = stargazersCount
                    self.watchersCount = watchersCount
                    self.size = size
                    self.defaultBranch = defaultBranch
                    self.openIssuesCount = openIssuesCount
                    self.isTemplate = isTemplate
                    self.topics = topics
                    self.hasIssues = hasIssues
                    self.hasProjects = hasProjects
                    self.hasWiki = hasWiki
                    self.hasPages = hasPages
                    self.hasDownloads = hasDownloads
                    self.archived = archived
                    self.disabled = disabled
                    self.visibility = visibility
                    self.pushedAt = pushedAt
                    self.createdAt = createdAt
                    self.updatedAt = updatedAt
                    self.permissions = permissions
                    self.allowRebaseMerge = allowRebaseMerge
                    self.tempCloneToken = tempCloneToken
                    self.allowSquashMerge = allowSquashMerge
                    self.allowAutoMerge = allowAutoMerge
                    self.deleteBranchOnMerge = deleteBranchOnMerge
                    self.allowUpdateBranch = allowUpdateBranch
                    self.useSquashPrTitleAsDefault = useSquashPrTitleAsDefault
                    self.squashMergeCommitTitle = squashMergeCommitTitle
                    self.squashMergeCommitMessage = squashMergeCommitMessage
                    self.mergeCommitTitle = mergeCommitTitle
                    self.mergeCommitMessage = mergeCommitMessage
                    self.allowMergeCommit = allowMergeCommit
                    self.subscribersCount = subscribersCount
                    self.networkCount = networkCount
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case nodeId = "node_id"
                    case name
                    case fullName = "full_name"
                    case owner
                    case _private = "private"
                    case htmlUrl = "html_url"
                    case description
                    case fork
                    case url
                    case archiveUrl = "archive_url"
                    case assigneesUrl = "assignees_url"
                    case blobsUrl = "blobs_url"
                    case branchesUrl = "branches_url"
                    case collaboratorsUrl = "collaborators_url"
                    case commentsUrl = "comments_url"
                    case commitsUrl = "commits_url"
                    case compareUrl = "compare_url"
                    case contentsUrl = "contents_url"
                    case contributorsUrl = "contributors_url"
                    case deploymentsUrl = "deployments_url"
                    case downloadsUrl = "downloads_url"
                    case eventsUrl = "events_url"
                    case forksUrl = "forks_url"
                    case gitCommitsUrl = "git_commits_url"
                    case gitRefsUrl = "git_refs_url"
                    case gitTagsUrl = "git_tags_url"
                    case gitUrl = "git_url"
                    case issueCommentUrl = "issue_comment_url"
                    case issueEventsUrl = "issue_events_url"
                    case issuesUrl = "issues_url"
                    case keysUrl = "keys_url"
                    case labelsUrl = "labels_url"
                    case languagesUrl = "languages_url"
                    case mergesUrl = "merges_url"
                    case milestonesUrl = "milestones_url"
                    case notificationsUrl = "notifications_url"
                    case pullsUrl = "pulls_url"
                    case releasesUrl = "releases_url"
                    case sshUrl = "ssh_url"
                    case stargazersUrl = "stargazers_url"
                    case statusesUrl = "statuses_url"
                    case subscribersUrl = "subscribers_url"
                    case subscriptionUrl = "subscription_url"
                    case tagsUrl = "tags_url"
                    case teamsUrl = "teams_url"
                    case treesUrl = "trees_url"
                    case cloneUrl = "clone_url"
                    case mirrorUrl = "mirror_url"
                    case hooksUrl = "hooks_url"
                    case svnUrl = "svn_url"
                    case homepage
                    case language
                    case forksCount = "forks_count"
                    case stargazersCount = "stargazers_count"
                    case watchersCount = "watchers_count"
                    case size
                    case defaultBranch = "default_branch"
                    case openIssuesCount = "open_issues_count"
                    case isTemplate = "is_template"
                    case topics
                    case hasIssues = "has_issues"
                    case hasProjects = "has_projects"
                    case hasWiki = "has_wiki"
                    case hasPages = "has_pages"
                    case hasDownloads = "has_downloads"
                    case archived
                    case disabled
                    case visibility
                    case pushedAt = "pushed_at"
                    case createdAt = "created_at"
                    case updatedAt = "updated_at"
                    case permissions
                    case allowRebaseMerge = "allow_rebase_merge"
                    case tempCloneToken = "temp_clone_token"
                    case allowSquashMerge = "allow_squash_merge"
                    case allowAutoMerge = "allow_auto_merge"
                    case deleteBranchOnMerge = "delete_branch_on_merge"
                    case allowUpdateBranch = "allow_update_branch"
                    case useSquashPrTitleAsDefault = "use_squash_pr_title_as_default"
                    case squashMergeCommitTitle = "squash_merge_commit_title"
                    case squashMergeCommitMessage = "squash_merge_commit_message"
                    case mergeCommitTitle = "merge_commit_title"
                    case mergeCommitMessage = "merge_commit_message"
                    case allowMergeCommit = "allow_merge_commit"
                    case subscribersCount = "subscribers_count"
                    case networkCount = "network_count"
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository/template_repository`.
            public var templateRepository: Components.Schemas.Repository.TemplateRepositoryPayload?
            /// - Remark: Generated from `#/components/schemas/repository/temp_clone_token`.
            public var tempCloneToken: Swift.String?
            /// Whether to allow squash merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_squash_merge`.
            public var allowSquashMerge: Swift.Bool?
            /// Whether to allow Auto-merge to be used on pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_auto_merge`.
            public var allowAutoMerge: Swift.Bool?
            /// Whether to delete head branches when pull requests are merged
            ///
            /// - Remark: Generated from `#/components/schemas/repository/delete_branch_on_merge`.
            public var deleteBranchOnMerge: Swift.Bool?
            /// Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_update_branch`.
            public var allowUpdateBranch: Swift.Bool?
            /// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/use_squash_pr_title_as_default`.
            @available(*, deprecated)
            public var useSquashPrTitleAsDefault: Swift.Bool?
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_title`.
            @frozen public enum SquashMergeCommitTitlePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case prTitle = "PR_TITLE"
                case commitOrPrTitle = "COMMIT_OR_PR_TITLE"
            }
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_title`.
            public var squashMergeCommitTitle: Components.Schemas.Repository.SquashMergeCommitTitlePayload?
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_message`.
            @frozen public enum SquashMergeCommitMessagePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case prBody = "PR_BODY"
                case commitMessages = "COMMIT_MESSAGES"
                case blank = "BLANK"
            }
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_message`.
            public var squashMergeCommitMessage: Components.Schemas.Repository.SquashMergeCommitMessagePayload?
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_title`.
            @frozen public enum MergeCommitTitlePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case prTitle = "PR_TITLE"
                case mergeMessage = "MERGE_MESSAGE"
            }
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_title`.
            public var mergeCommitTitle: Components.Schemas.Repository.MergeCommitTitlePayload?
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_message`.
            @frozen public enum MergeCommitMessagePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case prBody = "PR_BODY"
                case prTitle = "PR_TITLE"
                case blank = "BLANK"
            }
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_message`.
            public var mergeCommitMessage: Components.Schemas.Repository.MergeCommitMessagePayload?
            /// Whether to allow merge commits for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_merge_commit`.
            public var allowMergeCommit: Swift.Bool?
            /// Whether to allow forking this repo
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_forking`.
            public var allowForking: Swift.Bool?
            /// Whether to require contributors to sign off on web-based commits
            ///
            /// - Remark: Generated from `#/components/schemas/repository/web_commit_signoff_required`.
            public var webCommitSignoffRequired: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/subscribers_count`.
            public var subscribersCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/repository/network_count`.
            public var networkCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/repository/open_issues`.
            public var openIssues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/watchers`.
            public var watchers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/master_branch`.
            public var masterBranch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/starred_at`.
            public var starredAt: Swift.String?
            /// Whether anonymous git access is enabled for this repository
            ///
            /// - Remark: Generated from `#/components/schemas/repository/anonymous_access_enabled`.
            public var anonymousAccessEnabled: Swift.Bool?
            /// Creates a new `Repository`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the repository
            ///   - nodeId:
            ///   - name: The name of the repository.
            ///   - fullName:
            ///   - license:
            ///   - organization:
            ///   - forks:
            ///   - permissions:
            ///   - owner:
            ///   - _private: Whether the repository is private or public.
            ///   - htmlUrl:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archiveUrl:
            ///   - assigneesUrl:
            ///   - blobsUrl:
            ///   - branchesUrl:
            ///   - collaboratorsUrl:
            ///   - commentsUrl:
            ///   - commitsUrl:
            ///   - compareUrl:
            ///   - contentsUrl:
            ///   - contributorsUrl:
            ///   - deploymentsUrl:
            ///   - downloadsUrl:
            ///   - eventsUrl:
            ///   - forksUrl:
            ///   - gitCommitsUrl:
            ///   - gitRefsUrl:
            ///   - gitTagsUrl:
            ///   - gitUrl:
            ///   - issueCommentUrl:
            ///   - issueEventsUrl:
            ///   - issuesUrl:
            ///   - keysUrl:
            ///   - labelsUrl:
            ///   - languagesUrl:
            ///   - mergesUrl:
            ///   - milestonesUrl:
            ///   - notificationsUrl:
            ///   - pullsUrl:
            ///   - releasesUrl:
            ///   - sshUrl:
            ///   - stargazersUrl:
            ///   - statusesUrl:
            ///   - subscribersUrl:
            ///   - subscriptionUrl:
            ///   - tagsUrl:
            ///   - teamsUrl:
            ///   - treesUrl:
            ///   - cloneUrl:
            ///   - mirrorUrl:
            ///   - hooksUrl:
            ///   - svnUrl:
            ///   - homepage:
            ///   - language:
            ///   - forksCount:
            ///   - stargazersCount:
            ///   - watchersCount:
            ///   - size: The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - defaultBranch: The default branch of the repository.
            ///   - openIssuesCount:
            ///   - isTemplate: Whether this repository acts as a template that can be used to generate new repositories.
            ///   - topics:
            ///   - hasIssues: Whether issues are enabled.
            ///   - hasProjects: Whether projects are enabled.
            ///   - hasWiki: Whether the wiki is enabled.
            ///   - hasPages:
            ///   - hasDownloads: Whether downloads are enabled.
            ///   - archived: Whether the repository is archived.
            ///   - disabled: Returns whether or not this repository disabled.
            ///   - visibility: The repository visibility: public, private, or internal.
            ///   - pushedAt:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - allowRebaseMerge: Whether to allow rebase merges for pull requests.
            ///   - templateRepository:
            ///   - tempCloneToken:
            ///   - allowSquashMerge: Whether to allow squash merges for pull requests.
            ///   - allowAutoMerge: Whether to allow Auto-merge to be used on pull requests.
            ///   - deleteBranchOnMerge: Whether to delete head branches when pull requests are merged
            ///   - allowUpdateBranch: Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///   - useSquashPrTitleAsDefault: Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///   - squashMergeCommitTitle: The default value for a squash merge commit title:
            ///   - squashMergeCommitMessage: The default value for a squash merge commit message:
            ///   - mergeCommitTitle: The default value for a merge commit title.
            ///   - mergeCommitMessage: The default value for a merge commit message.
            ///   - allowMergeCommit: Whether to allow merge commits for pull requests.
            ///   - allowForking: Whether to allow forking this repo
            ///   - webCommitSignoffRequired: Whether to require contributors to sign off on web-based commits
            ///   - subscribersCount:
            ///   - networkCount:
            ///   - openIssues:
            ///   - watchers:
            ///   - masterBranch:
            ///   - starredAt:
            ///   - anonymousAccessEnabled: Whether anonymous git access is enabled for this repository
            public init(
                id: Swift.Int,
                nodeId: Swift.String,
                name: Swift.String,
                fullName: Swift.String,
                license: Components.Schemas.NullableLicenseSimple? = nil,
                organization: Components.Schemas.NullableSimpleUser? = nil,
                forks: Swift.Int,
                permissions: Components.Schemas.Repository.PermissionsPayload? = nil,
                owner: Components.Schemas.SimpleUser,
                _private: Swift.Bool,
                htmlUrl: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archiveUrl: Swift.String,
                assigneesUrl: Swift.String,
                blobsUrl: Swift.String,
                branchesUrl: Swift.String,
                collaboratorsUrl: Swift.String,
                commentsUrl: Swift.String,
                commitsUrl: Swift.String,
                compareUrl: Swift.String,
                contentsUrl: Swift.String,
                contributorsUrl: Swift.String,
                deploymentsUrl: Swift.String,
                downloadsUrl: Swift.String,
                eventsUrl: Swift.String,
                forksUrl: Swift.String,
                gitCommitsUrl: Swift.String,
                gitRefsUrl: Swift.String,
                gitTagsUrl: Swift.String,
                gitUrl: Swift.String,
                issueCommentUrl: Swift.String,
                issueEventsUrl: Swift.String,
                issuesUrl: Swift.String,
                keysUrl: Swift.String,
                labelsUrl: Swift.String,
                languagesUrl: Swift.String,
                mergesUrl: Swift.String,
                milestonesUrl: Swift.String,
                notificationsUrl: Swift.String,
                pullsUrl: Swift.String,
                releasesUrl: Swift.String,
                sshUrl: Swift.String,
                stargazersUrl: Swift.String,
                statusesUrl: Swift.String,
                subscribersUrl: Swift.String,
                subscriptionUrl: Swift.String,
                tagsUrl: Swift.String,
                teamsUrl: Swift.String,
                treesUrl: Swift.String,
                cloneUrl: Swift.String,
                mirrorUrl: Swift.String? = nil,
                hooksUrl: Swift.String,
                svnUrl: Swift.String,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forksCount: Swift.Int,
                stargazersCount: Swift.Int,
                watchersCount: Swift.Int,
                size: Swift.Int,
                defaultBranch: Swift.String,
                openIssuesCount: Swift.Int,
                isTemplate: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                hasIssues: Swift.Bool,
                hasProjects: Swift.Bool,
                hasWiki: Swift.Bool,
                hasPages: Swift.Bool,
                hasDownloads: Swift.Bool,
                archived: Swift.Bool,
                disabled: Swift.Bool,
                visibility: Swift.String? = nil,
                pushedAt: Swift.String? = nil,
                createdAt: Swift.String? = nil,
                updatedAt: Swift.String? = nil,
                allowRebaseMerge: Swift.Bool? = nil,
                templateRepository: Components.Schemas.Repository.TemplateRepositoryPayload? = nil,
                tempCloneToken: Swift.String? = nil,
                allowSquashMerge: Swift.Bool? = nil,
                allowAutoMerge: Swift.Bool? = nil,
                deleteBranchOnMerge: Swift.Bool? = nil,
                allowUpdateBranch: Swift.Bool? = nil,
                useSquashPrTitleAsDefault: Swift.Bool? = nil,
                squashMergeCommitTitle: Components.Schemas.Repository.SquashMergeCommitTitlePayload? = nil,
                squashMergeCommitMessage: Components.Schemas.Repository.SquashMergeCommitMessagePayload? = nil,
                mergeCommitTitle: Components.Schemas.Repository.MergeCommitTitlePayload? = nil,
                mergeCommitMessage: Components.Schemas.Repository.MergeCommitMessagePayload? = nil,
                allowMergeCommit: Swift.Bool? = nil,
                allowForking: Swift.Bool? = nil,
                webCommitSignoffRequired: Swift.Bool? = nil,
                subscribersCount: Swift.Int? = nil,
                networkCount: Swift.Int? = nil,
                openIssues: Swift.Int,
                watchers: Swift.Int,
                masterBranch: Swift.String? = nil,
                starredAt: Swift.String? = nil,
                anonymousAccessEnabled: Swift.Bool? = nil
            ) {
                self.id = id
                self.nodeId = nodeId
                self.name = name
                self.fullName = fullName
                self.license = license
                self.organization = organization
                self.forks = forks
                self.permissions = permissions
                self.owner = owner
                self._private = _private
                self.htmlUrl = htmlUrl
                self.description = description
                self.fork = fork
                self.url = url
                self.archiveUrl = archiveUrl
                self.assigneesUrl = assigneesUrl
                self.blobsUrl = blobsUrl
                self.branchesUrl = branchesUrl
                self.collaboratorsUrl = collaboratorsUrl
                self.commentsUrl = commentsUrl
                self.commitsUrl = commitsUrl
                self.compareUrl = compareUrl
                self.contentsUrl = contentsUrl
                self.contributorsUrl = contributorsUrl
                self.deploymentsUrl = deploymentsUrl
                self.downloadsUrl = downloadsUrl
                self.eventsUrl = eventsUrl
                self.forksUrl = forksUrl
                self.gitCommitsUrl = gitCommitsUrl
                self.gitRefsUrl = gitRefsUrl
                self.gitTagsUrl = gitTagsUrl
                self.gitUrl = gitUrl
                self.issueCommentUrl = issueCommentUrl
                self.issueEventsUrl = issueEventsUrl
                self.issuesUrl = issuesUrl
                self.keysUrl = keysUrl
                self.labelsUrl = labelsUrl
                self.languagesUrl = languagesUrl
                self.mergesUrl = mergesUrl
                self.milestonesUrl = milestonesUrl
                self.notificationsUrl = notificationsUrl
                self.pullsUrl = pullsUrl
                self.releasesUrl = releasesUrl
                self.sshUrl = sshUrl
                self.stargazersUrl = stargazersUrl
                self.statusesUrl = statusesUrl
                self.subscribersUrl = subscribersUrl
                self.subscriptionUrl = subscriptionUrl
                self.tagsUrl = tagsUrl
                self.teamsUrl = teamsUrl
                self.treesUrl = treesUrl
                self.cloneUrl = cloneUrl
                self.mirrorUrl = mirrorUrl
                self.hooksUrl = hooksUrl
                self.svnUrl = svnUrl
                self.homepage = homepage
                self.language = language
                self.forksCount = forksCount
                self.stargazersCount = stargazersCount
                self.watchersCount = watchersCount
                self.size = size
                self.defaultBranch = defaultBranch
                self.openIssuesCount = openIssuesCount
                self.isTemplate = isTemplate
                self.topics = topics
                self.hasIssues = hasIssues
                self.hasProjects = hasProjects
                self.hasWiki = hasWiki
                self.hasPages = hasPages
                self.hasDownloads = hasDownloads
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushedAt = pushedAt
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.allowRebaseMerge = allowRebaseMerge
                self.templateRepository = templateRepository
                self.tempCloneToken = tempCloneToken
                self.allowSquashMerge = allowSquashMerge
                self.allowAutoMerge = allowAutoMerge
                self.deleteBranchOnMerge = deleteBranchOnMerge
                self.allowUpdateBranch = allowUpdateBranch
                self.useSquashPrTitleAsDefault = useSquashPrTitleAsDefault
                self.squashMergeCommitTitle = squashMergeCommitTitle
                self.squashMergeCommitMessage = squashMergeCommitMessage
                self.mergeCommitTitle = mergeCommitTitle
                self.mergeCommitMessage = mergeCommitMessage
                self.allowMergeCommit = allowMergeCommit
                self.allowForking = allowForking
                self.webCommitSignoffRequired = webCommitSignoffRequired
                self.subscribersCount = subscribersCount
                self.networkCount = networkCount
                self.openIssues = openIssues
                self.watchers = watchers
                self.masterBranch = masterBranch
                self.starredAt = starredAt
                self.anonymousAccessEnabled = anonymousAccessEnabled
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case name
                case fullName = "full_name"
                case license
                case organization
                case forks
                case permissions
                case owner
                case _private = "private"
                case htmlUrl = "html_url"
                case description
                case fork
                case url
                case archiveUrl = "archive_url"
                case assigneesUrl = "assignees_url"
                case blobsUrl = "blobs_url"
                case branchesUrl = "branches_url"
                case collaboratorsUrl = "collaborators_url"
                case commentsUrl = "comments_url"
                case commitsUrl = "commits_url"
                case compareUrl = "compare_url"
                case contentsUrl = "contents_url"
                case contributorsUrl = "contributors_url"
                case deploymentsUrl = "deployments_url"
                case downloadsUrl = "downloads_url"
                case eventsUrl = "events_url"
                case forksUrl = "forks_url"
                case gitCommitsUrl = "git_commits_url"
                case gitRefsUrl = "git_refs_url"
                case gitTagsUrl = "git_tags_url"
                case gitUrl = "git_url"
                case issueCommentUrl = "issue_comment_url"
                case issueEventsUrl = "issue_events_url"
                case issuesUrl = "issues_url"
                case keysUrl = "keys_url"
                case labelsUrl = "labels_url"
                case languagesUrl = "languages_url"
                case mergesUrl = "merges_url"
                case milestonesUrl = "milestones_url"
                case notificationsUrl = "notifications_url"
                case pullsUrl = "pulls_url"
                case releasesUrl = "releases_url"
                case sshUrl = "ssh_url"
                case stargazersUrl = "stargazers_url"
                case statusesUrl = "statuses_url"
                case subscribersUrl = "subscribers_url"
                case subscriptionUrl = "subscription_url"
                case tagsUrl = "tags_url"
                case teamsUrl = "teams_url"
                case treesUrl = "trees_url"
                case cloneUrl = "clone_url"
                case mirrorUrl = "mirror_url"
                case hooksUrl = "hooks_url"
                case svnUrl = "svn_url"
                case homepage
                case language
                case forksCount = "forks_count"
                case stargazersCount = "stargazers_count"
                case watchersCount = "watchers_count"
                case size
                case defaultBranch = "default_branch"
                case openIssuesCount = "open_issues_count"
                case isTemplate = "is_template"
                case topics
                case hasIssues = "has_issues"
                case hasProjects = "has_projects"
                case hasWiki = "has_wiki"
                case hasPages = "has_pages"
                case hasDownloads = "has_downloads"
                case archived
                case disabled
                case visibility
                case pushedAt = "pushed_at"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case allowRebaseMerge = "allow_rebase_merge"
                case templateRepository = "template_repository"
                case tempCloneToken = "temp_clone_token"
                case allowSquashMerge = "allow_squash_merge"
                case allowAutoMerge = "allow_auto_merge"
                case deleteBranchOnMerge = "delete_branch_on_merge"
                case allowUpdateBranch = "allow_update_branch"
                case useSquashPrTitleAsDefault = "use_squash_pr_title_as_default"
                case squashMergeCommitTitle = "squash_merge_commit_title"
                case squashMergeCommitMessage = "squash_merge_commit_message"
                case mergeCommitTitle = "merge_commit_title"
                case mergeCommitMessage = "merge_commit_message"
                case allowMergeCommit = "allow_merge_commit"
                case allowForking = "allow_forking"
                case webCommitSignoffRequired = "web_commit_signoff_required"
                case subscribersCount = "subscribers_count"
                case networkCount = "network_count"
                case openIssues = "open_issues"
                case watchers
                case masterBranch = "master_branch"
                case starredAt = "starred_at"
                case anonymousAccessEnabled = "anonymous_access_enabled"
            }
        }
        /// Organization Simple
        ///
        /// - Remark: Generated from `#/components/schemas/organization-simple`.
        public struct OrganizationSimple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/organization-simple/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization-simple/node_id`.
            public var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/repos_url`.
            public var reposUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/events_url`.
            public var eventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/hooks_url`.
            public var hooksUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/issues_url`.
            public var issuesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/members_url`.
            public var membersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/public_members_url`.
            public var publicMembersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/avatar_url`.
            public var avatarUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/description`.
            public var description: Swift.String?
            /// Creates a new `OrganizationSimple`.
            ///
            /// - Parameters:
            ///   - login:
            ///   - id:
            ///   - nodeId:
            ///   - url:
            ///   - reposUrl:
            ///   - eventsUrl:
            ///   - hooksUrl:
            ///   - issuesUrl:
            ///   - membersUrl:
            ///   - publicMembersUrl:
            ///   - avatarUrl:
            ///   - description:
            public init(
                login: Swift.String,
                id: Swift.Int,
                nodeId: Swift.String,
                url: Swift.String,
                reposUrl: Swift.String,
                eventsUrl: Swift.String,
                hooksUrl: Swift.String,
                issuesUrl: Swift.String,
                membersUrl: Swift.String,
                publicMembersUrl: Swift.String,
                avatarUrl: Swift.String,
                description: Swift.String? = nil
            ) {
                self.login = login
                self.id = id
                self.nodeId = nodeId
                self.url = url
                self.reposUrl = reposUrl
                self.eventsUrl = eventsUrl
                self.hooksUrl = hooksUrl
                self.issuesUrl = issuesUrl
                self.membersUrl = membersUrl
                self.publicMembersUrl = publicMembersUrl
                self.avatarUrl = avatarUrl
                self.description = description
            }
            public enum CodingKeys: String, CodingKey {
                case login
                case id
                case nodeId = "node_id"
                case url
                case reposUrl = "repos_url"
                case eventsUrl = "events_url"
                case hooksUrl = "hooks_url"
                case issuesUrl = "issues_url"
                case membersUrl = "members_url"
                case publicMembersUrl = "public_members_url"
                case avatarUrl = "avatar_url"
                case description
            }
        }
        /// Simple Installation
        ///
        /// - Remark: Generated from `#/components/schemas/simple-installation`.
        public struct SimpleInstallation: Codable, Hashable, Sendable {
            /// The ID of the installation.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-installation/id`.
            public var id: Swift.Int
            /// The global node ID of the installation.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-installation/node_id`.
            public var nodeId: Swift.String
            /// Creates a new `SimpleInstallation`.
            ///
            /// - Parameters:
            ///   - id: The ID of the installation.
            ///   - nodeId: The global node ID of the installation.
            public init(
                id: Swift.Int,
                nodeId: Swift.String
            ) {
                self.id = id
                self.nodeId = nodeId
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered`.
        public struct WebhookDiscussionAnswered: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case answered = "answered"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/action`.
            public var action: Components.Schemas.WebhookDiscussionAnswered.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer`.
            public struct AnswerPayload: Codable, Hashable, Sendable {
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/author_association`.
                @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case collaborator = "COLLABORATOR"
                    case contributor = "CONTRIBUTOR"
                    case firstTimer = "FIRST_TIMER"
                    case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                    case mannequin = "MANNEQUIN"
                    case member = "MEMBER"
                    case none = "NONE"
                    case owner = "OWNER"
                }
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/author_association`.
                public var authorAssociation: Components.Schemas.WebhookDiscussionAnswered.AnswerPayload.AuthorAssociationPayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/body`.
                public var body: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/child_comment_count`.
                public var childCommentCount: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/created_at`.
                public var createdAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/discussion_id`.
                public var discussionId: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/html_url`.
                public var htmlUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/parent_id`.
                public var parentId: OpenAPIRuntime.OpenAPIValueContainer?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/reactions`.
                public struct ReactionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/reactions/+1`.
                    public var _plus_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/reactions/-1`.
                    public var _hyphen_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/reactions/confused`.
                    public var confused: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/reactions/eyes`.
                    public var eyes: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/reactions/heart`.
                    public var heart: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/reactions/hooray`.
                    public var hooray: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/reactions/laugh`.
                    public var laugh: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/reactions/rocket`.
                    public var rocket: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/reactions/total_count`.
                    public var totalCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/reactions/url`.
                    public var url: Swift.String
                    /// Creates a new `ReactionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - _plus_1:
                    ///   - _hyphen_1:
                    ///   - confused:
                    ///   - eyes:
                    ///   - heart:
                    ///   - hooray:
                    ///   - laugh:
                    ///   - rocket:
                    ///   - totalCount:
                    ///   - url:
                    public init(
                        _plus_1: Swift.Int,
                        _hyphen_1: Swift.Int,
                        confused: Swift.Int,
                        eyes: Swift.Int,
                        heart: Swift.Int,
                        hooray: Swift.Int,
                        laugh: Swift.Int,
                        rocket: Swift.Int,
                        totalCount: Swift.Int,
                        url: Swift.String
                    ) {
                        self._plus_1 = _plus_1
                        self._hyphen_1 = _hyphen_1
                        self.confused = confused
                        self.eyes = eyes
                        self.heart = heart
                        self.hooray = hooray
                        self.laugh = laugh
                        self.rocket = rocket
                        self.totalCount = totalCount
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _plus_1 = "+1"
                        case _hyphen_1 = "-1"
                        case confused
                        case eyes
                        case heart
                        case hooray
                        case laugh
                        case rocket
                        case totalCount = "total_count"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/reactions`.
                public var reactions: Components.Schemas.WebhookDiscussionAnswered.AnswerPayload.ReactionsPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/repository_url`.
                public var repositoryUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/updated_at`.
                public var updatedAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/user`.
                public struct UserPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/user/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/user/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/user/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/user/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/user/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/user/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/user/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/user/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/user/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/user/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/user/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/user/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/user/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/user/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/user/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/user/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/user/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/user/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/user/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/user/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/user/type`.
                    public var _type: Components.Schemas.WebhookDiscussionAnswered.AnswerPayload.UserPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/user/url`.
                    public var url: Swift.String?
                    /// Creates a new `UserPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookDiscussionAnswered.AnswerPayload.UserPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer/user`.
                public var user: Components.Schemas.WebhookDiscussionAnswered.AnswerPayload.UserPayload?
                /// Creates a new `AnswerPayload`.
                ///
                /// - Parameters:
                ///   - authorAssociation: How the author is associated with the repository.
                ///   - body:
                ///   - childCommentCount:
                ///   - createdAt:
                ///   - discussionId:
                ///   - htmlUrl:
                ///   - id:
                ///   - nodeId:
                ///   - parentId:
                ///   - reactions:
                ///   - repositoryUrl:
                ///   - updatedAt:
                ///   - user:
                public init(
                    authorAssociation: Components.Schemas.WebhookDiscussionAnswered.AnswerPayload.AuthorAssociationPayload,
                    body: Swift.String,
                    childCommentCount: Swift.Int,
                    createdAt: Swift.String,
                    discussionId: Swift.Int,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    nodeId: Swift.String,
                    parentId: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                    reactions: Components.Schemas.WebhookDiscussionAnswered.AnswerPayload.ReactionsPayload? = nil,
                    repositoryUrl: Swift.String,
                    updatedAt: Swift.String,
                    user: Components.Schemas.WebhookDiscussionAnswered.AnswerPayload.UserPayload? = nil
                ) {
                    self.authorAssociation = authorAssociation
                    self.body = body
                    self.childCommentCount = childCommentCount
                    self.createdAt = createdAt
                    self.discussionId = discussionId
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.nodeId = nodeId
                    self.parentId = parentId
                    self.reactions = reactions
                    self.repositoryUrl = repositoryUrl
                    self.updatedAt = updatedAt
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case authorAssociation = "author_association"
                    case body
                    case childCommentCount = "child_comment_count"
                    case createdAt = "created_at"
                    case discussionId = "discussion_id"
                    case htmlUrl = "html_url"
                    case id
                    case nodeId = "node_id"
                    case parentId = "parent_id"
                    case reactions
                    case repositoryUrl = "repository_url"
                    case updatedAt = "updated_at"
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/answer`.
            public var answer: Components.Schemas.WebhookDiscussionAnswered.AnswerPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion`.
            public struct DiscussionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/active_lock_reason`.
                    public var activeLockReason: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/answer_chosen_at`.
                    public var answerChosenAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/answer_chosen_by`.
                    public struct AnswerChosenByPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/answer_chosen_by/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/answer_chosen_by/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/answer_chosen_by/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/answer_chosen_by/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/answer_chosen_by/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/answer_chosen_by/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/answer_chosen_by/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/answer_chosen_by/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/answer_chosen_by/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/answer_chosen_by/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/answer_chosen_by/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/answer_chosen_by/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/answer_chosen_by/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/answer_chosen_by/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/answer_chosen_by/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/answer_chosen_by/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/answer_chosen_by/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/answer_chosen_by/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/answer_chosen_by/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/answer_chosen_by/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/answer_chosen_by/type`.
                        public var _type: Components.Schemas.WebhookDiscussionAnswered.DiscussionPayload.Value1Payload.AnswerChosenByPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/answer_chosen_by/url`.
                        public var url: Swift.String?
                        /// Creates a new `AnswerChosenByPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookDiscussionAnswered.DiscussionPayload.Value1Payload.AnswerChosenByPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/answer_chosen_by`.
                    public var answerChosenBy: Components.Schemas.WebhookDiscussionAnswered.DiscussionPayload.Value1Payload.AnswerChosenByPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/answer_html_url`.
                    public var answerHtmlUrl: Swift.String?
                    /// How the author is associated with the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/author_association`.
                    @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case collaborator = "COLLABORATOR"
                        case contributor = "CONTRIBUTOR"
                        case firstTimer = "FIRST_TIMER"
                        case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                        case mannequin = "MANNEQUIN"
                        case member = "MEMBER"
                        case none = "NONE"
                        case owner = "OWNER"
                    }
                    /// How the author is associated with the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/author_association`.
                    public var authorAssociation: Components.Schemas.WebhookDiscussionAnswered.DiscussionPayload.Value1Payload.AuthorAssociationPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/body`.
                    public var body: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/category`.
                    public struct CategoryPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/category/created_at`.
                        public var createdAt: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/category/description`.
                        public var description: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/category/emoji`.
                        public var emoji: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/category/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/category/is_answerable`.
                        public var isAnswerable: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/category/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/category/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/category/repository_id`.
                        public var repositoryId: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/category/slug`.
                        public var slug: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/category/updated_at`.
                        public var updatedAt: Swift.String
                        /// Creates a new `CategoryPayload`.
                        ///
                        /// - Parameters:
                        ///   - createdAt:
                        ///   - description:
                        ///   - emoji:
                        ///   - id:
                        ///   - isAnswerable:
                        ///   - name:
                        ///   - nodeId:
                        ///   - repositoryId:
                        ///   - slug:
                        ///   - updatedAt:
                        public init(
                            createdAt: Swift.String,
                            description: Swift.String,
                            emoji: Swift.String,
                            id: Swift.Int,
                            isAnswerable: Swift.Bool,
                            name: Swift.String,
                            nodeId: Swift.String? = nil,
                            repositoryId: Swift.Int,
                            slug: Swift.String,
                            updatedAt: Swift.String
                        ) {
                            self.createdAt = createdAt
                            self.description = description
                            self.emoji = emoji
                            self.id = id
                            self.isAnswerable = isAnswerable
                            self.name = name
                            self.nodeId = nodeId
                            self.repositoryId = repositoryId
                            self.slug = slug
                            self.updatedAt = updatedAt
                        }
                        public enum CodingKeys: String, CodingKey {
                            case createdAt = "created_at"
                            case description
                            case emoji
                            case id
                            case isAnswerable = "is_answerable"
                            case name
                            case nodeId = "node_id"
                            case repositoryId = "repository_id"
                            case slug
                            case updatedAt = "updated_at"
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/category`.
                    public var category: Components.Schemas.WebhookDiscussionAnswered.DiscussionPayload.Value1Payload.CategoryPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/comments`.
                    public var comments: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/created_at`.
                    public var createdAt: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/html_url`.
                    public var htmlUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/locked`.
                    public var locked: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/number`.
                    public var number: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/reactions`.
                    public struct ReactionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/reactions/+1`.
                        public var _plus_1: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/reactions/-1`.
                        public var _hyphen_1: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/reactions/confused`.
                        public var confused: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/reactions/eyes`.
                        public var eyes: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/reactions/heart`.
                        public var heart: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/reactions/hooray`.
                        public var hooray: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/reactions/laugh`.
                        public var laugh: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/reactions/rocket`.
                        public var rocket: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/reactions/total_count`.
                        public var totalCount: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/reactions/url`.
                        public var url: Swift.String
                        /// Creates a new `ReactionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - _plus_1:
                        ///   - _hyphen_1:
                        ///   - confused:
                        ///   - eyes:
                        ///   - heart:
                        ///   - hooray:
                        ///   - laugh:
                        ///   - rocket:
                        ///   - totalCount:
                        ///   - url:
                        public init(
                            _plus_1: Swift.Int,
                            _hyphen_1: Swift.Int,
                            confused: Swift.Int,
                            eyes: Swift.Int,
                            heart: Swift.Int,
                            hooray: Swift.Int,
                            laugh: Swift.Int,
                            rocket: Swift.Int,
                            totalCount: Swift.Int,
                            url: Swift.String
                        ) {
                            self._plus_1 = _plus_1
                            self._hyphen_1 = _hyphen_1
                            self.confused = confused
                            self.eyes = eyes
                            self.heart = heart
                            self.hooray = hooray
                            self.laugh = laugh
                            self.rocket = rocket
                            self.totalCount = totalCount
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _plus_1 = "+1"
                            case _hyphen_1 = "-1"
                            case confused
                            case eyes
                            case heart
                            case hooray
                            case laugh
                            case rocket
                            case totalCount = "total_count"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/reactions`.
                    public var reactions: Components.Schemas.WebhookDiscussionAnswered.DiscussionPayload.Value1Payload.ReactionsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/repository_url`.
                    public var repositoryUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/state`.
                    @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case locked = "locked"
                        case converting = "converting"
                        case transferring = "transferring"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/state`.
                    public var state: Components.Schemas.WebhookDiscussionAnswered.DiscussionPayload.Value1Payload.StatePayload
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/timeline_url`.
                    public var timelineUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/title`.
                    public var title: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/updated_at`.
                    public var updatedAt: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/user`.
                    public struct UserPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/user/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/user/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/user/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/user/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/user/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/user/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/user/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/user/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/user/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/user/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/user/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/user/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/user/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/user/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/user/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/user/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/user/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/user/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/user/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/user/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/user/type`.
                        public var _type: Components.Schemas.WebhookDiscussionAnswered.DiscussionPayload.Value1Payload.UserPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/user/url`.
                        public var url: Swift.String?
                        /// Creates a new `UserPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookDiscussionAnswered.DiscussionPayload.Value1Payload.UserPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1/user`.
                    public var user: Components.Schemas.WebhookDiscussionAnswered.DiscussionPayload.Value1Payload.UserPayload?
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - activeLockReason:
                    ///   - answerChosenAt:
                    ///   - answerChosenBy:
                    ///   - answerHtmlUrl:
                    ///   - authorAssociation: How the author is associated with the repository.
                    ///   - body:
                    ///   - category:
                    ///   - comments:
                    ///   - createdAt:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - locked:
                    ///   - nodeId:
                    ///   - number:
                    ///   - reactions:
                    ///   - repositoryUrl:
                    ///   - state:
                    ///   - timelineUrl:
                    ///   - title:
                    ///   - updatedAt:
                    ///   - user:
                    public init(
                        activeLockReason: Swift.String? = nil,
                        answerChosenAt: Swift.String? = nil,
                        answerChosenBy: Components.Schemas.WebhookDiscussionAnswered.DiscussionPayload.Value1Payload.AnswerChosenByPayload? = nil,
                        answerHtmlUrl: Swift.String? = nil,
                        authorAssociation: Components.Schemas.WebhookDiscussionAnswered.DiscussionPayload.Value1Payload.AuthorAssociationPayload,
                        body: Swift.String,
                        category: Components.Schemas.WebhookDiscussionAnswered.DiscussionPayload.Value1Payload.CategoryPayload,
                        comments: Swift.Int,
                        createdAt: Swift.String,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        locked: Swift.Bool,
                        nodeId: Swift.String,
                        number: Swift.Int,
                        reactions: Components.Schemas.WebhookDiscussionAnswered.DiscussionPayload.Value1Payload.ReactionsPayload? = nil,
                        repositoryUrl: Swift.String,
                        state: Components.Schemas.WebhookDiscussionAnswered.DiscussionPayload.Value1Payload.StatePayload,
                        timelineUrl: Swift.String? = nil,
                        title: Swift.String,
                        updatedAt: Swift.String,
                        user: Components.Schemas.WebhookDiscussionAnswered.DiscussionPayload.Value1Payload.UserPayload? = nil
                    ) {
                        self.activeLockReason = activeLockReason
                        self.answerChosenAt = answerChosenAt
                        self.answerChosenBy = answerChosenBy
                        self.answerHtmlUrl = answerHtmlUrl
                        self.authorAssociation = authorAssociation
                        self.body = body
                        self.category = category
                        self.comments = comments
                        self.createdAt = createdAt
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.locked = locked
                        self.nodeId = nodeId
                        self.number = number
                        self.reactions = reactions
                        self.repositoryUrl = repositoryUrl
                        self.state = state
                        self.timelineUrl = timelineUrl
                        self.title = title
                        self.updatedAt = updatedAt
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case activeLockReason = "active_lock_reason"
                        case answerChosenAt = "answer_chosen_at"
                        case answerChosenBy = "answer_chosen_by"
                        case answerHtmlUrl = "answer_html_url"
                        case authorAssociation = "author_association"
                        case body
                        case category
                        case comments
                        case createdAt = "created_at"
                        case htmlUrl = "html_url"
                        case id
                        case locked
                        case nodeId = "node_id"
                        case number
                        case reactions
                        case repositoryUrl = "repository_url"
                        case state
                        case timelineUrl = "timeline_url"
                        case title
                        case updatedAt = "updated_at"
                        case user
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value1`.
                public var value1: Components.Schemas.WebhookDiscussionAnswered.DiscussionPayload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/active_lock_reason`.
                    public var activeLockReason: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/answer_chosen_at`.
                    public var answerChosenAt: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/answer_chosen_by`.
                    public struct AnswerChosenByPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/answer_chosen_by/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/answer_chosen_by/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/answer_chosen_by/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/answer_chosen_by/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/answer_chosen_by/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/answer_chosen_by/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/answer_chosen_by/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/answer_chosen_by/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/answer_chosen_by/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/answer_chosen_by/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/answer_chosen_by/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/answer_chosen_by/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/answer_chosen_by/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/answer_chosen_by/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/answer_chosen_by/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/answer_chosen_by/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/answer_chosen_by/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/answer_chosen_by/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/answer_chosen_by/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/answer_chosen_by/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/answer_chosen_by/type`.
                        public var _type: Components.Schemas.WebhookDiscussionAnswered.DiscussionPayload.Value2Payload.AnswerChosenByPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/answer_chosen_by/url`.
                        public var url: Swift.String?
                        /// Creates a new `AnswerChosenByPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookDiscussionAnswered.DiscussionPayload.Value2Payload.AnswerChosenByPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/answer_chosen_by`.
                    public var answerChosenBy: Components.Schemas.WebhookDiscussionAnswered.DiscussionPayload.Value2Payload.AnswerChosenByPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/answer_html_url`.
                    public var answerHtmlUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/author_association`.
                    public var authorAssociation: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/body`.
                    public var body: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/category`.
                    public struct CategoryPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/category/created_at`.
                        public var createdAt: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/category/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/category/emoji`.
                        public var emoji: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/category/id`.
                        public var id: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/category/is_answerable`.
                        public var isAnswerable: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/category/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/category/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/category/repository_id`.
                        public var repositoryId: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/category/slug`.
                        public var slug: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/category/updated_at`.
                        public var updatedAt: Swift.String?
                        /// Creates a new `CategoryPayload`.
                        ///
                        /// - Parameters:
                        ///   - createdAt:
                        ///   - description:
                        ///   - emoji:
                        ///   - id:
                        ///   - isAnswerable:
                        ///   - name:
                        ///   - nodeId:
                        ///   - repositoryId:
                        ///   - slug:
                        ///   - updatedAt:
                        public init(
                            createdAt: Swift.String? = nil,
                            description: Swift.String? = nil,
                            emoji: Swift.String? = nil,
                            id: Swift.Int? = nil,
                            isAnswerable: Swift.Bool,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            repositoryId: Swift.Int? = nil,
                            slug: Swift.String? = nil,
                            updatedAt: Swift.String? = nil
                        ) {
                            self.createdAt = createdAt
                            self.description = description
                            self.emoji = emoji
                            self.id = id
                            self.isAnswerable = isAnswerable
                            self.name = name
                            self.nodeId = nodeId
                            self.repositoryId = repositoryId
                            self.slug = slug
                            self.updatedAt = updatedAt
                        }
                        public enum CodingKeys: String, CodingKey {
                            case createdAt = "created_at"
                            case description
                            case emoji
                            case id
                            case isAnswerable = "is_answerable"
                            case name
                            case nodeId = "node_id"
                            case repositoryId = "repository_id"
                            case slug
                            case updatedAt = "updated_at"
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/category`.
                    public var category: Components.Schemas.WebhookDiscussionAnswered.DiscussionPayload.Value2Payload.CategoryPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/comments`.
                    public var comments: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/created_at`.
                    public var createdAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/id`.
                    public var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/locked`.
                    public var locked: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/number`.
                    public var number: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/reactions`.
                    public struct ReactionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/reactions/+1`.
                        public var _plus_1: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/reactions/-1`.
                        public var _hyphen_1: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/reactions/confused`.
                        public var confused: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/reactions/eyes`.
                        public var eyes: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/reactions/heart`.
                        public var heart: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/reactions/hooray`.
                        public var hooray: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/reactions/laugh`.
                        public var laugh: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/reactions/rocket`.
                        public var rocket: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/reactions/total_count`.
                        public var totalCount: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/reactions/url`.
                        public var url: Swift.String?
                        /// Creates a new `ReactionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - _plus_1:
                        ///   - _hyphen_1:
                        ///   - confused:
                        ///   - eyes:
                        ///   - heart:
                        ///   - hooray:
                        ///   - laugh:
                        ///   - rocket:
                        ///   - totalCount:
                        ///   - url:
                        public init(
                            _plus_1: Swift.Int? = nil,
                            _hyphen_1: Swift.Int? = nil,
                            confused: Swift.Int? = nil,
                            eyes: Swift.Int? = nil,
                            heart: Swift.Int? = nil,
                            hooray: Swift.Int? = nil,
                            laugh: Swift.Int? = nil,
                            rocket: Swift.Int? = nil,
                            totalCount: Swift.Int? = nil,
                            url: Swift.String? = nil
                        ) {
                            self._plus_1 = _plus_1
                            self._hyphen_1 = _hyphen_1
                            self.confused = confused
                            self.eyes = eyes
                            self.heart = heart
                            self.hooray = hooray
                            self.laugh = laugh
                            self.rocket = rocket
                            self.totalCount = totalCount
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _plus_1 = "+1"
                            case _hyphen_1 = "-1"
                            case confused
                            case eyes
                            case heart
                            case hooray
                            case laugh
                            case rocket
                            case totalCount = "total_count"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/reactions`.
                    public var reactions: Components.Schemas.WebhookDiscussionAnswered.DiscussionPayload.Value2Payload.ReactionsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/repository_url`.
                    public var repositoryUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/state`.
                    public var state: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/timeline_url`.
                    public var timelineUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/title`.
                    public var title: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/updated_at`.
                    public var updatedAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/user`.
                    public struct UserPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/user/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/user/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/user/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/user/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/user/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/user/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/user/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/user/id`.
                        public var id: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/user/login`.
                        public var login: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/user/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/user/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/user/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/user/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/user/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/user/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/user/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/user/type`.
                        public var _type: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/user/url`.
                        public var url: Swift.String?
                        /// Creates a new `UserPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int? = nil,
                            login: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2/user`.
                    public var user: Components.Schemas.WebhookDiscussionAnswered.DiscussionPayload.Value2Payload.UserPayload?
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - activeLockReason:
                    ///   - answerChosenAt:
                    ///   - answerChosenBy:
                    ///   - answerHtmlUrl:
                    ///   - authorAssociation:
                    ///   - body:
                    ///   - category:
                    ///   - comments:
                    ///   - createdAt:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - locked:
                    ///   - nodeId:
                    ///   - number:
                    ///   - reactions:
                    ///   - repositoryUrl:
                    ///   - state:
                    ///   - timelineUrl:
                    ///   - title:
                    ///   - updatedAt:
                    ///   - user:
                    public init(
                        activeLockReason: Swift.String? = nil,
                        answerChosenAt: Swift.String,
                        answerChosenBy: Components.Schemas.WebhookDiscussionAnswered.DiscussionPayload.Value2Payload.AnswerChosenByPayload? = nil,
                        answerHtmlUrl: Swift.String,
                        authorAssociation: Swift.String? = nil,
                        body: Swift.String? = nil,
                        category: Components.Schemas.WebhookDiscussionAnswered.DiscussionPayload.Value2Payload.CategoryPayload,
                        comments: Swift.Int? = nil,
                        createdAt: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int? = nil,
                        locked: Swift.Bool? = nil,
                        nodeId: Swift.String? = nil,
                        number: Swift.Int? = nil,
                        reactions: Components.Schemas.WebhookDiscussionAnswered.DiscussionPayload.Value2Payload.ReactionsPayload? = nil,
                        repositoryUrl: Swift.String? = nil,
                        state: Swift.String? = nil,
                        timelineUrl: Swift.String? = nil,
                        title: Swift.String? = nil,
                        updatedAt: Swift.String? = nil,
                        user: Components.Schemas.WebhookDiscussionAnswered.DiscussionPayload.Value2Payload.UserPayload? = nil
                    ) {
                        self.activeLockReason = activeLockReason
                        self.answerChosenAt = answerChosenAt
                        self.answerChosenBy = answerChosenBy
                        self.answerHtmlUrl = answerHtmlUrl
                        self.authorAssociation = authorAssociation
                        self.body = body
                        self.category = category
                        self.comments = comments
                        self.createdAt = createdAt
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.locked = locked
                        self.nodeId = nodeId
                        self.number = number
                        self.reactions = reactions
                        self.repositoryUrl = repositoryUrl
                        self.state = state
                        self.timelineUrl = timelineUrl
                        self.title = title
                        self.updatedAt = updatedAt
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case activeLockReason = "active_lock_reason"
                        case answerChosenAt = "answer_chosen_at"
                        case answerChosenBy = "answer_chosen_by"
                        case answerHtmlUrl = "answer_html_url"
                        case authorAssociation = "author_association"
                        case body
                        case category
                        case comments
                        case createdAt = "created_at"
                        case htmlUrl = "html_url"
                        case id
                        case locked
                        case nodeId = "node_id"
                        case number
                        case reactions
                        case repositoryUrl = "repository_url"
                        case state
                        case timelineUrl = "timeline_url"
                        case title
                        case updatedAt = "updated_at"
                        case user
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion/value2`.
                public var value2: Components.Schemas.WebhookDiscussionAnswered.DiscussionPayload.Value2Payload
                /// Creates a new `DiscussionPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.WebhookDiscussionAnswered.DiscussionPayload.Value1Payload,
                    value2: Components.Schemas.WebhookDiscussionAnswered.DiscussionPayload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/discussion`.
            public var discussion: Components.Schemas.WebhookDiscussionAnswered.DiscussionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-answered/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Creates a new `WebhookDiscussionAnswered`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - answer:
            ///   - discussion:
            ///   - enterprise:
            ///   - installation:
            ///   - organization:
            ///   - repository:
            ///   - sender:
            public init(
                action: Components.Schemas.WebhookDiscussionAnswered.ActionPayload,
                answer: Components.Schemas.WebhookDiscussionAnswered.AnswerPayload,
                discussion: Components.Schemas.WebhookDiscussionAnswered.DiscussionPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser
            ) {
                self.action = action
                self.answer = answer
                self.discussion = discussion
                self.enterprise = enterprise
                self.installation = installation
                self.organization = organization
                self.repository = repository
                self.sender = sender
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case answer
                case discussion
                case enterprise
                case installation
                case organization
                case repository
                case sender
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed`.
        public struct WebhookDiscussionCategoryChanged: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case categoryChanged = "category_changed"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/action`.
            public var action: Components.Schemas.WebhookDiscussionCategoryChanged.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/changes`.
            public struct ChangesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/changes/category`.
                public struct CategoryPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/changes/category/from`.
                    public struct FromPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/changes/category/from/created_at`.
                        public var createdAt: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/changes/category/from/description`.
                        public var description: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/changes/category/from/emoji`.
                        public var emoji: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/changes/category/from/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/changes/category/from/is_answerable`.
                        public var isAnswerable: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/changes/category/from/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/changes/category/from/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/changes/category/from/repository_id`.
                        public var repositoryId: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/changes/category/from/slug`.
                        public var slug: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/changes/category/from/updated_at`.
                        public var updatedAt: Swift.String
                        /// Creates a new `FromPayload`.
                        ///
                        /// - Parameters:
                        ///   - createdAt:
                        ///   - description:
                        ///   - emoji:
                        ///   - id:
                        ///   - isAnswerable:
                        ///   - name:
                        ///   - nodeId:
                        ///   - repositoryId:
                        ///   - slug:
                        ///   - updatedAt:
                        public init(
                            createdAt: Swift.String,
                            description: Swift.String,
                            emoji: Swift.String,
                            id: Swift.Int,
                            isAnswerable: Swift.Bool,
                            name: Swift.String,
                            nodeId: Swift.String? = nil,
                            repositoryId: Swift.Int,
                            slug: Swift.String,
                            updatedAt: Swift.String
                        ) {
                            self.createdAt = createdAt
                            self.description = description
                            self.emoji = emoji
                            self.id = id
                            self.isAnswerable = isAnswerable
                            self.name = name
                            self.nodeId = nodeId
                            self.repositoryId = repositoryId
                            self.slug = slug
                            self.updatedAt = updatedAt
                        }
                        public enum CodingKeys: String, CodingKey {
                            case createdAt = "created_at"
                            case description
                            case emoji
                            case id
                            case isAnswerable = "is_answerable"
                            case name
                            case nodeId = "node_id"
                            case repositoryId = "repository_id"
                            case slug
                            case updatedAt = "updated_at"
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/changes/category/from`.
                    public var from: Components.Schemas.WebhookDiscussionCategoryChanged.ChangesPayload.CategoryPayload.FromPayload
                    /// Creates a new `CategoryPayload`.
                    ///
                    /// - Parameters:
                    ///   - from:
                    public init(from: Components.Schemas.WebhookDiscussionCategoryChanged.ChangesPayload.CategoryPayload.FromPayload) {
                        self.from = from
                    }
                    public enum CodingKeys: String, CodingKey {
                        case from
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/changes/category`.
                public var category: Components.Schemas.WebhookDiscussionCategoryChanged.ChangesPayload.CategoryPayload
                /// Creates a new `ChangesPayload`.
                ///
                /// - Parameters:
                ///   - category:
                public init(category: Components.Schemas.WebhookDiscussionCategoryChanged.ChangesPayload.CategoryPayload) {
                    self.category = category
                }
                public enum CodingKeys: String, CodingKey {
                    case category
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/changes`.
            public var changes: Components.Schemas.WebhookDiscussionCategoryChanged.ChangesPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion`.
            public struct DiscussionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/active_lock_reason`.
                public var activeLockReason: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/answer_chosen_at`.
                public var answerChosenAt: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/answer_chosen_by`.
                public struct AnswerChosenByPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/answer_chosen_by/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/answer_chosen_by/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/answer_chosen_by/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/answer_chosen_by/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/answer_chosen_by/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/answer_chosen_by/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/answer_chosen_by/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/answer_chosen_by/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/answer_chosen_by/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/answer_chosen_by/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/answer_chosen_by/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/answer_chosen_by/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/answer_chosen_by/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/answer_chosen_by/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/answer_chosen_by/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/answer_chosen_by/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/answer_chosen_by/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/answer_chosen_by/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/answer_chosen_by/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/answer_chosen_by/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/answer_chosen_by/type`.
                    public var _type: Components.Schemas.WebhookDiscussionCategoryChanged.DiscussionPayload.AnswerChosenByPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/answer_chosen_by/url`.
                    public var url: Swift.String?
                    /// Creates a new `AnswerChosenByPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookDiscussionCategoryChanged.DiscussionPayload.AnswerChosenByPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/answer_chosen_by`.
                public var answerChosenBy: Components.Schemas.WebhookDiscussionCategoryChanged.DiscussionPayload.AnswerChosenByPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/answer_html_url`.
                public var answerHtmlUrl: Swift.String?
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/author_association`.
                @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case collaborator = "COLLABORATOR"
                    case contributor = "CONTRIBUTOR"
                    case firstTimer = "FIRST_TIMER"
                    case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                    case mannequin = "MANNEQUIN"
                    case member = "MEMBER"
                    case none = "NONE"
                    case owner = "OWNER"
                }
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/author_association`.
                public var authorAssociation: Components.Schemas.WebhookDiscussionCategoryChanged.DiscussionPayload.AuthorAssociationPayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/body`.
                public var body: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/category`.
                public struct CategoryPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/category/created_at`.
                    public var createdAt: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/category/description`.
                    public var description: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/category/emoji`.
                    public var emoji: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/category/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/category/is_answerable`.
                    public var isAnswerable: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/category/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/category/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/category/repository_id`.
                    public var repositoryId: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/category/slug`.
                    public var slug: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/category/updated_at`.
                    public var updatedAt: Swift.String
                    /// Creates a new `CategoryPayload`.
                    ///
                    /// - Parameters:
                    ///   - createdAt:
                    ///   - description:
                    ///   - emoji:
                    ///   - id:
                    ///   - isAnswerable:
                    ///   - name:
                    ///   - nodeId:
                    ///   - repositoryId:
                    ///   - slug:
                    ///   - updatedAt:
                    public init(
                        createdAt: Swift.String,
                        description: Swift.String,
                        emoji: Swift.String,
                        id: Swift.Int,
                        isAnswerable: Swift.Bool,
                        name: Swift.String,
                        nodeId: Swift.String? = nil,
                        repositoryId: Swift.Int,
                        slug: Swift.String,
                        updatedAt: Swift.String
                    ) {
                        self.createdAt = createdAt
                        self.description = description
                        self.emoji = emoji
                        self.id = id
                        self.isAnswerable = isAnswerable
                        self.name = name
                        self.nodeId = nodeId
                        self.repositoryId = repositoryId
                        self.slug = slug
                        self.updatedAt = updatedAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case createdAt = "created_at"
                        case description
                        case emoji
                        case id
                        case isAnswerable = "is_answerable"
                        case name
                        case nodeId = "node_id"
                        case repositoryId = "repository_id"
                        case slug
                        case updatedAt = "updated_at"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/category`.
                public var category: Components.Schemas.WebhookDiscussionCategoryChanged.DiscussionPayload.CategoryPayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/comments`.
                public var comments: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/created_at`.
                public var createdAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/html_url`.
                public var htmlUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/locked`.
                public var locked: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/number`.
                public var number: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/reactions`.
                public struct ReactionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/reactions/+1`.
                    public var _plus_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/reactions/-1`.
                    public var _hyphen_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/reactions/confused`.
                    public var confused: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/reactions/eyes`.
                    public var eyes: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/reactions/heart`.
                    public var heart: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/reactions/hooray`.
                    public var hooray: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/reactions/laugh`.
                    public var laugh: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/reactions/rocket`.
                    public var rocket: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/reactions/total_count`.
                    public var totalCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/reactions/url`.
                    public var url: Swift.String
                    /// Creates a new `ReactionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - _plus_1:
                    ///   - _hyphen_1:
                    ///   - confused:
                    ///   - eyes:
                    ///   - heart:
                    ///   - hooray:
                    ///   - laugh:
                    ///   - rocket:
                    ///   - totalCount:
                    ///   - url:
                    public init(
                        _plus_1: Swift.Int,
                        _hyphen_1: Swift.Int,
                        confused: Swift.Int,
                        eyes: Swift.Int,
                        heart: Swift.Int,
                        hooray: Swift.Int,
                        laugh: Swift.Int,
                        rocket: Swift.Int,
                        totalCount: Swift.Int,
                        url: Swift.String
                    ) {
                        self._plus_1 = _plus_1
                        self._hyphen_1 = _hyphen_1
                        self.confused = confused
                        self.eyes = eyes
                        self.heart = heart
                        self.hooray = hooray
                        self.laugh = laugh
                        self.rocket = rocket
                        self.totalCount = totalCount
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _plus_1 = "+1"
                        case _hyphen_1 = "-1"
                        case confused
                        case eyes
                        case heart
                        case hooray
                        case laugh
                        case rocket
                        case totalCount = "total_count"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/reactions`.
                public var reactions: Components.Schemas.WebhookDiscussionCategoryChanged.DiscussionPayload.ReactionsPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/repository_url`.
                public var repositoryUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/state`.
                @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case open = "open"
                    case locked = "locked"
                    case converting = "converting"
                    case transferring = "transferring"
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/state`.
                public var state: Components.Schemas.WebhookDiscussionCategoryChanged.DiscussionPayload.StatePayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/timeline_url`.
                public var timelineUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/title`.
                public var title: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/updated_at`.
                public var updatedAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/user`.
                public struct UserPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/user/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/user/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/user/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/user/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/user/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/user/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/user/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/user/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/user/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/user/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/user/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/user/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/user/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/user/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/user/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/user/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/user/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/user/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/user/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/user/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/user/type`.
                    public var _type: Components.Schemas.WebhookDiscussionCategoryChanged.DiscussionPayload.UserPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/user/url`.
                    public var url: Swift.String?
                    /// Creates a new `UserPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookDiscussionCategoryChanged.DiscussionPayload.UserPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion/user`.
                public var user: Components.Schemas.WebhookDiscussionCategoryChanged.DiscussionPayload.UserPayload?
                /// Creates a new `DiscussionPayload`.
                ///
                /// - Parameters:
                ///   - activeLockReason:
                ///   - answerChosenAt:
                ///   - answerChosenBy:
                ///   - answerHtmlUrl:
                ///   - authorAssociation: How the author is associated with the repository.
                ///   - body:
                ///   - category:
                ///   - comments:
                ///   - createdAt:
                ///   - htmlUrl:
                ///   - id:
                ///   - locked:
                ///   - nodeId:
                ///   - number:
                ///   - reactions:
                ///   - repositoryUrl:
                ///   - state:
                ///   - timelineUrl:
                ///   - title:
                ///   - updatedAt:
                ///   - user:
                public init(
                    activeLockReason: Swift.String? = nil,
                    answerChosenAt: Swift.String? = nil,
                    answerChosenBy: Components.Schemas.WebhookDiscussionCategoryChanged.DiscussionPayload.AnswerChosenByPayload? = nil,
                    answerHtmlUrl: Swift.String? = nil,
                    authorAssociation: Components.Schemas.WebhookDiscussionCategoryChanged.DiscussionPayload.AuthorAssociationPayload,
                    body: Swift.String,
                    category: Components.Schemas.WebhookDiscussionCategoryChanged.DiscussionPayload.CategoryPayload,
                    comments: Swift.Int,
                    createdAt: Swift.String,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    locked: Swift.Bool,
                    nodeId: Swift.String,
                    number: Swift.Int,
                    reactions: Components.Schemas.WebhookDiscussionCategoryChanged.DiscussionPayload.ReactionsPayload? = nil,
                    repositoryUrl: Swift.String,
                    state: Components.Schemas.WebhookDiscussionCategoryChanged.DiscussionPayload.StatePayload,
                    timelineUrl: Swift.String? = nil,
                    title: Swift.String,
                    updatedAt: Swift.String,
                    user: Components.Schemas.WebhookDiscussionCategoryChanged.DiscussionPayload.UserPayload? = nil
                ) {
                    self.activeLockReason = activeLockReason
                    self.answerChosenAt = answerChosenAt
                    self.answerChosenBy = answerChosenBy
                    self.answerHtmlUrl = answerHtmlUrl
                    self.authorAssociation = authorAssociation
                    self.body = body
                    self.category = category
                    self.comments = comments
                    self.createdAt = createdAt
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.locked = locked
                    self.nodeId = nodeId
                    self.number = number
                    self.reactions = reactions
                    self.repositoryUrl = repositoryUrl
                    self.state = state
                    self.timelineUrl = timelineUrl
                    self.title = title
                    self.updatedAt = updatedAt
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case activeLockReason = "active_lock_reason"
                    case answerChosenAt = "answer_chosen_at"
                    case answerChosenBy = "answer_chosen_by"
                    case answerHtmlUrl = "answer_html_url"
                    case authorAssociation = "author_association"
                    case body
                    case category
                    case comments
                    case createdAt = "created_at"
                    case htmlUrl = "html_url"
                    case id
                    case locked
                    case nodeId = "node_id"
                    case number
                    case reactions
                    case repositoryUrl = "repository_url"
                    case state
                    case timelineUrl = "timeline_url"
                    case title
                    case updatedAt = "updated_at"
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/discussion`.
            public var discussion: Components.Schemas.WebhookDiscussionCategoryChanged.DiscussionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-category-changed/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Creates a new `WebhookDiscussionCategoryChanged`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - changes:
            ///   - discussion:
            ///   - enterprise:
            ///   - installation:
            ///   - organization:
            ///   - repository:
            ///   - sender:
            public init(
                action: Components.Schemas.WebhookDiscussionCategoryChanged.ActionPayload,
                changes: Components.Schemas.WebhookDiscussionCategoryChanged.ChangesPayload,
                discussion: Components.Schemas.WebhookDiscussionCategoryChanged.DiscussionPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser
            ) {
                self.action = action
                self.changes = changes
                self.discussion = discussion
                self.enterprise = enterprise
                self.installation = installation
                self.organization = organization
                self.repository = repository
                self.sender = sender
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case changes
                case discussion
                case enterprise
                case installation
                case organization
                case repository
                case sender
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created`.
        public struct WebhookDiscussionCommentCreated: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case created = "created"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/action`.
            public var action: Components.Schemas.WebhookDiscussionCommentCreated.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment`.
            public struct CommentPayload: Codable, Hashable, Sendable {
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/author_association`.
                @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case collaborator = "COLLABORATOR"
                    case contributor = "CONTRIBUTOR"
                    case firstTimer = "FIRST_TIMER"
                    case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                    case mannequin = "MANNEQUIN"
                    case member = "MEMBER"
                    case none = "NONE"
                    case owner = "OWNER"
                }
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/author_association`.
                public var authorAssociation: Components.Schemas.WebhookDiscussionCommentCreated.CommentPayload.AuthorAssociationPayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/body`.
                public var body: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/child_comment_count`.
                public var childCommentCount: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/created_at`.
                public var createdAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/discussion_id`.
                public var discussionId: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/html_url`.
                public var htmlUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/parent_id`.
                public var parentId: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/reactions`.
                public struct ReactionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/reactions/+1`.
                    public var _plus_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/reactions/-1`.
                    public var _hyphen_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/reactions/confused`.
                    public var confused: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/reactions/eyes`.
                    public var eyes: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/reactions/heart`.
                    public var heart: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/reactions/hooray`.
                    public var hooray: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/reactions/laugh`.
                    public var laugh: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/reactions/rocket`.
                    public var rocket: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/reactions/total_count`.
                    public var totalCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/reactions/url`.
                    public var url: Swift.String
                    /// Creates a new `ReactionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - _plus_1:
                    ///   - _hyphen_1:
                    ///   - confused:
                    ///   - eyes:
                    ///   - heart:
                    ///   - hooray:
                    ///   - laugh:
                    ///   - rocket:
                    ///   - totalCount:
                    ///   - url:
                    public init(
                        _plus_1: Swift.Int,
                        _hyphen_1: Swift.Int,
                        confused: Swift.Int,
                        eyes: Swift.Int,
                        heart: Swift.Int,
                        hooray: Swift.Int,
                        laugh: Swift.Int,
                        rocket: Swift.Int,
                        totalCount: Swift.Int,
                        url: Swift.String
                    ) {
                        self._plus_1 = _plus_1
                        self._hyphen_1 = _hyphen_1
                        self.confused = confused
                        self.eyes = eyes
                        self.heart = heart
                        self.hooray = hooray
                        self.laugh = laugh
                        self.rocket = rocket
                        self.totalCount = totalCount
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _plus_1 = "+1"
                        case _hyphen_1 = "-1"
                        case confused
                        case eyes
                        case heart
                        case hooray
                        case laugh
                        case rocket
                        case totalCount = "total_count"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/reactions`.
                public var reactions: Components.Schemas.WebhookDiscussionCommentCreated.CommentPayload.ReactionsPayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/repository_url`.
                public var repositoryUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/updated_at`.
                public var updatedAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/user`.
                public struct UserPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/user/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/user/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/user/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/user/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/user/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/user/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/user/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/user/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/user/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/user/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/user/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/user/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/user/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/user/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/user/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/user/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/user/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/user/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/user/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/user/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/user/type`.
                    public var _type: Components.Schemas.WebhookDiscussionCommentCreated.CommentPayload.UserPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/user/url`.
                    public var url: Swift.String?
                    /// Creates a new `UserPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookDiscussionCommentCreated.CommentPayload.UserPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment/user`.
                public var user: Components.Schemas.WebhookDiscussionCommentCreated.CommentPayload.UserPayload?
                /// Creates a new `CommentPayload`.
                ///
                /// - Parameters:
                ///   - authorAssociation: How the author is associated with the repository.
                ///   - body:
                ///   - childCommentCount:
                ///   - createdAt:
                ///   - discussionId:
                ///   - htmlUrl:
                ///   - id:
                ///   - nodeId:
                ///   - parentId:
                ///   - reactions:
                ///   - repositoryUrl:
                ///   - updatedAt:
                ///   - user:
                public init(
                    authorAssociation: Components.Schemas.WebhookDiscussionCommentCreated.CommentPayload.AuthorAssociationPayload,
                    body: Swift.String,
                    childCommentCount: Swift.Int,
                    createdAt: Swift.String,
                    discussionId: Swift.Int,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    nodeId: Swift.String,
                    parentId: Swift.Int? = nil,
                    reactions: Components.Schemas.WebhookDiscussionCommentCreated.CommentPayload.ReactionsPayload,
                    repositoryUrl: Swift.String,
                    updatedAt: Swift.String,
                    user: Components.Schemas.WebhookDiscussionCommentCreated.CommentPayload.UserPayload? = nil
                ) {
                    self.authorAssociation = authorAssociation
                    self.body = body
                    self.childCommentCount = childCommentCount
                    self.createdAt = createdAt
                    self.discussionId = discussionId
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.nodeId = nodeId
                    self.parentId = parentId
                    self.reactions = reactions
                    self.repositoryUrl = repositoryUrl
                    self.updatedAt = updatedAt
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case authorAssociation = "author_association"
                    case body
                    case childCommentCount = "child_comment_count"
                    case createdAt = "created_at"
                    case discussionId = "discussion_id"
                    case htmlUrl = "html_url"
                    case id
                    case nodeId = "node_id"
                    case parentId = "parent_id"
                    case reactions
                    case repositoryUrl = "repository_url"
                    case updatedAt = "updated_at"
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/comment`.
            public var comment: Components.Schemas.WebhookDiscussionCommentCreated.CommentPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion`.
            public struct DiscussionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/active_lock_reason`.
                public var activeLockReason: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/answer_chosen_at`.
                public var answerChosenAt: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/answer_chosen_by`.
                public struct AnswerChosenByPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/answer_chosen_by/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/answer_chosen_by/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/answer_chosen_by/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/answer_chosen_by/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/answer_chosen_by/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/answer_chosen_by/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/answer_chosen_by/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/answer_chosen_by/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/answer_chosen_by/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/answer_chosen_by/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/answer_chosen_by/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/answer_chosen_by/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/answer_chosen_by/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/answer_chosen_by/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/answer_chosen_by/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/answer_chosen_by/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/answer_chosen_by/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/answer_chosen_by/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/answer_chosen_by/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/answer_chosen_by/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/answer_chosen_by/type`.
                    public var _type: Components.Schemas.WebhookDiscussionCommentCreated.DiscussionPayload.AnswerChosenByPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/answer_chosen_by/url`.
                    public var url: Swift.String?
                    /// Creates a new `AnswerChosenByPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookDiscussionCommentCreated.DiscussionPayload.AnswerChosenByPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/answer_chosen_by`.
                public var answerChosenBy: Components.Schemas.WebhookDiscussionCommentCreated.DiscussionPayload.AnswerChosenByPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/answer_html_url`.
                public var answerHtmlUrl: Swift.String?
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/author_association`.
                @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case collaborator = "COLLABORATOR"
                    case contributor = "CONTRIBUTOR"
                    case firstTimer = "FIRST_TIMER"
                    case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                    case mannequin = "MANNEQUIN"
                    case member = "MEMBER"
                    case none = "NONE"
                    case owner = "OWNER"
                }
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/author_association`.
                public var authorAssociation: Components.Schemas.WebhookDiscussionCommentCreated.DiscussionPayload.AuthorAssociationPayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/body`.
                public var body: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/category`.
                public struct CategoryPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/category/created_at`.
                    public var createdAt: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/category/description`.
                    public var description: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/category/emoji`.
                    public var emoji: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/category/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/category/is_answerable`.
                    public var isAnswerable: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/category/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/category/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/category/repository_id`.
                    public var repositoryId: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/category/slug`.
                    public var slug: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/category/updated_at`.
                    public var updatedAt: Swift.String
                    /// Creates a new `CategoryPayload`.
                    ///
                    /// - Parameters:
                    ///   - createdAt:
                    ///   - description:
                    ///   - emoji:
                    ///   - id:
                    ///   - isAnswerable:
                    ///   - name:
                    ///   - nodeId:
                    ///   - repositoryId:
                    ///   - slug:
                    ///   - updatedAt:
                    public init(
                        createdAt: Swift.String,
                        description: Swift.String,
                        emoji: Swift.String,
                        id: Swift.Int,
                        isAnswerable: Swift.Bool,
                        name: Swift.String,
                        nodeId: Swift.String? = nil,
                        repositoryId: Swift.Int,
                        slug: Swift.String,
                        updatedAt: Swift.String
                    ) {
                        self.createdAt = createdAt
                        self.description = description
                        self.emoji = emoji
                        self.id = id
                        self.isAnswerable = isAnswerable
                        self.name = name
                        self.nodeId = nodeId
                        self.repositoryId = repositoryId
                        self.slug = slug
                        self.updatedAt = updatedAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case createdAt = "created_at"
                        case description
                        case emoji
                        case id
                        case isAnswerable = "is_answerable"
                        case name
                        case nodeId = "node_id"
                        case repositoryId = "repository_id"
                        case slug
                        case updatedAt = "updated_at"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/category`.
                public var category: Components.Schemas.WebhookDiscussionCommentCreated.DiscussionPayload.CategoryPayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/comments`.
                public var comments: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/created_at`.
                public var createdAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/html_url`.
                public var htmlUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/locked`.
                public var locked: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/number`.
                public var number: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/reactions`.
                public struct ReactionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/reactions/+1`.
                    public var _plus_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/reactions/-1`.
                    public var _hyphen_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/reactions/confused`.
                    public var confused: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/reactions/eyes`.
                    public var eyes: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/reactions/heart`.
                    public var heart: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/reactions/hooray`.
                    public var hooray: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/reactions/laugh`.
                    public var laugh: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/reactions/rocket`.
                    public var rocket: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/reactions/total_count`.
                    public var totalCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/reactions/url`.
                    public var url: Swift.String
                    /// Creates a new `ReactionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - _plus_1:
                    ///   - _hyphen_1:
                    ///   - confused:
                    ///   - eyes:
                    ///   - heart:
                    ///   - hooray:
                    ///   - laugh:
                    ///   - rocket:
                    ///   - totalCount:
                    ///   - url:
                    public init(
                        _plus_1: Swift.Int,
                        _hyphen_1: Swift.Int,
                        confused: Swift.Int,
                        eyes: Swift.Int,
                        heart: Swift.Int,
                        hooray: Swift.Int,
                        laugh: Swift.Int,
                        rocket: Swift.Int,
                        totalCount: Swift.Int,
                        url: Swift.String
                    ) {
                        self._plus_1 = _plus_1
                        self._hyphen_1 = _hyphen_1
                        self.confused = confused
                        self.eyes = eyes
                        self.heart = heart
                        self.hooray = hooray
                        self.laugh = laugh
                        self.rocket = rocket
                        self.totalCount = totalCount
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _plus_1 = "+1"
                        case _hyphen_1 = "-1"
                        case confused
                        case eyes
                        case heart
                        case hooray
                        case laugh
                        case rocket
                        case totalCount = "total_count"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/reactions`.
                public var reactions: Components.Schemas.WebhookDiscussionCommentCreated.DiscussionPayload.ReactionsPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/repository_url`.
                public var repositoryUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/state`.
                @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case open = "open"
                    case locked = "locked"
                    case converting = "converting"
                    case transferring = "transferring"
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/state`.
                public var state: Components.Schemas.WebhookDiscussionCommentCreated.DiscussionPayload.StatePayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/timeline_url`.
                public var timelineUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/title`.
                public var title: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/updated_at`.
                public var updatedAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/user`.
                public struct UserPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/user/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/user/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/user/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/user/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/user/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/user/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/user/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/user/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/user/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/user/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/user/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/user/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/user/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/user/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/user/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/user/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/user/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/user/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/user/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/user/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/user/type`.
                    public var _type: Components.Schemas.WebhookDiscussionCommentCreated.DiscussionPayload.UserPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/user/url`.
                    public var url: Swift.String?
                    /// Creates a new `UserPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookDiscussionCommentCreated.DiscussionPayload.UserPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion/user`.
                public var user: Components.Schemas.WebhookDiscussionCommentCreated.DiscussionPayload.UserPayload?
                /// Creates a new `DiscussionPayload`.
                ///
                /// - Parameters:
                ///   - activeLockReason:
                ///   - answerChosenAt:
                ///   - answerChosenBy:
                ///   - answerHtmlUrl:
                ///   - authorAssociation: How the author is associated with the repository.
                ///   - body:
                ///   - category:
                ///   - comments:
                ///   - createdAt:
                ///   - htmlUrl:
                ///   - id:
                ///   - locked:
                ///   - nodeId:
                ///   - number:
                ///   - reactions:
                ///   - repositoryUrl:
                ///   - state:
                ///   - timelineUrl:
                ///   - title:
                ///   - updatedAt:
                ///   - user:
                public init(
                    activeLockReason: Swift.String? = nil,
                    answerChosenAt: Swift.String? = nil,
                    answerChosenBy: Components.Schemas.WebhookDiscussionCommentCreated.DiscussionPayload.AnswerChosenByPayload? = nil,
                    answerHtmlUrl: Swift.String? = nil,
                    authorAssociation: Components.Schemas.WebhookDiscussionCommentCreated.DiscussionPayload.AuthorAssociationPayload,
                    body: Swift.String? = nil,
                    category: Components.Schemas.WebhookDiscussionCommentCreated.DiscussionPayload.CategoryPayload,
                    comments: Swift.Int,
                    createdAt: Swift.String,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    locked: Swift.Bool,
                    nodeId: Swift.String,
                    number: Swift.Int,
                    reactions: Components.Schemas.WebhookDiscussionCommentCreated.DiscussionPayload.ReactionsPayload? = nil,
                    repositoryUrl: Swift.String,
                    state: Components.Schemas.WebhookDiscussionCommentCreated.DiscussionPayload.StatePayload,
                    timelineUrl: Swift.String? = nil,
                    title: Swift.String,
                    updatedAt: Swift.String,
                    user: Components.Schemas.WebhookDiscussionCommentCreated.DiscussionPayload.UserPayload? = nil
                ) {
                    self.activeLockReason = activeLockReason
                    self.answerChosenAt = answerChosenAt
                    self.answerChosenBy = answerChosenBy
                    self.answerHtmlUrl = answerHtmlUrl
                    self.authorAssociation = authorAssociation
                    self.body = body
                    self.category = category
                    self.comments = comments
                    self.createdAt = createdAt
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.locked = locked
                    self.nodeId = nodeId
                    self.number = number
                    self.reactions = reactions
                    self.repositoryUrl = repositoryUrl
                    self.state = state
                    self.timelineUrl = timelineUrl
                    self.title = title
                    self.updatedAt = updatedAt
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case activeLockReason = "active_lock_reason"
                    case answerChosenAt = "answer_chosen_at"
                    case answerChosenBy = "answer_chosen_by"
                    case answerHtmlUrl = "answer_html_url"
                    case authorAssociation = "author_association"
                    case body
                    case category
                    case comments
                    case createdAt = "created_at"
                    case htmlUrl = "html_url"
                    case id
                    case locked
                    case nodeId = "node_id"
                    case number
                    case reactions
                    case repositoryUrl = "repository_url"
                    case state
                    case timelineUrl = "timeline_url"
                    case title
                    case updatedAt = "updated_at"
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/discussion`.
            public var discussion: Components.Schemas.WebhookDiscussionCommentCreated.DiscussionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-created/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Creates a new `WebhookDiscussionCommentCreated`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - comment:
            ///   - discussion:
            ///   - enterprise:
            ///   - installation:
            ///   - organization:
            ///   - repository:
            ///   - sender:
            public init(
                action: Components.Schemas.WebhookDiscussionCommentCreated.ActionPayload,
                comment: Components.Schemas.WebhookDiscussionCommentCreated.CommentPayload,
                discussion: Components.Schemas.WebhookDiscussionCommentCreated.DiscussionPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser
            ) {
                self.action = action
                self.comment = comment
                self.discussion = discussion
                self.enterprise = enterprise
                self.installation = installation
                self.organization = organization
                self.repository = repository
                self.sender = sender
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case comment
                case discussion
                case enterprise
                case installation
                case organization
                case repository
                case sender
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted`.
        public struct WebhookDiscussionCommentDeleted: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case deleted = "deleted"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/action`.
            public var action: Components.Schemas.WebhookDiscussionCommentDeleted.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment`.
            public struct CommentPayload: Codable, Hashable, Sendable {
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/author_association`.
                @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case collaborator = "COLLABORATOR"
                    case contributor = "CONTRIBUTOR"
                    case firstTimer = "FIRST_TIMER"
                    case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                    case mannequin = "MANNEQUIN"
                    case member = "MEMBER"
                    case none = "NONE"
                    case owner = "OWNER"
                }
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/author_association`.
                public var authorAssociation: Components.Schemas.WebhookDiscussionCommentDeleted.CommentPayload.AuthorAssociationPayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/body`.
                public var body: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/child_comment_count`.
                public var childCommentCount: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/created_at`.
                public var createdAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/discussion_id`.
                public var discussionId: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/html_url`.
                public var htmlUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/parent_id`.
                public var parentId: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/reactions`.
                public struct ReactionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/reactions/+1`.
                    public var _plus_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/reactions/-1`.
                    public var _hyphen_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/reactions/confused`.
                    public var confused: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/reactions/eyes`.
                    public var eyes: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/reactions/heart`.
                    public var heart: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/reactions/hooray`.
                    public var hooray: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/reactions/laugh`.
                    public var laugh: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/reactions/rocket`.
                    public var rocket: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/reactions/total_count`.
                    public var totalCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/reactions/url`.
                    public var url: Swift.String
                    /// Creates a new `ReactionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - _plus_1:
                    ///   - _hyphen_1:
                    ///   - confused:
                    ///   - eyes:
                    ///   - heart:
                    ///   - hooray:
                    ///   - laugh:
                    ///   - rocket:
                    ///   - totalCount:
                    ///   - url:
                    public init(
                        _plus_1: Swift.Int,
                        _hyphen_1: Swift.Int,
                        confused: Swift.Int,
                        eyes: Swift.Int,
                        heart: Swift.Int,
                        hooray: Swift.Int,
                        laugh: Swift.Int,
                        rocket: Swift.Int,
                        totalCount: Swift.Int,
                        url: Swift.String
                    ) {
                        self._plus_1 = _plus_1
                        self._hyphen_1 = _hyphen_1
                        self.confused = confused
                        self.eyes = eyes
                        self.heart = heart
                        self.hooray = hooray
                        self.laugh = laugh
                        self.rocket = rocket
                        self.totalCount = totalCount
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _plus_1 = "+1"
                        case _hyphen_1 = "-1"
                        case confused
                        case eyes
                        case heart
                        case hooray
                        case laugh
                        case rocket
                        case totalCount = "total_count"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/reactions`.
                public var reactions: Components.Schemas.WebhookDiscussionCommentDeleted.CommentPayload.ReactionsPayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/repository_url`.
                public var repositoryUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/updated_at`.
                public var updatedAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/user`.
                public struct UserPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/user/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/user/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/user/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/user/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/user/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/user/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/user/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/user/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/user/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/user/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/user/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/user/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/user/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/user/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/user/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/user/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/user/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/user/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/user/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/user/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/user/type`.
                    public var _type: Components.Schemas.WebhookDiscussionCommentDeleted.CommentPayload.UserPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/user/url`.
                    public var url: Swift.String?
                    /// Creates a new `UserPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookDiscussionCommentDeleted.CommentPayload.UserPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment/user`.
                public var user: Components.Schemas.WebhookDiscussionCommentDeleted.CommentPayload.UserPayload?
                /// Creates a new `CommentPayload`.
                ///
                /// - Parameters:
                ///   - authorAssociation: How the author is associated with the repository.
                ///   - body:
                ///   - childCommentCount:
                ///   - createdAt:
                ///   - discussionId:
                ///   - htmlUrl:
                ///   - id:
                ///   - nodeId:
                ///   - parentId:
                ///   - reactions:
                ///   - repositoryUrl:
                ///   - updatedAt:
                ///   - user:
                public init(
                    authorAssociation: Components.Schemas.WebhookDiscussionCommentDeleted.CommentPayload.AuthorAssociationPayload,
                    body: Swift.String,
                    childCommentCount: Swift.Int,
                    createdAt: Swift.String,
                    discussionId: Swift.Int,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    nodeId: Swift.String,
                    parentId: Swift.Int? = nil,
                    reactions: Components.Schemas.WebhookDiscussionCommentDeleted.CommentPayload.ReactionsPayload,
                    repositoryUrl: Swift.String,
                    updatedAt: Swift.String,
                    user: Components.Schemas.WebhookDiscussionCommentDeleted.CommentPayload.UserPayload? = nil
                ) {
                    self.authorAssociation = authorAssociation
                    self.body = body
                    self.childCommentCount = childCommentCount
                    self.createdAt = createdAt
                    self.discussionId = discussionId
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.nodeId = nodeId
                    self.parentId = parentId
                    self.reactions = reactions
                    self.repositoryUrl = repositoryUrl
                    self.updatedAt = updatedAt
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case authorAssociation = "author_association"
                    case body
                    case childCommentCount = "child_comment_count"
                    case createdAt = "created_at"
                    case discussionId = "discussion_id"
                    case htmlUrl = "html_url"
                    case id
                    case nodeId = "node_id"
                    case parentId = "parent_id"
                    case reactions
                    case repositoryUrl = "repository_url"
                    case updatedAt = "updated_at"
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/comment`.
            public var comment: Components.Schemas.WebhookDiscussionCommentDeleted.CommentPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion`.
            public struct DiscussionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/active_lock_reason`.
                public var activeLockReason: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/answer_chosen_at`.
                public var answerChosenAt: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/answer_chosen_by`.
                public struct AnswerChosenByPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/answer_chosen_by/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/answer_chosen_by/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/answer_chosen_by/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/answer_chosen_by/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/answer_chosen_by/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/answer_chosen_by/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/answer_chosen_by/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/answer_chosen_by/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/answer_chosen_by/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/answer_chosen_by/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/answer_chosen_by/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/answer_chosen_by/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/answer_chosen_by/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/answer_chosen_by/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/answer_chosen_by/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/answer_chosen_by/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/answer_chosen_by/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/answer_chosen_by/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/answer_chosen_by/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/answer_chosen_by/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/answer_chosen_by/type`.
                    public var _type: Components.Schemas.WebhookDiscussionCommentDeleted.DiscussionPayload.AnswerChosenByPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/answer_chosen_by/url`.
                    public var url: Swift.String?
                    /// Creates a new `AnswerChosenByPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookDiscussionCommentDeleted.DiscussionPayload.AnswerChosenByPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/answer_chosen_by`.
                public var answerChosenBy: Components.Schemas.WebhookDiscussionCommentDeleted.DiscussionPayload.AnswerChosenByPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/answer_html_url`.
                public var answerHtmlUrl: Swift.String?
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/author_association`.
                @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case collaborator = "COLLABORATOR"
                    case contributor = "CONTRIBUTOR"
                    case firstTimer = "FIRST_TIMER"
                    case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                    case mannequin = "MANNEQUIN"
                    case member = "MEMBER"
                    case none = "NONE"
                    case owner = "OWNER"
                }
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/author_association`.
                public var authorAssociation: Components.Schemas.WebhookDiscussionCommentDeleted.DiscussionPayload.AuthorAssociationPayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/body`.
                public var body: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/category`.
                public struct CategoryPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/category/created_at`.
                    public var createdAt: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/category/description`.
                    public var description: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/category/emoji`.
                    public var emoji: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/category/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/category/is_answerable`.
                    public var isAnswerable: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/category/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/category/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/category/repository_id`.
                    public var repositoryId: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/category/slug`.
                    public var slug: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/category/updated_at`.
                    public var updatedAt: Swift.String
                    /// Creates a new `CategoryPayload`.
                    ///
                    /// - Parameters:
                    ///   - createdAt:
                    ///   - description:
                    ///   - emoji:
                    ///   - id:
                    ///   - isAnswerable:
                    ///   - name:
                    ///   - nodeId:
                    ///   - repositoryId:
                    ///   - slug:
                    ///   - updatedAt:
                    public init(
                        createdAt: Swift.String,
                        description: Swift.String,
                        emoji: Swift.String,
                        id: Swift.Int,
                        isAnswerable: Swift.Bool,
                        name: Swift.String,
                        nodeId: Swift.String? = nil,
                        repositoryId: Swift.Int,
                        slug: Swift.String,
                        updatedAt: Swift.String
                    ) {
                        self.createdAt = createdAt
                        self.description = description
                        self.emoji = emoji
                        self.id = id
                        self.isAnswerable = isAnswerable
                        self.name = name
                        self.nodeId = nodeId
                        self.repositoryId = repositoryId
                        self.slug = slug
                        self.updatedAt = updatedAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case createdAt = "created_at"
                        case description
                        case emoji
                        case id
                        case isAnswerable = "is_answerable"
                        case name
                        case nodeId = "node_id"
                        case repositoryId = "repository_id"
                        case slug
                        case updatedAt = "updated_at"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/category`.
                public var category: Components.Schemas.WebhookDiscussionCommentDeleted.DiscussionPayload.CategoryPayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/comments`.
                public var comments: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/created_at`.
                public var createdAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/html_url`.
                public var htmlUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/locked`.
                public var locked: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/number`.
                public var number: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/reactions`.
                public struct ReactionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/reactions/+1`.
                    public var _plus_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/reactions/-1`.
                    public var _hyphen_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/reactions/confused`.
                    public var confused: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/reactions/eyes`.
                    public var eyes: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/reactions/heart`.
                    public var heart: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/reactions/hooray`.
                    public var hooray: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/reactions/laugh`.
                    public var laugh: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/reactions/rocket`.
                    public var rocket: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/reactions/total_count`.
                    public var totalCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/reactions/url`.
                    public var url: Swift.String
                    /// Creates a new `ReactionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - _plus_1:
                    ///   - _hyphen_1:
                    ///   - confused:
                    ///   - eyes:
                    ///   - heart:
                    ///   - hooray:
                    ///   - laugh:
                    ///   - rocket:
                    ///   - totalCount:
                    ///   - url:
                    public init(
                        _plus_1: Swift.Int,
                        _hyphen_1: Swift.Int,
                        confused: Swift.Int,
                        eyes: Swift.Int,
                        heart: Swift.Int,
                        hooray: Swift.Int,
                        laugh: Swift.Int,
                        rocket: Swift.Int,
                        totalCount: Swift.Int,
                        url: Swift.String
                    ) {
                        self._plus_1 = _plus_1
                        self._hyphen_1 = _hyphen_1
                        self.confused = confused
                        self.eyes = eyes
                        self.heart = heart
                        self.hooray = hooray
                        self.laugh = laugh
                        self.rocket = rocket
                        self.totalCount = totalCount
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _plus_1 = "+1"
                        case _hyphen_1 = "-1"
                        case confused
                        case eyes
                        case heart
                        case hooray
                        case laugh
                        case rocket
                        case totalCount = "total_count"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/reactions`.
                public var reactions: Components.Schemas.WebhookDiscussionCommentDeleted.DiscussionPayload.ReactionsPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/repository_url`.
                public var repositoryUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/state`.
                @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case open = "open"
                    case locked = "locked"
                    case converting = "converting"
                    case transferring = "transferring"
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/state`.
                public var state: Components.Schemas.WebhookDiscussionCommentDeleted.DiscussionPayload.StatePayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/timeline_url`.
                public var timelineUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/title`.
                public var title: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/updated_at`.
                public var updatedAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/user`.
                public struct UserPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/user/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/user/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/user/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/user/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/user/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/user/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/user/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/user/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/user/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/user/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/user/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/user/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/user/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/user/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/user/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/user/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/user/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/user/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/user/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/user/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/user/type`.
                    public var _type: Components.Schemas.WebhookDiscussionCommentDeleted.DiscussionPayload.UserPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/user/url`.
                    public var url: Swift.String?
                    /// Creates a new `UserPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookDiscussionCommentDeleted.DiscussionPayload.UserPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion/user`.
                public var user: Components.Schemas.WebhookDiscussionCommentDeleted.DiscussionPayload.UserPayload?
                /// Creates a new `DiscussionPayload`.
                ///
                /// - Parameters:
                ///   - activeLockReason:
                ///   - answerChosenAt:
                ///   - answerChosenBy:
                ///   - answerHtmlUrl:
                ///   - authorAssociation: How the author is associated with the repository.
                ///   - body:
                ///   - category:
                ///   - comments:
                ///   - createdAt:
                ///   - htmlUrl:
                ///   - id:
                ///   - locked:
                ///   - nodeId:
                ///   - number:
                ///   - reactions:
                ///   - repositoryUrl:
                ///   - state:
                ///   - timelineUrl:
                ///   - title:
                ///   - updatedAt:
                ///   - user:
                public init(
                    activeLockReason: Swift.String? = nil,
                    answerChosenAt: Swift.String? = nil,
                    answerChosenBy: Components.Schemas.WebhookDiscussionCommentDeleted.DiscussionPayload.AnswerChosenByPayload? = nil,
                    answerHtmlUrl: Swift.String? = nil,
                    authorAssociation: Components.Schemas.WebhookDiscussionCommentDeleted.DiscussionPayload.AuthorAssociationPayload,
                    body: Swift.String,
                    category: Components.Schemas.WebhookDiscussionCommentDeleted.DiscussionPayload.CategoryPayload,
                    comments: Swift.Int,
                    createdAt: Swift.String,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    locked: Swift.Bool,
                    nodeId: Swift.String,
                    number: Swift.Int,
                    reactions: Components.Schemas.WebhookDiscussionCommentDeleted.DiscussionPayload.ReactionsPayload? = nil,
                    repositoryUrl: Swift.String,
                    state: Components.Schemas.WebhookDiscussionCommentDeleted.DiscussionPayload.StatePayload,
                    timelineUrl: Swift.String? = nil,
                    title: Swift.String,
                    updatedAt: Swift.String,
                    user: Components.Schemas.WebhookDiscussionCommentDeleted.DiscussionPayload.UserPayload? = nil
                ) {
                    self.activeLockReason = activeLockReason
                    self.answerChosenAt = answerChosenAt
                    self.answerChosenBy = answerChosenBy
                    self.answerHtmlUrl = answerHtmlUrl
                    self.authorAssociation = authorAssociation
                    self.body = body
                    self.category = category
                    self.comments = comments
                    self.createdAt = createdAt
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.locked = locked
                    self.nodeId = nodeId
                    self.number = number
                    self.reactions = reactions
                    self.repositoryUrl = repositoryUrl
                    self.state = state
                    self.timelineUrl = timelineUrl
                    self.title = title
                    self.updatedAt = updatedAt
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case activeLockReason = "active_lock_reason"
                    case answerChosenAt = "answer_chosen_at"
                    case answerChosenBy = "answer_chosen_by"
                    case answerHtmlUrl = "answer_html_url"
                    case authorAssociation = "author_association"
                    case body
                    case category
                    case comments
                    case createdAt = "created_at"
                    case htmlUrl = "html_url"
                    case id
                    case locked
                    case nodeId = "node_id"
                    case number
                    case reactions
                    case repositoryUrl = "repository_url"
                    case state
                    case timelineUrl = "timeline_url"
                    case title
                    case updatedAt = "updated_at"
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/discussion`.
            public var discussion: Components.Schemas.WebhookDiscussionCommentDeleted.DiscussionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-deleted/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Creates a new `WebhookDiscussionCommentDeleted`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - comment:
            ///   - discussion:
            ///   - enterprise:
            ///   - installation:
            ///   - organization:
            ///   - repository:
            ///   - sender:
            public init(
                action: Components.Schemas.WebhookDiscussionCommentDeleted.ActionPayload,
                comment: Components.Schemas.WebhookDiscussionCommentDeleted.CommentPayload,
                discussion: Components.Schemas.WebhookDiscussionCommentDeleted.DiscussionPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser
            ) {
                self.action = action
                self.comment = comment
                self.discussion = discussion
                self.enterprise = enterprise
                self.installation = installation
                self.organization = organization
                self.repository = repository
                self.sender = sender
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case comment
                case discussion
                case enterprise
                case installation
                case organization
                case repository
                case sender
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited`.
        public struct WebhookDiscussionCommentEdited: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case edited = "edited"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/action`.
            public var action: Components.Schemas.WebhookDiscussionCommentEdited.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/changes`.
            public struct ChangesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/changes/body`.
                public struct BodyPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/changes/body/from`.
                    public var from: Swift.String
                    /// Creates a new `BodyPayload`.
                    ///
                    /// - Parameters:
                    ///   - from:
                    public init(from: Swift.String) {
                        self.from = from
                    }
                    public enum CodingKeys: String, CodingKey {
                        case from
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/changes/body`.
                public var body: Components.Schemas.WebhookDiscussionCommentEdited.ChangesPayload.BodyPayload
                /// Creates a new `ChangesPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: Components.Schemas.WebhookDiscussionCommentEdited.ChangesPayload.BodyPayload) {
                    self.body = body
                }
                public enum CodingKeys: String, CodingKey {
                    case body
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/changes`.
            public var changes: Components.Schemas.WebhookDiscussionCommentEdited.ChangesPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment`.
            public struct CommentPayload: Codable, Hashable, Sendable {
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/author_association`.
                @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case collaborator = "COLLABORATOR"
                    case contributor = "CONTRIBUTOR"
                    case firstTimer = "FIRST_TIMER"
                    case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                    case mannequin = "MANNEQUIN"
                    case member = "MEMBER"
                    case none = "NONE"
                    case owner = "OWNER"
                }
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/author_association`.
                public var authorAssociation: Components.Schemas.WebhookDiscussionCommentEdited.CommentPayload.AuthorAssociationPayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/body`.
                public var body: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/child_comment_count`.
                public var childCommentCount: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/created_at`.
                public var createdAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/discussion_id`.
                public var discussionId: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/html_url`.
                public var htmlUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/parent_id`.
                public var parentId: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/reactions`.
                public struct ReactionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/reactions/+1`.
                    public var _plus_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/reactions/-1`.
                    public var _hyphen_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/reactions/confused`.
                    public var confused: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/reactions/eyes`.
                    public var eyes: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/reactions/heart`.
                    public var heart: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/reactions/hooray`.
                    public var hooray: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/reactions/laugh`.
                    public var laugh: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/reactions/rocket`.
                    public var rocket: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/reactions/total_count`.
                    public var totalCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/reactions/url`.
                    public var url: Swift.String
                    /// Creates a new `ReactionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - _plus_1:
                    ///   - _hyphen_1:
                    ///   - confused:
                    ///   - eyes:
                    ///   - heart:
                    ///   - hooray:
                    ///   - laugh:
                    ///   - rocket:
                    ///   - totalCount:
                    ///   - url:
                    public init(
                        _plus_1: Swift.Int,
                        _hyphen_1: Swift.Int,
                        confused: Swift.Int,
                        eyes: Swift.Int,
                        heart: Swift.Int,
                        hooray: Swift.Int,
                        laugh: Swift.Int,
                        rocket: Swift.Int,
                        totalCount: Swift.Int,
                        url: Swift.String
                    ) {
                        self._plus_1 = _plus_1
                        self._hyphen_1 = _hyphen_1
                        self.confused = confused
                        self.eyes = eyes
                        self.heart = heart
                        self.hooray = hooray
                        self.laugh = laugh
                        self.rocket = rocket
                        self.totalCount = totalCount
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _plus_1 = "+1"
                        case _hyphen_1 = "-1"
                        case confused
                        case eyes
                        case heart
                        case hooray
                        case laugh
                        case rocket
                        case totalCount = "total_count"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/reactions`.
                public var reactions: Components.Schemas.WebhookDiscussionCommentEdited.CommentPayload.ReactionsPayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/repository_url`.
                public var repositoryUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/updated_at`.
                public var updatedAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/user`.
                public struct UserPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/user/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/user/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/user/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/user/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/user/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/user/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/user/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/user/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/user/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/user/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/user/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/user/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/user/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/user/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/user/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/user/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/user/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/user/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/user/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/user/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/user/type`.
                    public var _type: Components.Schemas.WebhookDiscussionCommentEdited.CommentPayload.UserPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/user/url`.
                    public var url: Swift.String?
                    /// Creates a new `UserPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookDiscussionCommentEdited.CommentPayload.UserPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment/user`.
                public var user: Components.Schemas.WebhookDiscussionCommentEdited.CommentPayload.UserPayload?
                /// Creates a new `CommentPayload`.
                ///
                /// - Parameters:
                ///   - authorAssociation: How the author is associated with the repository.
                ///   - body:
                ///   - childCommentCount:
                ///   - createdAt:
                ///   - discussionId:
                ///   - htmlUrl:
                ///   - id:
                ///   - nodeId:
                ///   - parentId:
                ///   - reactions:
                ///   - repositoryUrl:
                ///   - updatedAt:
                ///   - user:
                public init(
                    authorAssociation: Components.Schemas.WebhookDiscussionCommentEdited.CommentPayload.AuthorAssociationPayload,
                    body: Swift.String,
                    childCommentCount: Swift.Int,
                    createdAt: Swift.String,
                    discussionId: Swift.Int,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    nodeId: Swift.String,
                    parentId: Swift.Int? = nil,
                    reactions: Components.Schemas.WebhookDiscussionCommentEdited.CommentPayload.ReactionsPayload,
                    repositoryUrl: Swift.String,
                    updatedAt: Swift.String,
                    user: Components.Schemas.WebhookDiscussionCommentEdited.CommentPayload.UserPayload? = nil
                ) {
                    self.authorAssociation = authorAssociation
                    self.body = body
                    self.childCommentCount = childCommentCount
                    self.createdAt = createdAt
                    self.discussionId = discussionId
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.nodeId = nodeId
                    self.parentId = parentId
                    self.reactions = reactions
                    self.repositoryUrl = repositoryUrl
                    self.updatedAt = updatedAt
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case authorAssociation = "author_association"
                    case body
                    case childCommentCount = "child_comment_count"
                    case createdAt = "created_at"
                    case discussionId = "discussion_id"
                    case htmlUrl = "html_url"
                    case id
                    case nodeId = "node_id"
                    case parentId = "parent_id"
                    case reactions
                    case repositoryUrl = "repository_url"
                    case updatedAt = "updated_at"
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/comment`.
            public var comment: Components.Schemas.WebhookDiscussionCommentEdited.CommentPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion`.
            public struct DiscussionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/active_lock_reason`.
                public var activeLockReason: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/answer_chosen_at`.
                public var answerChosenAt: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/answer_chosen_by`.
                public struct AnswerChosenByPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/answer_chosen_by/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/answer_chosen_by/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/answer_chosen_by/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/answer_chosen_by/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/answer_chosen_by/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/answer_chosen_by/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/answer_chosen_by/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/answer_chosen_by/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/answer_chosen_by/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/answer_chosen_by/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/answer_chosen_by/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/answer_chosen_by/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/answer_chosen_by/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/answer_chosen_by/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/answer_chosen_by/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/answer_chosen_by/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/answer_chosen_by/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/answer_chosen_by/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/answer_chosen_by/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/answer_chosen_by/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/answer_chosen_by/type`.
                    public var _type: Components.Schemas.WebhookDiscussionCommentEdited.DiscussionPayload.AnswerChosenByPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/answer_chosen_by/url`.
                    public var url: Swift.String?
                    /// Creates a new `AnswerChosenByPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookDiscussionCommentEdited.DiscussionPayload.AnswerChosenByPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/answer_chosen_by`.
                public var answerChosenBy: Components.Schemas.WebhookDiscussionCommentEdited.DiscussionPayload.AnswerChosenByPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/answer_html_url`.
                public var answerHtmlUrl: Swift.String?
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/author_association`.
                @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case collaborator = "COLLABORATOR"
                    case contributor = "CONTRIBUTOR"
                    case firstTimer = "FIRST_TIMER"
                    case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                    case mannequin = "MANNEQUIN"
                    case member = "MEMBER"
                    case none = "NONE"
                    case owner = "OWNER"
                }
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/author_association`.
                public var authorAssociation: Components.Schemas.WebhookDiscussionCommentEdited.DiscussionPayload.AuthorAssociationPayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/body`.
                public var body: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/category`.
                public struct CategoryPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/category/created_at`.
                    public var createdAt: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/category/description`.
                    public var description: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/category/emoji`.
                    public var emoji: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/category/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/category/is_answerable`.
                    public var isAnswerable: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/category/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/category/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/category/repository_id`.
                    public var repositoryId: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/category/slug`.
                    public var slug: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/category/updated_at`.
                    public var updatedAt: Swift.String
                    /// Creates a new `CategoryPayload`.
                    ///
                    /// - Parameters:
                    ///   - createdAt:
                    ///   - description:
                    ///   - emoji:
                    ///   - id:
                    ///   - isAnswerable:
                    ///   - name:
                    ///   - nodeId:
                    ///   - repositoryId:
                    ///   - slug:
                    ///   - updatedAt:
                    public init(
                        createdAt: Swift.String,
                        description: Swift.String,
                        emoji: Swift.String,
                        id: Swift.Int,
                        isAnswerable: Swift.Bool,
                        name: Swift.String,
                        nodeId: Swift.String? = nil,
                        repositoryId: Swift.Int,
                        slug: Swift.String,
                        updatedAt: Swift.String
                    ) {
                        self.createdAt = createdAt
                        self.description = description
                        self.emoji = emoji
                        self.id = id
                        self.isAnswerable = isAnswerable
                        self.name = name
                        self.nodeId = nodeId
                        self.repositoryId = repositoryId
                        self.slug = slug
                        self.updatedAt = updatedAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case createdAt = "created_at"
                        case description
                        case emoji
                        case id
                        case isAnswerable = "is_answerable"
                        case name
                        case nodeId = "node_id"
                        case repositoryId = "repository_id"
                        case slug
                        case updatedAt = "updated_at"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/category`.
                public var category: Components.Schemas.WebhookDiscussionCommentEdited.DiscussionPayload.CategoryPayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/comments`.
                public var comments: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/created_at`.
                public var createdAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/html_url`.
                public var htmlUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/locked`.
                public var locked: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/number`.
                public var number: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/reactions`.
                public struct ReactionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/reactions/+1`.
                    public var _plus_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/reactions/-1`.
                    public var _hyphen_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/reactions/confused`.
                    public var confused: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/reactions/eyes`.
                    public var eyes: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/reactions/heart`.
                    public var heart: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/reactions/hooray`.
                    public var hooray: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/reactions/laugh`.
                    public var laugh: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/reactions/rocket`.
                    public var rocket: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/reactions/total_count`.
                    public var totalCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/reactions/url`.
                    public var url: Swift.String
                    /// Creates a new `ReactionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - _plus_1:
                    ///   - _hyphen_1:
                    ///   - confused:
                    ///   - eyes:
                    ///   - heart:
                    ///   - hooray:
                    ///   - laugh:
                    ///   - rocket:
                    ///   - totalCount:
                    ///   - url:
                    public init(
                        _plus_1: Swift.Int,
                        _hyphen_1: Swift.Int,
                        confused: Swift.Int,
                        eyes: Swift.Int,
                        heart: Swift.Int,
                        hooray: Swift.Int,
                        laugh: Swift.Int,
                        rocket: Swift.Int,
                        totalCount: Swift.Int,
                        url: Swift.String
                    ) {
                        self._plus_1 = _plus_1
                        self._hyphen_1 = _hyphen_1
                        self.confused = confused
                        self.eyes = eyes
                        self.heart = heart
                        self.hooray = hooray
                        self.laugh = laugh
                        self.rocket = rocket
                        self.totalCount = totalCount
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _plus_1 = "+1"
                        case _hyphen_1 = "-1"
                        case confused
                        case eyes
                        case heart
                        case hooray
                        case laugh
                        case rocket
                        case totalCount = "total_count"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/reactions`.
                public var reactions: Components.Schemas.WebhookDiscussionCommentEdited.DiscussionPayload.ReactionsPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/repository_url`.
                public var repositoryUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/state`.
                @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case open = "open"
                    case locked = "locked"
                    case converting = "converting"
                    case transferring = "transferring"
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/state`.
                public var state: Components.Schemas.WebhookDiscussionCommentEdited.DiscussionPayload.StatePayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/timeline_url`.
                public var timelineUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/title`.
                public var title: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/updated_at`.
                public var updatedAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/user`.
                public struct UserPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/user/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/user/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/user/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/user/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/user/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/user/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/user/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/user/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/user/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/user/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/user/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/user/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/user/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/user/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/user/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/user/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/user/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/user/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/user/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/user/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/user/type`.
                    public var _type: Components.Schemas.WebhookDiscussionCommentEdited.DiscussionPayload.UserPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/user/url`.
                    public var url: Swift.String?
                    /// Creates a new `UserPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookDiscussionCommentEdited.DiscussionPayload.UserPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion/user`.
                public var user: Components.Schemas.WebhookDiscussionCommentEdited.DiscussionPayload.UserPayload?
                /// Creates a new `DiscussionPayload`.
                ///
                /// - Parameters:
                ///   - activeLockReason:
                ///   - answerChosenAt:
                ///   - answerChosenBy:
                ///   - answerHtmlUrl:
                ///   - authorAssociation: How the author is associated with the repository.
                ///   - body:
                ///   - category:
                ///   - comments:
                ///   - createdAt:
                ///   - htmlUrl:
                ///   - id:
                ///   - locked:
                ///   - nodeId:
                ///   - number:
                ///   - reactions:
                ///   - repositoryUrl:
                ///   - state:
                ///   - timelineUrl:
                ///   - title:
                ///   - updatedAt:
                ///   - user:
                public init(
                    activeLockReason: Swift.String? = nil,
                    answerChosenAt: Swift.String? = nil,
                    answerChosenBy: Components.Schemas.WebhookDiscussionCommentEdited.DiscussionPayload.AnswerChosenByPayload? = nil,
                    answerHtmlUrl: Swift.String? = nil,
                    authorAssociation: Components.Schemas.WebhookDiscussionCommentEdited.DiscussionPayload.AuthorAssociationPayload,
                    body: Swift.String? = nil,
                    category: Components.Schemas.WebhookDiscussionCommentEdited.DiscussionPayload.CategoryPayload,
                    comments: Swift.Int,
                    createdAt: Swift.String,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    locked: Swift.Bool,
                    nodeId: Swift.String,
                    number: Swift.Int,
                    reactions: Components.Schemas.WebhookDiscussionCommentEdited.DiscussionPayload.ReactionsPayload? = nil,
                    repositoryUrl: Swift.String,
                    state: Components.Schemas.WebhookDiscussionCommentEdited.DiscussionPayload.StatePayload,
                    timelineUrl: Swift.String? = nil,
                    title: Swift.String,
                    updatedAt: Swift.String,
                    user: Components.Schemas.WebhookDiscussionCommentEdited.DiscussionPayload.UserPayload? = nil
                ) {
                    self.activeLockReason = activeLockReason
                    self.answerChosenAt = answerChosenAt
                    self.answerChosenBy = answerChosenBy
                    self.answerHtmlUrl = answerHtmlUrl
                    self.authorAssociation = authorAssociation
                    self.body = body
                    self.category = category
                    self.comments = comments
                    self.createdAt = createdAt
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.locked = locked
                    self.nodeId = nodeId
                    self.number = number
                    self.reactions = reactions
                    self.repositoryUrl = repositoryUrl
                    self.state = state
                    self.timelineUrl = timelineUrl
                    self.title = title
                    self.updatedAt = updatedAt
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case activeLockReason = "active_lock_reason"
                    case answerChosenAt = "answer_chosen_at"
                    case answerChosenBy = "answer_chosen_by"
                    case answerHtmlUrl = "answer_html_url"
                    case authorAssociation = "author_association"
                    case body
                    case category
                    case comments
                    case createdAt = "created_at"
                    case htmlUrl = "html_url"
                    case id
                    case locked
                    case nodeId = "node_id"
                    case number
                    case reactions
                    case repositoryUrl = "repository_url"
                    case state
                    case timelineUrl = "timeline_url"
                    case title
                    case updatedAt = "updated_at"
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/discussion`.
            public var discussion: Components.Schemas.WebhookDiscussionCommentEdited.DiscussionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-comment-edited/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Creates a new `WebhookDiscussionCommentEdited`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - changes:
            ///   - comment:
            ///   - discussion:
            ///   - enterprise:
            ///   - installation:
            ///   - organization:
            ///   - repository:
            ///   - sender:
            public init(
                action: Components.Schemas.WebhookDiscussionCommentEdited.ActionPayload,
                changes: Components.Schemas.WebhookDiscussionCommentEdited.ChangesPayload,
                comment: Components.Schemas.WebhookDiscussionCommentEdited.CommentPayload,
                discussion: Components.Schemas.WebhookDiscussionCommentEdited.DiscussionPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser
            ) {
                self.action = action
                self.changes = changes
                self.comment = comment
                self.discussion = discussion
                self.enterprise = enterprise
                self.installation = installation
                self.organization = organization
                self.repository = repository
                self.sender = sender
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case changes
                case comment
                case discussion
                case enterprise
                case installation
                case organization
                case repository
                case sender
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created`.
        public struct WebhookDiscussionCreated: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case created = "created"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/action`.
            public var action: Components.Schemas.WebhookDiscussionCreated.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion`.
            public struct DiscussionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/active_lock_reason`.
                    public var activeLockReason: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/answer_chosen_at`.
                    public var answerChosenAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/answer_chosen_by`.
                    public struct AnswerChosenByPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/answer_chosen_by/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/answer_chosen_by/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/answer_chosen_by/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/answer_chosen_by/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/answer_chosen_by/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/answer_chosen_by/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/answer_chosen_by/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/answer_chosen_by/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/answer_chosen_by/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/answer_chosen_by/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/answer_chosen_by/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/answer_chosen_by/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/answer_chosen_by/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/answer_chosen_by/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/answer_chosen_by/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/answer_chosen_by/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/answer_chosen_by/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/answer_chosen_by/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/answer_chosen_by/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/answer_chosen_by/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/answer_chosen_by/type`.
                        public var _type: Components.Schemas.WebhookDiscussionCreated.DiscussionPayload.Value1Payload.AnswerChosenByPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/answer_chosen_by/url`.
                        public var url: Swift.String?
                        /// Creates a new `AnswerChosenByPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookDiscussionCreated.DiscussionPayload.Value1Payload.AnswerChosenByPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/answer_chosen_by`.
                    public var answerChosenBy: Components.Schemas.WebhookDiscussionCreated.DiscussionPayload.Value1Payload.AnswerChosenByPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/answer_html_url`.
                    public var answerHtmlUrl: Swift.String?
                    /// How the author is associated with the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/author_association`.
                    @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case collaborator = "COLLABORATOR"
                        case contributor = "CONTRIBUTOR"
                        case firstTimer = "FIRST_TIMER"
                        case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                        case mannequin = "MANNEQUIN"
                        case member = "MEMBER"
                        case none = "NONE"
                        case owner = "OWNER"
                    }
                    /// How the author is associated with the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/author_association`.
                    public var authorAssociation: Components.Schemas.WebhookDiscussionCreated.DiscussionPayload.Value1Payload.AuthorAssociationPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/body`.
                    public var body: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/category`.
                    public struct CategoryPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/category/created_at`.
                        public var createdAt: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/category/description`.
                        public var description: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/category/emoji`.
                        public var emoji: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/category/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/category/is_answerable`.
                        public var isAnswerable: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/category/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/category/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/category/repository_id`.
                        public var repositoryId: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/category/slug`.
                        public var slug: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/category/updated_at`.
                        public var updatedAt: Swift.String
                        /// Creates a new `CategoryPayload`.
                        ///
                        /// - Parameters:
                        ///   - createdAt:
                        ///   - description:
                        ///   - emoji:
                        ///   - id:
                        ///   - isAnswerable:
                        ///   - name:
                        ///   - nodeId:
                        ///   - repositoryId:
                        ///   - slug:
                        ///   - updatedAt:
                        public init(
                            createdAt: Swift.String,
                            description: Swift.String,
                            emoji: Swift.String,
                            id: Swift.Int,
                            isAnswerable: Swift.Bool,
                            name: Swift.String,
                            nodeId: Swift.String? = nil,
                            repositoryId: Swift.Int,
                            slug: Swift.String,
                            updatedAt: Swift.String
                        ) {
                            self.createdAt = createdAt
                            self.description = description
                            self.emoji = emoji
                            self.id = id
                            self.isAnswerable = isAnswerable
                            self.name = name
                            self.nodeId = nodeId
                            self.repositoryId = repositoryId
                            self.slug = slug
                            self.updatedAt = updatedAt
                        }
                        public enum CodingKeys: String, CodingKey {
                            case createdAt = "created_at"
                            case description
                            case emoji
                            case id
                            case isAnswerable = "is_answerable"
                            case name
                            case nodeId = "node_id"
                            case repositoryId = "repository_id"
                            case slug
                            case updatedAt = "updated_at"
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/category`.
                    public var category: Components.Schemas.WebhookDiscussionCreated.DiscussionPayload.Value1Payload.CategoryPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/comments`.
                    public var comments: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/created_at`.
                    public var createdAt: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/html_url`.
                    public var htmlUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/locked`.
                    public var locked: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/number`.
                    public var number: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/reactions`.
                    public struct ReactionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/reactions/+1`.
                        public var _plus_1: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/reactions/-1`.
                        public var _hyphen_1: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/reactions/confused`.
                        public var confused: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/reactions/eyes`.
                        public var eyes: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/reactions/heart`.
                        public var heart: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/reactions/hooray`.
                        public var hooray: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/reactions/laugh`.
                        public var laugh: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/reactions/rocket`.
                        public var rocket: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/reactions/total_count`.
                        public var totalCount: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/reactions/url`.
                        public var url: Swift.String
                        /// Creates a new `ReactionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - _plus_1:
                        ///   - _hyphen_1:
                        ///   - confused:
                        ///   - eyes:
                        ///   - heart:
                        ///   - hooray:
                        ///   - laugh:
                        ///   - rocket:
                        ///   - totalCount:
                        ///   - url:
                        public init(
                            _plus_1: Swift.Int,
                            _hyphen_1: Swift.Int,
                            confused: Swift.Int,
                            eyes: Swift.Int,
                            heart: Swift.Int,
                            hooray: Swift.Int,
                            laugh: Swift.Int,
                            rocket: Swift.Int,
                            totalCount: Swift.Int,
                            url: Swift.String
                        ) {
                            self._plus_1 = _plus_1
                            self._hyphen_1 = _hyphen_1
                            self.confused = confused
                            self.eyes = eyes
                            self.heart = heart
                            self.hooray = hooray
                            self.laugh = laugh
                            self.rocket = rocket
                            self.totalCount = totalCount
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _plus_1 = "+1"
                            case _hyphen_1 = "-1"
                            case confused
                            case eyes
                            case heart
                            case hooray
                            case laugh
                            case rocket
                            case totalCount = "total_count"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/reactions`.
                    public var reactions: Components.Schemas.WebhookDiscussionCreated.DiscussionPayload.Value1Payload.ReactionsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/repository_url`.
                    public var repositoryUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/state`.
                    @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case locked = "locked"
                        case converting = "converting"
                        case transferring = "transferring"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/state`.
                    public var state: Components.Schemas.WebhookDiscussionCreated.DiscussionPayload.Value1Payload.StatePayload
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/timeline_url`.
                    public var timelineUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/title`.
                    public var title: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/updated_at`.
                    public var updatedAt: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/user`.
                    public struct UserPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/user/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/user/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/user/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/user/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/user/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/user/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/user/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/user/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/user/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/user/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/user/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/user/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/user/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/user/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/user/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/user/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/user/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/user/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/user/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/user/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/user/type`.
                        public var _type: Components.Schemas.WebhookDiscussionCreated.DiscussionPayload.Value1Payload.UserPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/user/url`.
                        public var url: Swift.String?
                        /// Creates a new `UserPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookDiscussionCreated.DiscussionPayload.Value1Payload.UserPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1/user`.
                    public var user: Components.Schemas.WebhookDiscussionCreated.DiscussionPayload.Value1Payload.UserPayload?
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - activeLockReason:
                    ///   - answerChosenAt:
                    ///   - answerChosenBy:
                    ///   - answerHtmlUrl:
                    ///   - authorAssociation: How the author is associated with the repository.
                    ///   - body:
                    ///   - category:
                    ///   - comments:
                    ///   - createdAt:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - locked:
                    ///   - nodeId:
                    ///   - number:
                    ///   - reactions:
                    ///   - repositoryUrl:
                    ///   - state:
                    ///   - timelineUrl:
                    ///   - title:
                    ///   - updatedAt:
                    ///   - user:
                    public init(
                        activeLockReason: Swift.String? = nil,
                        answerChosenAt: Swift.String? = nil,
                        answerChosenBy: Components.Schemas.WebhookDiscussionCreated.DiscussionPayload.Value1Payload.AnswerChosenByPayload? = nil,
                        answerHtmlUrl: Swift.String? = nil,
                        authorAssociation: Components.Schemas.WebhookDiscussionCreated.DiscussionPayload.Value1Payload.AuthorAssociationPayload,
                        body: Swift.String? = nil,
                        category: Components.Schemas.WebhookDiscussionCreated.DiscussionPayload.Value1Payload.CategoryPayload,
                        comments: Swift.Int,
                        createdAt: Swift.String,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        locked: Swift.Bool,
                        nodeId: Swift.String,
                        number: Swift.Int,
                        reactions: Components.Schemas.WebhookDiscussionCreated.DiscussionPayload.Value1Payload.ReactionsPayload? = nil,
                        repositoryUrl: Swift.String,
                        state: Components.Schemas.WebhookDiscussionCreated.DiscussionPayload.Value1Payload.StatePayload,
                        timelineUrl: Swift.String? = nil,
                        title: Swift.String,
                        updatedAt: Swift.String,
                        user: Components.Schemas.WebhookDiscussionCreated.DiscussionPayload.Value1Payload.UserPayload? = nil
                    ) {
                        self.activeLockReason = activeLockReason
                        self.answerChosenAt = answerChosenAt
                        self.answerChosenBy = answerChosenBy
                        self.answerHtmlUrl = answerHtmlUrl
                        self.authorAssociation = authorAssociation
                        self.body = body
                        self.category = category
                        self.comments = comments
                        self.createdAt = createdAt
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.locked = locked
                        self.nodeId = nodeId
                        self.number = number
                        self.reactions = reactions
                        self.repositoryUrl = repositoryUrl
                        self.state = state
                        self.timelineUrl = timelineUrl
                        self.title = title
                        self.updatedAt = updatedAt
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case activeLockReason = "active_lock_reason"
                        case answerChosenAt = "answer_chosen_at"
                        case answerChosenBy = "answer_chosen_by"
                        case answerHtmlUrl = "answer_html_url"
                        case authorAssociation = "author_association"
                        case body
                        case category
                        case comments
                        case createdAt = "created_at"
                        case htmlUrl = "html_url"
                        case id
                        case locked
                        case nodeId = "node_id"
                        case number
                        case reactions
                        case repositoryUrl = "repository_url"
                        case state
                        case timelineUrl = "timeline_url"
                        case title
                        case updatedAt = "updated_at"
                        case user
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value1`.
                public var value1: Components.Schemas.WebhookDiscussionCreated.DiscussionPayload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/active_lock_reason`.
                    public var activeLockReason: OpenAPIRuntime.OpenAPIValueContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/answer_chosen_at`.
                    public var answerChosenAt: OpenAPIRuntime.OpenAPIValueContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/answer_chosen_by`.
                    public var answerChosenBy: OpenAPIRuntime.OpenAPIValueContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/answer_html_url`.
                    public var answerHtmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/author_association`.
                    public var authorAssociation: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/body`.
                    public var body: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/category`.
                    public struct CategoryPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/category/created_at`.
                        public var createdAt: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/category/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/category/emoji`.
                        public var emoji: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/category/id`.
                        public var id: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/category/is_answerable`.
                        public var isAnswerable: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/category/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/category/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/category/repository_id`.
                        public var repositoryId: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/category/slug`.
                        public var slug: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/category/updated_at`.
                        public var updatedAt: Swift.String?
                        /// Creates a new `CategoryPayload`.
                        ///
                        /// - Parameters:
                        ///   - createdAt:
                        ///   - description:
                        ///   - emoji:
                        ///   - id:
                        ///   - isAnswerable:
                        ///   - name:
                        ///   - nodeId:
                        ///   - repositoryId:
                        ///   - slug:
                        ///   - updatedAt:
                        public init(
                            createdAt: Swift.String? = nil,
                            description: Swift.String? = nil,
                            emoji: Swift.String? = nil,
                            id: Swift.Int? = nil,
                            isAnswerable: Swift.Bool? = nil,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            repositoryId: Swift.Int? = nil,
                            slug: Swift.String? = nil,
                            updatedAt: Swift.String? = nil
                        ) {
                            self.createdAt = createdAt
                            self.description = description
                            self.emoji = emoji
                            self.id = id
                            self.isAnswerable = isAnswerable
                            self.name = name
                            self.nodeId = nodeId
                            self.repositoryId = repositoryId
                            self.slug = slug
                            self.updatedAt = updatedAt
                        }
                        public enum CodingKeys: String, CodingKey {
                            case createdAt = "created_at"
                            case description
                            case emoji
                            case id
                            case isAnswerable = "is_answerable"
                            case name
                            case nodeId = "node_id"
                            case repositoryId = "repository_id"
                            case slug
                            case updatedAt = "updated_at"
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/category`.
                    public var category: Components.Schemas.WebhookDiscussionCreated.DiscussionPayload.Value2Payload.CategoryPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/comments`.
                    public var comments: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/created_at`.
                    public var createdAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/id`.
                    public var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/locked`.
                    public var locked: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/number`.
                    public var number: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/reactions`.
                    public struct ReactionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/reactions/+1`.
                        public var _plus_1: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/reactions/-1`.
                        public var _hyphen_1: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/reactions/confused`.
                        public var confused: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/reactions/eyes`.
                        public var eyes: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/reactions/heart`.
                        public var heart: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/reactions/hooray`.
                        public var hooray: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/reactions/laugh`.
                        public var laugh: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/reactions/rocket`.
                        public var rocket: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/reactions/total_count`.
                        public var totalCount: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/reactions/url`.
                        public var url: Swift.String?
                        /// Creates a new `ReactionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - _plus_1:
                        ///   - _hyphen_1:
                        ///   - confused:
                        ///   - eyes:
                        ///   - heart:
                        ///   - hooray:
                        ///   - laugh:
                        ///   - rocket:
                        ///   - totalCount:
                        ///   - url:
                        public init(
                            _plus_1: Swift.Int? = nil,
                            _hyphen_1: Swift.Int? = nil,
                            confused: Swift.Int? = nil,
                            eyes: Swift.Int? = nil,
                            heart: Swift.Int? = nil,
                            hooray: Swift.Int? = nil,
                            laugh: Swift.Int? = nil,
                            rocket: Swift.Int? = nil,
                            totalCount: Swift.Int? = nil,
                            url: Swift.String? = nil
                        ) {
                            self._plus_1 = _plus_1
                            self._hyphen_1 = _hyphen_1
                            self.confused = confused
                            self.eyes = eyes
                            self.heart = heart
                            self.hooray = hooray
                            self.laugh = laugh
                            self.rocket = rocket
                            self.totalCount = totalCount
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _plus_1 = "+1"
                            case _hyphen_1 = "-1"
                            case confused
                            case eyes
                            case heart
                            case hooray
                            case laugh
                            case rocket
                            case totalCount = "total_count"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/reactions`.
                    public var reactions: Components.Schemas.WebhookDiscussionCreated.DiscussionPayload.Value2Payload.ReactionsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/repository_url`.
                    public var repositoryUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/state`.
                    @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case converting = "converting"
                        case transferring = "transferring"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/state`.
                    public var state: Components.Schemas.WebhookDiscussionCreated.DiscussionPayload.Value2Payload.StatePayload
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/timeline_url`.
                    public var timelineUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/title`.
                    public var title: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/updated_at`.
                    public var updatedAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/user`.
                    public struct UserPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/user/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/user/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/user/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/user/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/user/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/user/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/user/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/user/id`.
                        public var id: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/user/login`.
                        public var login: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/user/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/user/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/user/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/user/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/user/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/user/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/user/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/user/type`.
                        public var _type: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/user/url`.
                        public var url: Swift.String?
                        /// Creates a new `UserPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int? = nil,
                            login: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2/user`.
                    public var user: Components.Schemas.WebhookDiscussionCreated.DiscussionPayload.Value2Payload.UserPayload?
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - activeLockReason:
                    ///   - answerChosenAt:
                    ///   - answerChosenBy:
                    ///   - answerHtmlUrl:
                    ///   - authorAssociation:
                    ///   - body:
                    ///   - category:
                    ///   - comments:
                    ///   - createdAt:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - locked:
                    ///   - nodeId:
                    ///   - number:
                    ///   - reactions:
                    ///   - repositoryUrl:
                    ///   - state:
                    ///   - timelineUrl:
                    ///   - title:
                    ///   - updatedAt:
                    ///   - user:
                    public init(
                        activeLockReason: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                        answerChosenAt: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                        answerChosenBy: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                        answerHtmlUrl: Swift.String? = nil,
                        authorAssociation: Swift.String? = nil,
                        body: Swift.String? = nil,
                        category: Components.Schemas.WebhookDiscussionCreated.DiscussionPayload.Value2Payload.CategoryPayload? = nil,
                        comments: Swift.Int? = nil,
                        createdAt: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int? = nil,
                        locked: Swift.Bool,
                        nodeId: Swift.String? = nil,
                        number: Swift.Int? = nil,
                        reactions: Components.Schemas.WebhookDiscussionCreated.DiscussionPayload.Value2Payload.ReactionsPayload? = nil,
                        repositoryUrl: Swift.String? = nil,
                        state: Components.Schemas.WebhookDiscussionCreated.DiscussionPayload.Value2Payload.StatePayload,
                        timelineUrl: Swift.String? = nil,
                        title: Swift.String? = nil,
                        updatedAt: Swift.String? = nil,
                        user: Components.Schemas.WebhookDiscussionCreated.DiscussionPayload.Value2Payload.UserPayload? = nil
                    ) {
                        self.activeLockReason = activeLockReason
                        self.answerChosenAt = answerChosenAt
                        self.answerChosenBy = answerChosenBy
                        self.answerHtmlUrl = answerHtmlUrl
                        self.authorAssociation = authorAssociation
                        self.body = body
                        self.category = category
                        self.comments = comments
                        self.createdAt = createdAt
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.locked = locked
                        self.nodeId = nodeId
                        self.number = number
                        self.reactions = reactions
                        self.repositoryUrl = repositoryUrl
                        self.state = state
                        self.timelineUrl = timelineUrl
                        self.title = title
                        self.updatedAt = updatedAt
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case activeLockReason = "active_lock_reason"
                        case answerChosenAt = "answer_chosen_at"
                        case answerChosenBy = "answer_chosen_by"
                        case answerHtmlUrl = "answer_html_url"
                        case authorAssociation = "author_association"
                        case body
                        case category
                        case comments
                        case createdAt = "created_at"
                        case htmlUrl = "html_url"
                        case id
                        case locked
                        case nodeId = "node_id"
                        case number
                        case reactions
                        case repositoryUrl = "repository_url"
                        case state
                        case timelineUrl = "timeline_url"
                        case title
                        case updatedAt = "updated_at"
                        case user
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion/value2`.
                public var value2: Components.Schemas.WebhookDiscussionCreated.DiscussionPayload.Value2Payload
                /// Creates a new `DiscussionPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.WebhookDiscussionCreated.DiscussionPayload.Value1Payload,
                    value2: Components.Schemas.WebhookDiscussionCreated.DiscussionPayload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/discussion`.
            public var discussion: Components.Schemas.WebhookDiscussionCreated.DiscussionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-created/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Creates a new `WebhookDiscussionCreated`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - discussion:
            ///   - enterprise:
            ///   - installation:
            ///   - organization:
            ///   - repository:
            ///   - sender:
            public init(
                action: Components.Schemas.WebhookDiscussionCreated.ActionPayload,
                discussion: Components.Schemas.WebhookDiscussionCreated.DiscussionPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser
            ) {
                self.action = action
                self.discussion = discussion
                self.enterprise = enterprise
                self.installation = installation
                self.organization = organization
                self.repository = repository
                self.sender = sender
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case discussion
                case enterprise
                case installation
                case organization
                case repository
                case sender
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted`.
        public struct WebhookDiscussionDeleted: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case deleted = "deleted"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/action`.
            public var action: Components.Schemas.WebhookDiscussionDeleted.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion`.
            public struct DiscussionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/active_lock_reason`.
                public var activeLockReason: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/answer_chosen_at`.
                public var answerChosenAt: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/answer_chosen_by`.
                public struct AnswerChosenByPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/answer_chosen_by/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/answer_chosen_by/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/answer_chosen_by/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/answer_chosen_by/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/answer_chosen_by/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/answer_chosen_by/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/answer_chosen_by/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/answer_chosen_by/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/answer_chosen_by/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/answer_chosen_by/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/answer_chosen_by/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/answer_chosen_by/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/answer_chosen_by/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/answer_chosen_by/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/answer_chosen_by/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/answer_chosen_by/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/answer_chosen_by/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/answer_chosen_by/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/answer_chosen_by/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/answer_chosen_by/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/answer_chosen_by/type`.
                    public var _type: Components.Schemas.WebhookDiscussionDeleted.DiscussionPayload.AnswerChosenByPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/answer_chosen_by/url`.
                    public var url: Swift.String?
                    /// Creates a new `AnswerChosenByPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookDiscussionDeleted.DiscussionPayload.AnswerChosenByPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/answer_chosen_by`.
                public var answerChosenBy: Components.Schemas.WebhookDiscussionDeleted.DiscussionPayload.AnswerChosenByPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/answer_html_url`.
                public var answerHtmlUrl: Swift.String?
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/author_association`.
                @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case collaborator = "COLLABORATOR"
                    case contributor = "CONTRIBUTOR"
                    case firstTimer = "FIRST_TIMER"
                    case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                    case mannequin = "MANNEQUIN"
                    case member = "MEMBER"
                    case none = "NONE"
                    case owner = "OWNER"
                }
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/author_association`.
                public var authorAssociation: Components.Schemas.WebhookDiscussionDeleted.DiscussionPayload.AuthorAssociationPayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/body`.
                public var body: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/category`.
                public struct CategoryPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/category/created_at`.
                    public var createdAt: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/category/description`.
                    public var description: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/category/emoji`.
                    public var emoji: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/category/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/category/is_answerable`.
                    public var isAnswerable: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/category/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/category/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/category/repository_id`.
                    public var repositoryId: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/category/slug`.
                    public var slug: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/category/updated_at`.
                    public var updatedAt: Swift.String
                    /// Creates a new `CategoryPayload`.
                    ///
                    /// - Parameters:
                    ///   - createdAt:
                    ///   - description:
                    ///   - emoji:
                    ///   - id:
                    ///   - isAnswerable:
                    ///   - name:
                    ///   - nodeId:
                    ///   - repositoryId:
                    ///   - slug:
                    ///   - updatedAt:
                    public init(
                        createdAt: Swift.String,
                        description: Swift.String,
                        emoji: Swift.String,
                        id: Swift.Int,
                        isAnswerable: Swift.Bool,
                        name: Swift.String,
                        nodeId: Swift.String? = nil,
                        repositoryId: Swift.Int,
                        slug: Swift.String,
                        updatedAt: Swift.String
                    ) {
                        self.createdAt = createdAt
                        self.description = description
                        self.emoji = emoji
                        self.id = id
                        self.isAnswerable = isAnswerable
                        self.name = name
                        self.nodeId = nodeId
                        self.repositoryId = repositoryId
                        self.slug = slug
                        self.updatedAt = updatedAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case createdAt = "created_at"
                        case description
                        case emoji
                        case id
                        case isAnswerable = "is_answerable"
                        case name
                        case nodeId = "node_id"
                        case repositoryId = "repository_id"
                        case slug
                        case updatedAt = "updated_at"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/category`.
                public var category: Components.Schemas.WebhookDiscussionDeleted.DiscussionPayload.CategoryPayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/comments`.
                public var comments: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/created_at`.
                public var createdAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/html_url`.
                public var htmlUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/locked`.
                public var locked: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/number`.
                public var number: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/reactions`.
                public struct ReactionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/reactions/+1`.
                    public var _plus_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/reactions/-1`.
                    public var _hyphen_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/reactions/confused`.
                    public var confused: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/reactions/eyes`.
                    public var eyes: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/reactions/heart`.
                    public var heart: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/reactions/hooray`.
                    public var hooray: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/reactions/laugh`.
                    public var laugh: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/reactions/rocket`.
                    public var rocket: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/reactions/total_count`.
                    public var totalCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/reactions/url`.
                    public var url: Swift.String
                    /// Creates a new `ReactionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - _plus_1:
                    ///   - _hyphen_1:
                    ///   - confused:
                    ///   - eyes:
                    ///   - heart:
                    ///   - hooray:
                    ///   - laugh:
                    ///   - rocket:
                    ///   - totalCount:
                    ///   - url:
                    public init(
                        _plus_1: Swift.Int,
                        _hyphen_1: Swift.Int,
                        confused: Swift.Int,
                        eyes: Swift.Int,
                        heart: Swift.Int,
                        hooray: Swift.Int,
                        laugh: Swift.Int,
                        rocket: Swift.Int,
                        totalCount: Swift.Int,
                        url: Swift.String
                    ) {
                        self._plus_1 = _plus_1
                        self._hyphen_1 = _hyphen_1
                        self.confused = confused
                        self.eyes = eyes
                        self.heart = heart
                        self.hooray = hooray
                        self.laugh = laugh
                        self.rocket = rocket
                        self.totalCount = totalCount
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _plus_1 = "+1"
                        case _hyphen_1 = "-1"
                        case confused
                        case eyes
                        case heart
                        case hooray
                        case laugh
                        case rocket
                        case totalCount = "total_count"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/reactions`.
                public var reactions: Components.Schemas.WebhookDiscussionDeleted.DiscussionPayload.ReactionsPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/repository_url`.
                public var repositoryUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/state`.
                @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case open = "open"
                    case locked = "locked"
                    case converting = "converting"
                    case transferring = "transferring"
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/state`.
                public var state: Components.Schemas.WebhookDiscussionDeleted.DiscussionPayload.StatePayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/timeline_url`.
                public var timelineUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/title`.
                public var title: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/updated_at`.
                public var updatedAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/user`.
                public struct UserPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/user/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/user/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/user/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/user/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/user/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/user/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/user/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/user/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/user/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/user/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/user/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/user/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/user/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/user/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/user/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/user/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/user/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/user/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/user/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/user/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/user/type`.
                    public var _type: Components.Schemas.WebhookDiscussionDeleted.DiscussionPayload.UserPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/user/url`.
                    public var url: Swift.String?
                    /// Creates a new `UserPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookDiscussionDeleted.DiscussionPayload.UserPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion/user`.
                public var user: Components.Schemas.WebhookDiscussionDeleted.DiscussionPayload.UserPayload?
                /// Creates a new `DiscussionPayload`.
                ///
                /// - Parameters:
                ///   - activeLockReason:
                ///   - answerChosenAt:
                ///   - answerChosenBy:
                ///   - answerHtmlUrl:
                ///   - authorAssociation: How the author is associated with the repository.
                ///   - body:
                ///   - category:
                ///   - comments:
                ///   - createdAt:
                ///   - htmlUrl:
                ///   - id:
                ///   - locked:
                ///   - nodeId:
                ///   - number:
                ///   - reactions:
                ///   - repositoryUrl:
                ///   - state:
                ///   - timelineUrl:
                ///   - title:
                ///   - updatedAt:
                ///   - user:
                public init(
                    activeLockReason: Swift.String? = nil,
                    answerChosenAt: Swift.String? = nil,
                    answerChosenBy: Components.Schemas.WebhookDiscussionDeleted.DiscussionPayload.AnswerChosenByPayload? = nil,
                    answerHtmlUrl: Swift.String? = nil,
                    authorAssociation: Components.Schemas.WebhookDiscussionDeleted.DiscussionPayload.AuthorAssociationPayload,
                    body: Swift.String,
                    category: Components.Schemas.WebhookDiscussionDeleted.DiscussionPayload.CategoryPayload,
                    comments: Swift.Int,
                    createdAt: Swift.String,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    locked: Swift.Bool,
                    nodeId: Swift.String,
                    number: Swift.Int,
                    reactions: Components.Schemas.WebhookDiscussionDeleted.DiscussionPayload.ReactionsPayload? = nil,
                    repositoryUrl: Swift.String,
                    state: Components.Schemas.WebhookDiscussionDeleted.DiscussionPayload.StatePayload,
                    timelineUrl: Swift.String? = nil,
                    title: Swift.String,
                    updatedAt: Swift.String,
                    user: Components.Schemas.WebhookDiscussionDeleted.DiscussionPayload.UserPayload? = nil
                ) {
                    self.activeLockReason = activeLockReason
                    self.answerChosenAt = answerChosenAt
                    self.answerChosenBy = answerChosenBy
                    self.answerHtmlUrl = answerHtmlUrl
                    self.authorAssociation = authorAssociation
                    self.body = body
                    self.category = category
                    self.comments = comments
                    self.createdAt = createdAt
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.locked = locked
                    self.nodeId = nodeId
                    self.number = number
                    self.reactions = reactions
                    self.repositoryUrl = repositoryUrl
                    self.state = state
                    self.timelineUrl = timelineUrl
                    self.title = title
                    self.updatedAt = updatedAt
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case activeLockReason = "active_lock_reason"
                    case answerChosenAt = "answer_chosen_at"
                    case answerChosenBy = "answer_chosen_by"
                    case answerHtmlUrl = "answer_html_url"
                    case authorAssociation = "author_association"
                    case body
                    case category
                    case comments
                    case createdAt = "created_at"
                    case htmlUrl = "html_url"
                    case id
                    case locked
                    case nodeId = "node_id"
                    case number
                    case reactions
                    case repositoryUrl = "repository_url"
                    case state
                    case timelineUrl = "timeline_url"
                    case title
                    case updatedAt = "updated_at"
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/discussion`.
            public var discussion: Components.Schemas.WebhookDiscussionDeleted.DiscussionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-deleted/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Creates a new `WebhookDiscussionDeleted`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - discussion:
            ///   - enterprise:
            ///   - installation:
            ///   - organization:
            ///   - repository:
            ///   - sender:
            public init(
                action: Components.Schemas.WebhookDiscussionDeleted.ActionPayload,
                discussion: Components.Schemas.WebhookDiscussionDeleted.DiscussionPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser
            ) {
                self.action = action
                self.discussion = discussion
                self.enterprise = enterprise
                self.installation = installation
                self.organization = organization
                self.repository = repository
                self.sender = sender
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case discussion
                case enterprise
                case installation
                case organization
                case repository
                case sender
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited`.
        public struct WebhookDiscussionEdited: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case edited = "edited"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/action`.
            public var action: Components.Schemas.WebhookDiscussionEdited.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/changes`.
            public struct ChangesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/changes/body`.
                public struct BodyPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/changes/body/from`.
                    public var from: Swift.String
                    /// Creates a new `BodyPayload`.
                    ///
                    /// - Parameters:
                    ///   - from:
                    public init(from: Swift.String) {
                        self.from = from
                    }
                    public enum CodingKeys: String, CodingKey {
                        case from
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/changes/body`.
                public var body: Components.Schemas.WebhookDiscussionEdited.ChangesPayload.BodyPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/changes/title`.
                public struct TitlePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/changes/title/from`.
                    public var from: Swift.String
                    /// Creates a new `TitlePayload`.
                    ///
                    /// - Parameters:
                    ///   - from:
                    public init(from: Swift.String) {
                        self.from = from
                    }
                    public enum CodingKeys: String, CodingKey {
                        case from
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/changes/title`.
                public var title: Components.Schemas.WebhookDiscussionEdited.ChangesPayload.TitlePayload?
                /// Creates a new `ChangesPayload`.
                ///
                /// - Parameters:
                ///   - body:
                ///   - title:
                public init(
                    body: Components.Schemas.WebhookDiscussionEdited.ChangesPayload.BodyPayload? = nil,
                    title: Components.Schemas.WebhookDiscussionEdited.ChangesPayload.TitlePayload? = nil
                ) {
                    self.body = body
                    self.title = title
                }
                public enum CodingKeys: String, CodingKey {
                    case body
                    case title
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/changes`.
            public var changes: Components.Schemas.WebhookDiscussionEdited.ChangesPayload?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion`.
            public struct DiscussionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/active_lock_reason`.
                public var activeLockReason: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/answer_chosen_at`.
                public var answerChosenAt: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/answer_chosen_by`.
                public struct AnswerChosenByPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/answer_chosen_by/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/answer_chosen_by/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/answer_chosen_by/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/answer_chosen_by/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/answer_chosen_by/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/answer_chosen_by/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/answer_chosen_by/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/answer_chosen_by/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/answer_chosen_by/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/answer_chosen_by/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/answer_chosen_by/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/answer_chosen_by/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/answer_chosen_by/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/answer_chosen_by/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/answer_chosen_by/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/answer_chosen_by/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/answer_chosen_by/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/answer_chosen_by/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/answer_chosen_by/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/answer_chosen_by/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/answer_chosen_by/type`.
                    public var _type: Components.Schemas.WebhookDiscussionEdited.DiscussionPayload.AnswerChosenByPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/answer_chosen_by/url`.
                    public var url: Swift.String?
                    /// Creates a new `AnswerChosenByPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookDiscussionEdited.DiscussionPayload.AnswerChosenByPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/answer_chosen_by`.
                public var answerChosenBy: Components.Schemas.WebhookDiscussionEdited.DiscussionPayload.AnswerChosenByPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/answer_html_url`.
                public var answerHtmlUrl: Swift.String?
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/author_association`.
                @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case collaborator = "COLLABORATOR"
                    case contributor = "CONTRIBUTOR"
                    case firstTimer = "FIRST_TIMER"
                    case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                    case mannequin = "MANNEQUIN"
                    case member = "MEMBER"
                    case none = "NONE"
                    case owner = "OWNER"
                }
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/author_association`.
                public var authorAssociation: Components.Schemas.WebhookDiscussionEdited.DiscussionPayload.AuthorAssociationPayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/body`.
                public var body: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/category`.
                public struct CategoryPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/category/created_at`.
                    public var createdAt: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/category/description`.
                    public var description: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/category/emoji`.
                    public var emoji: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/category/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/category/is_answerable`.
                    public var isAnswerable: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/category/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/category/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/category/repository_id`.
                    public var repositoryId: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/category/slug`.
                    public var slug: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/category/updated_at`.
                    public var updatedAt: Swift.String
                    /// Creates a new `CategoryPayload`.
                    ///
                    /// - Parameters:
                    ///   - createdAt:
                    ///   - description:
                    ///   - emoji:
                    ///   - id:
                    ///   - isAnswerable:
                    ///   - name:
                    ///   - nodeId:
                    ///   - repositoryId:
                    ///   - slug:
                    ///   - updatedAt:
                    public init(
                        createdAt: Swift.String,
                        description: Swift.String,
                        emoji: Swift.String,
                        id: Swift.Int,
                        isAnswerable: Swift.Bool,
                        name: Swift.String,
                        nodeId: Swift.String? = nil,
                        repositoryId: Swift.Int,
                        slug: Swift.String,
                        updatedAt: Swift.String
                    ) {
                        self.createdAt = createdAt
                        self.description = description
                        self.emoji = emoji
                        self.id = id
                        self.isAnswerable = isAnswerable
                        self.name = name
                        self.nodeId = nodeId
                        self.repositoryId = repositoryId
                        self.slug = slug
                        self.updatedAt = updatedAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case createdAt = "created_at"
                        case description
                        case emoji
                        case id
                        case isAnswerable = "is_answerable"
                        case name
                        case nodeId = "node_id"
                        case repositoryId = "repository_id"
                        case slug
                        case updatedAt = "updated_at"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/category`.
                public var category: Components.Schemas.WebhookDiscussionEdited.DiscussionPayload.CategoryPayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/comments`.
                public var comments: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/created_at`.
                public var createdAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/html_url`.
                public var htmlUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/locked`.
                public var locked: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/number`.
                public var number: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/reactions`.
                public struct ReactionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/reactions/+1`.
                    public var _plus_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/reactions/-1`.
                    public var _hyphen_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/reactions/confused`.
                    public var confused: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/reactions/eyes`.
                    public var eyes: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/reactions/heart`.
                    public var heart: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/reactions/hooray`.
                    public var hooray: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/reactions/laugh`.
                    public var laugh: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/reactions/rocket`.
                    public var rocket: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/reactions/total_count`.
                    public var totalCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/reactions/url`.
                    public var url: Swift.String
                    /// Creates a new `ReactionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - _plus_1:
                    ///   - _hyphen_1:
                    ///   - confused:
                    ///   - eyes:
                    ///   - heart:
                    ///   - hooray:
                    ///   - laugh:
                    ///   - rocket:
                    ///   - totalCount:
                    ///   - url:
                    public init(
                        _plus_1: Swift.Int,
                        _hyphen_1: Swift.Int,
                        confused: Swift.Int,
                        eyes: Swift.Int,
                        heart: Swift.Int,
                        hooray: Swift.Int,
                        laugh: Swift.Int,
                        rocket: Swift.Int,
                        totalCount: Swift.Int,
                        url: Swift.String
                    ) {
                        self._plus_1 = _plus_1
                        self._hyphen_1 = _hyphen_1
                        self.confused = confused
                        self.eyes = eyes
                        self.heart = heart
                        self.hooray = hooray
                        self.laugh = laugh
                        self.rocket = rocket
                        self.totalCount = totalCount
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _plus_1 = "+1"
                        case _hyphen_1 = "-1"
                        case confused
                        case eyes
                        case heart
                        case hooray
                        case laugh
                        case rocket
                        case totalCount = "total_count"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/reactions`.
                public var reactions: Components.Schemas.WebhookDiscussionEdited.DiscussionPayload.ReactionsPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/repository_url`.
                public var repositoryUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/state`.
                @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case open = "open"
                    case locked = "locked"
                    case converting = "converting"
                    case transferring = "transferring"
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/state`.
                public var state: Components.Schemas.WebhookDiscussionEdited.DiscussionPayload.StatePayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/timeline_url`.
                public var timelineUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/title`.
                public var title: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/updated_at`.
                public var updatedAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/user`.
                public struct UserPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/user/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/user/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/user/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/user/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/user/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/user/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/user/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/user/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/user/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/user/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/user/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/user/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/user/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/user/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/user/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/user/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/user/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/user/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/user/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/user/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/user/type`.
                    public var _type: Components.Schemas.WebhookDiscussionEdited.DiscussionPayload.UserPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/user/url`.
                    public var url: Swift.String?
                    /// Creates a new `UserPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookDiscussionEdited.DiscussionPayload.UserPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion/user`.
                public var user: Components.Schemas.WebhookDiscussionEdited.DiscussionPayload.UserPayload?
                /// Creates a new `DiscussionPayload`.
                ///
                /// - Parameters:
                ///   - activeLockReason:
                ///   - answerChosenAt:
                ///   - answerChosenBy:
                ///   - answerHtmlUrl:
                ///   - authorAssociation: How the author is associated with the repository.
                ///   - body:
                ///   - category:
                ///   - comments:
                ///   - createdAt:
                ///   - htmlUrl:
                ///   - id:
                ///   - locked:
                ///   - nodeId:
                ///   - number:
                ///   - reactions:
                ///   - repositoryUrl:
                ///   - state:
                ///   - timelineUrl:
                ///   - title:
                ///   - updatedAt:
                ///   - user:
                public init(
                    activeLockReason: Swift.String? = nil,
                    answerChosenAt: Swift.String? = nil,
                    answerChosenBy: Components.Schemas.WebhookDiscussionEdited.DiscussionPayload.AnswerChosenByPayload? = nil,
                    answerHtmlUrl: Swift.String? = nil,
                    authorAssociation: Components.Schemas.WebhookDiscussionEdited.DiscussionPayload.AuthorAssociationPayload,
                    body: Swift.String,
                    category: Components.Schemas.WebhookDiscussionEdited.DiscussionPayload.CategoryPayload,
                    comments: Swift.Int,
                    createdAt: Swift.String,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    locked: Swift.Bool,
                    nodeId: Swift.String,
                    number: Swift.Int,
                    reactions: Components.Schemas.WebhookDiscussionEdited.DiscussionPayload.ReactionsPayload? = nil,
                    repositoryUrl: Swift.String,
                    state: Components.Schemas.WebhookDiscussionEdited.DiscussionPayload.StatePayload,
                    timelineUrl: Swift.String? = nil,
                    title: Swift.String,
                    updatedAt: Swift.String,
                    user: Components.Schemas.WebhookDiscussionEdited.DiscussionPayload.UserPayload? = nil
                ) {
                    self.activeLockReason = activeLockReason
                    self.answerChosenAt = answerChosenAt
                    self.answerChosenBy = answerChosenBy
                    self.answerHtmlUrl = answerHtmlUrl
                    self.authorAssociation = authorAssociation
                    self.body = body
                    self.category = category
                    self.comments = comments
                    self.createdAt = createdAt
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.locked = locked
                    self.nodeId = nodeId
                    self.number = number
                    self.reactions = reactions
                    self.repositoryUrl = repositoryUrl
                    self.state = state
                    self.timelineUrl = timelineUrl
                    self.title = title
                    self.updatedAt = updatedAt
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case activeLockReason = "active_lock_reason"
                    case answerChosenAt = "answer_chosen_at"
                    case answerChosenBy = "answer_chosen_by"
                    case answerHtmlUrl = "answer_html_url"
                    case authorAssociation = "author_association"
                    case body
                    case category
                    case comments
                    case createdAt = "created_at"
                    case htmlUrl = "html_url"
                    case id
                    case locked
                    case nodeId = "node_id"
                    case number
                    case reactions
                    case repositoryUrl = "repository_url"
                    case state
                    case timelineUrl = "timeline_url"
                    case title
                    case updatedAt = "updated_at"
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/discussion`.
            public var discussion: Components.Schemas.WebhookDiscussionEdited.DiscussionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-edited/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Creates a new `WebhookDiscussionEdited`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - changes:
            ///   - discussion:
            ///   - enterprise:
            ///   - installation:
            ///   - organization:
            ///   - repository:
            ///   - sender:
            public init(
                action: Components.Schemas.WebhookDiscussionEdited.ActionPayload,
                changes: Components.Schemas.WebhookDiscussionEdited.ChangesPayload? = nil,
                discussion: Components.Schemas.WebhookDiscussionEdited.DiscussionPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser
            ) {
                self.action = action
                self.changes = changes
                self.discussion = discussion
                self.enterprise = enterprise
                self.installation = installation
                self.organization = organization
                self.repository = repository
                self.sender = sender
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case changes
                case discussion
                case enterprise
                case installation
                case organization
                case repository
                case sender
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled`.
        public struct WebhookDiscussionLabeled: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case labeled = "labeled"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/action`.
            public var action: Components.Schemas.WebhookDiscussionLabeled.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion`.
            public struct DiscussionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/active_lock_reason`.
                public var activeLockReason: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/answer_chosen_at`.
                public var answerChosenAt: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/answer_chosen_by`.
                public struct AnswerChosenByPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/answer_chosen_by/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/answer_chosen_by/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/answer_chosen_by/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/answer_chosen_by/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/answer_chosen_by/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/answer_chosen_by/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/answer_chosen_by/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/answer_chosen_by/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/answer_chosen_by/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/answer_chosen_by/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/answer_chosen_by/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/answer_chosen_by/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/answer_chosen_by/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/answer_chosen_by/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/answer_chosen_by/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/answer_chosen_by/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/answer_chosen_by/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/answer_chosen_by/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/answer_chosen_by/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/answer_chosen_by/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/answer_chosen_by/type`.
                    public var _type: Components.Schemas.WebhookDiscussionLabeled.DiscussionPayload.AnswerChosenByPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/answer_chosen_by/url`.
                    public var url: Swift.String?
                    /// Creates a new `AnswerChosenByPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookDiscussionLabeled.DiscussionPayload.AnswerChosenByPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/answer_chosen_by`.
                public var answerChosenBy: Components.Schemas.WebhookDiscussionLabeled.DiscussionPayload.AnswerChosenByPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/answer_html_url`.
                public var answerHtmlUrl: Swift.String?
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/author_association`.
                @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case collaborator = "COLLABORATOR"
                    case contributor = "CONTRIBUTOR"
                    case firstTimer = "FIRST_TIMER"
                    case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                    case mannequin = "MANNEQUIN"
                    case member = "MEMBER"
                    case none = "NONE"
                    case owner = "OWNER"
                }
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/author_association`.
                public var authorAssociation: Components.Schemas.WebhookDiscussionLabeled.DiscussionPayload.AuthorAssociationPayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/body`.
                public var body: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/category`.
                public struct CategoryPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/category/created_at`.
                    public var createdAt: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/category/description`.
                    public var description: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/category/emoji`.
                    public var emoji: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/category/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/category/is_answerable`.
                    public var isAnswerable: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/category/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/category/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/category/repository_id`.
                    public var repositoryId: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/category/slug`.
                    public var slug: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/category/updated_at`.
                    public var updatedAt: Swift.String
                    /// Creates a new `CategoryPayload`.
                    ///
                    /// - Parameters:
                    ///   - createdAt:
                    ///   - description:
                    ///   - emoji:
                    ///   - id:
                    ///   - isAnswerable:
                    ///   - name:
                    ///   - nodeId:
                    ///   - repositoryId:
                    ///   - slug:
                    ///   - updatedAt:
                    public init(
                        createdAt: Swift.String,
                        description: Swift.String,
                        emoji: Swift.String,
                        id: Swift.Int,
                        isAnswerable: Swift.Bool,
                        name: Swift.String,
                        nodeId: Swift.String? = nil,
                        repositoryId: Swift.Int,
                        slug: Swift.String,
                        updatedAt: Swift.String
                    ) {
                        self.createdAt = createdAt
                        self.description = description
                        self.emoji = emoji
                        self.id = id
                        self.isAnswerable = isAnswerable
                        self.name = name
                        self.nodeId = nodeId
                        self.repositoryId = repositoryId
                        self.slug = slug
                        self.updatedAt = updatedAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case createdAt = "created_at"
                        case description
                        case emoji
                        case id
                        case isAnswerable = "is_answerable"
                        case name
                        case nodeId = "node_id"
                        case repositoryId = "repository_id"
                        case slug
                        case updatedAt = "updated_at"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/category`.
                public var category: Components.Schemas.WebhookDiscussionLabeled.DiscussionPayload.CategoryPayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/comments`.
                public var comments: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/created_at`.
                public var createdAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/html_url`.
                public var htmlUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/locked`.
                public var locked: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/number`.
                public var number: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/reactions`.
                public struct ReactionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/reactions/+1`.
                    public var _plus_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/reactions/-1`.
                    public var _hyphen_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/reactions/confused`.
                    public var confused: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/reactions/eyes`.
                    public var eyes: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/reactions/heart`.
                    public var heart: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/reactions/hooray`.
                    public var hooray: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/reactions/laugh`.
                    public var laugh: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/reactions/rocket`.
                    public var rocket: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/reactions/total_count`.
                    public var totalCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/reactions/url`.
                    public var url: Swift.String
                    /// Creates a new `ReactionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - _plus_1:
                    ///   - _hyphen_1:
                    ///   - confused:
                    ///   - eyes:
                    ///   - heart:
                    ///   - hooray:
                    ///   - laugh:
                    ///   - rocket:
                    ///   - totalCount:
                    ///   - url:
                    public init(
                        _plus_1: Swift.Int,
                        _hyphen_1: Swift.Int,
                        confused: Swift.Int,
                        eyes: Swift.Int,
                        heart: Swift.Int,
                        hooray: Swift.Int,
                        laugh: Swift.Int,
                        rocket: Swift.Int,
                        totalCount: Swift.Int,
                        url: Swift.String
                    ) {
                        self._plus_1 = _plus_1
                        self._hyphen_1 = _hyphen_1
                        self.confused = confused
                        self.eyes = eyes
                        self.heart = heart
                        self.hooray = hooray
                        self.laugh = laugh
                        self.rocket = rocket
                        self.totalCount = totalCount
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _plus_1 = "+1"
                        case _hyphen_1 = "-1"
                        case confused
                        case eyes
                        case heart
                        case hooray
                        case laugh
                        case rocket
                        case totalCount = "total_count"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/reactions`.
                public var reactions: Components.Schemas.WebhookDiscussionLabeled.DiscussionPayload.ReactionsPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/repository_url`.
                public var repositoryUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/state`.
                @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case open = "open"
                    case locked = "locked"
                    case converting = "converting"
                    case transferring = "transferring"
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/state`.
                public var state: Components.Schemas.WebhookDiscussionLabeled.DiscussionPayload.StatePayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/timeline_url`.
                public var timelineUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/title`.
                public var title: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/updated_at`.
                public var updatedAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/user`.
                public struct UserPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/user/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/user/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/user/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/user/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/user/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/user/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/user/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/user/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/user/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/user/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/user/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/user/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/user/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/user/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/user/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/user/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/user/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/user/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/user/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/user/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/user/type`.
                    public var _type: Components.Schemas.WebhookDiscussionLabeled.DiscussionPayload.UserPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/user/url`.
                    public var url: Swift.String?
                    /// Creates a new `UserPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookDiscussionLabeled.DiscussionPayload.UserPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion/user`.
                public var user: Components.Schemas.WebhookDiscussionLabeled.DiscussionPayload.UserPayload?
                /// Creates a new `DiscussionPayload`.
                ///
                /// - Parameters:
                ///   - activeLockReason:
                ///   - answerChosenAt:
                ///   - answerChosenBy:
                ///   - answerHtmlUrl:
                ///   - authorAssociation: How the author is associated with the repository.
                ///   - body:
                ///   - category:
                ///   - comments:
                ///   - createdAt:
                ///   - htmlUrl:
                ///   - id:
                ///   - locked:
                ///   - nodeId:
                ///   - number:
                ///   - reactions:
                ///   - repositoryUrl:
                ///   - state:
                ///   - timelineUrl:
                ///   - title:
                ///   - updatedAt:
                ///   - user:
                public init(
                    activeLockReason: Swift.String? = nil,
                    answerChosenAt: Swift.String? = nil,
                    answerChosenBy: Components.Schemas.WebhookDiscussionLabeled.DiscussionPayload.AnswerChosenByPayload? = nil,
                    answerHtmlUrl: Swift.String? = nil,
                    authorAssociation: Components.Schemas.WebhookDiscussionLabeled.DiscussionPayload.AuthorAssociationPayload,
                    body: Swift.String? = nil,
                    category: Components.Schemas.WebhookDiscussionLabeled.DiscussionPayload.CategoryPayload,
                    comments: Swift.Int,
                    createdAt: Swift.String,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    locked: Swift.Bool,
                    nodeId: Swift.String,
                    number: Swift.Int,
                    reactions: Components.Schemas.WebhookDiscussionLabeled.DiscussionPayload.ReactionsPayload? = nil,
                    repositoryUrl: Swift.String,
                    state: Components.Schemas.WebhookDiscussionLabeled.DiscussionPayload.StatePayload,
                    timelineUrl: Swift.String? = nil,
                    title: Swift.String,
                    updatedAt: Swift.String,
                    user: Components.Schemas.WebhookDiscussionLabeled.DiscussionPayload.UserPayload? = nil
                ) {
                    self.activeLockReason = activeLockReason
                    self.answerChosenAt = answerChosenAt
                    self.answerChosenBy = answerChosenBy
                    self.answerHtmlUrl = answerHtmlUrl
                    self.authorAssociation = authorAssociation
                    self.body = body
                    self.category = category
                    self.comments = comments
                    self.createdAt = createdAt
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.locked = locked
                    self.nodeId = nodeId
                    self.number = number
                    self.reactions = reactions
                    self.repositoryUrl = repositoryUrl
                    self.state = state
                    self.timelineUrl = timelineUrl
                    self.title = title
                    self.updatedAt = updatedAt
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case activeLockReason = "active_lock_reason"
                    case answerChosenAt = "answer_chosen_at"
                    case answerChosenBy = "answer_chosen_by"
                    case answerHtmlUrl = "answer_html_url"
                    case authorAssociation = "author_association"
                    case body
                    case category
                    case comments
                    case createdAt = "created_at"
                    case htmlUrl = "html_url"
                    case id
                    case locked
                    case nodeId = "node_id"
                    case number
                    case reactions
                    case repositoryUrl = "repository_url"
                    case state
                    case timelineUrl = "timeline_url"
                    case title
                    case updatedAt = "updated_at"
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/discussion`.
            public var discussion: Components.Schemas.WebhookDiscussionLabeled.DiscussionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/label`.
            public struct LabelPayload: Codable, Hashable, Sendable {
                /// 6-character hex code, without the leading #, identifying the color
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/label/color`.
                public var color: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/label/default`.
                public var _default: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/label/description`.
                public var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/label/id`.
                public var id: Swift.Int
                /// The name of the label.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/label/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/label/node_id`.
                public var nodeId: Swift.String
                /// URL for the label
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/label/url`.
                public var url: Swift.String
                /// Creates a new `LabelPayload`.
                ///
                /// - Parameters:
                ///   - color: 6-character hex code, without the leading #, identifying the color
                ///   - _default:
                ///   - description:
                ///   - id:
                ///   - name: The name of the label.
                ///   - nodeId:
                ///   - url: URL for the label
                public init(
                    color: Swift.String,
                    _default: Swift.Bool,
                    description: Swift.String? = nil,
                    id: Swift.Int,
                    name: Swift.String,
                    nodeId: Swift.String,
                    url: Swift.String
                ) {
                    self.color = color
                    self._default = _default
                    self.description = description
                    self.id = id
                    self.name = name
                    self.nodeId = nodeId
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case color
                    case _default = "default"
                    case description
                    case id
                    case name
                    case nodeId = "node_id"
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/label`.
            public var label: Components.Schemas.WebhookDiscussionLabeled.LabelPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-labeled/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Creates a new `WebhookDiscussionLabeled`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - discussion:
            ///   - enterprise:
            ///   - installation:
            ///   - label:
            ///   - organization:
            ///   - repository:
            ///   - sender:
            public init(
                action: Components.Schemas.WebhookDiscussionLabeled.ActionPayload,
                discussion: Components.Schemas.WebhookDiscussionLabeled.DiscussionPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                label: Components.Schemas.WebhookDiscussionLabeled.LabelPayload,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser
            ) {
                self.action = action
                self.discussion = discussion
                self.enterprise = enterprise
                self.installation = installation
                self.label = label
                self.organization = organization
                self.repository = repository
                self.sender = sender
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case discussion
                case enterprise
                case installation
                case label
                case organization
                case repository
                case sender
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked`.
        public struct WebhookDiscussionLocked: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case locked = "locked"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/action`.
            public var action: Components.Schemas.WebhookDiscussionLocked.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion`.
            public struct DiscussionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/active_lock_reason`.
                    public var activeLockReason: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/answer_chosen_at`.
                    public var answerChosenAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/answer_chosen_by`.
                    public struct AnswerChosenByPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/answer_chosen_by/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/answer_chosen_by/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/answer_chosen_by/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/answer_chosen_by/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/answer_chosen_by/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/answer_chosen_by/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/answer_chosen_by/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/answer_chosen_by/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/answer_chosen_by/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/answer_chosen_by/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/answer_chosen_by/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/answer_chosen_by/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/answer_chosen_by/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/answer_chosen_by/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/answer_chosen_by/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/answer_chosen_by/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/answer_chosen_by/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/answer_chosen_by/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/answer_chosen_by/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/answer_chosen_by/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/answer_chosen_by/type`.
                        public var _type: Components.Schemas.WebhookDiscussionLocked.DiscussionPayload.Value1Payload.AnswerChosenByPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/answer_chosen_by/url`.
                        public var url: Swift.String?
                        /// Creates a new `AnswerChosenByPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookDiscussionLocked.DiscussionPayload.Value1Payload.AnswerChosenByPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/answer_chosen_by`.
                    public var answerChosenBy: Components.Schemas.WebhookDiscussionLocked.DiscussionPayload.Value1Payload.AnswerChosenByPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/answer_html_url`.
                    public var answerHtmlUrl: Swift.String?
                    /// How the author is associated with the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/author_association`.
                    @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case collaborator = "COLLABORATOR"
                        case contributor = "CONTRIBUTOR"
                        case firstTimer = "FIRST_TIMER"
                        case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                        case mannequin = "MANNEQUIN"
                        case member = "MEMBER"
                        case none = "NONE"
                        case owner = "OWNER"
                    }
                    /// How the author is associated with the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/author_association`.
                    public var authorAssociation: Components.Schemas.WebhookDiscussionLocked.DiscussionPayload.Value1Payload.AuthorAssociationPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/body`.
                    public var body: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/category`.
                    public struct CategoryPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/category/created_at`.
                        public var createdAt: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/category/description`.
                        public var description: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/category/emoji`.
                        public var emoji: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/category/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/category/is_answerable`.
                        public var isAnswerable: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/category/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/category/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/category/repository_id`.
                        public var repositoryId: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/category/slug`.
                        public var slug: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/category/updated_at`.
                        public var updatedAt: Swift.String
                        /// Creates a new `CategoryPayload`.
                        ///
                        /// - Parameters:
                        ///   - createdAt:
                        ///   - description:
                        ///   - emoji:
                        ///   - id:
                        ///   - isAnswerable:
                        ///   - name:
                        ///   - nodeId:
                        ///   - repositoryId:
                        ///   - slug:
                        ///   - updatedAt:
                        public init(
                            createdAt: Swift.String,
                            description: Swift.String,
                            emoji: Swift.String,
                            id: Swift.Int,
                            isAnswerable: Swift.Bool,
                            name: Swift.String,
                            nodeId: Swift.String? = nil,
                            repositoryId: Swift.Int,
                            slug: Swift.String,
                            updatedAt: Swift.String
                        ) {
                            self.createdAt = createdAt
                            self.description = description
                            self.emoji = emoji
                            self.id = id
                            self.isAnswerable = isAnswerable
                            self.name = name
                            self.nodeId = nodeId
                            self.repositoryId = repositoryId
                            self.slug = slug
                            self.updatedAt = updatedAt
                        }
                        public enum CodingKeys: String, CodingKey {
                            case createdAt = "created_at"
                            case description
                            case emoji
                            case id
                            case isAnswerable = "is_answerable"
                            case name
                            case nodeId = "node_id"
                            case repositoryId = "repository_id"
                            case slug
                            case updatedAt = "updated_at"
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/category`.
                    public var category: Components.Schemas.WebhookDiscussionLocked.DiscussionPayload.Value1Payload.CategoryPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/comments`.
                    public var comments: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/created_at`.
                    public var createdAt: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/html_url`.
                    public var htmlUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/locked`.
                    public var locked: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/number`.
                    public var number: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/reactions`.
                    public struct ReactionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/reactions/+1`.
                        public var _plus_1: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/reactions/-1`.
                        public var _hyphen_1: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/reactions/confused`.
                        public var confused: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/reactions/eyes`.
                        public var eyes: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/reactions/heart`.
                        public var heart: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/reactions/hooray`.
                        public var hooray: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/reactions/laugh`.
                        public var laugh: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/reactions/rocket`.
                        public var rocket: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/reactions/total_count`.
                        public var totalCount: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/reactions/url`.
                        public var url: Swift.String
                        /// Creates a new `ReactionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - _plus_1:
                        ///   - _hyphen_1:
                        ///   - confused:
                        ///   - eyes:
                        ///   - heart:
                        ///   - hooray:
                        ///   - laugh:
                        ///   - rocket:
                        ///   - totalCount:
                        ///   - url:
                        public init(
                            _plus_1: Swift.Int,
                            _hyphen_1: Swift.Int,
                            confused: Swift.Int,
                            eyes: Swift.Int,
                            heart: Swift.Int,
                            hooray: Swift.Int,
                            laugh: Swift.Int,
                            rocket: Swift.Int,
                            totalCount: Swift.Int,
                            url: Swift.String
                        ) {
                            self._plus_1 = _plus_1
                            self._hyphen_1 = _hyphen_1
                            self.confused = confused
                            self.eyes = eyes
                            self.heart = heart
                            self.hooray = hooray
                            self.laugh = laugh
                            self.rocket = rocket
                            self.totalCount = totalCount
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _plus_1 = "+1"
                            case _hyphen_1 = "-1"
                            case confused
                            case eyes
                            case heart
                            case hooray
                            case laugh
                            case rocket
                            case totalCount = "total_count"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/reactions`.
                    public var reactions: Components.Schemas.WebhookDiscussionLocked.DiscussionPayload.Value1Payload.ReactionsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/repository_url`.
                    public var repositoryUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/state`.
                    @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case locked = "locked"
                        case converting = "converting"
                        case transferring = "transferring"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/state`.
                    public var state: Components.Schemas.WebhookDiscussionLocked.DiscussionPayload.Value1Payload.StatePayload
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/timeline_url`.
                    public var timelineUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/title`.
                    public var title: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/updated_at`.
                    public var updatedAt: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/user`.
                    public struct UserPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/user/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/user/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/user/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/user/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/user/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/user/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/user/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/user/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/user/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/user/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/user/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/user/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/user/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/user/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/user/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/user/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/user/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/user/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/user/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/user/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/user/type`.
                        public var _type: Components.Schemas.WebhookDiscussionLocked.DiscussionPayload.Value1Payload.UserPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/user/url`.
                        public var url: Swift.String?
                        /// Creates a new `UserPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookDiscussionLocked.DiscussionPayload.Value1Payload.UserPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1/user`.
                    public var user: Components.Schemas.WebhookDiscussionLocked.DiscussionPayload.Value1Payload.UserPayload?
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - activeLockReason:
                    ///   - answerChosenAt:
                    ///   - answerChosenBy:
                    ///   - answerHtmlUrl:
                    ///   - authorAssociation: How the author is associated with the repository.
                    ///   - body:
                    ///   - category:
                    ///   - comments:
                    ///   - createdAt:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - locked:
                    ///   - nodeId:
                    ///   - number:
                    ///   - reactions:
                    ///   - repositoryUrl:
                    ///   - state:
                    ///   - timelineUrl:
                    ///   - title:
                    ///   - updatedAt:
                    ///   - user:
                    public init(
                        activeLockReason: Swift.String? = nil,
                        answerChosenAt: Swift.String? = nil,
                        answerChosenBy: Components.Schemas.WebhookDiscussionLocked.DiscussionPayload.Value1Payload.AnswerChosenByPayload? = nil,
                        answerHtmlUrl: Swift.String? = nil,
                        authorAssociation: Components.Schemas.WebhookDiscussionLocked.DiscussionPayload.Value1Payload.AuthorAssociationPayload,
                        body: Swift.String,
                        category: Components.Schemas.WebhookDiscussionLocked.DiscussionPayload.Value1Payload.CategoryPayload,
                        comments: Swift.Int,
                        createdAt: Swift.String,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        locked: Swift.Bool,
                        nodeId: Swift.String,
                        number: Swift.Int,
                        reactions: Components.Schemas.WebhookDiscussionLocked.DiscussionPayload.Value1Payload.ReactionsPayload? = nil,
                        repositoryUrl: Swift.String,
                        state: Components.Schemas.WebhookDiscussionLocked.DiscussionPayload.Value1Payload.StatePayload,
                        timelineUrl: Swift.String? = nil,
                        title: Swift.String,
                        updatedAt: Swift.String,
                        user: Components.Schemas.WebhookDiscussionLocked.DiscussionPayload.Value1Payload.UserPayload? = nil
                    ) {
                        self.activeLockReason = activeLockReason
                        self.answerChosenAt = answerChosenAt
                        self.answerChosenBy = answerChosenBy
                        self.answerHtmlUrl = answerHtmlUrl
                        self.authorAssociation = authorAssociation
                        self.body = body
                        self.category = category
                        self.comments = comments
                        self.createdAt = createdAt
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.locked = locked
                        self.nodeId = nodeId
                        self.number = number
                        self.reactions = reactions
                        self.repositoryUrl = repositoryUrl
                        self.state = state
                        self.timelineUrl = timelineUrl
                        self.title = title
                        self.updatedAt = updatedAt
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case activeLockReason = "active_lock_reason"
                        case answerChosenAt = "answer_chosen_at"
                        case answerChosenBy = "answer_chosen_by"
                        case answerHtmlUrl = "answer_html_url"
                        case authorAssociation = "author_association"
                        case body
                        case category
                        case comments
                        case createdAt = "created_at"
                        case htmlUrl = "html_url"
                        case id
                        case locked
                        case nodeId = "node_id"
                        case number
                        case reactions
                        case repositoryUrl = "repository_url"
                        case state
                        case timelineUrl = "timeline_url"
                        case title
                        case updatedAt = "updated_at"
                        case user
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value1`.
                public var value1: Components.Schemas.WebhookDiscussionLocked.DiscussionPayload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/active_lock_reason`.
                    public var activeLockReason: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/answer_chosen_at`.
                    public var answerChosenAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/answer_chosen_by`.
                    public var answerChosenBy: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/answer_html_url`.
                    public var answerHtmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/author_association`.
                    public var authorAssociation: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/body`.
                    public var body: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/category`.
                    public struct CategoryPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/category/created_at`.
                        public var createdAt: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/category/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/category/emoji`.
                        public var emoji: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/category/id`.
                        public var id: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/category/is_answerable`.
                        public var isAnswerable: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/category/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/category/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/category/repository_id`.
                        public var repositoryId: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/category/slug`.
                        public var slug: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/category/updated_at`.
                        public var updatedAt: Swift.String?
                        /// Creates a new `CategoryPayload`.
                        ///
                        /// - Parameters:
                        ///   - createdAt:
                        ///   - description:
                        ///   - emoji:
                        ///   - id:
                        ///   - isAnswerable:
                        ///   - name:
                        ///   - nodeId:
                        ///   - repositoryId:
                        ///   - slug:
                        ///   - updatedAt:
                        public init(
                            createdAt: Swift.String? = nil,
                            description: Swift.String? = nil,
                            emoji: Swift.String? = nil,
                            id: Swift.Int? = nil,
                            isAnswerable: Swift.Bool? = nil,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            repositoryId: Swift.Int? = nil,
                            slug: Swift.String? = nil,
                            updatedAt: Swift.String? = nil
                        ) {
                            self.createdAt = createdAt
                            self.description = description
                            self.emoji = emoji
                            self.id = id
                            self.isAnswerable = isAnswerable
                            self.name = name
                            self.nodeId = nodeId
                            self.repositoryId = repositoryId
                            self.slug = slug
                            self.updatedAt = updatedAt
                        }
                        public enum CodingKeys: String, CodingKey {
                            case createdAt = "created_at"
                            case description
                            case emoji
                            case id
                            case isAnswerable = "is_answerable"
                            case name
                            case nodeId = "node_id"
                            case repositoryId = "repository_id"
                            case slug
                            case updatedAt = "updated_at"
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/category`.
                    public var category: Components.Schemas.WebhookDiscussionLocked.DiscussionPayload.Value2Payload.CategoryPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/comments`.
                    public var comments: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/created_at`.
                    public var createdAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/id`.
                    public var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/locked`.
                    public var locked: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/number`.
                    public var number: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/reactions`.
                    public struct ReactionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/reactions/+1`.
                        public var _plus_1: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/reactions/-1`.
                        public var _hyphen_1: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/reactions/confused`.
                        public var confused: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/reactions/eyes`.
                        public var eyes: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/reactions/heart`.
                        public var heart: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/reactions/hooray`.
                        public var hooray: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/reactions/laugh`.
                        public var laugh: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/reactions/rocket`.
                        public var rocket: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/reactions/total_count`.
                        public var totalCount: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/reactions/url`.
                        public var url: Swift.String?
                        /// Creates a new `ReactionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - _plus_1:
                        ///   - _hyphen_1:
                        ///   - confused:
                        ///   - eyes:
                        ///   - heart:
                        ///   - hooray:
                        ///   - laugh:
                        ///   - rocket:
                        ///   - totalCount:
                        ///   - url:
                        public init(
                            _plus_1: Swift.Int? = nil,
                            _hyphen_1: Swift.Int? = nil,
                            confused: Swift.Int? = nil,
                            eyes: Swift.Int? = nil,
                            heart: Swift.Int? = nil,
                            hooray: Swift.Int? = nil,
                            laugh: Swift.Int? = nil,
                            rocket: Swift.Int? = nil,
                            totalCount: Swift.Int? = nil,
                            url: Swift.String? = nil
                        ) {
                            self._plus_1 = _plus_1
                            self._hyphen_1 = _hyphen_1
                            self.confused = confused
                            self.eyes = eyes
                            self.heart = heart
                            self.hooray = hooray
                            self.laugh = laugh
                            self.rocket = rocket
                            self.totalCount = totalCount
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _plus_1 = "+1"
                            case _hyphen_1 = "-1"
                            case confused
                            case eyes
                            case heart
                            case hooray
                            case laugh
                            case rocket
                            case totalCount = "total_count"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/reactions`.
                    public var reactions: Components.Schemas.WebhookDiscussionLocked.DiscussionPayload.Value2Payload.ReactionsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/repository_url`.
                    public var repositoryUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/state`.
                    @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case locked = "locked"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/state`.
                    public var state: Components.Schemas.WebhookDiscussionLocked.DiscussionPayload.Value2Payload.StatePayload
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/timeline_url`.
                    public var timelineUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/title`.
                    public var title: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/updated_at`.
                    public var updatedAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/user`.
                    public struct UserPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/user/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/user/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/user/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/user/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/user/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/user/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/user/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/user/id`.
                        public var id: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/user/login`.
                        public var login: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/user/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/user/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/user/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/user/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/user/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/user/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/user/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/user/type`.
                        public var _type: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/user/url`.
                        public var url: Swift.String?
                        /// Creates a new `UserPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int? = nil,
                            login: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2/user`.
                    public var user: Components.Schemas.WebhookDiscussionLocked.DiscussionPayload.Value2Payload.UserPayload?
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - activeLockReason:
                    ///   - answerChosenAt:
                    ///   - answerChosenBy:
                    ///   - answerHtmlUrl:
                    ///   - authorAssociation:
                    ///   - body:
                    ///   - category:
                    ///   - comments:
                    ///   - createdAt:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - locked:
                    ///   - nodeId:
                    ///   - number:
                    ///   - reactions:
                    ///   - repositoryUrl:
                    ///   - state:
                    ///   - timelineUrl:
                    ///   - title:
                    ///   - updatedAt:
                    ///   - user:
                    public init(
                        activeLockReason: Swift.String? = nil,
                        answerChosenAt: Swift.String? = nil,
                        answerChosenBy: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                        answerHtmlUrl: Swift.String? = nil,
                        authorAssociation: Swift.String? = nil,
                        body: Swift.String? = nil,
                        category: Components.Schemas.WebhookDiscussionLocked.DiscussionPayload.Value2Payload.CategoryPayload? = nil,
                        comments: Swift.Int? = nil,
                        createdAt: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int? = nil,
                        locked: Swift.Bool,
                        nodeId: Swift.String? = nil,
                        number: Swift.Int? = nil,
                        reactions: Components.Schemas.WebhookDiscussionLocked.DiscussionPayload.Value2Payload.ReactionsPayload? = nil,
                        repositoryUrl: Swift.String? = nil,
                        state: Components.Schemas.WebhookDiscussionLocked.DiscussionPayload.Value2Payload.StatePayload,
                        timelineUrl: Swift.String? = nil,
                        title: Swift.String? = nil,
                        updatedAt: Swift.String? = nil,
                        user: Components.Schemas.WebhookDiscussionLocked.DiscussionPayload.Value2Payload.UserPayload? = nil
                    ) {
                        self.activeLockReason = activeLockReason
                        self.answerChosenAt = answerChosenAt
                        self.answerChosenBy = answerChosenBy
                        self.answerHtmlUrl = answerHtmlUrl
                        self.authorAssociation = authorAssociation
                        self.body = body
                        self.category = category
                        self.comments = comments
                        self.createdAt = createdAt
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.locked = locked
                        self.nodeId = nodeId
                        self.number = number
                        self.reactions = reactions
                        self.repositoryUrl = repositoryUrl
                        self.state = state
                        self.timelineUrl = timelineUrl
                        self.title = title
                        self.updatedAt = updatedAt
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case activeLockReason = "active_lock_reason"
                        case answerChosenAt = "answer_chosen_at"
                        case answerChosenBy = "answer_chosen_by"
                        case answerHtmlUrl = "answer_html_url"
                        case authorAssociation = "author_association"
                        case body
                        case category
                        case comments
                        case createdAt = "created_at"
                        case htmlUrl = "html_url"
                        case id
                        case locked
                        case nodeId = "node_id"
                        case number
                        case reactions
                        case repositoryUrl = "repository_url"
                        case state
                        case timelineUrl = "timeline_url"
                        case title
                        case updatedAt = "updated_at"
                        case user
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion/value2`.
                public var value2: Components.Schemas.WebhookDiscussionLocked.DiscussionPayload.Value2Payload
                /// Creates a new `DiscussionPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.WebhookDiscussionLocked.DiscussionPayload.Value1Payload,
                    value2: Components.Schemas.WebhookDiscussionLocked.DiscussionPayload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/discussion`.
            public var discussion: Components.Schemas.WebhookDiscussionLocked.DiscussionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-locked/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Creates a new `WebhookDiscussionLocked`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - discussion:
            ///   - enterprise:
            ///   - installation:
            ///   - organization:
            ///   - repository:
            ///   - sender:
            public init(
                action: Components.Schemas.WebhookDiscussionLocked.ActionPayload,
                discussion: Components.Schemas.WebhookDiscussionLocked.DiscussionPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser
            ) {
                self.action = action
                self.discussion = discussion
                self.enterprise = enterprise
                self.installation = installation
                self.organization = organization
                self.repository = repository
                self.sender = sender
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case discussion
                case enterprise
                case installation
                case organization
                case repository
                case sender
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned`.
        public struct WebhookDiscussionPinned: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case pinned = "pinned"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/action`.
            public var action: Components.Schemas.WebhookDiscussionPinned.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion`.
            public struct DiscussionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/active_lock_reason`.
                public var activeLockReason: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/answer_chosen_at`.
                public var answerChosenAt: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/answer_chosen_by`.
                public struct AnswerChosenByPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/answer_chosen_by/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/answer_chosen_by/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/answer_chosen_by/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/answer_chosen_by/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/answer_chosen_by/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/answer_chosen_by/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/answer_chosen_by/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/answer_chosen_by/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/answer_chosen_by/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/answer_chosen_by/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/answer_chosen_by/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/answer_chosen_by/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/answer_chosen_by/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/answer_chosen_by/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/answer_chosen_by/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/answer_chosen_by/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/answer_chosen_by/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/answer_chosen_by/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/answer_chosen_by/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/answer_chosen_by/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/answer_chosen_by/type`.
                    public var _type: Components.Schemas.WebhookDiscussionPinned.DiscussionPayload.AnswerChosenByPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/answer_chosen_by/url`.
                    public var url: Swift.String?
                    /// Creates a new `AnswerChosenByPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookDiscussionPinned.DiscussionPayload.AnswerChosenByPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/answer_chosen_by`.
                public var answerChosenBy: Components.Schemas.WebhookDiscussionPinned.DiscussionPayload.AnswerChosenByPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/answer_html_url`.
                public var answerHtmlUrl: Swift.String?
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/author_association`.
                @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case collaborator = "COLLABORATOR"
                    case contributor = "CONTRIBUTOR"
                    case firstTimer = "FIRST_TIMER"
                    case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                    case mannequin = "MANNEQUIN"
                    case member = "MEMBER"
                    case none = "NONE"
                    case owner = "OWNER"
                }
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/author_association`.
                public var authorAssociation: Components.Schemas.WebhookDiscussionPinned.DiscussionPayload.AuthorAssociationPayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/body`.
                public var body: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/category`.
                public struct CategoryPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/category/created_at`.
                    public var createdAt: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/category/description`.
                    public var description: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/category/emoji`.
                    public var emoji: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/category/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/category/is_answerable`.
                    public var isAnswerable: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/category/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/category/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/category/repository_id`.
                    public var repositoryId: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/category/slug`.
                    public var slug: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/category/updated_at`.
                    public var updatedAt: Swift.String
                    /// Creates a new `CategoryPayload`.
                    ///
                    /// - Parameters:
                    ///   - createdAt:
                    ///   - description:
                    ///   - emoji:
                    ///   - id:
                    ///   - isAnswerable:
                    ///   - name:
                    ///   - nodeId:
                    ///   - repositoryId:
                    ///   - slug:
                    ///   - updatedAt:
                    public init(
                        createdAt: Swift.String,
                        description: Swift.String,
                        emoji: Swift.String,
                        id: Swift.Int,
                        isAnswerable: Swift.Bool,
                        name: Swift.String,
                        nodeId: Swift.String? = nil,
                        repositoryId: Swift.Int,
                        slug: Swift.String,
                        updatedAt: Swift.String
                    ) {
                        self.createdAt = createdAt
                        self.description = description
                        self.emoji = emoji
                        self.id = id
                        self.isAnswerable = isAnswerable
                        self.name = name
                        self.nodeId = nodeId
                        self.repositoryId = repositoryId
                        self.slug = slug
                        self.updatedAt = updatedAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case createdAt = "created_at"
                        case description
                        case emoji
                        case id
                        case isAnswerable = "is_answerable"
                        case name
                        case nodeId = "node_id"
                        case repositoryId = "repository_id"
                        case slug
                        case updatedAt = "updated_at"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/category`.
                public var category: Components.Schemas.WebhookDiscussionPinned.DiscussionPayload.CategoryPayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/comments`.
                public var comments: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/created_at`.
                public var createdAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/html_url`.
                public var htmlUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/locked`.
                public var locked: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/number`.
                public var number: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/reactions`.
                public struct ReactionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/reactions/+1`.
                    public var _plus_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/reactions/-1`.
                    public var _hyphen_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/reactions/confused`.
                    public var confused: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/reactions/eyes`.
                    public var eyes: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/reactions/heart`.
                    public var heart: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/reactions/hooray`.
                    public var hooray: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/reactions/laugh`.
                    public var laugh: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/reactions/rocket`.
                    public var rocket: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/reactions/total_count`.
                    public var totalCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/reactions/url`.
                    public var url: Swift.String
                    /// Creates a new `ReactionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - _plus_1:
                    ///   - _hyphen_1:
                    ///   - confused:
                    ///   - eyes:
                    ///   - heart:
                    ///   - hooray:
                    ///   - laugh:
                    ///   - rocket:
                    ///   - totalCount:
                    ///   - url:
                    public init(
                        _plus_1: Swift.Int,
                        _hyphen_1: Swift.Int,
                        confused: Swift.Int,
                        eyes: Swift.Int,
                        heart: Swift.Int,
                        hooray: Swift.Int,
                        laugh: Swift.Int,
                        rocket: Swift.Int,
                        totalCount: Swift.Int,
                        url: Swift.String
                    ) {
                        self._plus_1 = _plus_1
                        self._hyphen_1 = _hyphen_1
                        self.confused = confused
                        self.eyes = eyes
                        self.heart = heart
                        self.hooray = hooray
                        self.laugh = laugh
                        self.rocket = rocket
                        self.totalCount = totalCount
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _plus_1 = "+1"
                        case _hyphen_1 = "-1"
                        case confused
                        case eyes
                        case heart
                        case hooray
                        case laugh
                        case rocket
                        case totalCount = "total_count"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/reactions`.
                public var reactions: Components.Schemas.WebhookDiscussionPinned.DiscussionPayload.ReactionsPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/repository_url`.
                public var repositoryUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/state`.
                @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case open = "open"
                    case locked = "locked"
                    case converting = "converting"
                    case transferring = "transferring"
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/state`.
                public var state: Components.Schemas.WebhookDiscussionPinned.DiscussionPayload.StatePayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/timeline_url`.
                public var timelineUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/title`.
                public var title: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/updated_at`.
                public var updatedAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/user`.
                public struct UserPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/user/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/user/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/user/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/user/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/user/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/user/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/user/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/user/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/user/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/user/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/user/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/user/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/user/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/user/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/user/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/user/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/user/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/user/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/user/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/user/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/user/type`.
                    public var _type: Components.Schemas.WebhookDiscussionPinned.DiscussionPayload.UserPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/user/url`.
                    public var url: Swift.String?
                    /// Creates a new `UserPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookDiscussionPinned.DiscussionPayload.UserPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion/user`.
                public var user: Components.Schemas.WebhookDiscussionPinned.DiscussionPayload.UserPayload?
                /// Creates a new `DiscussionPayload`.
                ///
                /// - Parameters:
                ///   - activeLockReason:
                ///   - answerChosenAt:
                ///   - answerChosenBy:
                ///   - answerHtmlUrl:
                ///   - authorAssociation: How the author is associated with the repository.
                ///   - body:
                ///   - category:
                ///   - comments:
                ///   - createdAt:
                ///   - htmlUrl:
                ///   - id:
                ///   - locked:
                ///   - nodeId:
                ///   - number:
                ///   - reactions:
                ///   - repositoryUrl:
                ///   - state:
                ///   - timelineUrl:
                ///   - title:
                ///   - updatedAt:
                ///   - user:
                public init(
                    activeLockReason: Swift.String? = nil,
                    answerChosenAt: Swift.String? = nil,
                    answerChosenBy: Components.Schemas.WebhookDiscussionPinned.DiscussionPayload.AnswerChosenByPayload? = nil,
                    answerHtmlUrl: Swift.String? = nil,
                    authorAssociation: Components.Schemas.WebhookDiscussionPinned.DiscussionPayload.AuthorAssociationPayload,
                    body: Swift.String,
                    category: Components.Schemas.WebhookDiscussionPinned.DiscussionPayload.CategoryPayload,
                    comments: Swift.Int,
                    createdAt: Swift.String,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    locked: Swift.Bool,
                    nodeId: Swift.String,
                    number: Swift.Int,
                    reactions: Components.Schemas.WebhookDiscussionPinned.DiscussionPayload.ReactionsPayload? = nil,
                    repositoryUrl: Swift.String,
                    state: Components.Schemas.WebhookDiscussionPinned.DiscussionPayload.StatePayload,
                    timelineUrl: Swift.String? = nil,
                    title: Swift.String,
                    updatedAt: Swift.String,
                    user: Components.Schemas.WebhookDiscussionPinned.DiscussionPayload.UserPayload? = nil
                ) {
                    self.activeLockReason = activeLockReason
                    self.answerChosenAt = answerChosenAt
                    self.answerChosenBy = answerChosenBy
                    self.answerHtmlUrl = answerHtmlUrl
                    self.authorAssociation = authorAssociation
                    self.body = body
                    self.category = category
                    self.comments = comments
                    self.createdAt = createdAt
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.locked = locked
                    self.nodeId = nodeId
                    self.number = number
                    self.reactions = reactions
                    self.repositoryUrl = repositoryUrl
                    self.state = state
                    self.timelineUrl = timelineUrl
                    self.title = title
                    self.updatedAt = updatedAt
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case activeLockReason = "active_lock_reason"
                    case answerChosenAt = "answer_chosen_at"
                    case answerChosenBy = "answer_chosen_by"
                    case answerHtmlUrl = "answer_html_url"
                    case authorAssociation = "author_association"
                    case body
                    case category
                    case comments
                    case createdAt = "created_at"
                    case htmlUrl = "html_url"
                    case id
                    case locked
                    case nodeId = "node_id"
                    case number
                    case reactions
                    case repositoryUrl = "repository_url"
                    case state
                    case timelineUrl = "timeline_url"
                    case title
                    case updatedAt = "updated_at"
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/discussion`.
            public var discussion: Components.Schemas.WebhookDiscussionPinned.DiscussionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-pinned/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Creates a new `WebhookDiscussionPinned`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - discussion:
            ///   - enterprise:
            ///   - installation:
            ///   - organization:
            ///   - repository:
            ///   - sender:
            public init(
                action: Components.Schemas.WebhookDiscussionPinned.ActionPayload,
                discussion: Components.Schemas.WebhookDiscussionPinned.DiscussionPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser
            ) {
                self.action = action
                self.discussion = discussion
                self.enterprise = enterprise
                self.installation = installation
                self.organization = organization
                self.repository = repository
                self.sender = sender
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case discussion
                case enterprise
                case installation
                case organization
                case repository
                case sender
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred`.
        public struct WebhookDiscussionTransferred: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case transferred = "transferred"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/action`.
            public var action: Components.Schemas.WebhookDiscussionTransferred.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes`.
            public struct ChangesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion`.
                public struct NewDiscussionPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/active_lock_reason`.
                    public var activeLockReason: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/answer_chosen_at`.
                    public var answerChosenAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/answer_chosen_by`.
                    public struct AnswerChosenByPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/answer_chosen_by/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/answer_chosen_by/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/answer_chosen_by/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/answer_chosen_by/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/answer_chosen_by/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/answer_chosen_by/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/answer_chosen_by/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/answer_chosen_by/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/answer_chosen_by/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/answer_chosen_by/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/answer_chosen_by/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/answer_chosen_by/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/answer_chosen_by/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/answer_chosen_by/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/answer_chosen_by/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/answer_chosen_by/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/answer_chosen_by/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/answer_chosen_by/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/answer_chosen_by/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/answer_chosen_by/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/answer_chosen_by/type`.
                        public var _type: Components.Schemas.WebhookDiscussionTransferred.ChangesPayload.NewDiscussionPayload.AnswerChosenByPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/answer_chosen_by/url`.
                        public var url: Swift.String?
                        /// Creates a new `AnswerChosenByPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookDiscussionTransferred.ChangesPayload.NewDiscussionPayload.AnswerChosenByPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/answer_chosen_by`.
                    public var answerChosenBy: Components.Schemas.WebhookDiscussionTransferred.ChangesPayload.NewDiscussionPayload.AnswerChosenByPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/answer_html_url`.
                    public var answerHtmlUrl: Swift.String?
                    /// How the author is associated with the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/author_association`.
                    @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case collaborator = "COLLABORATOR"
                        case contributor = "CONTRIBUTOR"
                        case firstTimer = "FIRST_TIMER"
                        case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                        case mannequin = "MANNEQUIN"
                        case member = "MEMBER"
                        case none = "NONE"
                        case owner = "OWNER"
                    }
                    /// How the author is associated with the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/author_association`.
                    public var authorAssociation: Components.Schemas.WebhookDiscussionTransferred.ChangesPayload.NewDiscussionPayload.AuthorAssociationPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/body`.
                    public var body: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/category`.
                    public struct CategoryPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/category/created_at`.
                        public var createdAt: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/category/description`.
                        public var description: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/category/emoji`.
                        public var emoji: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/category/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/category/is_answerable`.
                        public var isAnswerable: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/category/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/category/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/category/repository_id`.
                        public var repositoryId: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/category/slug`.
                        public var slug: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/category/updated_at`.
                        public var updatedAt: Swift.String
                        /// Creates a new `CategoryPayload`.
                        ///
                        /// - Parameters:
                        ///   - createdAt:
                        ///   - description:
                        ///   - emoji:
                        ///   - id:
                        ///   - isAnswerable:
                        ///   - name:
                        ///   - nodeId:
                        ///   - repositoryId:
                        ///   - slug:
                        ///   - updatedAt:
                        public init(
                            createdAt: Swift.String,
                            description: Swift.String,
                            emoji: Swift.String,
                            id: Swift.Int,
                            isAnswerable: Swift.Bool,
                            name: Swift.String,
                            nodeId: Swift.String? = nil,
                            repositoryId: Swift.Int,
                            slug: Swift.String,
                            updatedAt: Swift.String
                        ) {
                            self.createdAt = createdAt
                            self.description = description
                            self.emoji = emoji
                            self.id = id
                            self.isAnswerable = isAnswerable
                            self.name = name
                            self.nodeId = nodeId
                            self.repositoryId = repositoryId
                            self.slug = slug
                            self.updatedAt = updatedAt
                        }
                        public enum CodingKeys: String, CodingKey {
                            case createdAt = "created_at"
                            case description
                            case emoji
                            case id
                            case isAnswerable = "is_answerable"
                            case name
                            case nodeId = "node_id"
                            case repositoryId = "repository_id"
                            case slug
                            case updatedAt = "updated_at"
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/category`.
                    public var category: Components.Schemas.WebhookDiscussionTransferred.ChangesPayload.NewDiscussionPayload.CategoryPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/comments`.
                    public var comments: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/created_at`.
                    public var createdAt: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/html_url`.
                    public var htmlUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/locked`.
                    public var locked: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/number`.
                    public var number: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/reactions`.
                    public struct ReactionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/reactions/+1`.
                        public var _plus_1: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/reactions/-1`.
                        public var _hyphen_1: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/reactions/confused`.
                        public var confused: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/reactions/eyes`.
                        public var eyes: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/reactions/heart`.
                        public var heart: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/reactions/hooray`.
                        public var hooray: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/reactions/laugh`.
                        public var laugh: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/reactions/rocket`.
                        public var rocket: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/reactions/total_count`.
                        public var totalCount: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/reactions/url`.
                        public var url: Swift.String
                        /// Creates a new `ReactionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - _plus_1:
                        ///   - _hyphen_1:
                        ///   - confused:
                        ///   - eyes:
                        ///   - heart:
                        ///   - hooray:
                        ///   - laugh:
                        ///   - rocket:
                        ///   - totalCount:
                        ///   - url:
                        public init(
                            _plus_1: Swift.Int,
                            _hyphen_1: Swift.Int,
                            confused: Swift.Int,
                            eyes: Swift.Int,
                            heart: Swift.Int,
                            hooray: Swift.Int,
                            laugh: Swift.Int,
                            rocket: Swift.Int,
                            totalCount: Swift.Int,
                            url: Swift.String
                        ) {
                            self._plus_1 = _plus_1
                            self._hyphen_1 = _hyphen_1
                            self.confused = confused
                            self.eyes = eyes
                            self.heart = heart
                            self.hooray = hooray
                            self.laugh = laugh
                            self.rocket = rocket
                            self.totalCount = totalCount
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _plus_1 = "+1"
                            case _hyphen_1 = "-1"
                            case confused
                            case eyes
                            case heart
                            case hooray
                            case laugh
                            case rocket
                            case totalCount = "total_count"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/reactions`.
                    public var reactions: Components.Schemas.WebhookDiscussionTransferred.ChangesPayload.NewDiscussionPayload.ReactionsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/repository_url`.
                    public var repositoryUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/state`.
                    @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case locked = "locked"
                        case converting = "converting"
                        case transferring = "transferring"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/state`.
                    public var state: Components.Schemas.WebhookDiscussionTransferred.ChangesPayload.NewDiscussionPayload.StatePayload
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/timeline_url`.
                    public var timelineUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/title`.
                    public var title: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/updated_at`.
                    public var updatedAt: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/user`.
                    public struct UserPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/user/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/user/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/user/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/user/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/user/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/user/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/user/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/user/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/user/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/user/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/user/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/user/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/user/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/user/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/user/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/user/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/user/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/user/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/user/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/user/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/user/type`.
                        public var _type: Components.Schemas.WebhookDiscussionTransferred.ChangesPayload.NewDiscussionPayload.UserPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/user/url`.
                        public var url: Swift.String?
                        /// Creates a new `UserPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookDiscussionTransferred.ChangesPayload.NewDiscussionPayload.UserPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion/user`.
                    public var user: Components.Schemas.WebhookDiscussionTransferred.ChangesPayload.NewDiscussionPayload.UserPayload?
                    /// Creates a new `NewDiscussionPayload`.
                    ///
                    /// - Parameters:
                    ///   - activeLockReason:
                    ///   - answerChosenAt:
                    ///   - answerChosenBy:
                    ///   - answerHtmlUrl:
                    ///   - authorAssociation: How the author is associated with the repository.
                    ///   - body:
                    ///   - category:
                    ///   - comments:
                    ///   - createdAt:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - locked:
                    ///   - nodeId:
                    ///   - number:
                    ///   - reactions:
                    ///   - repositoryUrl:
                    ///   - state:
                    ///   - timelineUrl:
                    ///   - title:
                    ///   - updatedAt:
                    ///   - user:
                    public init(
                        activeLockReason: Swift.String? = nil,
                        answerChosenAt: Swift.String? = nil,
                        answerChosenBy: Components.Schemas.WebhookDiscussionTransferred.ChangesPayload.NewDiscussionPayload.AnswerChosenByPayload? = nil,
                        answerHtmlUrl: Swift.String? = nil,
                        authorAssociation: Components.Schemas.WebhookDiscussionTransferred.ChangesPayload.NewDiscussionPayload.AuthorAssociationPayload,
                        body: Swift.String,
                        category: Components.Schemas.WebhookDiscussionTransferred.ChangesPayload.NewDiscussionPayload.CategoryPayload,
                        comments: Swift.Int,
                        createdAt: Swift.String,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        locked: Swift.Bool,
                        nodeId: Swift.String,
                        number: Swift.Int,
                        reactions: Components.Schemas.WebhookDiscussionTransferred.ChangesPayload.NewDiscussionPayload.ReactionsPayload? = nil,
                        repositoryUrl: Swift.String,
                        state: Components.Schemas.WebhookDiscussionTransferred.ChangesPayload.NewDiscussionPayload.StatePayload,
                        timelineUrl: Swift.String? = nil,
                        title: Swift.String,
                        updatedAt: Swift.String,
                        user: Components.Schemas.WebhookDiscussionTransferred.ChangesPayload.NewDiscussionPayload.UserPayload? = nil
                    ) {
                        self.activeLockReason = activeLockReason
                        self.answerChosenAt = answerChosenAt
                        self.answerChosenBy = answerChosenBy
                        self.answerHtmlUrl = answerHtmlUrl
                        self.authorAssociation = authorAssociation
                        self.body = body
                        self.category = category
                        self.comments = comments
                        self.createdAt = createdAt
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.locked = locked
                        self.nodeId = nodeId
                        self.number = number
                        self.reactions = reactions
                        self.repositoryUrl = repositoryUrl
                        self.state = state
                        self.timelineUrl = timelineUrl
                        self.title = title
                        self.updatedAt = updatedAt
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case activeLockReason = "active_lock_reason"
                        case answerChosenAt = "answer_chosen_at"
                        case answerChosenBy = "answer_chosen_by"
                        case answerHtmlUrl = "answer_html_url"
                        case authorAssociation = "author_association"
                        case body
                        case category
                        case comments
                        case createdAt = "created_at"
                        case htmlUrl = "html_url"
                        case id
                        case locked
                        case nodeId = "node_id"
                        case number
                        case reactions
                        case repositoryUrl = "repository_url"
                        case state
                        case timelineUrl = "timeline_url"
                        case title
                        case updatedAt = "updated_at"
                        case user
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_discussion`.
                public var newDiscussion: Components.Schemas.WebhookDiscussionTransferred.ChangesPayload.NewDiscussionPayload
                /// A git repository
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository`.
                public struct NewRepositoryPayload: Codable, Hashable, Sendable {
                    /// Whether to allow auto-merge for pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/allow_auto_merge`.
                    public var allowAutoMerge: Swift.Bool?
                    /// Whether to allow private forks
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/allow_forking`.
                    public var allowForking: Swift.Bool?
                    /// Whether to allow merge commits for pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/allow_merge_commit`.
                    public var allowMergeCommit: Swift.Bool?
                    /// Whether to allow rebase merges for pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/allow_rebase_merge`.
                    public var allowRebaseMerge: Swift.Bool?
                    /// Whether to allow squash merges for pull requests.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/allow_squash_merge`.
                    public var allowSquashMerge: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/allow_update_branch`.
                    public var allowUpdateBranch: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/archive_url`.
                    public var archiveUrl: Swift.String
                    /// Whether the repository is archived.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/archived`.
                    public var archived: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/assignees_url`.
                    public var assigneesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/blobs_url`.
                    public var blobsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/branches_url`.
                    public var branchesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/clone_url`.
                    public var cloneUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/collaborators_url`.
                    public var collaboratorsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/comments_url`.
                    public var commentsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/commits_url`.
                    public var commitsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/compare_url`.
                    public var compareUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/contents_url`.
                    public var contentsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/contributors_url`.
                    public var contributorsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/created_at`.
                    @frozen public enum CreatedAtPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/created_at/case1`.
                        case case1(Swift.Int)
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/created_at/case2`.
                        case case2(Swift.String)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/created_at`.
                    public var createdAt: Components.Schemas.WebhookDiscussionTransferred.ChangesPayload.NewRepositoryPayload.CreatedAtPayload
                    /// The default branch of the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/default_branch`.
                    public var defaultBranch: Swift.String
                    /// Whether to delete head branches when pull requests are merged
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/delete_branch_on_merge`.
                    public var deleteBranchOnMerge: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/deployments_url`.
                    public var deploymentsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/description`.
                    public var description: Swift.String?
                    /// Returns whether or not this repository is disabled.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/disabled`.
                    public var disabled: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/downloads_url`.
                    public var downloadsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/events_url`.
                    public var eventsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/fork`.
                    public var fork: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/forks`.
                    public var forks: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/forks_count`.
                    public var forksCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/forks_url`.
                    public var forksUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/full_name`.
                    public var fullName: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/git_commits_url`.
                    public var gitCommitsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/git_refs_url`.
                    public var gitRefsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/git_tags_url`.
                    public var gitTagsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/git_url`.
                    public var gitUrl: Swift.String
                    /// Whether downloads are enabled.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/has_downloads`.
                    public var hasDownloads: Swift.Bool
                    /// Whether issues are enabled.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/has_issues`.
                    public var hasIssues: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/has_pages`.
                    public var hasPages: Swift.Bool
                    /// Whether projects are enabled.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/has_projects`.
                    public var hasProjects: Swift.Bool
                    /// Whether the wiki is enabled.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/has_wiki`.
                    public var hasWiki: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/homepage`.
                    public var homepage: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/hooks_url`.
                    public var hooksUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/html_url`.
                    public var htmlUrl: Swift.String
                    /// Unique identifier of the repository
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/is_template`.
                    public var isTemplate: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/issue_comment_url`.
                    public var issueCommentUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/issue_events_url`.
                    public var issueEventsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/issues_url`.
                    public var issuesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/keys_url`.
                    public var keysUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/labels_url`.
                    public var labelsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/language`.
                    public var language: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/languages_url`.
                    public var languagesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/license`.
                    public struct LicensePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/license/key`.
                        public var key: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/license/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/license/node_id`.
                        public var nodeId: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/license/spdx_id`.
                        public var spdxId: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/license/url`.
                        public var url: Swift.String?
                        /// Creates a new `LicensePayload`.
                        ///
                        /// - Parameters:
                        ///   - key:
                        ///   - name:
                        ///   - nodeId:
                        ///   - spdxId:
                        ///   - url:
                        public init(
                            key: Swift.String,
                            name: Swift.String,
                            nodeId: Swift.String,
                            spdxId: Swift.String,
                            url: Swift.String? = nil
                        ) {
                            self.key = key
                            self.name = name
                            self.nodeId = nodeId
                            self.spdxId = spdxId
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case key
                            case name
                            case nodeId = "node_id"
                            case spdxId = "spdx_id"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/license`.
                    public var license: Components.Schemas.WebhookDiscussionTransferred.ChangesPayload.NewRepositoryPayload.LicensePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/master_branch`.
                    public var masterBranch: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/merges_url`.
                    public var mergesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/milestones_url`.
                    public var milestonesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/mirror_url`.
                    public var mirrorUrl: Swift.String?
                    /// The name of the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/notifications_url`.
                    public var notificationsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/open_issues`.
                    public var openIssues: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/open_issues_count`.
                    public var openIssuesCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/organization`.
                    public var organization: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/owner`.
                    public struct OwnerPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/owner/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/owner/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/owner/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/owner/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/owner/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/owner/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/owner/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/owner/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/owner/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/owner/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/owner/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/owner/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/owner/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/owner/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/owner/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/owner/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/owner/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/owner/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/owner/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/owner/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/owner/type`.
                        public var _type: Components.Schemas.WebhookDiscussionTransferred.ChangesPayload.NewRepositoryPayload.OwnerPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/owner/url`.
                        public var url: Swift.String?
                        /// Creates a new `OwnerPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookDiscussionTransferred.ChangesPayload.NewRepositoryPayload.OwnerPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/owner`.
                    public var owner: Components.Schemas.WebhookDiscussionTransferred.ChangesPayload.NewRepositoryPayload.OwnerPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/permissions`.
                    public struct PermissionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/permissions/admin`.
                        public var admin: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/permissions/maintain`.
                        public var maintain: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/permissions/pull`.
                        public var pull: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/permissions/push`.
                        public var push: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/permissions/triage`.
                        public var triage: Swift.Bool?
                        /// Creates a new `PermissionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - admin:
                        ///   - maintain:
                        ///   - pull:
                        ///   - push:
                        ///   - triage:
                        public init(
                            admin: Swift.Bool,
                            maintain: Swift.Bool? = nil,
                            pull: Swift.Bool,
                            push: Swift.Bool,
                            triage: Swift.Bool? = nil
                        ) {
                            self.admin = admin
                            self.maintain = maintain
                            self.pull = pull
                            self.push = push
                            self.triage = triage
                        }
                        public enum CodingKeys: String, CodingKey {
                            case admin
                            case maintain
                            case pull
                            case push
                            case triage
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/permissions`.
                    public var permissions: Components.Schemas.WebhookDiscussionTransferred.ChangesPayload.NewRepositoryPayload.PermissionsPayload?
                    /// Whether the repository is private or public.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/private`.
                    public var _private: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/public`.
                    public var _public: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/pulls_url`.
                    public var pullsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/pushed_at`.
                    @frozen public enum PushedAtPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/pushed_at/case1`.
                        case case1(Swift.Int)
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/pushed_at/case2`.
                        case case2(Swift.String)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/pushed_at`.
                    public var pushedAt: Components.Schemas.WebhookDiscussionTransferred.ChangesPayload.NewRepositoryPayload.PushedAtPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/releases_url`.
                    public var releasesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/role_name`.
                    public var roleName: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/size`.
                    public var size: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/ssh_url`.
                    public var sshUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/stargazers`.
                    public var stargazers: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/stargazers_count`.
                    public var stargazersCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/stargazers_url`.
                    public var stargazersUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/statuses_url`.
                    public var statusesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/subscribers_url`.
                    public var subscribersUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/subscription_url`.
                    public var subscriptionUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/svn_url`.
                    public var svnUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/tags_url`.
                    public var tagsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/teams_url`.
                    public var teamsUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/topics`.
                    public var topics: [Swift.String]
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/trees_url`.
                    public var treesUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/updated_at`.
                    public var updatedAt: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/url`.
                    public var url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/visibility`.
                    @frozen public enum VisibilityPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case _public = "public"
                        case _private = "private"
                        case _internal = "internal"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/visibility`.
                    public var visibility: Components.Schemas.WebhookDiscussionTransferred.ChangesPayload.NewRepositoryPayload.VisibilityPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/watchers`.
                    public var watchers: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/watchers_count`.
                    public var watchersCount: Swift.Int
                    /// Whether to require contributors to sign off on web-based commits
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository/web_commit_signoff_required`.
                    public var webCommitSignoffRequired: Swift.Bool?
                    /// Creates a new `NewRepositoryPayload`.
                    ///
                    /// - Parameters:
                    ///   - allowAutoMerge: Whether to allow auto-merge for pull requests.
                    ///   - allowForking: Whether to allow private forks
                    ///   - allowMergeCommit: Whether to allow merge commits for pull requests.
                    ///   - allowRebaseMerge: Whether to allow rebase merges for pull requests.
                    ///   - allowSquashMerge: Whether to allow squash merges for pull requests.
                    ///   - allowUpdateBranch:
                    ///   - archiveUrl:
                    ///   - archived: Whether the repository is archived.
                    ///   - assigneesUrl:
                    ///   - blobsUrl:
                    ///   - branchesUrl:
                    ///   - cloneUrl:
                    ///   - collaboratorsUrl:
                    ///   - commentsUrl:
                    ///   - commitsUrl:
                    ///   - compareUrl:
                    ///   - contentsUrl:
                    ///   - contributorsUrl:
                    ///   - createdAt:
                    ///   - defaultBranch: The default branch of the repository.
                    ///   - deleteBranchOnMerge: Whether to delete head branches when pull requests are merged
                    ///   - deploymentsUrl:
                    ///   - description:
                    ///   - disabled: Returns whether or not this repository is disabled.
                    ///   - downloadsUrl:
                    ///   - eventsUrl:
                    ///   - fork:
                    ///   - forks:
                    ///   - forksCount:
                    ///   - forksUrl:
                    ///   - fullName:
                    ///   - gitCommitsUrl:
                    ///   - gitRefsUrl:
                    ///   - gitTagsUrl:
                    ///   - gitUrl:
                    ///   - hasDownloads: Whether downloads are enabled.
                    ///   - hasIssues: Whether issues are enabled.
                    ///   - hasPages:
                    ///   - hasProjects: Whether projects are enabled.
                    ///   - hasWiki: Whether the wiki is enabled.
                    ///   - homepage:
                    ///   - hooksUrl:
                    ///   - htmlUrl:
                    ///   - id: Unique identifier of the repository
                    ///   - isTemplate:
                    ///   - issueCommentUrl:
                    ///   - issueEventsUrl:
                    ///   - issuesUrl:
                    ///   - keysUrl:
                    ///   - labelsUrl:
                    ///   - language:
                    ///   - languagesUrl:
                    ///   - license:
                    ///   - masterBranch:
                    ///   - mergesUrl:
                    ///   - milestonesUrl:
                    ///   - mirrorUrl:
                    ///   - name: The name of the repository.
                    ///   - nodeId:
                    ///   - notificationsUrl:
                    ///   - openIssues:
                    ///   - openIssuesCount:
                    ///   - organization:
                    ///   - owner:
                    ///   - permissions:
                    ///   - _private: Whether the repository is private or public.
                    ///   - _public:
                    ///   - pullsUrl:
                    ///   - pushedAt:
                    ///   - releasesUrl:
                    ///   - roleName:
                    ///   - size:
                    ///   - sshUrl:
                    ///   - stargazers:
                    ///   - stargazersCount:
                    ///   - stargazersUrl:
                    ///   - statusesUrl:
                    ///   - subscribersUrl:
                    ///   - subscriptionUrl:
                    ///   - svnUrl:
                    ///   - tagsUrl:
                    ///   - teamsUrl:
                    ///   - topics:
                    ///   - treesUrl:
                    ///   - updatedAt:
                    ///   - url:
                    ///   - visibility:
                    ///   - watchers:
                    ///   - watchersCount:
                    ///   - webCommitSignoffRequired: Whether to require contributors to sign off on web-based commits
                    public init(
                        allowAutoMerge: Swift.Bool? = nil,
                        allowForking: Swift.Bool? = nil,
                        allowMergeCommit: Swift.Bool? = nil,
                        allowRebaseMerge: Swift.Bool? = nil,
                        allowSquashMerge: Swift.Bool? = nil,
                        allowUpdateBranch: Swift.Bool? = nil,
                        archiveUrl: Swift.String,
                        archived: Swift.Bool,
                        assigneesUrl: Swift.String,
                        blobsUrl: Swift.String,
                        branchesUrl: Swift.String,
                        cloneUrl: Swift.String,
                        collaboratorsUrl: Swift.String,
                        commentsUrl: Swift.String,
                        commitsUrl: Swift.String,
                        compareUrl: Swift.String,
                        contentsUrl: Swift.String,
                        contributorsUrl: Swift.String,
                        createdAt: Components.Schemas.WebhookDiscussionTransferred.ChangesPayload.NewRepositoryPayload.CreatedAtPayload,
                        defaultBranch: Swift.String,
                        deleteBranchOnMerge: Swift.Bool? = nil,
                        deploymentsUrl: Swift.String,
                        description: Swift.String? = nil,
                        disabled: Swift.Bool? = nil,
                        downloadsUrl: Swift.String,
                        eventsUrl: Swift.String,
                        fork: Swift.Bool,
                        forks: Swift.Int,
                        forksCount: Swift.Int,
                        forksUrl: Swift.String,
                        fullName: Swift.String,
                        gitCommitsUrl: Swift.String,
                        gitRefsUrl: Swift.String,
                        gitTagsUrl: Swift.String,
                        gitUrl: Swift.String,
                        hasDownloads: Swift.Bool,
                        hasIssues: Swift.Bool,
                        hasPages: Swift.Bool,
                        hasProjects: Swift.Bool,
                        hasWiki: Swift.Bool,
                        homepage: Swift.String? = nil,
                        hooksUrl: Swift.String,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        isTemplate: Swift.Bool? = nil,
                        issueCommentUrl: Swift.String,
                        issueEventsUrl: Swift.String,
                        issuesUrl: Swift.String,
                        keysUrl: Swift.String,
                        labelsUrl: Swift.String,
                        language: Swift.String? = nil,
                        languagesUrl: Swift.String,
                        license: Components.Schemas.WebhookDiscussionTransferred.ChangesPayload.NewRepositoryPayload.LicensePayload? = nil,
                        masterBranch: Swift.String? = nil,
                        mergesUrl: Swift.String,
                        milestonesUrl: Swift.String,
                        mirrorUrl: Swift.String? = nil,
                        name: Swift.String,
                        nodeId: Swift.String,
                        notificationsUrl: Swift.String,
                        openIssues: Swift.Int,
                        openIssuesCount: Swift.Int,
                        organization: Swift.String? = nil,
                        owner: Components.Schemas.WebhookDiscussionTransferred.ChangesPayload.NewRepositoryPayload.OwnerPayload? = nil,
                        permissions: Components.Schemas.WebhookDiscussionTransferred.ChangesPayload.NewRepositoryPayload.PermissionsPayload? = nil,
                        _private: Swift.Bool,
                        _public: Swift.Bool? = nil,
                        pullsUrl: Swift.String,
                        pushedAt: Components.Schemas.WebhookDiscussionTransferred.ChangesPayload.NewRepositoryPayload.PushedAtPayload? = nil,
                        releasesUrl: Swift.String,
                        roleName: Swift.String? = nil,
                        size: Swift.Int,
                        sshUrl: Swift.String,
                        stargazers: Swift.Int? = nil,
                        stargazersCount: Swift.Int,
                        stargazersUrl: Swift.String,
                        statusesUrl: Swift.String,
                        subscribersUrl: Swift.String,
                        subscriptionUrl: Swift.String,
                        svnUrl: Swift.String,
                        tagsUrl: Swift.String,
                        teamsUrl: Swift.String,
                        topics: [Swift.String],
                        treesUrl: Swift.String,
                        updatedAt: Swift.String,
                        url: Swift.String,
                        visibility: Components.Schemas.WebhookDiscussionTransferred.ChangesPayload.NewRepositoryPayload.VisibilityPayload,
                        watchers: Swift.Int,
                        watchersCount: Swift.Int,
                        webCommitSignoffRequired: Swift.Bool? = nil
                    ) {
                        self.allowAutoMerge = allowAutoMerge
                        self.allowForking = allowForking
                        self.allowMergeCommit = allowMergeCommit
                        self.allowRebaseMerge = allowRebaseMerge
                        self.allowSquashMerge = allowSquashMerge
                        self.allowUpdateBranch = allowUpdateBranch
                        self.archiveUrl = archiveUrl
                        self.archived = archived
                        self.assigneesUrl = assigneesUrl
                        self.blobsUrl = blobsUrl
                        self.branchesUrl = branchesUrl
                        self.cloneUrl = cloneUrl
                        self.collaboratorsUrl = collaboratorsUrl
                        self.commentsUrl = commentsUrl
                        self.commitsUrl = commitsUrl
                        self.compareUrl = compareUrl
                        self.contentsUrl = contentsUrl
                        self.contributorsUrl = contributorsUrl
                        self.createdAt = createdAt
                        self.defaultBranch = defaultBranch
                        self.deleteBranchOnMerge = deleteBranchOnMerge
                        self.deploymentsUrl = deploymentsUrl
                        self.description = description
                        self.disabled = disabled
                        self.downloadsUrl = downloadsUrl
                        self.eventsUrl = eventsUrl
                        self.fork = fork
                        self.forks = forks
                        self.forksCount = forksCount
                        self.forksUrl = forksUrl
                        self.fullName = fullName
                        self.gitCommitsUrl = gitCommitsUrl
                        self.gitRefsUrl = gitRefsUrl
                        self.gitTagsUrl = gitTagsUrl
                        self.gitUrl = gitUrl
                        self.hasDownloads = hasDownloads
                        self.hasIssues = hasIssues
                        self.hasPages = hasPages
                        self.hasProjects = hasProjects
                        self.hasWiki = hasWiki
                        self.homepage = homepage
                        self.hooksUrl = hooksUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.isTemplate = isTemplate
                        self.issueCommentUrl = issueCommentUrl
                        self.issueEventsUrl = issueEventsUrl
                        self.issuesUrl = issuesUrl
                        self.keysUrl = keysUrl
                        self.labelsUrl = labelsUrl
                        self.language = language
                        self.languagesUrl = languagesUrl
                        self.license = license
                        self.masterBranch = masterBranch
                        self.mergesUrl = mergesUrl
                        self.milestonesUrl = milestonesUrl
                        self.mirrorUrl = mirrorUrl
                        self.name = name
                        self.nodeId = nodeId
                        self.notificationsUrl = notificationsUrl
                        self.openIssues = openIssues
                        self.openIssuesCount = openIssuesCount
                        self.organization = organization
                        self.owner = owner
                        self.permissions = permissions
                        self._private = _private
                        self._public = _public
                        self.pullsUrl = pullsUrl
                        self.pushedAt = pushedAt
                        self.releasesUrl = releasesUrl
                        self.roleName = roleName
                        self.size = size
                        self.sshUrl = sshUrl
                        self.stargazers = stargazers
                        self.stargazersCount = stargazersCount
                        self.stargazersUrl = stargazersUrl
                        self.statusesUrl = statusesUrl
                        self.subscribersUrl = subscribersUrl
                        self.subscriptionUrl = subscriptionUrl
                        self.svnUrl = svnUrl
                        self.tagsUrl = tagsUrl
                        self.teamsUrl = teamsUrl
                        self.topics = topics
                        self.treesUrl = treesUrl
                        self.updatedAt = updatedAt
                        self.url = url
                        self.visibility = visibility
                        self.watchers = watchers
                        self.watchersCount = watchersCount
                        self.webCommitSignoffRequired = webCommitSignoffRequired
                    }
                    public enum CodingKeys: String, CodingKey {
                        case allowAutoMerge = "allow_auto_merge"
                        case allowForking = "allow_forking"
                        case allowMergeCommit = "allow_merge_commit"
                        case allowRebaseMerge = "allow_rebase_merge"
                        case allowSquashMerge = "allow_squash_merge"
                        case allowUpdateBranch = "allow_update_branch"
                        case archiveUrl = "archive_url"
                        case archived
                        case assigneesUrl = "assignees_url"
                        case blobsUrl = "blobs_url"
                        case branchesUrl = "branches_url"
                        case cloneUrl = "clone_url"
                        case collaboratorsUrl = "collaborators_url"
                        case commentsUrl = "comments_url"
                        case commitsUrl = "commits_url"
                        case compareUrl = "compare_url"
                        case contentsUrl = "contents_url"
                        case contributorsUrl = "contributors_url"
                        case createdAt = "created_at"
                        case defaultBranch = "default_branch"
                        case deleteBranchOnMerge = "delete_branch_on_merge"
                        case deploymentsUrl = "deployments_url"
                        case description
                        case disabled
                        case downloadsUrl = "downloads_url"
                        case eventsUrl = "events_url"
                        case fork
                        case forks
                        case forksCount = "forks_count"
                        case forksUrl = "forks_url"
                        case fullName = "full_name"
                        case gitCommitsUrl = "git_commits_url"
                        case gitRefsUrl = "git_refs_url"
                        case gitTagsUrl = "git_tags_url"
                        case gitUrl = "git_url"
                        case hasDownloads = "has_downloads"
                        case hasIssues = "has_issues"
                        case hasPages = "has_pages"
                        case hasProjects = "has_projects"
                        case hasWiki = "has_wiki"
                        case homepage
                        case hooksUrl = "hooks_url"
                        case htmlUrl = "html_url"
                        case id
                        case isTemplate = "is_template"
                        case issueCommentUrl = "issue_comment_url"
                        case issueEventsUrl = "issue_events_url"
                        case issuesUrl = "issues_url"
                        case keysUrl = "keys_url"
                        case labelsUrl = "labels_url"
                        case language
                        case languagesUrl = "languages_url"
                        case license
                        case masterBranch = "master_branch"
                        case mergesUrl = "merges_url"
                        case milestonesUrl = "milestones_url"
                        case mirrorUrl = "mirror_url"
                        case name
                        case nodeId = "node_id"
                        case notificationsUrl = "notifications_url"
                        case openIssues = "open_issues"
                        case openIssuesCount = "open_issues_count"
                        case organization
                        case owner
                        case permissions
                        case _private = "private"
                        case _public = "public"
                        case pullsUrl = "pulls_url"
                        case pushedAt = "pushed_at"
                        case releasesUrl = "releases_url"
                        case roleName = "role_name"
                        case size
                        case sshUrl = "ssh_url"
                        case stargazers
                        case stargazersCount = "stargazers_count"
                        case stargazersUrl = "stargazers_url"
                        case statusesUrl = "statuses_url"
                        case subscribersUrl = "subscribers_url"
                        case subscriptionUrl = "subscription_url"
                        case svnUrl = "svn_url"
                        case tagsUrl = "tags_url"
                        case teamsUrl = "teams_url"
                        case topics
                        case treesUrl = "trees_url"
                        case updatedAt = "updated_at"
                        case url
                        case visibility
                        case watchers
                        case watchersCount = "watchers_count"
                        case webCommitSignoffRequired = "web_commit_signoff_required"
                    }
                }
                /// A git repository
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes/new_repository`.
                public var newRepository: Components.Schemas.WebhookDiscussionTransferred.ChangesPayload.NewRepositoryPayload
                /// Creates a new `ChangesPayload`.
                ///
                /// - Parameters:
                ///   - newDiscussion:
                ///   - newRepository: A git repository
                public init(
                    newDiscussion: Components.Schemas.WebhookDiscussionTransferred.ChangesPayload.NewDiscussionPayload,
                    newRepository: Components.Schemas.WebhookDiscussionTransferred.ChangesPayload.NewRepositoryPayload
                ) {
                    self.newDiscussion = newDiscussion
                    self.newRepository = newRepository
                }
                public enum CodingKeys: String, CodingKey {
                    case newDiscussion = "new_discussion"
                    case newRepository = "new_repository"
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/changes`.
            public var changes: Components.Schemas.WebhookDiscussionTransferred.ChangesPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion`.
            public struct DiscussionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/active_lock_reason`.
                public var activeLockReason: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/answer_chosen_at`.
                public var answerChosenAt: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/answer_chosen_by`.
                public struct AnswerChosenByPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/answer_chosen_by/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/answer_chosen_by/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/answer_chosen_by/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/answer_chosen_by/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/answer_chosen_by/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/answer_chosen_by/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/answer_chosen_by/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/answer_chosen_by/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/answer_chosen_by/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/answer_chosen_by/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/answer_chosen_by/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/answer_chosen_by/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/answer_chosen_by/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/answer_chosen_by/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/answer_chosen_by/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/answer_chosen_by/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/answer_chosen_by/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/answer_chosen_by/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/answer_chosen_by/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/answer_chosen_by/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/answer_chosen_by/type`.
                    public var _type: Components.Schemas.WebhookDiscussionTransferred.DiscussionPayload.AnswerChosenByPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/answer_chosen_by/url`.
                    public var url: Swift.String?
                    /// Creates a new `AnswerChosenByPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookDiscussionTransferred.DiscussionPayload.AnswerChosenByPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/answer_chosen_by`.
                public var answerChosenBy: Components.Schemas.WebhookDiscussionTransferred.DiscussionPayload.AnswerChosenByPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/answer_html_url`.
                public var answerHtmlUrl: Swift.String?
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/author_association`.
                @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case collaborator = "COLLABORATOR"
                    case contributor = "CONTRIBUTOR"
                    case firstTimer = "FIRST_TIMER"
                    case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                    case mannequin = "MANNEQUIN"
                    case member = "MEMBER"
                    case none = "NONE"
                    case owner = "OWNER"
                }
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/author_association`.
                public var authorAssociation: Components.Schemas.WebhookDiscussionTransferred.DiscussionPayload.AuthorAssociationPayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/body`.
                public var body: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/category`.
                public struct CategoryPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/category/created_at`.
                    public var createdAt: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/category/description`.
                    public var description: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/category/emoji`.
                    public var emoji: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/category/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/category/is_answerable`.
                    public var isAnswerable: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/category/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/category/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/category/repository_id`.
                    public var repositoryId: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/category/slug`.
                    public var slug: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/category/updated_at`.
                    public var updatedAt: Swift.String
                    /// Creates a new `CategoryPayload`.
                    ///
                    /// - Parameters:
                    ///   - createdAt:
                    ///   - description:
                    ///   - emoji:
                    ///   - id:
                    ///   - isAnswerable:
                    ///   - name:
                    ///   - nodeId:
                    ///   - repositoryId:
                    ///   - slug:
                    ///   - updatedAt:
                    public init(
                        createdAt: Swift.String,
                        description: Swift.String,
                        emoji: Swift.String,
                        id: Swift.Int,
                        isAnswerable: Swift.Bool,
                        name: Swift.String,
                        nodeId: Swift.String? = nil,
                        repositoryId: Swift.Int,
                        slug: Swift.String,
                        updatedAt: Swift.String
                    ) {
                        self.createdAt = createdAt
                        self.description = description
                        self.emoji = emoji
                        self.id = id
                        self.isAnswerable = isAnswerable
                        self.name = name
                        self.nodeId = nodeId
                        self.repositoryId = repositoryId
                        self.slug = slug
                        self.updatedAt = updatedAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case createdAt = "created_at"
                        case description
                        case emoji
                        case id
                        case isAnswerable = "is_answerable"
                        case name
                        case nodeId = "node_id"
                        case repositoryId = "repository_id"
                        case slug
                        case updatedAt = "updated_at"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/category`.
                public var category: Components.Schemas.WebhookDiscussionTransferred.DiscussionPayload.CategoryPayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/comments`.
                public var comments: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/created_at`.
                public var createdAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/html_url`.
                public var htmlUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/locked`.
                public var locked: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/number`.
                public var number: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/reactions`.
                public struct ReactionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/reactions/+1`.
                    public var _plus_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/reactions/-1`.
                    public var _hyphen_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/reactions/confused`.
                    public var confused: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/reactions/eyes`.
                    public var eyes: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/reactions/heart`.
                    public var heart: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/reactions/hooray`.
                    public var hooray: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/reactions/laugh`.
                    public var laugh: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/reactions/rocket`.
                    public var rocket: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/reactions/total_count`.
                    public var totalCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/reactions/url`.
                    public var url: Swift.String
                    /// Creates a new `ReactionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - _plus_1:
                    ///   - _hyphen_1:
                    ///   - confused:
                    ///   - eyes:
                    ///   - heart:
                    ///   - hooray:
                    ///   - laugh:
                    ///   - rocket:
                    ///   - totalCount:
                    ///   - url:
                    public init(
                        _plus_1: Swift.Int,
                        _hyphen_1: Swift.Int,
                        confused: Swift.Int,
                        eyes: Swift.Int,
                        heart: Swift.Int,
                        hooray: Swift.Int,
                        laugh: Swift.Int,
                        rocket: Swift.Int,
                        totalCount: Swift.Int,
                        url: Swift.String
                    ) {
                        self._plus_1 = _plus_1
                        self._hyphen_1 = _hyphen_1
                        self.confused = confused
                        self.eyes = eyes
                        self.heart = heart
                        self.hooray = hooray
                        self.laugh = laugh
                        self.rocket = rocket
                        self.totalCount = totalCount
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _plus_1 = "+1"
                        case _hyphen_1 = "-1"
                        case confused
                        case eyes
                        case heart
                        case hooray
                        case laugh
                        case rocket
                        case totalCount = "total_count"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/reactions`.
                public var reactions: Components.Schemas.WebhookDiscussionTransferred.DiscussionPayload.ReactionsPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/repository_url`.
                public var repositoryUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/state`.
                @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case open = "open"
                    case locked = "locked"
                    case converting = "converting"
                    case transferring = "transferring"
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/state`.
                public var state: Components.Schemas.WebhookDiscussionTransferred.DiscussionPayload.StatePayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/timeline_url`.
                public var timelineUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/title`.
                public var title: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/updated_at`.
                public var updatedAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/user`.
                public struct UserPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/user/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/user/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/user/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/user/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/user/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/user/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/user/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/user/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/user/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/user/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/user/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/user/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/user/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/user/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/user/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/user/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/user/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/user/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/user/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/user/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/user/type`.
                    public var _type: Components.Schemas.WebhookDiscussionTransferred.DiscussionPayload.UserPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/user/url`.
                    public var url: Swift.String?
                    /// Creates a new `UserPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookDiscussionTransferred.DiscussionPayload.UserPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion/user`.
                public var user: Components.Schemas.WebhookDiscussionTransferred.DiscussionPayload.UserPayload?
                /// Creates a new `DiscussionPayload`.
                ///
                /// - Parameters:
                ///   - activeLockReason:
                ///   - answerChosenAt:
                ///   - answerChosenBy:
                ///   - answerHtmlUrl:
                ///   - authorAssociation: How the author is associated with the repository.
                ///   - body:
                ///   - category:
                ///   - comments:
                ///   - createdAt:
                ///   - htmlUrl:
                ///   - id:
                ///   - locked:
                ///   - nodeId:
                ///   - number:
                ///   - reactions:
                ///   - repositoryUrl:
                ///   - state:
                ///   - timelineUrl:
                ///   - title:
                ///   - updatedAt:
                ///   - user:
                public init(
                    activeLockReason: Swift.String? = nil,
                    answerChosenAt: Swift.String? = nil,
                    answerChosenBy: Components.Schemas.WebhookDiscussionTransferred.DiscussionPayload.AnswerChosenByPayload? = nil,
                    answerHtmlUrl: Swift.String? = nil,
                    authorAssociation: Components.Schemas.WebhookDiscussionTransferred.DiscussionPayload.AuthorAssociationPayload,
                    body: Swift.String,
                    category: Components.Schemas.WebhookDiscussionTransferred.DiscussionPayload.CategoryPayload,
                    comments: Swift.Int,
                    createdAt: Swift.String,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    locked: Swift.Bool,
                    nodeId: Swift.String,
                    number: Swift.Int,
                    reactions: Components.Schemas.WebhookDiscussionTransferred.DiscussionPayload.ReactionsPayload? = nil,
                    repositoryUrl: Swift.String,
                    state: Components.Schemas.WebhookDiscussionTransferred.DiscussionPayload.StatePayload,
                    timelineUrl: Swift.String? = nil,
                    title: Swift.String,
                    updatedAt: Swift.String,
                    user: Components.Schemas.WebhookDiscussionTransferred.DiscussionPayload.UserPayload? = nil
                ) {
                    self.activeLockReason = activeLockReason
                    self.answerChosenAt = answerChosenAt
                    self.answerChosenBy = answerChosenBy
                    self.answerHtmlUrl = answerHtmlUrl
                    self.authorAssociation = authorAssociation
                    self.body = body
                    self.category = category
                    self.comments = comments
                    self.createdAt = createdAt
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.locked = locked
                    self.nodeId = nodeId
                    self.number = number
                    self.reactions = reactions
                    self.repositoryUrl = repositoryUrl
                    self.state = state
                    self.timelineUrl = timelineUrl
                    self.title = title
                    self.updatedAt = updatedAt
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case activeLockReason = "active_lock_reason"
                    case answerChosenAt = "answer_chosen_at"
                    case answerChosenBy = "answer_chosen_by"
                    case answerHtmlUrl = "answer_html_url"
                    case authorAssociation = "author_association"
                    case body
                    case category
                    case comments
                    case createdAt = "created_at"
                    case htmlUrl = "html_url"
                    case id
                    case locked
                    case nodeId = "node_id"
                    case number
                    case reactions
                    case repositoryUrl = "repository_url"
                    case state
                    case timelineUrl = "timeline_url"
                    case title
                    case updatedAt = "updated_at"
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/discussion`.
            public var discussion: Components.Schemas.WebhookDiscussionTransferred.DiscussionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-transferred/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Creates a new `WebhookDiscussionTransferred`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - changes:
            ///   - discussion:
            ///   - enterprise:
            ///   - installation:
            ///   - organization:
            ///   - repository:
            ///   - sender:
            public init(
                action: Components.Schemas.WebhookDiscussionTransferred.ActionPayload,
                changes: Components.Schemas.WebhookDiscussionTransferred.ChangesPayload,
                discussion: Components.Schemas.WebhookDiscussionTransferred.DiscussionPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser
            ) {
                self.action = action
                self.changes = changes
                self.discussion = discussion
                self.enterprise = enterprise
                self.installation = installation
                self.organization = organization
                self.repository = repository
                self.sender = sender
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case changes
                case discussion
                case enterprise
                case installation
                case organization
                case repository
                case sender
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered`.
        public struct WebhookDiscussionUnanswered: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case unanswered = "unanswered"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/action`.
            public var action: Components.Schemas.WebhookDiscussionUnanswered.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion`.
            public struct DiscussionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/active_lock_reason`.
                    public var activeLockReason: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/answer_chosen_at`.
                    public var answerChosenAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/answer_chosen_by`.
                    public struct AnswerChosenByPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/answer_chosen_by/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/answer_chosen_by/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/answer_chosen_by/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/answer_chosen_by/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/answer_chosen_by/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/answer_chosen_by/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/answer_chosen_by/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/answer_chosen_by/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/answer_chosen_by/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/answer_chosen_by/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/answer_chosen_by/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/answer_chosen_by/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/answer_chosen_by/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/answer_chosen_by/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/answer_chosen_by/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/answer_chosen_by/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/answer_chosen_by/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/answer_chosen_by/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/answer_chosen_by/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/answer_chosen_by/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/answer_chosen_by/type`.
                        public var _type: Components.Schemas.WebhookDiscussionUnanswered.DiscussionPayload.Value1Payload.AnswerChosenByPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/answer_chosen_by/url`.
                        public var url: Swift.String?
                        /// Creates a new `AnswerChosenByPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookDiscussionUnanswered.DiscussionPayload.Value1Payload.AnswerChosenByPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/answer_chosen_by`.
                    public var answerChosenBy: Components.Schemas.WebhookDiscussionUnanswered.DiscussionPayload.Value1Payload.AnswerChosenByPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/answer_html_url`.
                    public var answerHtmlUrl: Swift.String?
                    /// How the author is associated with the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/author_association`.
                    @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case collaborator = "COLLABORATOR"
                        case contributor = "CONTRIBUTOR"
                        case firstTimer = "FIRST_TIMER"
                        case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                        case mannequin = "MANNEQUIN"
                        case member = "MEMBER"
                        case none = "NONE"
                        case owner = "OWNER"
                    }
                    /// How the author is associated with the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/author_association`.
                    public var authorAssociation: Components.Schemas.WebhookDiscussionUnanswered.DiscussionPayload.Value1Payload.AuthorAssociationPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/body`.
                    public var body: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/category`.
                    public struct CategoryPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/category/created_at`.
                        public var createdAt: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/category/description`.
                        public var description: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/category/emoji`.
                        public var emoji: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/category/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/category/is_answerable`.
                        public var isAnswerable: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/category/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/category/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/category/repository_id`.
                        public var repositoryId: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/category/slug`.
                        public var slug: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/category/updated_at`.
                        public var updatedAt: Swift.String
                        /// Creates a new `CategoryPayload`.
                        ///
                        /// - Parameters:
                        ///   - createdAt:
                        ///   - description:
                        ///   - emoji:
                        ///   - id:
                        ///   - isAnswerable:
                        ///   - name:
                        ///   - nodeId:
                        ///   - repositoryId:
                        ///   - slug:
                        ///   - updatedAt:
                        public init(
                            createdAt: Swift.String,
                            description: Swift.String,
                            emoji: Swift.String,
                            id: Swift.Int,
                            isAnswerable: Swift.Bool,
                            name: Swift.String,
                            nodeId: Swift.String? = nil,
                            repositoryId: Swift.Int,
                            slug: Swift.String,
                            updatedAt: Swift.String
                        ) {
                            self.createdAt = createdAt
                            self.description = description
                            self.emoji = emoji
                            self.id = id
                            self.isAnswerable = isAnswerable
                            self.name = name
                            self.nodeId = nodeId
                            self.repositoryId = repositoryId
                            self.slug = slug
                            self.updatedAt = updatedAt
                        }
                        public enum CodingKeys: String, CodingKey {
                            case createdAt = "created_at"
                            case description
                            case emoji
                            case id
                            case isAnswerable = "is_answerable"
                            case name
                            case nodeId = "node_id"
                            case repositoryId = "repository_id"
                            case slug
                            case updatedAt = "updated_at"
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/category`.
                    public var category: Components.Schemas.WebhookDiscussionUnanswered.DiscussionPayload.Value1Payload.CategoryPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/comments`.
                    public var comments: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/created_at`.
                    public var createdAt: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/html_url`.
                    public var htmlUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/locked`.
                    public var locked: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/number`.
                    public var number: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/reactions`.
                    public struct ReactionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/reactions/+1`.
                        public var _plus_1: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/reactions/-1`.
                        public var _hyphen_1: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/reactions/confused`.
                        public var confused: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/reactions/eyes`.
                        public var eyes: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/reactions/heart`.
                        public var heart: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/reactions/hooray`.
                        public var hooray: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/reactions/laugh`.
                        public var laugh: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/reactions/rocket`.
                        public var rocket: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/reactions/total_count`.
                        public var totalCount: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/reactions/url`.
                        public var url: Swift.String
                        /// Creates a new `ReactionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - _plus_1:
                        ///   - _hyphen_1:
                        ///   - confused:
                        ///   - eyes:
                        ///   - heart:
                        ///   - hooray:
                        ///   - laugh:
                        ///   - rocket:
                        ///   - totalCount:
                        ///   - url:
                        public init(
                            _plus_1: Swift.Int,
                            _hyphen_1: Swift.Int,
                            confused: Swift.Int,
                            eyes: Swift.Int,
                            heart: Swift.Int,
                            hooray: Swift.Int,
                            laugh: Swift.Int,
                            rocket: Swift.Int,
                            totalCount: Swift.Int,
                            url: Swift.String
                        ) {
                            self._plus_1 = _plus_1
                            self._hyphen_1 = _hyphen_1
                            self.confused = confused
                            self.eyes = eyes
                            self.heart = heart
                            self.hooray = hooray
                            self.laugh = laugh
                            self.rocket = rocket
                            self.totalCount = totalCount
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _plus_1 = "+1"
                            case _hyphen_1 = "-1"
                            case confused
                            case eyes
                            case heart
                            case hooray
                            case laugh
                            case rocket
                            case totalCount = "total_count"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/reactions`.
                    public var reactions: Components.Schemas.WebhookDiscussionUnanswered.DiscussionPayload.Value1Payload.ReactionsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/repository_url`.
                    public var repositoryUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/state`.
                    @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case locked = "locked"
                        case converting = "converting"
                        case transferring = "transferring"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/state`.
                    public var state: Components.Schemas.WebhookDiscussionUnanswered.DiscussionPayload.Value1Payload.StatePayload
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/timeline_url`.
                    public var timelineUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/title`.
                    public var title: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/updated_at`.
                    public var updatedAt: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/user`.
                    public struct UserPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/user/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/user/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/user/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/user/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/user/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/user/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/user/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/user/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/user/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/user/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/user/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/user/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/user/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/user/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/user/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/user/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/user/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/user/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/user/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/user/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/user/type`.
                        public var _type: Components.Schemas.WebhookDiscussionUnanswered.DiscussionPayload.Value1Payload.UserPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/user/url`.
                        public var url: Swift.String?
                        /// Creates a new `UserPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookDiscussionUnanswered.DiscussionPayload.Value1Payload.UserPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1/user`.
                    public var user: Components.Schemas.WebhookDiscussionUnanswered.DiscussionPayload.Value1Payload.UserPayload?
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - activeLockReason:
                    ///   - answerChosenAt:
                    ///   - answerChosenBy:
                    ///   - answerHtmlUrl:
                    ///   - authorAssociation: How the author is associated with the repository.
                    ///   - body:
                    ///   - category:
                    ///   - comments:
                    ///   - createdAt:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - locked:
                    ///   - nodeId:
                    ///   - number:
                    ///   - reactions:
                    ///   - repositoryUrl:
                    ///   - state:
                    ///   - timelineUrl:
                    ///   - title:
                    ///   - updatedAt:
                    ///   - user:
                    public init(
                        activeLockReason: Swift.String? = nil,
                        answerChosenAt: Swift.String? = nil,
                        answerChosenBy: Components.Schemas.WebhookDiscussionUnanswered.DiscussionPayload.Value1Payload.AnswerChosenByPayload? = nil,
                        answerHtmlUrl: Swift.String? = nil,
                        authorAssociation: Components.Schemas.WebhookDiscussionUnanswered.DiscussionPayload.Value1Payload.AuthorAssociationPayload,
                        body: Swift.String,
                        category: Components.Schemas.WebhookDiscussionUnanswered.DiscussionPayload.Value1Payload.CategoryPayload,
                        comments: Swift.Int,
                        createdAt: Swift.String,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        locked: Swift.Bool,
                        nodeId: Swift.String,
                        number: Swift.Int,
                        reactions: Components.Schemas.WebhookDiscussionUnanswered.DiscussionPayload.Value1Payload.ReactionsPayload? = nil,
                        repositoryUrl: Swift.String,
                        state: Components.Schemas.WebhookDiscussionUnanswered.DiscussionPayload.Value1Payload.StatePayload,
                        timelineUrl: Swift.String? = nil,
                        title: Swift.String,
                        updatedAt: Swift.String,
                        user: Components.Schemas.WebhookDiscussionUnanswered.DiscussionPayload.Value1Payload.UserPayload? = nil
                    ) {
                        self.activeLockReason = activeLockReason
                        self.answerChosenAt = answerChosenAt
                        self.answerChosenBy = answerChosenBy
                        self.answerHtmlUrl = answerHtmlUrl
                        self.authorAssociation = authorAssociation
                        self.body = body
                        self.category = category
                        self.comments = comments
                        self.createdAt = createdAt
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.locked = locked
                        self.nodeId = nodeId
                        self.number = number
                        self.reactions = reactions
                        self.repositoryUrl = repositoryUrl
                        self.state = state
                        self.timelineUrl = timelineUrl
                        self.title = title
                        self.updatedAt = updatedAt
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case activeLockReason = "active_lock_reason"
                        case answerChosenAt = "answer_chosen_at"
                        case answerChosenBy = "answer_chosen_by"
                        case answerHtmlUrl = "answer_html_url"
                        case authorAssociation = "author_association"
                        case body
                        case category
                        case comments
                        case createdAt = "created_at"
                        case htmlUrl = "html_url"
                        case id
                        case locked
                        case nodeId = "node_id"
                        case number
                        case reactions
                        case repositoryUrl = "repository_url"
                        case state
                        case timelineUrl = "timeline_url"
                        case title
                        case updatedAt = "updated_at"
                        case user
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value1`.
                public var value1: Components.Schemas.WebhookDiscussionUnanswered.DiscussionPayload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/active_lock_reason`.
                    public var activeLockReason: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/answer_chosen_at`.
                    public var answerChosenAt: OpenAPIRuntime.OpenAPIValueContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/answer_chosen_by`.
                    public var answerChosenBy: OpenAPIRuntime.OpenAPIValueContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/answer_html_url`.
                    public var answerHtmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/author_association`.
                    public var authorAssociation: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/body`.
                    public var body: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/category`.
                    public struct CategoryPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/category/created_at`.
                        public var createdAt: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/category/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/category/emoji`.
                        public var emoji: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/category/id`.
                        public var id: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/category/is_answerable`.
                        public var isAnswerable: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/category/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/category/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/category/repository_id`.
                        public var repositoryId: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/category/slug`.
                        public var slug: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/category/updated_at`.
                        public var updatedAt: Swift.String?
                        /// Creates a new `CategoryPayload`.
                        ///
                        /// - Parameters:
                        ///   - createdAt:
                        ///   - description:
                        ///   - emoji:
                        ///   - id:
                        ///   - isAnswerable:
                        ///   - name:
                        ///   - nodeId:
                        ///   - repositoryId:
                        ///   - slug:
                        ///   - updatedAt:
                        public init(
                            createdAt: Swift.String? = nil,
                            description: Swift.String? = nil,
                            emoji: Swift.String? = nil,
                            id: Swift.Int? = nil,
                            isAnswerable: Swift.Bool,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            repositoryId: Swift.Int? = nil,
                            slug: Swift.String? = nil,
                            updatedAt: Swift.String? = nil
                        ) {
                            self.createdAt = createdAt
                            self.description = description
                            self.emoji = emoji
                            self.id = id
                            self.isAnswerable = isAnswerable
                            self.name = name
                            self.nodeId = nodeId
                            self.repositoryId = repositoryId
                            self.slug = slug
                            self.updatedAt = updatedAt
                        }
                        public enum CodingKeys: String, CodingKey {
                            case createdAt = "created_at"
                            case description
                            case emoji
                            case id
                            case isAnswerable = "is_answerable"
                            case name
                            case nodeId = "node_id"
                            case repositoryId = "repository_id"
                            case slug
                            case updatedAt = "updated_at"
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/category`.
                    public var category: Components.Schemas.WebhookDiscussionUnanswered.DiscussionPayload.Value2Payload.CategoryPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/comments`.
                    public var comments: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/created_at`.
                    public var createdAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/id`.
                    public var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/locked`.
                    public var locked: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/number`.
                    public var number: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/reactions`.
                    public struct ReactionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/reactions/+1`.
                        public var _plus_1: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/reactions/-1`.
                        public var _hyphen_1: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/reactions/confused`.
                        public var confused: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/reactions/eyes`.
                        public var eyes: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/reactions/heart`.
                        public var heart: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/reactions/hooray`.
                        public var hooray: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/reactions/laugh`.
                        public var laugh: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/reactions/rocket`.
                        public var rocket: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/reactions/total_count`.
                        public var totalCount: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/reactions/url`.
                        public var url: Swift.String?
                        /// Creates a new `ReactionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - _plus_1:
                        ///   - _hyphen_1:
                        ///   - confused:
                        ///   - eyes:
                        ///   - heart:
                        ///   - hooray:
                        ///   - laugh:
                        ///   - rocket:
                        ///   - totalCount:
                        ///   - url:
                        public init(
                            _plus_1: Swift.Int? = nil,
                            _hyphen_1: Swift.Int? = nil,
                            confused: Swift.Int? = nil,
                            eyes: Swift.Int? = nil,
                            heart: Swift.Int? = nil,
                            hooray: Swift.Int? = nil,
                            laugh: Swift.Int? = nil,
                            rocket: Swift.Int? = nil,
                            totalCount: Swift.Int? = nil,
                            url: Swift.String? = nil
                        ) {
                            self._plus_1 = _plus_1
                            self._hyphen_1 = _hyphen_1
                            self.confused = confused
                            self.eyes = eyes
                            self.heart = heart
                            self.hooray = hooray
                            self.laugh = laugh
                            self.rocket = rocket
                            self.totalCount = totalCount
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _plus_1 = "+1"
                            case _hyphen_1 = "-1"
                            case confused
                            case eyes
                            case heart
                            case hooray
                            case laugh
                            case rocket
                            case totalCount = "total_count"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/reactions`.
                    public var reactions: Components.Schemas.WebhookDiscussionUnanswered.DiscussionPayload.Value2Payload.ReactionsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/repository_url`.
                    public var repositoryUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/state`.
                    public var state: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/timeline_url`.
                    public var timelineUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/title`.
                    public var title: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/updated_at`.
                    public var updatedAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/user`.
                    public struct UserPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/user/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/user/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/user/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/user/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/user/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/user/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/user/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/user/id`.
                        public var id: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/user/login`.
                        public var login: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/user/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/user/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/user/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/user/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/user/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/user/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/user/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/user/type`.
                        public var _type: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/user/url`.
                        public var url: Swift.String?
                        /// Creates a new `UserPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int? = nil,
                            login: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2/user`.
                    public var user: Components.Schemas.WebhookDiscussionUnanswered.DiscussionPayload.Value2Payload.UserPayload?
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - activeLockReason:
                    ///   - answerChosenAt:
                    ///   - answerChosenBy:
                    ///   - answerHtmlUrl:
                    ///   - authorAssociation:
                    ///   - body:
                    ///   - category:
                    ///   - comments:
                    ///   - createdAt:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - locked:
                    ///   - nodeId:
                    ///   - number:
                    ///   - reactions:
                    ///   - repositoryUrl:
                    ///   - state:
                    ///   - timelineUrl:
                    ///   - title:
                    ///   - updatedAt:
                    ///   - user:
                    public init(
                        activeLockReason: Swift.String? = nil,
                        answerChosenAt: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                        answerChosenBy: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                        answerHtmlUrl: Swift.String? = nil,
                        authorAssociation: Swift.String? = nil,
                        body: Swift.String? = nil,
                        category: Components.Schemas.WebhookDiscussionUnanswered.DiscussionPayload.Value2Payload.CategoryPayload,
                        comments: Swift.Int? = nil,
                        createdAt: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int? = nil,
                        locked: Swift.Bool? = nil,
                        nodeId: Swift.String? = nil,
                        number: Swift.Int? = nil,
                        reactions: Components.Schemas.WebhookDiscussionUnanswered.DiscussionPayload.Value2Payload.ReactionsPayload? = nil,
                        repositoryUrl: Swift.String? = nil,
                        state: Swift.String? = nil,
                        timelineUrl: Swift.String? = nil,
                        title: Swift.String? = nil,
                        updatedAt: Swift.String? = nil,
                        user: Components.Schemas.WebhookDiscussionUnanswered.DiscussionPayload.Value2Payload.UserPayload? = nil
                    ) {
                        self.activeLockReason = activeLockReason
                        self.answerChosenAt = answerChosenAt
                        self.answerChosenBy = answerChosenBy
                        self.answerHtmlUrl = answerHtmlUrl
                        self.authorAssociation = authorAssociation
                        self.body = body
                        self.category = category
                        self.comments = comments
                        self.createdAt = createdAt
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.locked = locked
                        self.nodeId = nodeId
                        self.number = number
                        self.reactions = reactions
                        self.repositoryUrl = repositoryUrl
                        self.state = state
                        self.timelineUrl = timelineUrl
                        self.title = title
                        self.updatedAt = updatedAt
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case activeLockReason = "active_lock_reason"
                        case answerChosenAt = "answer_chosen_at"
                        case answerChosenBy = "answer_chosen_by"
                        case answerHtmlUrl = "answer_html_url"
                        case authorAssociation = "author_association"
                        case body
                        case category
                        case comments
                        case createdAt = "created_at"
                        case htmlUrl = "html_url"
                        case id
                        case locked
                        case nodeId = "node_id"
                        case number
                        case reactions
                        case repositoryUrl = "repository_url"
                        case state
                        case timelineUrl = "timeline_url"
                        case title
                        case updatedAt = "updated_at"
                        case user
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion/value2`.
                public var value2: Components.Schemas.WebhookDiscussionUnanswered.DiscussionPayload.Value2Payload
                /// Creates a new `DiscussionPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.WebhookDiscussionUnanswered.DiscussionPayload.Value1Payload,
                    value2: Components.Schemas.WebhookDiscussionUnanswered.DiscussionPayload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/discussion`.
            public var discussion: Components.Schemas.WebhookDiscussionUnanswered.DiscussionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer`.
            public struct OldAnswerPayload: Codable, Hashable, Sendable {
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/author_association`.
                @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case collaborator = "COLLABORATOR"
                    case contributor = "CONTRIBUTOR"
                    case firstTimer = "FIRST_TIMER"
                    case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                    case mannequin = "MANNEQUIN"
                    case member = "MEMBER"
                    case none = "NONE"
                    case owner = "OWNER"
                }
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/author_association`.
                public var authorAssociation: Components.Schemas.WebhookDiscussionUnanswered.OldAnswerPayload.AuthorAssociationPayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/body`.
                public var body: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/child_comment_count`.
                public var childCommentCount: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/created_at`.
                public var createdAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/discussion_id`.
                public var discussionId: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/html_url`.
                public var htmlUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/parent_id`.
                public var parentId: OpenAPIRuntime.OpenAPIValueContainer?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/reactions`.
                public struct ReactionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/reactions/+1`.
                    public var _plus_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/reactions/-1`.
                    public var _hyphen_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/reactions/confused`.
                    public var confused: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/reactions/eyes`.
                    public var eyes: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/reactions/heart`.
                    public var heart: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/reactions/hooray`.
                    public var hooray: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/reactions/laugh`.
                    public var laugh: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/reactions/rocket`.
                    public var rocket: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/reactions/total_count`.
                    public var totalCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/reactions/url`.
                    public var url: Swift.String
                    /// Creates a new `ReactionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - _plus_1:
                    ///   - _hyphen_1:
                    ///   - confused:
                    ///   - eyes:
                    ///   - heart:
                    ///   - hooray:
                    ///   - laugh:
                    ///   - rocket:
                    ///   - totalCount:
                    ///   - url:
                    public init(
                        _plus_1: Swift.Int,
                        _hyphen_1: Swift.Int,
                        confused: Swift.Int,
                        eyes: Swift.Int,
                        heart: Swift.Int,
                        hooray: Swift.Int,
                        laugh: Swift.Int,
                        rocket: Swift.Int,
                        totalCount: Swift.Int,
                        url: Swift.String
                    ) {
                        self._plus_1 = _plus_1
                        self._hyphen_1 = _hyphen_1
                        self.confused = confused
                        self.eyes = eyes
                        self.heart = heart
                        self.hooray = hooray
                        self.laugh = laugh
                        self.rocket = rocket
                        self.totalCount = totalCount
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _plus_1 = "+1"
                        case _hyphen_1 = "-1"
                        case confused
                        case eyes
                        case heart
                        case hooray
                        case laugh
                        case rocket
                        case totalCount = "total_count"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/reactions`.
                public var reactions: Components.Schemas.WebhookDiscussionUnanswered.OldAnswerPayload.ReactionsPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/repository_url`.
                public var repositoryUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/updated_at`.
                public var updatedAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/user`.
                public struct UserPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/user/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/user/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/user/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/user/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/user/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/user/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/user/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/user/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/user/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/user/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/user/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/user/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/user/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/user/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/user/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/user/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/user/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/user/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/user/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/user/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/user/type`.
                    public var _type: Components.Schemas.WebhookDiscussionUnanswered.OldAnswerPayload.UserPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/user/url`.
                    public var url: Swift.String?
                    /// Creates a new `UserPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookDiscussionUnanswered.OldAnswerPayload.UserPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer/user`.
                public var user: Components.Schemas.WebhookDiscussionUnanswered.OldAnswerPayload.UserPayload?
                /// Creates a new `OldAnswerPayload`.
                ///
                /// - Parameters:
                ///   - authorAssociation: How the author is associated with the repository.
                ///   - body:
                ///   - childCommentCount:
                ///   - createdAt:
                ///   - discussionId:
                ///   - htmlUrl:
                ///   - id:
                ///   - nodeId:
                ///   - parentId:
                ///   - reactions:
                ///   - repositoryUrl:
                ///   - updatedAt:
                ///   - user:
                public init(
                    authorAssociation: Components.Schemas.WebhookDiscussionUnanswered.OldAnswerPayload.AuthorAssociationPayload,
                    body: Swift.String,
                    childCommentCount: Swift.Int,
                    createdAt: Swift.String,
                    discussionId: Swift.Int,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    nodeId: Swift.String,
                    parentId: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                    reactions: Components.Schemas.WebhookDiscussionUnanswered.OldAnswerPayload.ReactionsPayload? = nil,
                    repositoryUrl: Swift.String,
                    updatedAt: Swift.String,
                    user: Components.Schemas.WebhookDiscussionUnanswered.OldAnswerPayload.UserPayload? = nil
                ) {
                    self.authorAssociation = authorAssociation
                    self.body = body
                    self.childCommentCount = childCommentCount
                    self.createdAt = createdAt
                    self.discussionId = discussionId
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.nodeId = nodeId
                    self.parentId = parentId
                    self.reactions = reactions
                    self.repositoryUrl = repositoryUrl
                    self.updatedAt = updatedAt
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case authorAssociation = "author_association"
                    case body
                    case childCommentCount = "child_comment_count"
                    case createdAt = "created_at"
                    case discussionId = "discussion_id"
                    case htmlUrl = "html_url"
                    case id
                    case nodeId = "node_id"
                    case parentId = "parent_id"
                    case reactions
                    case repositoryUrl = "repository_url"
                    case updatedAt = "updated_at"
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/old_answer`.
            public var oldAnswer: Components.Schemas.WebhookDiscussionUnanswered.OldAnswerPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unanswered/sender`.
            public var sender: Components.Schemas.SimpleUser?
            /// Creates a new `WebhookDiscussionUnanswered`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - discussion:
            ///   - enterprise:
            ///   - installation:
            ///   - oldAnswer:
            ///   - organization:
            ///   - repository:
            ///   - sender:
            public init(
                action: Components.Schemas.WebhookDiscussionUnanswered.ActionPayload,
                discussion: Components.Schemas.WebhookDiscussionUnanswered.DiscussionPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                oldAnswer: Components.Schemas.WebhookDiscussionUnanswered.OldAnswerPayload,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser? = nil
            ) {
                self.action = action
                self.discussion = discussion
                self.enterprise = enterprise
                self.installation = installation
                self.oldAnswer = oldAnswer
                self.organization = organization
                self.repository = repository
                self.sender = sender
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case discussion
                case enterprise
                case installation
                case oldAnswer = "old_answer"
                case organization
                case repository
                case sender
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled`.
        public struct WebhookDiscussionUnlabeled: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case unlabeled = "unlabeled"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/action`.
            public var action: Components.Schemas.WebhookDiscussionUnlabeled.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion`.
            public struct DiscussionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/active_lock_reason`.
                public var activeLockReason: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/answer_chosen_at`.
                public var answerChosenAt: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/answer_chosen_by`.
                public struct AnswerChosenByPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/answer_chosen_by/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/answer_chosen_by/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/answer_chosen_by/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/answer_chosen_by/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/answer_chosen_by/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/answer_chosen_by/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/answer_chosen_by/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/answer_chosen_by/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/answer_chosen_by/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/answer_chosen_by/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/answer_chosen_by/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/answer_chosen_by/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/answer_chosen_by/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/answer_chosen_by/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/answer_chosen_by/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/answer_chosen_by/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/answer_chosen_by/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/answer_chosen_by/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/answer_chosen_by/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/answer_chosen_by/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/answer_chosen_by/type`.
                    public var _type: Components.Schemas.WebhookDiscussionUnlabeled.DiscussionPayload.AnswerChosenByPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/answer_chosen_by/url`.
                    public var url: Swift.String?
                    /// Creates a new `AnswerChosenByPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookDiscussionUnlabeled.DiscussionPayload.AnswerChosenByPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/answer_chosen_by`.
                public var answerChosenBy: Components.Schemas.WebhookDiscussionUnlabeled.DiscussionPayload.AnswerChosenByPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/answer_html_url`.
                public var answerHtmlUrl: Swift.String?
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/author_association`.
                @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case collaborator = "COLLABORATOR"
                    case contributor = "CONTRIBUTOR"
                    case firstTimer = "FIRST_TIMER"
                    case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                    case mannequin = "MANNEQUIN"
                    case member = "MEMBER"
                    case none = "NONE"
                    case owner = "OWNER"
                }
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/author_association`.
                public var authorAssociation: Components.Schemas.WebhookDiscussionUnlabeled.DiscussionPayload.AuthorAssociationPayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/body`.
                public var body: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/category`.
                public struct CategoryPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/category/created_at`.
                    public var createdAt: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/category/description`.
                    public var description: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/category/emoji`.
                    public var emoji: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/category/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/category/is_answerable`.
                    public var isAnswerable: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/category/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/category/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/category/repository_id`.
                    public var repositoryId: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/category/slug`.
                    public var slug: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/category/updated_at`.
                    public var updatedAt: Swift.String
                    /// Creates a new `CategoryPayload`.
                    ///
                    /// - Parameters:
                    ///   - createdAt:
                    ///   - description:
                    ///   - emoji:
                    ///   - id:
                    ///   - isAnswerable:
                    ///   - name:
                    ///   - nodeId:
                    ///   - repositoryId:
                    ///   - slug:
                    ///   - updatedAt:
                    public init(
                        createdAt: Swift.String,
                        description: Swift.String,
                        emoji: Swift.String,
                        id: Swift.Int,
                        isAnswerable: Swift.Bool,
                        name: Swift.String,
                        nodeId: Swift.String? = nil,
                        repositoryId: Swift.Int,
                        slug: Swift.String,
                        updatedAt: Swift.String
                    ) {
                        self.createdAt = createdAt
                        self.description = description
                        self.emoji = emoji
                        self.id = id
                        self.isAnswerable = isAnswerable
                        self.name = name
                        self.nodeId = nodeId
                        self.repositoryId = repositoryId
                        self.slug = slug
                        self.updatedAt = updatedAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case createdAt = "created_at"
                        case description
                        case emoji
                        case id
                        case isAnswerable = "is_answerable"
                        case name
                        case nodeId = "node_id"
                        case repositoryId = "repository_id"
                        case slug
                        case updatedAt = "updated_at"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/category`.
                public var category: Components.Schemas.WebhookDiscussionUnlabeled.DiscussionPayload.CategoryPayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/comments`.
                public var comments: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/created_at`.
                public var createdAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/html_url`.
                public var htmlUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/locked`.
                public var locked: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/number`.
                public var number: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/reactions`.
                public struct ReactionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/reactions/+1`.
                    public var _plus_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/reactions/-1`.
                    public var _hyphen_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/reactions/confused`.
                    public var confused: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/reactions/eyes`.
                    public var eyes: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/reactions/heart`.
                    public var heart: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/reactions/hooray`.
                    public var hooray: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/reactions/laugh`.
                    public var laugh: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/reactions/rocket`.
                    public var rocket: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/reactions/total_count`.
                    public var totalCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/reactions/url`.
                    public var url: Swift.String
                    /// Creates a new `ReactionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - _plus_1:
                    ///   - _hyphen_1:
                    ///   - confused:
                    ///   - eyes:
                    ///   - heart:
                    ///   - hooray:
                    ///   - laugh:
                    ///   - rocket:
                    ///   - totalCount:
                    ///   - url:
                    public init(
                        _plus_1: Swift.Int,
                        _hyphen_1: Swift.Int,
                        confused: Swift.Int,
                        eyes: Swift.Int,
                        heart: Swift.Int,
                        hooray: Swift.Int,
                        laugh: Swift.Int,
                        rocket: Swift.Int,
                        totalCount: Swift.Int,
                        url: Swift.String
                    ) {
                        self._plus_1 = _plus_1
                        self._hyphen_1 = _hyphen_1
                        self.confused = confused
                        self.eyes = eyes
                        self.heart = heart
                        self.hooray = hooray
                        self.laugh = laugh
                        self.rocket = rocket
                        self.totalCount = totalCount
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _plus_1 = "+1"
                        case _hyphen_1 = "-1"
                        case confused
                        case eyes
                        case heart
                        case hooray
                        case laugh
                        case rocket
                        case totalCount = "total_count"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/reactions`.
                public var reactions: Components.Schemas.WebhookDiscussionUnlabeled.DiscussionPayload.ReactionsPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/repository_url`.
                public var repositoryUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/state`.
                @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case open = "open"
                    case locked = "locked"
                    case converting = "converting"
                    case transferring = "transferring"
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/state`.
                public var state: Components.Schemas.WebhookDiscussionUnlabeled.DiscussionPayload.StatePayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/timeline_url`.
                public var timelineUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/title`.
                public var title: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/updated_at`.
                public var updatedAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/user`.
                public struct UserPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/user/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/user/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/user/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/user/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/user/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/user/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/user/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/user/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/user/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/user/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/user/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/user/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/user/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/user/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/user/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/user/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/user/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/user/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/user/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/user/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/user/type`.
                    public var _type: Components.Schemas.WebhookDiscussionUnlabeled.DiscussionPayload.UserPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/user/url`.
                    public var url: Swift.String?
                    /// Creates a new `UserPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookDiscussionUnlabeled.DiscussionPayload.UserPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion/user`.
                public var user: Components.Schemas.WebhookDiscussionUnlabeled.DiscussionPayload.UserPayload?
                /// Creates a new `DiscussionPayload`.
                ///
                /// - Parameters:
                ///   - activeLockReason:
                ///   - answerChosenAt:
                ///   - answerChosenBy:
                ///   - answerHtmlUrl:
                ///   - authorAssociation: How the author is associated with the repository.
                ///   - body:
                ///   - category:
                ///   - comments:
                ///   - createdAt:
                ///   - htmlUrl:
                ///   - id:
                ///   - locked:
                ///   - nodeId:
                ///   - number:
                ///   - reactions:
                ///   - repositoryUrl:
                ///   - state:
                ///   - timelineUrl:
                ///   - title:
                ///   - updatedAt:
                ///   - user:
                public init(
                    activeLockReason: Swift.String? = nil,
                    answerChosenAt: Swift.String? = nil,
                    answerChosenBy: Components.Schemas.WebhookDiscussionUnlabeled.DiscussionPayload.AnswerChosenByPayload? = nil,
                    answerHtmlUrl: Swift.String? = nil,
                    authorAssociation: Components.Schemas.WebhookDiscussionUnlabeled.DiscussionPayload.AuthorAssociationPayload,
                    body: Swift.String,
                    category: Components.Schemas.WebhookDiscussionUnlabeled.DiscussionPayload.CategoryPayload,
                    comments: Swift.Int,
                    createdAt: Swift.String,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    locked: Swift.Bool,
                    nodeId: Swift.String,
                    number: Swift.Int,
                    reactions: Components.Schemas.WebhookDiscussionUnlabeled.DiscussionPayload.ReactionsPayload? = nil,
                    repositoryUrl: Swift.String,
                    state: Components.Schemas.WebhookDiscussionUnlabeled.DiscussionPayload.StatePayload,
                    timelineUrl: Swift.String? = nil,
                    title: Swift.String,
                    updatedAt: Swift.String,
                    user: Components.Schemas.WebhookDiscussionUnlabeled.DiscussionPayload.UserPayload? = nil
                ) {
                    self.activeLockReason = activeLockReason
                    self.answerChosenAt = answerChosenAt
                    self.answerChosenBy = answerChosenBy
                    self.answerHtmlUrl = answerHtmlUrl
                    self.authorAssociation = authorAssociation
                    self.body = body
                    self.category = category
                    self.comments = comments
                    self.createdAt = createdAt
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.locked = locked
                    self.nodeId = nodeId
                    self.number = number
                    self.reactions = reactions
                    self.repositoryUrl = repositoryUrl
                    self.state = state
                    self.timelineUrl = timelineUrl
                    self.title = title
                    self.updatedAt = updatedAt
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case activeLockReason = "active_lock_reason"
                    case answerChosenAt = "answer_chosen_at"
                    case answerChosenBy = "answer_chosen_by"
                    case answerHtmlUrl = "answer_html_url"
                    case authorAssociation = "author_association"
                    case body
                    case category
                    case comments
                    case createdAt = "created_at"
                    case htmlUrl = "html_url"
                    case id
                    case locked
                    case nodeId = "node_id"
                    case number
                    case reactions
                    case repositoryUrl = "repository_url"
                    case state
                    case timelineUrl = "timeline_url"
                    case title
                    case updatedAt = "updated_at"
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/discussion`.
            public var discussion: Components.Schemas.WebhookDiscussionUnlabeled.DiscussionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/label`.
            public struct LabelPayload: Codable, Hashable, Sendable {
                /// 6-character hex code, without the leading #, identifying the color
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/label/color`.
                public var color: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/label/default`.
                public var _default: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/label/description`.
                public var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/label/id`.
                public var id: Swift.Int
                /// The name of the label.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/label/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/label/node_id`.
                public var nodeId: Swift.String
                /// URL for the label
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/label/url`.
                public var url: Swift.String
                /// Creates a new `LabelPayload`.
                ///
                /// - Parameters:
                ///   - color: 6-character hex code, without the leading #, identifying the color
                ///   - _default:
                ///   - description:
                ///   - id:
                ///   - name: The name of the label.
                ///   - nodeId:
                ///   - url: URL for the label
                public init(
                    color: Swift.String,
                    _default: Swift.Bool,
                    description: Swift.String? = nil,
                    id: Swift.Int,
                    name: Swift.String,
                    nodeId: Swift.String,
                    url: Swift.String
                ) {
                    self.color = color
                    self._default = _default
                    self.description = description
                    self.id = id
                    self.name = name
                    self.nodeId = nodeId
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case color
                    case _default = "default"
                    case description
                    case id
                    case name
                    case nodeId = "node_id"
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/label`.
            public var label: Components.Schemas.WebhookDiscussionUnlabeled.LabelPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlabeled/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Creates a new `WebhookDiscussionUnlabeled`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - discussion:
            ///   - enterprise:
            ///   - installation:
            ///   - label:
            ///   - organization:
            ///   - repository:
            ///   - sender:
            public init(
                action: Components.Schemas.WebhookDiscussionUnlabeled.ActionPayload,
                discussion: Components.Schemas.WebhookDiscussionUnlabeled.DiscussionPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                label: Components.Schemas.WebhookDiscussionUnlabeled.LabelPayload,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser
            ) {
                self.action = action
                self.discussion = discussion
                self.enterprise = enterprise
                self.installation = installation
                self.label = label
                self.organization = organization
                self.repository = repository
                self.sender = sender
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case discussion
                case enterprise
                case installation
                case label
                case organization
                case repository
                case sender
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked`.
        public struct WebhookDiscussionUnlocked: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case unlocked = "unlocked"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/action`.
            public var action: Components.Schemas.WebhookDiscussionUnlocked.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion`.
            public struct DiscussionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/active_lock_reason`.
                    public var activeLockReason: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/answer_chosen_at`.
                    public var answerChosenAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/answer_chosen_by`.
                    public struct AnswerChosenByPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/answer_chosen_by/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/answer_chosen_by/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/answer_chosen_by/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/answer_chosen_by/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/answer_chosen_by/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/answer_chosen_by/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/answer_chosen_by/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/answer_chosen_by/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/answer_chosen_by/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/answer_chosen_by/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/answer_chosen_by/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/answer_chosen_by/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/answer_chosen_by/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/answer_chosen_by/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/answer_chosen_by/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/answer_chosen_by/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/answer_chosen_by/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/answer_chosen_by/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/answer_chosen_by/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/answer_chosen_by/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/answer_chosen_by/type`.
                        public var _type: Components.Schemas.WebhookDiscussionUnlocked.DiscussionPayload.Value1Payload.AnswerChosenByPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/answer_chosen_by/url`.
                        public var url: Swift.String?
                        /// Creates a new `AnswerChosenByPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookDiscussionUnlocked.DiscussionPayload.Value1Payload.AnswerChosenByPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/answer_chosen_by`.
                    public var answerChosenBy: Components.Schemas.WebhookDiscussionUnlocked.DiscussionPayload.Value1Payload.AnswerChosenByPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/answer_html_url`.
                    public var answerHtmlUrl: Swift.String?
                    /// How the author is associated with the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/author_association`.
                    @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case collaborator = "COLLABORATOR"
                        case contributor = "CONTRIBUTOR"
                        case firstTimer = "FIRST_TIMER"
                        case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                        case mannequin = "MANNEQUIN"
                        case member = "MEMBER"
                        case none = "NONE"
                        case owner = "OWNER"
                    }
                    /// How the author is associated with the repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/author_association`.
                    public var authorAssociation: Components.Schemas.WebhookDiscussionUnlocked.DiscussionPayload.Value1Payload.AuthorAssociationPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/body`.
                    public var body: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/category`.
                    public struct CategoryPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/category/created_at`.
                        public var createdAt: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/category/description`.
                        public var description: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/category/emoji`.
                        public var emoji: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/category/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/category/is_answerable`.
                        public var isAnswerable: Swift.Bool
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/category/name`.
                        public var name: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/category/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/category/repository_id`.
                        public var repositoryId: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/category/slug`.
                        public var slug: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/category/updated_at`.
                        public var updatedAt: Swift.String
                        /// Creates a new `CategoryPayload`.
                        ///
                        /// - Parameters:
                        ///   - createdAt:
                        ///   - description:
                        ///   - emoji:
                        ///   - id:
                        ///   - isAnswerable:
                        ///   - name:
                        ///   - nodeId:
                        ///   - repositoryId:
                        ///   - slug:
                        ///   - updatedAt:
                        public init(
                            createdAt: Swift.String,
                            description: Swift.String,
                            emoji: Swift.String,
                            id: Swift.Int,
                            isAnswerable: Swift.Bool,
                            name: Swift.String,
                            nodeId: Swift.String? = nil,
                            repositoryId: Swift.Int,
                            slug: Swift.String,
                            updatedAt: Swift.String
                        ) {
                            self.createdAt = createdAt
                            self.description = description
                            self.emoji = emoji
                            self.id = id
                            self.isAnswerable = isAnswerable
                            self.name = name
                            self.nodeId = nodeId
                            self.repositoryId = repositoryId
                            self.slug = slug
                            self.updatedAt = updatedAt
                        }
                        public enum CodingKeys: String, CodingKey {
                            case createdAt = "created_at"
                            case description
                            case emoji
                            case id
                            case isAnswerable = "is_answerable"
                            case name
                            case nodeId = "node_id"
                            case repositoryId = "repository_id"
                            case slug
                            case updatedAt = "updated_at"
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/category`.
                    public var category: Components.Schemas.WebhookDiscussionUnlocked.DiscussionPayload.Value1Payload.CategoryPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/comments`.
                    public var comments: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/created_at`.
                    public var createdAt: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/html_url`.
                    public var htmlUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/locked`.
                    public var locked: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/number`.
                    public var number: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/reactions`.
                    public struct ReactionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/reactions/+1`.
                        public var _plus_1: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/reactions/-1`.
                        public var _hyphen_1: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/reactions/confused`.
                        public var confused: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/reactions/eyes`.
                        public var eyes: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/reactions/heart`.
                        public var heart: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/reactions/hooray`.
                        public var hooray: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/reactions/laugh`.
                        public var laugh: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/reactions/rocket`.
                        public var rocket: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/reactions/total_count`.
                        public var totalCount: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/reactions/url`.
                        public var url: Swift.String
                        /// Creates a new `ReactionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - _plus_1:
                        ///   - _hyphen_1:
                        ///   - confused:
                        ///   - eyes:
                        ///   - heart:
                        ///   - hooray:
                        ///   - laugh:
                        ///   - rocket:
                        ///   - totalCount:
                        ///   - url:
                        public init(
                            _plus_1: Swift.Int,
                            _hyphen_1: Swift.Int,
                            confused: Swift.Int,
                            eyes: Swift.Int,
                            heart: Swift.Int,
                            hooray: Swift.Int,
                            laugh: Swift.Int,
                            rocket: Swift.Int,
                            totalCount: Swift.Int,
                            url: Swift.String
                        ) {
                            self._plus_1 = _plus_1
                            self._hyphen_1 = _hyphen_1
                            self.confused = confused
                            self.eyes = eyes
                            self.heart = heart
                            self.hooray = hooray
                            self.laugh = laugh
                            self.rocket = rocket
                            self.totalCount = totalCount
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _plus_1 = "+1"
                            case _hyphen_1 = "-1"
                            case confused
                            case eyes
                            case heart
                            case hooray
                            case laugh
                            case rocket
                            case totalCount = "total_count"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/reactions`.
                    public var reactions: Components.Schemas.WebhookDiscussionUnlocked.DiscussionPayload.Value1Payload.ReactionsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/repository_url`.
                    public var repositoryUrl: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/state`.
                    @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case locked = "locked"
                        case converting = "converting"
                        case transferring = "transferring"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/state`.
                    public var state: Components.Schemas.WebhookDiscussionUnlocked.DiscussionPayload.Value1Payload.StatePayload
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/timeline_url`.
                    public var timelineUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/title`.
                    public var title: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/updated_at`.
                    public var updatedAt: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/user`.
                    public struct UserPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/user/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/user/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/user/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/user/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/user/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/user/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/user/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/user/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/user/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/user/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/user/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/user/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/user/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/user/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/user/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/user/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/user/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/user/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/user/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/user/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/user/type`.
                        public var _type: Components.Schemas.WebhookDiscussionUnlocked.DiscussionPayload.Value1Payload.UserPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/user/url`.
                        public var url: Swift.String?
                        /// Creates a new `UserPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookDiscussionUnlocked.DiscussionPayload.Value1Payload.UserPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1/user`.
                    public var user: Components.Schemas.WebhookDiscussionUnlocked.DiscussionPayload.Value1Payload.UserPayload?
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - activeLockReason:
                    ///   - answerChosenAt:
                    ///   - answerChosenBy:
                    ///   - answerHtmlUrl:
                    ///   - authorAssociation: How the author is associated with the repository.
                    ///   - body:
                    ///   - category:
                    ///   - comments:
                    ///   - createdAt:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - locked:
                    ///   - nodeId:
                    ///   - number:
                    ///   - reactions:
                    ///   - repositoryUrl:
                    ///   - state:
                    ///   - timelineUrl:
                    ///   - title:
                    ///   - updatedAt:
                    ///   - user:
                    public init(
                        activeLockReason: Swift.String? = nil,
                        answerChosenAt: Swift.String? = nil,
                        answerChosenBy: Components.Schemas.WebhookDiscussionUnlocked.DiscussionPayload.Value1Payload.AnswerChosenByPayload? = nil,
                        answerHtmlUrl: Swift.String? = nil,
                        authorAssociation: Components.Schemas.WebhookDiscussionUnlocked.DiscussionPayload.Value1Payload.AuthorAssociationPayload,
                        body: Swift.String,
                        category: Components.Schemas.WebhookDiscussionUnlocked.DiscussionPayload.Value1Payload.CategoryPayload,
                        comments: Swift.Int,
                        createdAt: Swift.String,
                        htmlUrl: Swift.String,
                        id: Swift.Int,
                        locked: Swift.Bool,
                        nodeId: Swift.String,
                        number: Swift.Int,
                        reactions: Components.Schemas.WebhookDiscussionUnlocked.DiscussionPayload.Value1Payload.ReactionsPayload? = nil,
                        repositoryUrl: Swift.String,
                        state: Components.Schemas.WebhookDiscussionUnlocked.DiscussionPayload.Value1Payload.StatePayload,
                        timelineUrl: Swift.String? = nil,
                        title: Swift.String,
                        updatedAt: Swift.String,
                        user: Components.Schemas.WebhookDiscussionUnlocked.DiscussionPayload.Value1Payload.UserPayload? = nil
                    ) {
                        self.activeLockReason = activeLockReason
                        self.answerChosenAt = answerChosenAt
                        self.answerChosenBy = answerChosenBy
                        self.answerHtmlUrl = answerHtmlUrl
                        self.authorAssociation = authorAssociation
                        self.body = body
                        self.category = category
                        self.comments = comments
                        self.createdAt = createdAt
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.locked = locked
                        self.nodeId = nodeId
                        self.number = number
                        self.reactions = reactions
                        self.repositoryUrl = repositoryUrl
                        self.state = state
                        self.timelineUrl = timelineUrl
                        self.title = title
                        self.updatedAt = updatedAt
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case activeLockReason = "active_lock_reason"
                        case answerChosenAt = "answer_chosen_at"
                        case answerChosenBy = "answer_chosen_by"
                        case answerHtmlUrl = "answer_html_url"
                        case authorAssociation = "author_association"
                        case body
                        case category
                        case comments
                        case createdAt = "created_at"
                        case htmlUrl = "html_url"
                        case id
                        case locked
                        case nodeId = "node_id"
                        case number
                        case reactions
                        case repositoryUrl = "repository_url"
                        case state
                        case timelineUrl = "timeline_url"
                        case title
                        case updatedAt = "updated_at"
                        case user
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value1`.
                public var value1: Components.Schemas.WebhookDiscussionUnlocked.DiscussionPayload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/active_lock_reason`.
                    public var activeLockReason: OpenAPIRuntime.OpenAPIValueContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/answer_chosen_at`.
                    public var answerChosenAt: OpenAPIRuntime.OpenAPIValueContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/answer_chosen_by`.
                    public var answerChosenBy: OpenAPIRuntime.OpenAPIValueContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/answer_html_url`.
                    public var answerHtmlUrl: OpenAPIRuntime.OpenAPIValueContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/author_association`.
                    public var authorAssociation: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/body`.
                    public var body: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/category`.
                    public struct CategoryPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/category/created_at`.
                        public var createdAt: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/category/description`.
                        public var description: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/category/emoji`.
                        public var emoji: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/category/id`.
                        public var id: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/category/is_answerable`.
                        public var isAnswerable: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/category/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/category/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/category/repository_id`.
                        public var repositoryId: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/category/slug`.
                        public var slug: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/category/updated_at`.
                        public var updatedAt: Swift.String?
                        /// Creates a new `CategoryPayload`.
                        ///
                        /// - Parameters:
                        ///   - createdAt:
                        ///   - description:
                        ///   - emoji:
                        ///   - id:
                        ///   - isAnswerable:
                        ///   - name:
                        ///   - nodeId:
                        ///   - repositoryId:
                        ///   - slug:
                        ///   - updatedAt:
                        public init(
                            createdAt: Swift.String? = nil,
                            description: Swift.String? = nil,
                            emoji: Swift.String? = nil,
                            id: Swift.Int? = nil,
                            isAnswerable: Swift.Bool? = nil,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            repositoryId: Swift.Int? = nil,
                            slug: Swift.String? = nil,
                            updatedAt: Swift.String? = nil
                        ) {
                            self.createdAt = createdAt
                            self.description = description
                            self.emoji = emoji
                            self.id = id
                            self.isAnswerable = isAnswerable
                            self.name = name
                            self.nodeId = nodeId
                            self.repositoryId = repositoryId
                            self.slug = slug
                            self.updatedAt = updatedAt
                        }
                        public enum CodingKeys: String, CodingKey {
                            case createdAt = "created_at"
                            case description
                            case emoji
                            case id
                            case isAnswerable = "is_answerable"
                            case name
                            case nodeId = "node_id"
                            case repositoryId = "repository_id"
                            case slug
                            case updatedAt = "updated_at"
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/category`.
                    public var category: Components.Schemas.WebhookDiscussionUnlocked.DiscussionPayload.Value2Payload.CategoryPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/comments`.
                    public var comments: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/created_at`.
                    public var createdAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/id`.
                    public var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/locked`.
                    public var locked: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/number`.
                    public var number: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/reactions`.
                    public struct ReactionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/reactions/+1`.
                        public var _plus_1: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/reactions/-1`.
                        public var _hyphen_1: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/reactions/confused`.
                        public var confused: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/reactions/eyes`.
                        public var eyes: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/reactions/heart`.
                        public var heart: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/reactions/hooray`.
                        public var hooray: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/reactions/laugh`.
                        public var laugh: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/reactions/rocket`.
                        public var rocket: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/reactions/total_count`.
                        public var totalCount: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/reactions/url`.
                        public var url: Swift.String?
                        /// Creates a new `ReactionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - _plus_1:
                        ///   - _hyphen_1:
                        ///   - confused:
                        ///   - eyes:
                        ///   - heart:
                        ///   - hooray:
                        ///   - laugh:
                        ///   - rocket:
                        ///   - totalCount:
                        ///   - url:
                        public init(
                            _plus_1: Swift.Int? = nil,
                            _hyphen_1: Swift.Int? = nil,
                            confused: Swift.Int? = nil,
                            eyes: Swift.Int? = nil,
                            heart: Swift.Int? = nil,
                            hooray: Swift.Int? = nil,
                            laugh: Swift.Int? = nil,
                            rocket: Swift.Int? = nil,
                            totalCount: Swift.Int? = nil,
                            url: Swift.String? = nil
                        ) {
                            self._plus_1 = _plus_1
                            self._hyphen_1 = _hyphen_1
                            self.confused = confused
                            self.eyes = eyes
                            self.heart = heart
                            self.hooray = hooray
                            self.laugh = laugh
                            self.rocket = rocket
                            self.totalCount = totalCount
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _plus_1 = "+1"
                            case _hyphen_1 = "-1"
                            case confused
                            case eyes
                            case heart
                            case hooray
                            case laugh
                            case rocket
                            case totalCount = "total_count"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/reactions`.
                    public var reactions: Components.Schemas.WebhookDiscussionUnlocked.DiscussionPayload.Value2Payload.ReactionsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/repository_url`.
                    public var repositoryUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/state`.
                    @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/state`.
                    public var state: Components.Schemas.WebhookDiscussionUnlocked.DiscussionPayload.Value2Payload.StatePayload
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/timeline_url`.
                    public var timelineUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/title`.
                    public var title: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/updated_at`.
                    public var updatedAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/user`.
                    public struct UserPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/user/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/user/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/user/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/user/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/user/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/user/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/user/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/user/id`.
                        public var id: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/user/login`.
                        public var login: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/user/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/user/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/user/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/user/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/user/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/user/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/user/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/user/type`.
                        public var _type: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/user/url`.
                        public var url: Swift.String?
                        /// Creates a new `UserPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int? = nil,
                            login: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2/user`.
                    public var user: Components.Schemas.WebhookDiscussionUnlocked.DiscussionPayload.Value2Payload.UserPayload?
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - activeLockReason:
                    ///   - answerChosenAt:
                    ///   - answerChosenBy:
                    ///   - answerHtmlUrl:
                    ///   - authorAssociation:
                    ///   - body:
                    ///   - category:
                    ///   - comments:
                    ///   - createdAt:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - locked:
                    ///   - nodeId:
                    ///   - number:
                    ///   - reactions:
                    ///   - repositoryUrl:
                    ///   - state:
                    ///   - timelineUrl:
                    ///   - title:
                    ///   - updatedAt:
                    ///   - user:
                    public init(
                        activeLockReason: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                        answerChosenAt: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                        answerChosenBy: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                        answerHtmlUrl: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                        authorAssociation: Swift.String? = nil,
                        body: Swift.String? = nil,
                        category: Components.Schemas.WebhookDiscussionUnlocked.DiscussionPayload.Value2Payload.CategoryPayload? = nil,
                        comments: Swift.Int? = nil,
                        createdAt: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int? = nil,
                        locked: Swift.Bool,
                        nodeId: Swift.String? = nil,
                        number: Swift.Int? = nil,
                        reactions: Components.Schemas.WebhookDiscussionUnlocked.DiscussionPayload.Value2Payload.ReactionsPayload? = nil,
                        repositoryUrl: Swift.String? = nil,
                        state: Components.Schemas.WebhookDiscussionUnlocked.DiscussionPayload.Value2Payload.StatePayload,
                        timelineUrl: Swift.String? = nil,
                        title: Swift.String? = nil,
                        updatedAt: Swift.String? = nil,
                        user: Components.Schemas.WebhookDiscussionUnlocked.DiscussionPayload.Value2Payload.UserPayload? = nil
                    ) {
                        self.activeLockReason = activeLockReason
                        self.answerChosenAt = answerChosenAt
                        self.answerChosenBy = answerChosenBy
                        self.answerHtmlUrl = answerHtmlUrl
                        self.authorAssociation = authorAssociation
                        self.body = body
                        self.category = category
                        self.comments = comments
                        self.createdAt = createdAt
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.locked = locked
                        self.nodeId = nodeId
                        self.number = number
                        self.reactions = reactions
                        self.repositoryUrl = repositoryUrl
                        self.state = state
                        self.timelineUrl = timelineUrl
                        self.title = title
                        self.updatedAt = updatedAt
                        self.user = user
                    }
                    public enum CodingKeys: String, CodingKey {
                        case activeLockReason = "active_lock_reason"
                        case answerChosenAt = "answer_chosen_at"
                        case answerChosenBy = "answer_chosen_by"
                        case answerHtmlUrl = "answer_html_url"
                        case authorAssociation = "author_association"
                        case body
                        case category
                        case comments
                        case createdAt = "created_at"
                        case htmlUrl = "html_url"
                        case id
                        case locked
                        case nodeId = "node_id"
                        case number
                        case reactions
                        case repositoryUrl = "repository_url"
                        case state
                        case timelineUrl = "timeline_url"
                        case title
                        case updatedAt = "updated_at"
                        case user
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion/value2`.
                public var value2: Components.Schemas.WebhookDiscussionUnlocked.DiscussionPayload.Value2Payload
                /// Creates a new `DiscussionPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.WebhookDiscussionUnlocked.DiscussionPayload.Value1Payload,
                    value2: Components.Schemas.WebhookDiscussionUnlocked.DiscussionPayload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/discussion`.
            public var discussion: Components.Schemas.WebhookDiscussionUnlocked.DiscussionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unlocked/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Creates a new `WebhookDiscussionUnlocked`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - discussion:
            ///   - enterprise:
            ///   - installation:
            ///   - organization:
            ///   - repository:
            ///   - sender:
            public init(
                action: Components.Schemas.WebhookDiscussionUnlocked.ActionPayload,
                discussion: Components.Schemas.WebhookDiscussionUnlocked.DiscussionPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser
            ) {
                self.action = action
                self.discussion = discussion
                self.enterprise = enterprise
                self.installation = installation
                self.organization = organization
                self.repository = repository
                self.sender = sender
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case discussion
                case enterprise
                case installation
                case organization
                case repository
                case sender
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned`.
        public struct WebhookDiscussionUnpinned: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case unpinned = "unpinned"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/action`.
            public var action: Components.Schemas.WebhookDiscussionUnpinned.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion`.
            public struct DiscussionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/active_lock_reason`.
                public var activeLockReason: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/answer_chosen_at`.
                public var answerChosenAt: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/answer_chosen_by`.
                public struct AnswerChosenByPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/answer_chosen_by/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/answer_chosen_by/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/answer_chosen_by/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/answer_chosen_by/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/answer_chosen_by/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/answer_chosen_by/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/answer_chosen_by/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/answer_chosen_by/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/answer_chosen_by/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/answer_chosen_by/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/answer_chosen_by/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/answer_chosen_by/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/answer_chosen_by/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/answer_chosen_by/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/answer_chosen_by/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/answer_chosen_by/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/answer_chosen_by/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/answer_chosen_by/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/answer_chosen_by/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/answer_chosen_by/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/answer_chosen_by/type`.
                    public var _type: Components.Schemas.WebhookDiscussionUnpinned.DiscussionPayload.AnswerChosenByPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/answer_chosen_by/url`.
                    public var url: Swift.String?
                    /// Creates a new `AnswerChosenByPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookDiscussionUnpinned.DiscussionPayload.AnswerChosenByPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/answer_chosen_by`.
                public var answerChosenBy: Components.Schemas.WebhookDiscussionUnpinned.DiscussionPayload.AnswerChosenByPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/answer_html_url`.
                public var answerHtmlUrl: Swift.String?
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/author_association`.
                @frozen public enum AuthorAssociationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case collaborator = "COLLABORATOR"
                    case contributor = "CONTRIBUTOR"
                    case firstTimer = "FIRST_TIMER"
                    case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
                    case mannequin = "MANNEQUIN"
                    case member = "MEMBER"
                    case none = "NONE"
                    case owner = "OWNER"
                }
                /// How the author is associated with the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/author_association`.
                public var authorAssociation: Components.Schemas.WebhookDiscussionUnpinned.DiscussionPayload.AuthorAssociationPayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/body`.
                public var body: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/category`.
                public struct CategoryPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/category/created_at`.
                    public var createdAt: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/category/description`.
                    public var description: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/category/emoji`.
                    public var emoji: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/category/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/category/is_answerable`.
                    public var isAnswerable: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/category/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/category/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/category/repository_id`.
                    public var repositoryId: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/category/slug`.
                    public var slug: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/category/updated_at`.
                    public var updatedAt: Swift.String
                    /// Creates a new `CategoryPayload`.
                    ///
                    /// - Parameters:
                    ///   - createdAt:
                    ///   - description:
                    ///   - emoji:
                    ///   - id:
                    ///   - isAnswerable:
                    ///   - name:
                    ///   - nodeId:
                    ///   - repositoryId:
                    ///   - slug:
                    ///   - updatedAt:
                    public init(
                        createdAt: Swift.String,
                        description: Swift.String,
                        emoji: Swift.String,
                        id: Swift.Int,
                        isAnswerable: Swift.Bool,
                        name: Swift.String,
                        nodeId: Swift.String? = nil,
                        repositoryId: Swift.Int,
                        slug: Swift.String,
                        updatedAt: Swift.String
                    ) {
                        self.createdAt = createdAt
                        self.description = description
                        self.emoji = emoji
                        self.id = id
                        self.isAnswerable = isAnswerable
                        self.name = name
                        self.nodeId = nodeId
                        self.repositoryId = repositoryId
                        self.slug = slug
                        self.updatedAt = updatedAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case createdAt = "created_at"
                        case description
                        case emoji
                        case id
                        case isAnswerable = "is_answerable"
                        case name
                        case nodeId = "node_id"
                        case repositoryId = "repository_id"
                        case slug
                        case updatedAt = "updated_at"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/category`.
                public var category: Components.Schemas.WebhookDiscussionUnpinned.DiscussionPayload.CategoryPayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/comments`.
                public var comments: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/created_at`.
                public var createdAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/html_url`.
                public var htmlUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/locked`.
                public var locked: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/number`.
                public var number: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/reactions`.
                public struct ReactionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/reactions/+1`.
                    public var _plus_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/reactions/-1`.
                    public var _hyphen_1: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/reactions/confused`.
                    public var confused: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/reactions/eyes`.
                    public var eyes: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/reactions/heart`.
                    public var heart: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/reactions/hooray`.
                    public var hooray: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/reactions/laugh`.
                    public var laugh: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/reactions/rocket`.
                    public var rocket: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/reactions/total_count`.
                    public var totalCount: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/reactions/url`.
                    public var url: Swift.String
                    /// Creates a new `ReactionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - _plus_1:
                    ///   - _hyphen_1:
                    ///   - confused:
                    ///   - eyes:
                    ///   - heart:
                    ///   - hooray:
                    ///   - laugh:
                    ///   - rocket:
                    ///   - totalCount:
                    ///   - url:
                    public init(
                        _plus_1: Swift.Int,
                        _hyphen_1: Swift.Int,
                        confused: Swift.Int,
                        eyes: Swift.Int,
                        heart: Swift.Int,
                        hooray: Swift.Int,
                        laugh: Swift.Int,
                        rocket: Swift.Int,
                        totalCount: Swift.Int,
                        url: Swift.String
                    ) {
                        self._plus_1 = _plus_1
                        self._hyphen_1 = _hyphen_1
                        self.confused = confused
                        self.eyes = eyes
                        self.heart = heart
                        self.hooray = hooray
                        self.laugh = laugh
                        self.rocket = rocket
                        self.totalCount = totalCount
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _plus_1 = "+1"
                        case _hyphen_1 = "-1"
                        case confused
                        case eyes
                        case heart
                        case hooray
                        case laugh
                        case rocket
                        case totalCount = "total_count"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/reactions`.
                public var reactions: Components.Schemas.WebhookDiscussionUnpinned.DiscussionPayload.ReactionsPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/repository_url`.
                public var repositoryUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/state`.
                @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case open = "open"
                    case locked = "locked"
                    case converting = "converting"
                    case transferring = "transferring"
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/state`.
                public var state: Components.Schemas.WebhookDiscussionUnpinned.DiscussionPayload.StatePayload
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/timeline_url`.
                public var timelineUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/title`.
                public var title: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/updated_at`.
                public var updatedAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/user`.
                public struct UserPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/user/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/user/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/user/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/user/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/user/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/user/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/user/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/user/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/user/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/user/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/user/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/user/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/user/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/user/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/user/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/user/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/user/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/user/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/user/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/user/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/user/type`.
                    public var _type: Components.Schemas.WebhookDiscussionUnpinned.DiscussionPayload.UserPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/user/url`.
                    public var url: Swift.String?
                    /// Creates a new `UserPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookDiscussionUnpinned.DiscussionPayload.UserPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion/user`.
                public var user: Components.Schemas.WebhookDiscussionUnpinned.DiscussionPayload.UserPayload?
                /// Creates a new `DiscussionPayload`.
                ///
                /// - Parameters:
                ///   - activeLockReason:
                ///   - answerChosenAt:
                ///   - answerChosenBy:
                ///   - answerHtmlUrl:
                ///   - authorAssociation: How the author is associated with the repository.
                ///   - body:
                ///   - category:
                ///   - comments:
                ///   - createdAt:
                ///   - htmlUrl:
                ///   - id:
                ///   - locked:
                ///   - nodeId:
                ///   - number:
                ///   - reactions:
                ///   - repositoryUrl:
                ///   - state:
                ///   - timelineUrl:
                ///   - title:
                ///   - updatedAt:
                ///   - user:
                public init(
                    activeLockReason: Swift.String? = nil,
                    answerChosenAt: Swift.String? = nil,
                    answerChosenBy: Components.Schemas.WebhookDiscussionUnpinned.DiscussionPayload.AnswerChosenByPayload? = nil,
                    answerHtmlUrl: Swift.String? = nil,
                    authorAssociation: Components.Schemas.WebhookDiscussionUnpinned.DiscussionPayload.AuthorAssociationPayload,
                    body: Swift.String,
                    category: Components.Schemas.WebhookDiscussionUnpinned.DiscussionPayload.CategoryPayload,
                    comments: Swift.Int,
                    createdAt: Swift.String,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    locked: Swift.Bool,
                    nodeId: Swift.String,
                    number: Swift.Int,
                    reactions: Components.Schemas.WebhookDiscussionUnpinned.DiscussionPayload.ReactionsPayload? = nil,
                    repositoryUrl: Swift.String,
                    state: Components.Schemas.WebhookDiscussionUnpinned.DiscussionPayload.StatePayload,
                    timelineUrl: Swift.String? = nil,
                    title: Swift.String,
                    updatedAt: Swift.String,
                    user: Components.Schemas.WebhookDiscussionUnpinned.DiscussionPayload.UserPayload? = nil
                ) {
                    self.activeLockReason = activeLockReason
                    self.answerChosenAt = answerChosenAt
                    self.answerChosenBy = answerChosenBy
                    self.answerHtmlUrl = answerHtmlUrl
                    self.authorAssociation = authorAssociation
                    self.body = body
                    self.category = category
                    self.comments = comments
                    self.createdAt = createdAt
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.locked = locked
                    self.nodeId = nodeId
                    self.number = number
                    self.reactions = reactions
                    self.repositoryUrl = repositoryUrl
                    self.state = state
                    self.timelineUrl = timelineUrl
                    self.title = title
                    self.updatedAt = updatedAt
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case activeLockReason = "active_lock_reason"
                    case answerChosenAt = "answer_chosen_at"
                    case answerChosenBy = "answer_chosen_by"
                    case answerHtmlUrl = "answer_html_url"
                    case authorAssociation = "author_association"
                    case body
                    case category
                    case comments
                    case createdAt = "created_at"
                    case htmlUrl = "html_url"
                    case id
                    case locked
                    case nodeId = "node_id"
                    case number
                    case reactions
                    case repositoryUrl = "repository_url"
                    case state
                    case timelineUrl = "timeline_url"
                    case title
                    case updatedAt = "updated_at"
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/discussion`.
            public var discussion: Components.Schemas.WebhookDiscussionUnpinned.DiscussionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-discussion-unpinned/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// Creates a new `WebhookDiscussionUnpinned`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - discussion:
            ///   - enterprise:
            ///   - installation:
            ///   - organization:
            ///   - repository:
            ///   - sender:
            public init(
                action: Components.Schemas.WebhookDiscussionUnpinned.ActionPayload,
                discussion: Components.Schemas.WebhookDiscussionUnpinned.DiscussionPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser
            ) {
                self.action = action
                self.discussion = discussion
                self.enterprise = enterprise
                self.installation = installation
                self.organization = organization
                self.repository = repository
                self.sender = sender
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case discussion
                case enterprise
                case installation
                case organization
                case repository
                case sender
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A comment on the discussion was marked as the answer.
    ///
    /// - Remark: HTTP `POST /discussion-answered`.
    /// - Remark: Generated from `#/paths//discussion-answered/post(discussion/answered)`.
    public enum DiscussionAnswered {
        public static let id: Swift.String = "discussion/answered"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/discussion-answered/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/discussion-answered/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-answered/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-answered/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-answered/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-answered/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-answered/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-answered/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.DiscussionAnswered.Input.Headers
            /// - Remark: Generated from `#/paths/discussion-answered/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/discussion-answered/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookDiscussionAnswered)
            }
            public var body: Operations.DiscussionAnswered.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.DiscussionAnswered.Input.Headers = .init(),
                body: Operations.DiscussionAnswered.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//discussion-answered/post(discussion/answered)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DiscussionAnswered.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//discussion-answered/post(discussion/answered)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DiscussionAnswered.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// The category of a discussion was changed.
    ///
    /// - Remark: HTTP `POST /discussion-category-changed`.
    /// - Remark: Generated from `#/paths//discussion-category-changed/post(discussion/category-changed)`.
    public enum DiscussionCategoryChanged {
        public static let id: Swift.String = "discussion/category-changed"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/discussion-category-changed/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/discussion-category-changed/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-category-changed/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-category-changed/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-category-changed/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-category-changed/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-category-changed/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-category-changed/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.DiscussionCategoryChanged.Input.Headers
            /// - Remark: Generated from `#/paths/discussion-category-changed/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/discussion-category-changed/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookDiscussionCategoryChanged)
            }
            public var body: Operations.DiscussionCategoryChanged.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.DiscussionCategoryChanged.Input.Headers = .init(),
                body: Operations.DiscussionCategoryChanged.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//discussion-category-changed/post(discussion/category-changed)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DiscussionCategoryChanged.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//discussion-category-changed/post(discussion/category-changed)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DiscussionCategoryChanged.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to a comment on a discussion. For activity relating to a discussion as opposed to comments on a discussion, see the `discussion` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A comment on a discussion was created.
    ///
    /// - Remark: HTTP `POST /discussion-comment-created`.
    /// - Remark: Generated from `#/paths//discussion-comment-created/post(discussion-comment/created)`.
    public enum DiscussionCommentCreated {
        public static let id: Swift.String = "discussion-comment/created"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/discussion-comment-created/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/discussion-comment-created/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-comment-created/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-comment-created/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-comment-created/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-comment-created/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-comment-created/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-comment-created/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.DiscussionCommentCreated.Input.Headers
            /// - Remark: Generated from `#/paths/discussion-comment-created/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/discussion-comment-created/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookDiscussionCommentCreated)
            }
            public var body: Operations.DiscussionCommentCreated.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.DiscussionCommentCreated.Input.Headers = .init(),
                body: Operations.DiscussionCommentCreated.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//discussion-comment-created/post(discussion-comment/created)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DiscussionCommentCreated.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//discussion-comment-created/post(discussion-comment/created)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DiscussionCommentCreated.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)."
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A comment on a discussion was deleted.
    ///
    /// - Remark: HTTP `POST /discussion-comment-deleted`.
    /// - Remark: Generated from `#/paths//discussion-comment-deleted/post(discussion-comment/deleted)`.
    public enum DiscussionCommentDeleted {
        public static let id: Swift.String = "discussion-comment/deleted"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/discussion-comment-deleted/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/discussion-comment-deleted/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-comment-deleted/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-comment-deleted/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-comment-deleted/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-comment-deleted/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-comment-deleted/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-comment-deleted/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.DiscussionCommentDeleted.Input.Headers
            /// - Remark: Generated from `#/paths/discussion-comment-deleted/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/discussion-comment-deleted/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookDiscussionCommentDeleted)
            }
            public var body: Operations.DiscussionCommentDeleted.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.DiscussionCommentDeleted.Input.Headers = .init(),
                body: Operations.DiscussionCommentDeleted.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//discussion-comment-deleted/post(discussion-comment/deleted)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DiscussionCommentDeleted.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//discussion-comment-deleted/post(discussion-comment/deleted)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DiscussionCommentDeleted.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)."
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A comment on a discussion was edited.
    ///
    /// - Remark: HTTP `POST /discussion-comment-edited`.
    /// - Remark: Generated from `#/paths//discussion-comment-edited/post(discussion-comment/edited)`.
    public enum DiscussionCommentEdited {
        public static let id: Swift.String = "discussion-comment/edited"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/discussion-comment-edited/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/discussion-comment-edited/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-comment-edited/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-comment-edited/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-comment-edited/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-comment-edited/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-comment-edited/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-comment-edited/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.DiscussionCommentEdited.Input.Headers
            /// - Remark: Generated from `#/paths/discussion-comment-edited/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/discussion-comment-edited/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookDiscussionCommentEdited)
            }
            public var body: Operations.DiscussionCommentEdited.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.DiscussionCommentEdited.Input.Headers = .init(),
                body: Operations.DiscussionCommentEdited.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//discussion-comment-edited/post(discussion-comment/edited)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DiscussionCommentEdited.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//discussion-comment-edited/post(discussion-comment/edited)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DiscussionCommentEdited.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A discussion was created.
    ///
    /// - Remark: HTTP `POST /discussion-created`.
    /// - Remark: Generated from `#/paths//discussion-created/post(discussion/created)`.
    public enum DiscussionCreated {
        public static let id: Swift.String = "discussion/created"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/discussion-created/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/discussion-created/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-created/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-created/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-created/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-created/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-created/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-created/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.DiscussionCreated.Input.Headers
            /// - Remark: Generated from `#/paths/discussion-created/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/discussion-created/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookDiscussionCreated)
            }
            public var body: Operations.DiscussionCreated.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.DiscussionCreated.Input.Headers = .init(),
                body: Operations.DiscussionCreated.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//discussion-created/post(discussion/created)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DiscussionCreated.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//discussion-created/post(discussion/created)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DiscussionCreated.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A discussion was deleted.
    ///
    /// - Remark: HTTP `POST /discussion-deleted`.
    /// - Remark: Generated from `#/paths//discussion-deleted/post(discussion/deleted)`.
    public enum DiscussionDeleted {
        public static let id: Swift.String = "discussion/deleted"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/discussion-deleted/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/discussion-deleted/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-deleted/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-deleted/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-deleted/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-deleted/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-deleted/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-deleted/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.DiscussionDeleted.Input.Headers
            /// - Remark: Generated from `#/paths/discussion-deleted/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/discussion-deleted/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookDiscussionDeleted)
            }
            public var body: Operations.DiscussionDeleted.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.DiscussionDeleted.Input.Headers = .init(),
                body: Operations.DiscussionDeleted.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//discussion-deleted/post(discussion/deleted)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DiscussionDeleted.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//discussion-deleted/post(discussion/deleted)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DiscussionDeleted.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// The title or body on a discussion was edited, or the category of the discussion was changed.
    ///
    /// - Remark: HTTP `POST /discussion-edited`.
    /// - Remark: Generated from `#/paths//discussion-edited/post(discussion/edited)`.
    public enum DiscussionEdited {
        public static let id: Swift.String = "discussion/edited"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/discussion-edited/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/discussion-edited/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-edited/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-edited/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-edited/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-edited/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-edited/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-edited/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.DiscussionEdited.Input.Headers
            /// - Remark: Generated from `#/paths/discussion-edited/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/discussion-edited/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookDiscussionEdited)
            }
            public var body: Operations.DiscussionEdited.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.DiscussionEdited.Input.Headers = .init(),
                body: Operations.DiscussionEdited.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//discussion-edited/post(discussion/edited)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DiscussionEdited.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//discussion-edited/post(discussion/edited)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DiscussionEdited.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A label was added to a discussion.
    ///
    /// - Remark: HTTP `POST /discussion-labeled`.
    /// - Remark: Generated from `#/paths//discussion-labeled/post(discussion/labeled)`.
    public enum DiscussionLabeled {
        public static let id: Swift.String = "discussion/labeled"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/discussion-labeled/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/discussion-labeled/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-labeled/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-labeled/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-labeled/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-labeled/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-labeled/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-labeled/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.DiscussionLabeled.Input.Headers
            /// - Remark: Generated from `#/paths/discussion-labeled/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/discussion-labeled/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookDiscussionLabeled)
            }
            public var body: Operations.DiscussionLabeled.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.DiscussionLabeled.Input.Headers = .init(),
                body: Operations.DiscussionLabeled.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//discussion-labeled/post(discussion/labeled)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DiscussionLabeled.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//discussion-labeled/post(discussion/labeled)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DiscussionLabeled.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A discussion was locked.
    ///
    /// - Remark: HTTP `POST /discussion-locked`.
    /// - Remark: Generated from `#/paths//discussion-locked/post(discussion/locked)`.
    public enum DiscussionLocked {
        public static let id: Swift.String = "discussion/locked"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/discussion-locked/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/discussion-locked/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-locked/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-locked/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-locked/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-locked/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-locked/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-locked/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.DiscussionLocked.Input.Headers
            /// - Remark: Generated from `#/paths/discussion-locked/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/discussion-locked/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookDiscussionLocked)
            }
            public var body: Operations.DiscussionLocked.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.DiscussionLocked.Input.Headers = .init(),
                body: Operations.DiscussionLocked.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//discussion-locked/post(discussion/locked)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DiscussionLocked.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//discussion-locked/post(discussion/locked)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DiscussionLocked.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A discussion was pinned.
    ///
    /// - Remark: HTTP `POST /discussion-pinned`.
    /// - Remark: Generated from `#/paths//discussion-pinned/post(discussion/pinned)`.
    public enum DiscussionPinned {
        public static let id: Swift.String = "discussion/pinned"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/discussion-pinned/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/discussion-pinned/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-pinned/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-pinned/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-pinned/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-pinned/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-pinned/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-pinned/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.DiscussionPinned.Input.Headers
            /// - Remark: Generated from `#/paths/discussion-pinned/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/discussion-pinned/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookDiscussionPinned)
            }
            public var body: Operations.DiscussionPinned.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.DiscussionPinned.Input.Headers = .init(),
                body: Operations.DiscussionPinned.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//discussion-pinned/post(discussion/pinned)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DiscussionPinned.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//discussion-pinned/post(discussion/pinned)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DiscussionPinned.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A discussion was transferred to another repository.
    ///
    /// - Remark: HTTP `POST /discussion-transferred`.
    /// - Remark: Generated from `#/paths//discussion-transferred/post(discussion/transferred)`.
    public enum DiscussionTransferred {
        public static let id: Swift.String = "discussion/transferred"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/discussion-transferred/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/discussion-transferred/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-transferred/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-transferred/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-transferred/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-transferred/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-transferred/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-transferred/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.DiscussionTransferred.Input.Headers
            /// - Remark: Generated from `#/paths/discussion-transferred/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/discussion-transferred/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookDiscussionTransferred)
            }
            public var body: Operations.DiscussionTransferred.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.DiscussionTransferred.Input.Headers = .init(),
                body: Operations.DiscussionTransferred.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//discussion-transferred/post(discussion/transferred)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DiscussionTransferred.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//discussion-transferred/post(discussion/transferred)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DiscussionTransferred.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A comment on the discussion was unmarked as the answer.
    ///
    /// - Remark: HTTP `POST /discussion-unanswered`.
    /// - Remark: Generated from `#/paths//discussion-unanswered/post(discussion/unanswered)`.
    public enum DiscussionUnanswered {
        public static let id: Swift.String = "discussion/unanswered"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/discussion-unanswered/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/discussion-unanswered/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-unanswered/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-unanswered/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-unanswered/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-unanswered/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-unanswered/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-unanswered/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.DiscussionUnanswered.Input.Headers
            /// - Remark: Generated from `#/paths/discussion-unanswered/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/discussion-unanswered/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookDiscussionUnanswered)
            }
            public var body: Operations.DiscussionUnanswered.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.DiscussionUnanswered.Input.Headers = .init(),
                body: Operations.DiscussionUnanswered.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//discussion-unanswered/post(discussion/unanswered)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DiscussionUnanswered.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//discussion-unanswered/post(discussion/unanswered)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DiscussionUnanswered.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A label was removed from a discussion.
    ///
    /// - Remark: HTTP `POST /discussion-unlabeled`.
    /// - Remark: Generated from `#/paths//discussion-unlabeled/post(discussion/unlabeled)`.
    public enum DiscussionUnlabeled {
        public static let id: Swift.String = "discussion/unlabeled"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/discussion-unlabeled/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/discussion-unlabeled/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-unlabeled/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-unlabeled/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-unlabeled/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-unlabeled/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-unlabeled/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-unlabeled/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.DiscussionUnlabeled.Input.Headers
            /// - Remark: Generated from `#/paths/discussion-unlabeled/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/discussion-unlabeled/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookDiscussionUnlabeled)
            }
            public var body: Operations.DiscussionUnlabeled.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.DiscussionUnlabeled.Input.Headers = .init(),
                body: Operations.DiscussionUnlabeled.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//discussion-unlabeled/post(discussion/unlabeled)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DiscussionUnlabeled.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//discussion-unlabeled/post(discussion/unlabeled)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DiscussionUnlabeled.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A discussion was unlocked.
    ///
    /// - Remark: HTTP `POST /discussion-unlocked`.
    /// - Remark: Generated from `#/paths//discussion-unlocked/post(discussion/unlocked)`.
    public enum DiscussionUnlocked {
        public static let id: Swift.String = "discussion/unlocked"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/discussion-unlocked/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/discussion-unlocked/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-unlocked/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-unlocked/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-unlocked/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-unlocked/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-unlocked/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-unlocked/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.DiscussionUnlocked.Input.Headers
            /// - Remark: Generated from `#/paths/discussion-unlocked/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/discussion-unlocked/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookDiscussionUnlocked)
            }
            public var body: Operations.DiscussionUnlocked.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.DiscussionUnlocked.Input.Headers = .init(),
                body: Operations.DiscussionUnlocked.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//discussion-unlocked/post(discussion/unlocked)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DiscussionUnlocked.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//discussion-unlocked/post(discussion/unlocked)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DiscussionUnlocked.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// This event occurs when there is activity relating to a discussion. For activity relating to a comment on a discussion, see the `discussion_comment` event. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/discussions)." For information about the GraphQL API for Discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).
    ///
    /// In order to install this event on a GitHub App, the app must have `discussions` permission.
    ///
    /// **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
    ///
    /// A discussion was unpinned.
    ///
    /// - Remark: HTTP `POST /discussion-unpinned`.
    /// - Remark: Generated from `#/paths//discussion-unpinned/post(discussion/unpinned)`.
    public enum DiscussionUnpinned {
        public static let id: Swift.String = "discussion/unpinned"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/discussion-unpinned/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/discussion-unpinned/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-unpinned/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-unpinned/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-unpinned/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-unpinned/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-unpinned/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/discussion-unpinned/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.DiscussionUnpinned.Input.Headers
            /// - Remark: Generated from `#/paths/discussion-unpinned/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/discussion-unpinned/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookDiscussionUnpinned)
            }
            public var body: Operations.DiscussionUnpinned.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.DiscussionUnpinned.Input.Headers = .init(),
                body: Operations.DiscussionUnpinned.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//discussion-unpinned/post(discussion/unpinned)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DiscussionUnpinned.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//discussion-unpinned/post(discussion/unpinned)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DiscussionUnpinned.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
}
