// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
#else
import struct Foundation.URL
import struct Foundation.Data
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Deployment created
    ///
    /// - Remark: HTTP `POST /deployment-created`.
    /// - Remark: Generated from `#/paths//deployment-created/post(deployment/created)`.
    func deploymentCreated(_ input: Operations.DeploymentCreated.Input) async throws -> Operations.DeploymentCreated.Output
    /// Deployment status created
    ///
    /// - Remark: HTTP `POST /deployment-status-created`.
    /// - Remark: Generated from `#/paths//deployment-status-created/post(deployment-status/created)`.
    func deploymentStatusCreated(_ input: Operations.DeploymentStatusCreated.Input) async throws -> Operations.DeploymentStatusCreated.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Deployment created
    ///
    /// - Remark: HTTP `POST /deployment-created`.
    /// - Remark: Generated from `#/paths//deployment-created/post(deployment/created)`.
    public func deploymentCreated(
        headers: Operations.DeploymentCreated.Input.Headers = .init(),
        body: Operations.DeploymentCreated.Input.Body
    ) async throws -> Operations.DeploymentCreated.Output {
        try await deploymentCreated(Operations.DeploymentCreated.Input(
            headers: headers,
            body: body
        ))
    }
    /// Deployment status created
    ///
    /// - Remark: HTTP `POST /deployment-status-created`.
    /// - Remark: Generated from `#/paths//deployment-status-created/post(deployment-status/created)`.
    public func deploymentStatusCreated(
        headers: Operations.DeploymentStatusCreated.Input.Headers = .init(),
        body: Operations.DeploymentStatusCreated.Input.Body
    ) async throws -> Operations.DeploymentStatusCreated.Output {
        try await deploymentStatusCreated(Operations.DeploymentStatusCreated.Input(
            headers: headers,
            body: body
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public enum Server1 {
        public static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://api.github.com",
                variables: []
            )
        }
    }
    @available(*, deprecated, renamed: "Servers.Server1.url")
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.github.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// Simple User
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-simple-user`.
        public struct NullableSimpleUser: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/node_id`.
            public var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/avatar_url`.
            public var avatarUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gravatar_id`.
            public var gravatarId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/html_url`.
            public var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/followers_url`.
            public var followersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/following_url`.
            public var followingUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gists_url`.
            public var gistsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_url`.
            public var starredUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/subscriptions_url`.
            public var subscriptionsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/organizations_url`.
            public var organizationsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/repos_url`.
            public var reposUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/events_url`.
            public var eventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/received_events_url`.
            public var receivedEventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/site_admin`.
            public var siteAdmin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_at`.
            public var starredAt: Swift.String?
            /// Creates a new `NullableSimpleUser`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - nodeId:
            ///   - avatarUrl:
            ///   - gravatarId:
            ///   - url:
            ///   - htmlUrl:
            ///   - followersUrl:
            ///   - followingUrl:
            ///   - gistsUrl:
            ///   - starredUrl:
            ///   - subscriptionsUrl:
            ///   - organizationsUrl:
            ///   - reposUrl:
            ///   - eventsUrl:
            ///   - receivedEventsUrl:
            ///   - _type:
            ///   - siteAdmin:
            ///   - starredAt:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int,
                nodeId: Swift.String,
                avatarUrl: Swift.String,
                gravatarId: Swift.String? = nil,
                url: Swift.String,
                htmlUrl: Swift.String,
                followersUrl: Swift.String,
                followingUrl: Swift.String,
                gistsUrl: Swift.String,
                starredUrl: Swift.String,
                subscriptionsUrl: Swift.String,
                organizationsUrl: Swift.String,
                reposUrl: Swift.String,
                eventsUrl: Swift.String,
                receivedEventsUrl: Swift.String,
                _type: Swift.String,
                siteAdmin: Swift.Bool,
                starredAt: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.nodeId = nodeId
                self.avatarUrl = avatarUrl
                self.gravatarId = gravatarId
                self.url = url
                self.htmlUrl = htmlUrl
                self.followersUrl = followersUrl
                self.followingUrl = followingUrl
                self.gistsUrl = gistsUrl
                self.starredUrl = starredUrl
                self.subscriptionsUrl = subscriptionsUrl
                self.organizationsUrl = organizationsUrl
                self.reposUrl = reposUrl
                self.eventsUrl = eventsUrl
                self.receivedEventsUrl = receivedEventsUrl
                self._type = _type
                self.siteAdmin = siteAdmin
                self.starredAt = starredAt
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case nodeId = "node_id"
                case avatarUrl = "avatar_url"
                case gravatarId = "gravatar_id"
                case url
                case htmlUrl = "html_url"
                case followersUrl = "followers_url"
                case followingUrl = "following_url"
                case gistsUrl = "gists_url"
                case starredUrl = "starred_url"
                case subscriptionsUrl = "subscriptions_url"
                case organizationsUrl = "organizations_url"
                case reposUrl = "repos_url"
                case eventsUrl = "events_url"
                case receivedEventsUrl = "received_events_url"
                case _type = "type"
                case siteAdmin = "site_admin"
                case starredAt = "starred_at"
            }
        }
        /// Simple User
        ///
        /// - Remark: Generated from `#/components/schemas/simple-user`.
        public struct SimpleUser: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/simple-user/node_id`.
            public var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/avatar_url`.
            public var avatarUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gravatar_id`.
            public var gravatarId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/html_url`.
            public var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/followers_url`.
            public var followersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/following_url`.
            public var followingUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gists_url`.
            public var gistsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_url`.
            public var starredUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/subscriptions_url`.
            public var subscriptionsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/organizations_url`.
            public var organizationsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/repos_url`.
            public var reposUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/events_url`.
            public var eventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/received_events_url`.
            public var receivedEventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/site_admin`.
            public var siteAdmin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_at`.
            public var starredAt: Swift.String?
            /// Creates a new `SimpleUser`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - nodeId:
            ///   - avatarUrl:
            ///   - gravatarId:
            ///   - url:
            ///   - htmlUrl:
            ///   - followersUrl:
            ///   - followingUrl:
            ///   - gistsUrl:
            ///   - starredUrl:
            ///   - subscriptionsUrl:
            ///   - organizationsUrl:
            ///   - reposUrl:
            ///   - eventsUrl:
            ///   - receivedEventsUrl:
            ///   - _type:
            ///   - siteAdmin:
            ///   - starredAt:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int,
                nodeId: Swift.String,
                avatarUrl: Swift.String,
                gravatarId: Swift.String? = nil,
                url: Swift.String,
                htmlUrl: Swift.String,
                followersUrl: Swift.String,
                followingUrl: Swift.String,
                gistsUrl: Swift.String,
                starredUrl: Swift.String,
                subscriptionsUrl: Swift.String,
                organizationsUrl: Swift.String,
                reposUrl: Swift.String,
                eventsUrl: Swift.String,
                receivedEventsUrl: Swift.String,
                _type: Swift.String,
                siteAdmin: Swift.Bool,
                starredAt: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.nodeId = nodeId
                self.avatarUrl = avatarUrl
                self.gravatarId = gravatarId
                self.url = url
                self.htmlUrl = htmlUrl
                self.followersUrl = followersUrl
                self.followingUrl = followingUrl
                self.gistsUrl = gistsUrl
                self.starredUrl = starredUrl
                self.subscriptionsUrl = subscriptionsUrl
                self.organizationsUrl = organizationsUrl
                self.reposUrl = reposUrl
                self.eventsUrl = eventsUrl
                self.receivedEventsUrl = receivedEventsUrl
                self._type = _type
                self.siteAdmin = siteAdmin
                self.starredAt = starredAt
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case nodeId = "node_id"
                case avatarUrl = "avatar_url"
                case gravatarId = "gravatar_id"
                case url
                case htmlUrl = "html_url"
                case followersUrl = "followers_url"
                case followingUrl = "following_url"
                case gistsUrl = "gists_url"
                case starredUrl = "starred_url"
                case subscriptionsUrl = "subscriptions_url"
                case organizationsUrl = "organizations_url"
                case reposUrl = "repos_url"
                case eventsUrl = "events_url"
                case receivedEventsUrl = "received_events_url"
                case _type = "type"
                case siteAdmin = "site_admin"
                case starredAt = "starred_at"
            }
        }
        /// An enterprise account
        ///
        /// - Remark: Generated from `#/components/schemas/enterprise`.
        public struct Enterprise: Codable, Hashable, Sendable {
            /// A short description of the enterprise.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/enterprise/html_url`.
            public var htmlUrl: Swift.String
            /// The enterprise's website URL.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/website_url`.
            public var websiteUrl: Swift.String?
            /// Unique identifier of the enterprise
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/enterprise/node_id`.
            public var nodeId: Swift.String
            /// The name of the enterprise.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/name`.
            public var name: Swift.String
            /// The slug url identifier for the enterprise.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/slug`.
            public var slug: Swift.String
            /// - Remark: Generated from `#/components/schemas/enterprise/created_at`.
            public var createdAt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/enterprise/updated_at`.
            public var updatedAt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/enterprise/avatar_url`.
            public var avatarUrl: Swift.String
            /// Creates a new `Enterprise`.
            ///
            /// - Parameters:
            ///   - description: A short description of the enterprise.
            ///   - htmlUrl:
            ///   - websiteUrl: The enterprise's website URL.
            ///   - id: Unique identifier of the enterprise
            ///   - nodeId:
            ///   - name: The name of the enterprise.
            ///   - slug: The slug url identifier for the enterprise.
            ///   - createdAt:
            ///   - updatedAt:
            ///   - avatarUrl:
            public init(
                description: Swift.String? = nil,
                htmlUrl: Swift.String,
                websiteUrl: Swift.String? = nil,
                id: Swift.Int,
                nodeId: Swift.String,
                name: Swift.String,
                slug: Swift.String,
                createdAt: Swift.String? = nil,
                updatedAt: Swift.String? = nil,
                avatarUrl: Swift.String
            ) {
                self.description = description
                self.htmlUrl = htmlUrl
                self.websiteUrl = websiteUrl
                self.id = id
                self.nodeId = nodeId
                self.name = name
                self.slug = slug
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.avatarUrl = avatarUrl
            }
            public enum CodingKeys: String, CodingKey {
                case description
                case htmlUrl = "html_url"
                case websiteUrl = "website_url"
                case id
                case nodeId = "node_id"
                case name
                case slug
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case avatarUrl = "avatar_url"
            }
        }
        /// License Simple
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-license-simple`.
        public struct NullableLicenseSimple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/spdx_id`.
            public var spdxId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/node_id`.
            public var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/html_url`.
            public var htmlUrl: Swift.String?
            /// Creates a new `NullableLicenseSimple`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - url:
            ///   - spdxId:
            ///   - nodeId:
            ///   - htmlUrl:
            public init(
                key: Swift.String,
                name: Swift.String,
                url: Swift.String? = nil,
                spdxId: Swift.String? = nil,
                nodeId: Swift.String,
                htmlUrl: Swift.String? = nil
            ) {
                self.key = key
                self.name = name
                self.url = url
                self.spdxId = spdxId
                self.nodeId = nodeId
                self.htmlUrl = htmlUrl
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case url
                case spdxId = "spdx_id"
                case nodeId = "node_id"
                case htmlUrl = "html_url"
            }
        }
        /// A git repository
        ///
        /// - Remark: Generated from `#/components/schemas/repository`.
        public struct Repository: Codable, Hashable, Sendable {
            /// Unique identifier of the repository
            ///
            /// - Remark: Generated from `#/components/schemas/repository/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/node_id`.
            public var nodeId: Swift.String
            /// The name of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/full_name`.
            public var fullName: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/license`.
            public var license: Components.Schemas.NullableLicenseSimple?
            /// - Remark: Generated from `#/components/schemas/repository/organization`.
            public var organization: Components.Schemas.NullableSimpleUser?
            /// - Remark: Generated from `#/components/schemas/repository/forks`.
            public var forks: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/permissions`.
            public struct PermissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository/permissions/admin`.
                public var admin: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/pull`.
                public var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// Creates a new `PermissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                public init(
                    admin: Swift.Bool,
                    pull: Swift.Bool,
                    triage: Swift.Bool? = nil,
                    push: Swift.Bool,
                    maintain: Swift.Bool? = nil
                ) {
                    self.admin = admin
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                }
                public enum CodingKeys: String, CodingKey {
                    case admin
                    case pull
                    case triage
                    case push
                    case maintain
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository/permissions`.
            public var permissions: Components.Schemas.Repository.PermissionsPayload?
            /// - Remark: Generated from `#/components/schemas/repository/owner`.
            public var owner: Components.Schemas.SimpleUser
            /// Whether the repository is private or public.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/private`.
            public var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/html_url`.
            public var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/fork`.
            public var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/archive_url`.
            public var archiveUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/assignees_url`.
            public var assigneesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/blobs_url`.
            public var blobsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/branches_url`.
            public var branchesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/collaborators_url`.
            public var collaboratorsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/comments_url`.
            public var commentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/commits_url`.
            public var commitsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/compare_url`.
            public var compareUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/contents_url`.
            public var contentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/contributors_url`.
            public var contributorsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/deployments_url`.
            public var deploymentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/downloads_url`.
            public var downloadsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/events_url`.
            public var eventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/forks_url`.
            public var forksUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_commits_url`.
            public var gitCommitsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_refs_url`.
            public var gitRefsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_tags_url`.
            public var gitTagsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_url`.
            public var gitUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issue_comment_url`.
            public var issueCommentUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issue_events_url`.
            public var issueEventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issues_url`.
            public var issuesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/keys_url`.
            public var keysUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/labels_url`.
            public var labelsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/languages_url`.
            public var languagesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/merges_url`.
            public var mergesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/milestones_url`.
            public var milestonesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/notifications_url`.
            public var notificationsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/pulls_url`.
            public var pullsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/releases_url`.
            public var releasesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/ssh_url`.
            public var sshUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/stargazers_url`.
            public var stargazersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/statuses_url`.
            public var statusesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/subscribers_url`.
            public var subscribersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/subscription_url`.
            public var subscriptionUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/tags_url`.
            public var tagsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/teams_url`.
            public var teamsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/trees_url`.
            public var treesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/clone_url`.
            public var cloneUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/mirror_url`.
            public var mirrorUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/hooks_url`.
            public var hooksUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/svn_url`.
            public var svnUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/homepage`.
            public var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/language`.
            public var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/forks_count`.
            public var forksCount: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/stargazers_count`.
            public var stargazersCount: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/watchers_count`.
            public var watchersCount: Swift.Int
            /// The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/size`.
            public var size: Swift.Int
            /// The default branch of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/default_branch`.
            public var defaultBranch: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/open_issues_count`.
            public var openIssuesCount: Swift.Int
            /// Whether this repository acts as a template that can be used to generate new repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/is_template`.
            public var isTemplate: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/topics`.
            public var topics: [Swift.String]?
            /// Whether issues are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_issues`.
            public var hasIssues: Swift.Bool
            /// Whether projects are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_projects`.
            public var hasProjects: Swift.Bool
            /// Whether the wiki is enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_wiki`.
            public var hasWiki: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/has_pages`.
            public var hasPages: Swift.Bool
            /// Whether downloads are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_downloads`.
            public var hasDownloads: Swift.Bool
            /// Whether the repository is archived.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/archived`.
            public var archived: Swift.Bool
            /// Returns whether or not this repository disabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/disabled`.
            public var disabled: Swift.Bool
            /// The repository visibility: public, private, or internal.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/visibility`.
            public var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/pushed_at`.
            public var pushedAt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/created_at`.
            public var createdAt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/updated_at`.
            public var updatedAt: Swift.String?
            /// Whether to allow rebase merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_rebase_merge`.
            public var allowRebaseMerge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/template_repository`.
            public struct TemplateRepositoryPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/id`.
                public var id: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/node_id`.
                public var nodeId: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/full_name`.
                public var fullName: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner`.
                public struct OwnerPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/login`.
                    public var login: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/id`.
                    public var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/url`.
                    public var url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/type`.
                    public var _type: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// Creates a new `OwnerPayload`.
                    ///
                    /// - Parameters:
                    ///   - login:
                    ///   - id:
                    ///   - nodeId:
                    ///   - avatarUrl:
                    ///   - gravatarId:
                    ///   - url:
                    ///   - htmlUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - organizationsUrl:
                    ///   - reposUrl:
                    ///   - eventsUrl:
                    ///   - receivedEventsUrl:
                    ///   - _type:
                    ///   - siteAdmin:
                    public init(
                        login: Swift.String? = nil,
                        id: Swift.Int? = nil,
                        nodeId: Swift.String? = nil,
                        avatarUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        url: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        _type: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil
                    ) {
                        self.login = login
                        self.id = id
                        self.nodeId = nodeId
                        self.avatarUrl = avatarUrl
                        self.gravatarId = gravatarId
                        self.url = url
                        self.htmlUrl = htmlUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self.organizationsUrl = organizationsUrl
                        self.reposUrl = reposUrl
                        self.eventsUrl = eventsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self._type = _type
                        self.siteAdmin = siteAdmin
                    }
                    public enum CodingKeys: String, CodingKey {
                        case login
                        case id
                        case nodeId = "node_id"
                        case avatarUrl = "avatar_url"
                        case gravatarId = "gravatar_id"
                        case url
                        case htmlUrl = "html_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case organizationsUrl = "organizations_url"
                        case reposUrl = "repos_url"
                        case eventsUrl = "events_url"
                        case receivedEventsUrl = "received_events_url"
                        case _type = "type"
                        case siteAdmin = "site_admin"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner`.
                public var owner: Components.Schemas.Repository.TemplateRepositoryPayload.OwnerPayload?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/private`.
                public var _private: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/html_url`.
                public var htmlUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/description`.
                public var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/fork`.
                public var fork: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/url`.
                public var url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/archive_url`.
                public var archiveUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/assignees_url`.
                public var assigneesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/blobs_url`.
                public var blobsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/branches_url`.
                public var branchesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/collaborators_url`.
                public var collaboratorsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/comments_url`.
                public var commentsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/commits_url`.
                public var commitsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/compare_url`.
                public var compareUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/contents_url`.
                public var contentsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/contributors_url`.
                public var contributorsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/deployments_url`.
                public var deploymentsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/downloads_url`.
                public var downloadsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/events_url`.
                public var eventsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/forks_url`.
                public var forksUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/git_commits_url`.
                public var gitCommitsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/git_refs_url`.
                public var gitRefsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/git_tags_url`.
                public var gitTagsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/git_url`.
                public var gitUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/issue_comment_url`.
                public var issueCommentUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/issue_events_url`.
                public var issueEventsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/issues_url`.
                public var issuesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/keys_url`.
                public var keysUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/labels_url`.
                public var labelsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/languages_url`.
                public var languagesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merges_url`.
                public var mergesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/milestones_url`.
                public var milestonesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/notifications_url`.
                public var notificationsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/pulls_url`.
                public var pullsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/releases_url`.
                public var releasesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/ssh_url`.
                public var sshUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/stargazers_url`.
                public var stargazersUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/statuses_url`.
                public var statusesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/subscribers_url`.
                public var subscribersUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/subscription_url`.
                public var subscriptionUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/tags_url`.
                public var tagsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/teams_url`.
                public var teamsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/trees_url`.
                public var treesUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/clone_url`.
                public var cloneUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/mirror_url`.
                public var mirrorUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/hooks_url`.
                public var hooksUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/svn_url`.
                public var svnUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/homepage`.
                public var homepage: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/language`.
                public var language: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/forks_count`.
                public var forksCount: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/stargazers_count`.
                public var stargazersCount: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/watchers_count`.
                public var watchersCount: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/size`.
                public var size: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/default_branch`.
                public var defaultBranch: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/open_issues_count`.
                public var openIssuesCount: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/is_template`.
                public var isTemplate: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/topics`.
                public var topics: [Swift.String]?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_issues`.
                public var hasIssues: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_projects`.
                public var hasProjects: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_wiki`.
                public var hasWiki: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_pages`.
                public var hasPages: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_downloads`.
                public var hasDownloads: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/archived`.
                public var archived: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/disabled`.
                public var disabled: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/visibility`.
                public var visibility: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/pushed_at`.
                public var pushedAt: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/created_at`.
                public var createdAt: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/updated_at`.
                public var updatedAt: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions`.
                public struct PermissionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/admin`.
                    public var admin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/maintain`.
                    public var maintain: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/push`.
                    public var push: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/triage`.
                    public var triage: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/pull`.
                    public var pull: Swift.Bool?
                    /// Creates a new `PermissionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - admin:
                    ///   - maintain:
                    ///   - push:
                    ///   - triage:
                    ///   - pull:
                    public init(
                        admin: Swift.Bool? = nil,
                        maintain: Swift.Bool? = nil,
                        push: Swift.Bool? = nil,
                        triage: Swift.Bool? = nil,
                        pull: Swift.Bool? = nil
                    ) {
                        self.admin = admin
                        self.maintain = maintain
                        self.push = push
                        self.triage = triage
                        self.pull = pull
                    }
                    public enum CodingKeys: String, CodingKey {
                        case admin
                        case maintain
                        case push
                        case triage
                        case pull
                    }
                }
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions`.
                public var permissions: Components.Schemas.Repository.TemplateRepositoryPayload.PermissionsPayload?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_rebase_merge`.
                public var allowRebaseMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/temp_clone_token`.
                public var tempCloneToken: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_squash_merge`.
                public var allowSquashMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_auto_merge`.
                public var allowAutoMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/delete_branch_on_merge`.
                public var deleteBranchOnMerge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_update_branch`.
                public var allowUpdateBranch: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/use_squash_pr_title_as_default`.
                public var useSquashPrTitleAsDefault: Swift.Bool?
                /// The default value for a squash merge commit title:
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/squash_merge_commit_title`.
                @frozen public enum SquashMergeCommitTitlePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case prTitle = "PR_TITLE"
                    case commitOrPrTitle = "COMMIT_OR_PR_TITLE"
                }
                /// The default value for a squash merge commit title:
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/squash_merge_commit_title`.
                public var squashMergeCommitTitle: Components.Schemas.Repository.TemplateRepositoryPayload.SquashMergeCommitTitlePayload?
                /// The default value for a squash merge commit message:
                ///
                /// - `PR_BODY` - default to the pull request's body.
                /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/squash_merge_commit_message`.
                @frozen public enum SquashMergeCommitMessagePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case prBody = "PR_BODY"
                    case commitMessages = "COMMIT_MESSAGES"
                    case blank = "BLANK"
                }
                /// The default value for a squash merge commit message:
                ///
                /// - `PR_BODY` - default to the pull request's body.
                /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/squash_merge_commit_message`.
                public var squashMergeCommitMessage: Components.Schemas.Repository.TemplateRepositoryPayload.SquashMergeCommitMessagePayload?
                /// The default value for a merge commit title.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merge_commit_title`.
                @frozen public enum MergeCommitTitlePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case prTitle = "PR_TITLE"
                    case mergeMessage = "MERGE_MESSAGE"
                }
                /// The default value for a merge commit title.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merge_commit_title`.
                public var mergeCommitTitle: Components.Schemas.Repository.TemplateRepositoryPayload.MergeCommitTitlePayload?
                /// The default value for a merge commit message.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `PR_BODY` - default to the pull request's body.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merge_commit_message`.
                @frozen public enum MergeCommitMessagePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case prBody = "PR_BODY"
                    case prTitle = "PR_TITLE"
                    case blank = "BLANK"
                }
                /// The default value for a merge commit message.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `PR_BODY` - default to the pull request's body.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merge_commit_message`.
                public var mergeCommitMessage: Components.Schemas.Repository.TemplateRepositoryPayload.MergeCommitMessagePayload?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_merge_commit`.
                public var allowMergeCommit: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/subscribers_count`.
                public var subscribersCount: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/network_count`.
                public var networkCount: Swift.Int?
                /// Creates a new `TemplateRepositoryPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - nodeId:
                ///   - name:
                ///   - fullName:
                ///   - owner:
                ///   - _private:
                ///   - htmlUrl:
                ///   - description:
                ///   - fork:
                ///   - url:
                ///   - archiveUrl:
                ///   - assigneesUrl:
                ///   - blobsUrl:
                ///   - branchesUrl:
                ///   - collaboratorsUrl:
                ///   - commentsUrl:
                ///   - commitsUrl:
                ///   - compareUrl:
                ///   - contentsUrl:
                ///   - contributorsUrl:
                ///   - deploymentsUrl:
                ///   - downloadsUrl:
                ///   - eventsUrl:
                ///   - forksUrl:
                ///   - gitCommitsUrl:
                ///   - gitRefsUrl:
                ///   - gitTagsUrl:
                ///   - gitUrl:
                ///   - issueCommentUrl:
                ///   - issueEventsUrl:
                ///   - issuesUrl:
                ///   - keysUrl:
                ///   - labelsUrl:
                ///   - languagesUrl:
                ///   - mergesUrl:
                ///   - milestonesUrl:
                ///   - notificationsUrl:
                ///   - pullsUrl:
                ///   - releasesUrl:
                ///   - sshUrl:
                ///   - stargazersUrl:
                ///   - statusesUrl:
                ///   - subscribersUrl:
                ///   - subscriptionUrl:
                ///   - tagsUrl:
                ///   - teamsUrl:
                ///   - treesUrl:
                ///   - cloneUrl:
                ///   - mirrorUrl:
                ///   - hooksUrl:
                ///   - svnUrl:
                ///   - homepage:
                ///   - language:
                ///   - forksCount:
                ///   - stargazersCount:
                ///   - watchersCount:
                ///   - size:
                ///   - defaultBranch:
                ///   - openIssuesCount:
                ///   - isTemplate:
                ///   - topics:
                ///   - hasIssues:
                ///   - hasProjects:
                ///   - hasWiki:
                ///   - hasPages:
                ///   - hasDownloads:
                ///   - archived:
                ///   - disabled:
                ///   - visibility:
                ///   - pushedAt:
                ///   - createdAt:
                ///   - updatedAt:
                ///   - permissions:
                ///   - allowRebaseMerge:
                ///   - tempCloneToken:
                ///   - allowSquashMerge:
                ///   - allowAutoMerge:
                ///   - deleteBranchOnMerge:
                ///   - allowUpdateBranch:
                ///   - useSquashPrTitleAsDefault:
                ///   - squashMergeCommitTitle: The default value for a squash merge commit title:
                ///   - squashMergeCommitMessage: The default value for a squash merge commit message:
                ///   - mergeCommitTitle: The default value for a merge commit title.
                ///   - mergeCommitMessage: The default value for a merge commit message.
                ///   - allowMergeCommit:
                ///   - subscribersCount:
                ///   - networkCount:
                public init(
                    id: Swift.Int? = nil,
                    nodeId: Swift.String? = nil,
                    name: Swift.String? = nil,
                    fullName: Swift.String? = nil,
                    owner: Components.Schemas.Repository.TemplateRepositoryPayload.OwnerPayload? = nil,
                    _private: Swift.Bool? = nil,
                    htmlUrl: Swift.String? = nil,
                    description: Swift.String? = nil,
                    fork: Swift.Bool? = nil,
                    url: Swift.String? = nil,
                    archiveUrl: Swift.String? = nil,
                    assigneesUrl: Swift.String? = nil,
                    blobsUrl: Swift.String? = nil,
                    branchesUrl: Swift.String? = nil,
                    collaboratorsUrl: Swift.String? = nil,
                    commentsUrl: Swift.String? = nil,
                    commitsUrl: Swift.String? = nil,
                    compareUrl: Swift.String? = nil,
                    contentsUrl: Swift.String? = nil,
                    contributorsUrl: Swift.String? = nil,
                    deploymentsUrl: Swift.String? = nil,
                    downloadsUrl: Swift.String? = nil,
                    eventsUrl: Swift.String? = nil,
                    forksUrl: Swift.String? = nil,
                    gitCommitsUrl: Swift.String? = nil,
                    gitRefsUrl: Swift.String? = nil,
                    gitTagsUrl: Swift.String? = nil,
                    gitUrl: Swift.String? = nil,
                    issueCommentUrl: Swift.String? = nil,
                    issueEventsUrl: Swift.String? = nil,
                    issuesUrl: Swift.String? = nil,
                    keysUrl: Swift.String? = nil,
                    labelsUrl: Swift.String? = nil,
                    languagesUrl: Swift.String? = nil,
                    mergesUrl: Swift.String? = nil,
                    milestonesUrl: Swift.String? = nil,
                    notificationsUrl: Swift.String? = nil,
                    pullsUrl: Swift.String? = nil,
                    releasesUrl: Swift.String? = nil,
                    sshUrl: Swift.String? = nil,
                    stargazersUrl: Swift.String? = nil,
                    statusesUrl: Swift.String? = nil,
                    subscribersUrl: Swift.String? = nil,
                    subscriptionUrl: Swift.String? = nil,
                    tagsUrl: Swift.String? = nil,
                    teamsUrl: Swift.String? = nil,
                    treesUrl: Swift.String? = nil,
                    cloneUrl: Swift.String? = nil,
                    mirrorUrl: Swift.String? = nil,
                    hooksUrl: Swift.String? = nil,
                    svnUrl: Swift.String? = nil,
                    homepage: Swift.String? = nil,
                    language: Swift.String? = nil,
                    forksCount: Swift.Int? = nil,
                    stargazersCount: Swift.Int? = nil,
                    watchersCount: Swift.Int? = nil,
                    size: Swift.Int? = nil,
                    defaultBranch: Swift.String? = nil,
                    openIssuesCount: Swift.Int? = nil,
                    isTemplate: Swift.Bool? = nil,
                    topics: [Swift.String]? = nil,
                    hasIssues: Swift.Bool? = nil,
                    hasProjects: Swift.Bool? = nil,
                    hasWiki: Swift.Bool? = nil,
                    hasPages: Swift.Bool? = nil,
                    hasDownloads: Swift.Bool? = nil,
                    archived: Swift.Bool? = nil,
                    disabled: Swift.Bool? = nil,
                    visibility: Swift.String? = nil,
                    pushedAt: Swift.String? = nil,
                    createdAt: Swift.String? = nil,
                    updatedAt: Swift.String? = nil,
                    permissions: Components.Schemas.Repository.TemplateRepositoryPayload.PermissionsPayload? = nil,
                    allowRebaseMerge: Swift.Bool? = nil,
                    tempCloneToken: Swift.String? = nil,
                    allowSquashMerge: Swift.Bool? = nil,
                    allowAutoMerge: Swift.Bool? = nil,
                    deleteBranchOnMerge: Swift.Bool? = nil,
                    allowUpdateBranch: Swift.Bool? = nil,
                    useSquashPrTitleAsDefault: Swift.Bool? = nil,
                    squashMergeCommitTitle: Components.Schemas.Repository.TemplateRepositoryPayload.SquashMergeCommitTitlePayload? = nil,
                    squashMergeCommitMessage: Components.Schemas.Repository.TemplateRepositoryPayload.SquashMergeCommitMessagePayload? = nil,
                    mergeCommitTitle: Components.Schemas.Repository.TemplateRepositoryPayload.MergeCommitTitlePayload? = nil,
                    mergeCommitMessage: Components.Schemas.Repository.TemplateRepositoryPayload.MergeCommitMessagePayload? = nil,
                    allowMergeCommit: Swift.Bool? = nil,
                    subscribersCount: Swift.Int? = nil,
                    networkCount: Swift.Int? = nil
                ) {
                    self.id = id
                    self.nodeId = nodeId
                    self.name = name
                    self.fullName = fullName
                    self.owner = owner
                    self._private = _private
                    self.htmlUrl = htmlUrl
                    self.description = description
                    self.fork = fork
                    self.url = url
                    self.archiveUrl = archiveUrl
                    self.assigneesUrl = assigneesUrl
                    self.blobsUrl = blobsUrl
                    self.branchesUrl = branchesUrl
                    self.collaboratorsUrl = collaboratorsUrl
                    self.commentsUrl = commentsUrl
                    self.commitsUrl = commitsUrl
                    self.compareUrl = compareUrl
                    self.contentsUrl = contentsUrl
                    self.contributorsUrl = contributorsUrl
                    self.deploymentsUrl = deploymentsUrl
                    self.downloadsUrl = downloadsUrl
                    self.eventsUrl = eventsUrl
                    self.forksUrl = forksUrl
                    self.gitCommitsUrl = gitCommitsUrl
                    self.gitRefsUrl = gitRefsUrl
                    self.gitTagsUrl = gitTagsUrl
                    self.gitUrl = gitUrl
                    self.issueCommentUrl = issueCommentUrl
                    self.issueEventsUrl = issueEventsUrl
                    self.issuesUrl = issuesUrl
                    self.keysUrl = keysUrl
                    self.labelsUrl = labelsUrl
                    self.languagesUrl = languagesUrl
                    self.mergesUrl = mergesUrl
                    self.milestonesUrl = milestonesUrl
                    self.notificationsUrl = notificationsUrl
                    self.pullsUrl = pullsUrl
                    self.releasesUrl = releasesUrl
                    self.sshUrl = sshUrl
                    self.stargazersUrl = stargazersUrl
                    self.statusesUrl = statusesUrl
                    self.subscribersUrl = subscribersUrl
                    self.subscriptionUrl = subscriptionUrl
                    self.tagsUrl = tagsUrl
                    self.teamsUrl = teamsUrl
                    self.treesUrl = treesUrl
                    self.cloneUrl = cloneUrl
                    self.mirrorUrl = mirrorUrl
                    self.hooksUrl = hooksUrl
                    self.svnUrl = svnUrl
                    self.homepage = homepage
                    self.language = language
                    self.forksCount = forksCount
                    self.stargazersCount = stargazersCount
                    self.watchersCount = watchersCount
                    self.size = size
                    self.defaultBranch = defaultBranch
                    self.openIssuesCount = openIssuesCount
                    self.isTemplate = isTemplate
                    self.topics = topics
                    self.hasIssues = hasIssues
                    self.hasProjects = hasProjects
                    self.hasWiki = hasWiki
                    self.hasPages = hasPages
                    self.hasDownloads = hasDownloads
                    self.archived = archived
                    self.disabled = disabled
                    self.visibility = visibility
                    self.pushedAt = pushedAt
                    self.createdAt = createdAt
                    self.updatedAt = updatedAt
                    self.permissions = permissions
                    self.allowRebaseMerge = allowRebaseMerge
                    self.tempCloneToken = tempCloneToken
                    self.allowSquashMerge = allowSquashMerge
                    self.allowAutoMerge = allowAutoMerge
                    self.deleteBranchOnMerge = deleteBranchOnMerge
                    self.allowUpdateBranch = allowUpdateBranch
                    self.useSquashPrTitleAsDefault = useSquashPrTitleAsDefault
                    self.squashMergeCommitTitle = squashMergeCommitTitle
                    self.squashMergeCommitMessage = squashMergeCommitMessage
                    self.mergeCommitTitle = mergeCommitTitle
                    self.mergeCommitMessage = mergeCommitMessage
                    self.allowMergeCommit = allowMergeCommit
                    self.subscribersCount = subscribersCount
                    self.networkCount = networkCount
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case nodeId = "node_id"
                    case name
                    case fullName = "full_name"
                    case owner
                    case _private = "private"
                    case htmlUrl = "html_url"
                    case description
                    case fork
                    case url
                    case archiveUrl = "archive_url"
                    case assigneesUrl = "assignees_url"
                    case blobsUrl = "blobs_url"
                    case branchesUrl = "branches_url"
                    case collaboratorsUrl = "collaborators_url"
                    case commentsUrl = "comments_url"
                    case commitsUrl = "commits_url"
                    case compareUrl = "compare_url"
                    case contentsUrl = "contents_url"
                    case contributorsUrl = "contributors_url"
                    case deploymentsUrl = "deployments_url"
                    case downloadsUrl = "downloads_url"
                    case eventsUrl = "events_url"
                    case forksUrl = "forks_url"
                    case gitCommitsUrl = "git_commits_url"
                    case gitRefsUrl = "git_refs_url"
                    case gitTagsUrl = "git_tags_url"
                    case gitUrl = "git_url"
                    case issueCommentUrl = "issue_comment_url"
                    case issueEventsUrl = "issue_events_url"
                    case issuesUrl = "issues_url"
                    case keysUrl = "keys_url"
                    case labelsUrl = "labels_url"
                    case languagesUrl = "languages_url"
                    case mergesUrl = "merges_url"
                    case milestonesUrl = "milestones_url"
                    case notificationsUrl = "notifications_url"
                    case pullsUrl = "pulls_url"
                    case releasesUrl = "releases_url"
                    case sshUrl = "ssh_url"
                    case stargazersUrl = "stargazers_url"
                    case statusesUrl = "statuses_url"
                    case subscribersUrl = "subscribers_url"
                    case subscriptionUrl = "subscription_url"
                    case tagsUrl = "tags_url"
                    case teamsUrl = "teams_url"
                    case treesUrl = "trees_url"
                    case cloneUrl = "clone_url"
                    case mirrorUrl = "mirror_url"
                    case hooksUrl = "hooks_url"
                    case svnUrl = "svn_url"
                    case homepage
                    case language
                    case forksCount = "forks_count"
                    case stargazersCount = "stargazers_count"
                    case watchersCount = "watchers_count"
                    case size
                    case defaultBranch = "default_branch"
                    case openIssuesCount = "open_issues_count"
                    case isTemplate = "is_template"
                    case topics
                    case hasIssues = "has_issues"
                    case hasProjects = "has_projects"
                    case hasWiki = "has_wiki"
                    case hasPages = "has_pages"
                    case hasDownloads = "has_downloads"
                    case archived
                    case disabled
                    case visibility
                    case pushedAt = "pushed_at"
                    case createdAt = "created_at"
                    case updatedAt = "updated_at"
                    case permissions
                    case allowRebaseMerge = "allow_rebase_merge"
                    case tempCloneToken = "temp_clone_token"
                    case allowSquashMerge = "allow_squash_merge"
                    case allowAutoMerge = "allow_auto_merge"
                    case deleteBranchOnMerge = "delete_branch_on_merge"
                    case allowUpdateBranch = "allow_update_branch"
                    case useSquashPrTitleAsDefault = "use_squash_pr_title_as_default"
                    case squashMergeCommitTitle = "squash_merge_commit_title"
                    case squashMergeCommitMessage = "squash_merge_commit_message"
                    case mergeCommitTitle = "merge_commit_title"
                    case mergeCommitMessage = "merge_commit_message"
                    case allowMergeCommit = "allow_merge_commit"
                    case subscribersCount = "subscribers_count"
                    case networkCount = "network_count"
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository/template_repository`.
            public var templateRepository: Components.Schemas.Repository.TemplateRepositoryPayload?
            /// - Remark: Generated from `#/components/schemas/repository/temp_clone_token`.
            public var tempCloneToken: Swift.String?
            /// Whether to allow squash merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_squash_merge`.
            public var allowSquashMerge: Swift.Bool?
            /// Whether to allow Auto-merge to be used on pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_auto_merge`.
            public var allowAutoMerge: Swift.Bool?
            /// Whether to delete head branches when pull requests are merged
            ///
            /// - Remark: Generated from `#/components/schemas/repository/delete_branch_on_merge`.
            public var deleteBranchOnMerge: Swift.Bool?
            /// Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_update_branch`.
            public var allowUpdateBranch: Swift.Bool?
            /// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/use_squash_pr_title_as_default`.
            @available(*, deprecated)
            public var useSquashPrTitleAsDefault: Swift.Bool?
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_title`.
            @frozen public enum SquashMergeCommitTitlePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case prTitle = "PR_TITLE"
                case commitOrPrTitle = "COMMIT_OR_PR_TITLE"
            }
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_title`.
            public var squashMergeCommitTitle: Components.Schemas.Repository.SquashMergeCommitTitlePayload?
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_message`.
            @frozen public enum SquashMergeCommitMessagePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case prBody = "PR_BODY"
                case commitMessages = "COMMIT_MESSAGES"
                case blank = "BLANK"
            }
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_message`.
            public var squashMergeCommitMessage: Components.Schemas.Repository.SquashMergeCommitMessagePayload?
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_title`.
            @frozen public enum MergeCommitTitlePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case prTitle = "PR_TITLE"
                case mergeMessage = "MERGE_MESSAGE"
            }
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_title`.
            public var mergeCommitTitle: Components.Schemas.Repository.MergeCommitTitlePayload?
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_message`.
            @frozen public enum MergeCommitMessagePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case prBody = "PR_BODY"
                case prTitle = "PR_TITLE"
                case blank = "BLANK"
            }
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_message`.
            public var mergeCommitMessage: Components.Schemas.Repository.MergeCommitMessagePayload?
            /// Whether to allow merge commits for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_merge_commit`.
            public var allowMergeCommit: Swift.Bool?
            /// Whether to allow forking this repo
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_forking`.
            public var allowForking: Swift.Bool?
            /// Whether to require contributors to sign off on web-based commits
            ///
            /// - Remark: Generated from `#/components/schemas/repository/web_commit_signoff_required`.
            public var webCommitSignoffRequired: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/subscribers_count`.
            public var subscribersCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/repository/network_count`.
            public var networkCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/repository/open_issues`.
            public var openIssues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/watchers`.
            public var watchers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/master_branch`.
            public var masterBranch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/starred_at`.
            public var starredAt: Swift.String?
            /// Whether anonymous git access is enabled for this repository
            ///
            /// - Remark: Generated from `#/components/schemas/repository/anonymous_access_enabled`.
            public var anonymousAccessEnabled: Swift.Bool?
            /// Creates a new `Repository`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the repository
            ///   - nodeId:
            ///   - name: The name of the repository.
            ///   - fullName:
            ///   - license:
            ///   - organization:
            ///   - forks:
            ///   - permissions:
            ///   - owner:
            ///   - _private: Whether the repository is private or public.
            ///   - htmlUrl:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archiveUrl:
            ///   - assigneesUrl:
            ///   - blobsUrl:
            ///   - branchesUrl:
            ///   - collaboratorsUrl:
            ///   - commentsUrl:
            ///   - commitsUrl:
            ///   - compareUrl:
            ///   - contentsUrl:
            ///   - contributorsUrl:
            ///   - deploymentsUrl:
            ///   - downloadsUrl:
            ///   - eventsUrl:
            ///   - forksUrl:
            ///   - gitCommitsUrl:
            ///   - gitRefsUrl:
            ///   - gitTagsUrl:
            ///   - gitUrl:
            ///   - issueCommentUrl:
            ///   - issueEventsUrl:
            ///   - issuesUrl:
            ///   - keysUrl:
            ///   - labelsUrl:
            ///   - languagesUrl:
            ///   - mergesUrl:
            ///   - milestonesUrl:
            ///   - notificationsUrl:
            ///   - pullsUrl:
            ///   - releasesUrl:
            ///   - sshUrl:
            ///   - stargazersUrl:
            ///   - statusesUrl:
            ///   - subscribersUrl:
            ///   - subscriptionUrl:
            ///   - tagsUrl:
            ///   - teamsUrl:
            ///   - treesUrl:
            ///   - cloneUrl:
            ///   - mirrorUrl:
            ///   - hooksUrl:
            ///   - svnUrl:
            ///   - homepage:
            ///   - language:
            ///   - forksCount:
            ///   - stargazersCount:
            ///   - watchersCount:
            ///   - size: The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - defaultBranch: The default branch of the repository.
            ///   - openIssuesCount:
            ///   - isTemplate: Whether this repository acts as a template that can be used to generate new repositories.
            ///   - topics:
            ///   - hasIssues: Whether issues are enabled.
            ///   - hasProjects: Whether projects are enabled.
            ///   - hasWiki: Whether the wiki is enabled.
            ///   - hasPages:
            ///   - hasDownloads: Whether downloads are enabled.
            ///   - archived: Whether the repository is archived.
            ///   - disabled: Returns whether or not this repository disabled.
            ///   - visibility: The repository visibility: public, private, or internal.
            ///   - pushedAt:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - allowRebaseMerge: Whether to allow rebase merges for pull requests.
            ///   - templateRepository:
            ///   - tempCloneToken:
            ///   - allowSquashMerge: Whether to allow squash merges for pull requests.
            ///   - allowAutoMerge: Whether to allow Auto-merge to be used on pull requests.
            ///   - deleteBranchOnMerge: Whether to delete head branches when pull requests are merged
            ///   - allowUpdateBranch: Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///   - useSquashPrTitleAsDefault: Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///   - squashMergeCommitTitle: The default value for a squash merge commit title:
            ///   - squashMergeCommitMessage: The default value for a squash merge commit message:
            ///   - mergeCommitTitle: The default value for a merge commit title.
            ///   - mergeCommitMessage: The default value for a merge commit message.
            ///   - allowMergeCommit: Whether to allow merge commits for pull requests.
            ///   - allowForking: Whether to allow forking this repo
            ///   - webCommitSignoffRequired: Whether to require contributors to sign off on web-based commits
            ///   - subscribersCount:
            ///   - networkCount:
            ///   - openIssues:
            ///   - watchers:
            ///   - masterBranch:
            ///   - starredAt:
            ///   - anonymousAccessEnabled: Whether anonymous git access is enabled for this repository
            public init(
                id: Swift.Int,
                nodeId: Swift.String,
                name: Swift.String,
                fullName: Swift.String,
                license: Components.Schemas.NullableLicenseSimple? = nil,
                organization: Components.Schemas.NullableSimpleUser? = nil,
                forks: Swift.Int,
                permissions: Components.Schemas.Repository.PermissionsPayload? = nil,
                owner: Components.Schemas.SimpleUser,
                _private: Swift.Bool,
                htmlUrl: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archiveUrl: Swift.String,
                assigneesUrl: Swift.String,
                blobsUrl: Swift.String,
                branchesUrl: Swift.String,
                collaboratorsUrl: Swift.String,
                commentsUrl: Swift.String,
                commitsUrl: Swift.String,
                compareUrl: Swift.String,
                contentsUrl: Swift.String,
                contributorsUrl: Swift.String,
                deploymentsUrl: Swift.String,
                downloadsUrl: Swift.String,
                eventsUrl: Swift.String,
                forksUrl: Swift.String,
                gitCommitsUrl: Swift.String,
                gitRefsUrl: Swift.String,
                gitTagsUrl: Swift.String,
                gitUrl: Swift.String,
                issueCommentUrl: Swift.String,
                issueEventsUrl: Swift.String,
                issuesUrl: Swift.String,
                keysUrl: Swift.String,
                labelsUrl: Swift.String,
                languagesUrl: Swift.String,
                mergesUrl: Swift.String,
                milestonesUrl: Swift.String,
                notificationsUrl: Swift.String,
                pullsUrl: Swift.String,
                releasesUrl: Swift.String,
                sshUrl: Swift.String,
                stargazersUrl: Swift.String,
                statusesUrl: Swift.String,
                subscribersUrl: Swift.String,
                subscriptionUrl: Swift.String,
                tagsUrl: Swift.String,
                teamsUrl: Swift.String,
                treesUrl: Swift.String,
                cloneUrl: Swift.String,
                mirrorUrl: Swift.String? = nil,
                hooksUrl: Swift.String,
                svnUrl: Swift.String,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forksCount: Swift.Int,
                stargazersCount: Swift.Int,
                watchersCount: Swift.Int,
                size: Swift.Int,
                defaultBranch: Swift.String,
                openIssuesCount: Swift.Int,
                isTemplate: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                hasIssues: Swift.Bool,
                hasProjects: Swift.Bool,
                hasWiki: Swift.Bool,
                hasPages: Swift.Bool,
                hasDownloads: Swift.Bool,
                archived: Swift.Bool,
                disabled: Swift.Bool,
                visibility: Swift.String? = nil,
                pushedAt: Swift.String? = nil,
                createdAt: Swift.String? = nil,
                updatedAt: Swift.String? = nil,
                allowRebaseMerge: Swift.Bool? = nil,
                templateRepository: Components.Schemas.Repository.TemplateRepositoryPayload? = nil,
                tempCloneToken: Swift.String? = nil,
                allowSquashMerge: Swift.Bool? = nil,
                allowAutoMerge: Swift.Bool? = nil,
                deleteBranchOnMerge: Swift.Bool? = nil,
                allowUpdateBranch: Swift.Bool? = nil,
                useSquashPrTitleAsDefault: Swift.Bool? = nil,
                squashMergeCommitTitle: Components.Schemas.Repository.SquashMergeCommitTitlePayload? = nil,
                squashMergeCommitMessage: Components.Schemas.Repository.SquashMergeCommitMessagePayload? = nil,
                mergeCommitTitle: Components.Schemas.Repository.MergeCommitTitlePayload? = nil,
                mergeCommitMessage: Components.Schemas.Repository.MergeCommitMessagePayload? = nil,
                allowMergeCommit: Swift.Bool? = nil,
                allowForking: Swift.Bool? = nil,
                webCommitSignoffRequired: Swift.Bool? = nil,
                subscribersCount: Swift.Int? = nil,
                networkCount: Swift.Int? = nil,
                openIssues: Swift.Int,
                watchers: Swift.Int,
                masterBranch: Swift.String? = nil,
                starredAt: Swift.String? = nil,
                anonymousAccessEnabled: Swift.Bool? = nil
            ) {
                self.id = id
                self.nodeId = nodeId
                self.name = name
                self.fullName = fullName
                self.license = license
                self.organization = organization
                self.forks = forks
                self.permissions = permissions
                self.owner = owner
                self._private = _private
                self.htmlUrl = htmlUrl
                self.description = description
                self.fork = fork
                self.url = url
                self.archiveUrl = archiveUrl
                self.assigneesUrl = assigneesUrl
                self.blobsUrl = blobsUrl
                self.branchesUrl = branchesUrl
                self.collaboratorsUrl = collaboratorsUrl
                self.commentsUrl = commentsUrl
                self.commitsUrl = commitsUrl
                self.compareUrl = compareUrl
                self.contentsUrl = contentsUrl
                self.contributorsUrl = contributorsUrl
                self.deploymentsUrl = deploymentsUrl
                self.downloadsUrl = downloadsUrl
                self.eventsUrl = eventsUrl
                self.forksUrl = forksUrl
                self.gitCommitsUrl = gitCommitsUrl
                self.gitRefsUrl = gitRefsUrl
                self.gitTagsUrl = gitTagsUrl
                self.gitUrl = gitUrl
                self.issueCommentUrl = issueCommentUrl
                self.issueEventsUrl = issueEventsUrl
                self.issuesUrl = issuesUrl
                self.keysUrl = keysUrl
                self.labelsUrl = labelsUrl
                self.languagesUrl = languagesUrl
                self.mergesUrl = mergesUrl
                self.milestonesUrl = milestonesUrl
                self.notificationsUrl = notificationsUrl
                self.pullsUrl = pullsUrl
                self.releasesUrl = releasesUrl
                self.sshUrl = sshUrl
                self.stargazersUrl = stargazersUrl
                self.statusesUrl = statusesUrl
                self.subscribersUrl = subscribersUrl
                self.subscriptionUrl = subscriptionUrl
                self.tagsUrl = tagsUrl
                self.teamsUrl = teamsUrl
                self.treesUrl = treesUrl
                self.cloneUrl = cloneUrl
                self.mirrorUrl = mirrorUrl
                self.hooksUrl = hooksUrl
                self.svnUrl = svnUrl
                self.homepage = homepage
                self.language = language
                self.forksCount = forksCount
                self.stargazersCount = stargazersCount
                self.watchersCount = watchersCount
                self.size = size
                self.defaultBranch = defaultBranch
                self.openIssuesCount = openIssuesCount
                self.isTemplate = isTemplate
                self.topics = topics
                self.hasIssues = hasIssues
                self.hasProjects = hasProjects
                self.hasWiki = hasWiki
                self.hasPages = hasPages
                self.hasDownloads = hasDownloads
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushedAt = pushedAt
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.allowRebaseMerge = allowRebaseMerge
                self.templateRepository = templateRepository
                self.tempCloneToken = tempCloneToken
                self.allowSquashMerge = allowSquashMerge
                self.allowAutoMerge = allowAutoMerge
                self.deleteBranchOnMerge = deleteBranchOnMerge
                self.allowUpdateBranch = allowUpdateBranch
                self.useSquashPrTitleAsDefault = useSquashPrTitleAsDefault
                self.squashMergeCommitTitle = squashMergeCommitTitle
                self.squashMergeCommitMessage = squashMergeCommitMessage
                self.mergeCommitTitle = mergeCommitTitle
                self.mergeCommitMessage = mergeCommitMessage
                self.allowMergeCommit = allowMergeCommit
                self.allowForking = allowForking
                self.webCommitSignoffRequired = webCommitSignoffRequired
                self.subscribersCount = subscribersCount
                self.networkCount = networkCount
                self.openIssues = openIssues
                self.watchers = watchers
                self.masterBranch = masterBranch
                self.starredAt = starredAt
                self.anonymousAccessEnabled = anonymousAccessEnabled
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case name
                case fullName = "full_name"
                case license
                case organization
                case forks
                case permissions
                case owner
                case _private = "private"
                case htmlUrl = "html_url"
                case description
                case fork
                case url
                case archiveUrl = "archive_url"
                case assigneesUrl = "assignees_url"
                case blobsUrl = "blobs_url"
                case branchesUrl = "branches_url"
                case collaboratorsUrl = "collaborators_url"
                case commentsUrl = "comments_url"
                case commitsUrl = "commits_url"
                case compareUrl = "compare_url"
                case contentsUrl = "contents_url"
                case contributorsUrl = "contributors_url"
                case deploymentsUrl = "deployments_url"
                case downloadsUrl = "downloads_url"
                case eventsUrl = "events_url"
                case forksUrl = "forks_url"
                case gitCommitsUrl = "git_commits_url"
                case gitRefsUrl = "git_refs_url"
                case gitTagsUrl = "git_tags_url"
                case gitUrl = "git_url"
                case issueCommentUrl = "issue_comment_url"
                case issueEventsUrl = "issue_events_url"
                case issuesUrl = "issues_url"
                case keysUrl = "keys_url"
                case labelsUrl = "labels_url"
                case languagesUrl = "languages_url"
                case mergesUrl = "merges_url"
                case milestonesUrl = "milestones_url"
                case notificationsUrl = "notifications_url"
                case pullsUrl = "pulls_url"
                case releasesUrl = "releases_url"
                case sshUrl = "ssh_url"
                case stargazersUrl = "stargazers_url"
                case statusesUrl = "statuses_url"
                case subscribersUrl = "subscribers_url"
                case subscriptionUrl = "subscription_url"
                case tagsUrl = "tags_url"
                case teamsUrl = "teams_url"
                case treesUrl = "trees_url"
                case cloneUrl = "clone_url"
                case mirrorUrl = "mirror_url"
                case hooksUrl = "hooks_url"
                case svnUrl = "svn_url"
                case homepage
                case language
                case forksCount = "forks_count"
                case stargazersCount = "stargazers_count"
                case watchersCount = "watchers_count"
                case size
                case defaultBranch = "default_branch"
                case openIssuesCount = "open_issues_count"
                case isTemplate = "is_template"
                case topics
                case hasIssues = "has_issues"
                case hasProjects = "has_projects"
                case hasWiki = "has_wiki"
                case hasPages = "has_pages"
                case hasDownloads = "has_downloads"
                case archived
                case disabled
                case visibility
                case pushedAt = "pushed_at"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case allowRebaseMerge = "allow_rebase_merge"
                case templateRepository = "template_repository"
                case tempCloneToken = "temp_clone_token"
                case allowSquashMerge = "allow_squash_merge"
                case allowAutoMerge = "allow_auto_merge"
                case deleteBranchOnMerge = "delete_branch_on_merge"
                case allowUpdateBranch = "allow_update_branch"
                case useSquashPrTitleAsDefault = "use_squash_pr_title_as_default"
                case squashMergeCommitTitle = "squash_merge_commit_title"
                case squashMergeCommitMessage = "squash_merge_commit_message"
                case mergeCommitTitle = "merge_commit_title"
                case mergeCommitMessage = "merge_commit_message"
                case allowMergeCommit = "allow_merge_commit"
                case allowForking = "allow_forking"
                case webCommitSignoffRequired = "web_commit_signoff_required"
                case subscribersCount = "subscribers_count"
                case networkCount = "network_count"
                case openIssues = "open_issues"
                case watchers
                case masterBranch = "master_branch"
                case starredAt = "starred_at"
                case anonymousAccessEnabled = "anonymous_access_enabled"
            }
        }
        /// Organization Simple
        ///
        /// - Remark: Generated from `#/components/schemas/organization-simple`.
        public struct OrganizationSimple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/organization-simple/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization-simple/node_id`.
            public var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/repos_url`.
            public var reposUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/events_url`.
            public var eventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/hooks_url`.
            public var hooksUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/issues_url`.
            public var issuesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/members_url`.
            public var membersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/public_members_url`.
            public var publicMembersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/avatar_url`.
            public var avatarUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/description`.
            public var description: Swift.String?
            /// Creates a new `OrganizationSimple`.
            ///
            /// - Parameters:
            ///   - login:
            ///   - id:
            ///   - nodeId:
            ///   - url:
            ///   - reposUrl:
            ///   - eventsUrl:
            ///   - hooksUrl:
            ///   - issuesUrl:
            ///   - membersUrl:
            ///   - publicMembersUrl:
            ///   - avatarUrl:
            ///   - description:
            public init(
                login: Swift.String,
                id: Swift.Int,
                nodeId: Swift.String,
                url: Swift.String,
                reposUrl: Swift.String,
                eventsUrl: Swift.String,
                hooksUrl: Swift.String,
                issuesUrl: Swift.String,
                membersUrl: Swift.String,
                publicMembersUrl: Swift.String,
                avatarUrl: Swift.String,
                description: Swift.String? = nil
            ) {
                self.login = login
                self.id = id
                self.nodeId = nodeId
                self.url = url
                self.reposUrl = reposUrl
                self.eventsUrl = eventsUrl
                self.hooksUrl = hooksUrl
                self.issuesUrl = issuesUrl
                self.membersUrl = membersUrl
                self.publicMembersUrl = publicMembersUrl
                self.avatarUrl = avatarUrl
                self.description = description
            }
            public enum CodingKeys: String, CodingKey {
                case login
                case id
                case nodeId = "node_id"
                case url
                case reposUrl = "repos_url"
                case eventsUrl = "events_url"
                case hooksUrl = "hooks_url"
                case issuesUrl = "issues_url"
                case membersUrl = "members_url"
                case publicMembersUrl = "public_members_url"
                case avatarUrl = "avatar_url"
                case description
            }
        }
        /// Simple Installation
        ///
        /// - Remark: Generated from `#/components/schemas/simple-installation`.
        public struct SimpleInstallation: Codable, Hashable, Sendable {
            /// The ID of the installation.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-installation/id`.
            public var id: Swift.Int
            /// The global node ID of the installation.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-installation/node_id`.
            public var nodeId: Swift.String
            /// Creates a new `SimpleInstallation`.
            ///
            /// - Parameters:
            ///   - id: The ID of the installation.
            ///   - nodeId: The global node ID of the installation.
            public init(
                id: Swift.Int,
                nodeId: Swift.String
            ) {
                self.id = id
                self.nodeId = nodeId
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created`.
        public struct WebhookDeploymentCreated: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case created = "created"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/action`.
            public var action: Components.Schemas.WebhookDeploymentCreated.ActionPayload
            /// The [deployment](https://docs.github.com/en/rest/reference/deployments#list-deployments).
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment`.
            public struct DeploymentPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/created_at`.
                public var createdAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/creator`.
                public struct CreatorPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/creator/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/creator/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/creator/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/creator/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/creator/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/creator/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/creator/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/creator/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/creator/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/creator/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/creator/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/creator/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/creator/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/creator/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/creator/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/creator/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/creator/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/creator/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/creator/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/creator/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/creator/type`.
                    public var _type: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.CreatorPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/creator/url`.
                    public var url: Swift.String?
                    /// Creates a new `CreatorPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.CreatorPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/creator`.
                public var creator: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.CreatorPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/description`.
                public var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/environment`.
                public var environment: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/original_environment`.
                public var originalEnvironment: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/payload`.
                @frozen public enum PayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/payload/case1`.
                    case case1(OpenAPIRuntime.OpenAPIObjectContainer)
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/payload/case2`.
                    case case2(Swift.String)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try value.encode(to: encoder)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/payload`.
                public var payload: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PayloadPayload
                /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app`.
                public struct PerformedViaGithubAppPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/created_at`.
                    public var createdAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/EventsPayload`.
                    @frozen public enum EventsPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case branchProtectionRule = "branch_protection_rule"
                        case checkRun = "check_run"
                        case checkSuite = "check_suite"
                        case codeScanningAlert = "code_scanning_alert"
                        case commitComment = "commit_comment"
                        case contentReference = "content_reference"
                        case create = "create"
                        case delete = "delete"
                        case deployment = "deployment"
                        case deploymentReview = "deployment_review"
                        case deploymentStatus = "deployment_status"
                        case deployKey = "deploy_key"
                        case discussion = "discussion"
                        case discussionComment = "discussion_comment"
                        case fork = "fork"
                        case gollum = "gollum"
                        case issues = "issues"
                        case issueComment = "issue_comment"
                        case label = "label"
                        case member = "member"
                        case membership = "membership"
                        case milestone = "milestone"
                        case organization = "organization"
                        case orgBlock = "org_block"
                        case pageBuild = "page_build"
                        case project = "project"
                        case projectCard = "project_card"
                        case projectColumn = "project_column"
                        case _public = "public"
                        case pullRequest = "pull_request"
                        case pullRequestReview = "pull_request_review"
                        case pullRequestReviewComment = "pull_request_review_comment"
                        case push = "push"
                        case registryPackage = "registry_package"
                        case release = "release"
                        case repository = "repository"
                        case repositoryDispatch = "repository_dispatch"
                        case secretScanningAlert = "secret_scanning_alert"
                        case star = "star"
                        case status = "status"
                        case team = "team"
                        case teamAdd = "team_add"
                        case watch = "watch"
                        case workflowDispatch = "workflow_dispatch"
                        case workflowRun = "workflow_run"
                        case workflowJob = "workflow_job"
                        case pullRequestReviewThread = "pull_request_review_thread"
                        case mergeQueueEntry = "merge_queue_entry"
                        case secretScanningAlertLocation = "secret_scanning_alert_location"
                        case mergeGroup = "merge_group"
                    }
                    /// The list of events for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/events`.
                    public typealias EventsPayload = [Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.EventsPayloadPayload]
                    /// The list of events for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/events`.
                    public var events: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.EventsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/external_url`.
                    public var externalUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/html_url`.
                    public var htmlUrl: Swift.String
                    /// Unique identifier of the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/id`.
                    public var id: Swift.Int?
                    /// The name of the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/owner`.
                    public struct OwnerPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/owner/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/owner/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/owner/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/owner/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/owner/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/owner/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/owner/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/owner/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/owner/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/owner/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/owner/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/owner/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/owner/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/owner/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/owner/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/owner/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/owner/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/owner/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/owner/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/owner/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/owner/type`.
                        public var _type: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/owner/url`.
                        public var url: Swift.String?
                        /// Creates a new `OwnerPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/owner`.
                    public var owner: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.OwnerPayload?
                    /// The set of permissions for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions`.
                    public struct PermissionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/actions`.
                        @frozen public enum ActionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/actions`.
                        public var actions: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/administration`.
                        @frozen public enum AdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/administration`.
                        public var administration: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/checks`.
                        @frozen public enum ChecksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/checks`.
                        public var checks: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/content_references`.
                        @frozen public enum ContentReferencesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/content_references`.
                        public var contentReferences: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/contents`.
                        @frozen public enum ContentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/contents`.
                        public var contents: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/deployments`.
                        @frozen public enum DeploymentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/deployments`.
                        public var deployments: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/discussions`.
                        @frozen public enum DiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/discussions`.
                        public var discussions: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/emails`.
                        @frozen public enum EmailsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/emails`.
                        public var emails: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/environments`.
                        @frozen public enum EnvironmentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/environments`.
                        public var environments: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/issues`.
                        @frozen public enum IssuesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/issues`.
                        public var issues: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/keys`.
                        @frozen public enum KeysPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/keys`.
                        public var keys: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/members`.
                        @frozen public enum MembersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/members`.
                        public var members: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/metadata`.
                        @frozen public enum MetadataPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/metadata`.
                        public var metadata: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/organization_administration`.
                        @frozen public enum OrganizationAdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/organization_administration`.
                        public var organizationAdministration: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/organization_hooks`.
                        @frozen public enum OrganizationHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/organization_hooks`.
                        public var organizationHooks: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/organization_packages`.
                        @frozen public enum OrganizationPackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/organization_packages`.
                        public var organizationPackages: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/organization_plan`.
                        @frozen public enum OrganizationPlanPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/organization_plan`.
                        public var organizationPlan: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/organization_projects`.
                        @frozen public enum OrganizationProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/organization_projects`.
                        public var organizationProjects: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/organization_secrets`.
                        @frozen public enum OrganizationSecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/organization_secrets`.
                        public var organizationSecrets: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/organization_self_hosted_runners`.
                        @frozen public enum OrganizationSelfHostedRunnersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/organization_self_hosted_runners`.
                        public var organizationSelfHostedRunners: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/organization_user_blocking`.
                        @frozen public enum OrganizationUserBlockingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/organization_user_blocking`.
                        public var organizationUserBlocking: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/packages`.
                        @frozen public enum PackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/packages`.
                        public var packages: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/pages`.
                        @frozen public enum PagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/pages`.
                        public var pages: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/pull_requests`.
                        @frozen public enum PullRequestsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/pull_requests`.
                        public var pullRequests: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/repository_hooks`.
                        @frozen public enum RepositoryHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/repository_hooks`.
                        public var repositoryHooks: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/repository_projects`.
                        @frozen public enum RepositoryProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/repository_projects`.
                        public var repositoryProjects: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/secret_scanning_alerts`.
                        @frozen public enum SecretScanningAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/secret_scanning_alerts`.
                        public var secretScanningAlerts: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/secrets`.
                        @frozen public enum SecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/secrets`.
                        public var secrets: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/security_events`.
                        @frozen public enum SecurityEventsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/security_events`.
                        public var securityEvents: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/security_scanning_alert`.
                        @frozen public enum SecurityScanningAlertPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/security_scanning_alert`.
                        public var securityScanningAlert: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/single_file`.
                        @frozen public enum SingleFilePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/single_file`.
                        public var singleFile: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/statuses`.
                        @frozen public enum StatusesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/statuses`.
                        public var statuses: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/team_discussions`.
                        @frozen public enum TeamDiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/team_discussions`.
                        public var teamDiscussions: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/vulnerability_alerts`.
                        @frozen public enum VulnerabilityAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/vulnerability_alerts`.
                        public var vulnerabilityAlerts: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/workflows`.
                        @frozen public enum WorkflowsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions/workflows`.
                        public var workflows: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload?
                        /// Creates a new `PermissionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - actions:
                        ///   - administration:
                        ///   - checks:
                        ///   - contentReferences:
                        ///   - contents:
                        ///   - deployments:
                        ///   - discussions:
                        ///   - emails:
                        ///   - environments:
                        ///   - issues:
                        ///   - keys:
                        ///   - members:
                        ///   - metadata:
                        ///   - organizationAdministration:
                        ///   - organizationHooks:
                        ///   - organizationPackages:
                        ///   - organizationPlan:
                        ///   - organizationProjects:
                        ///   - organizationSecrets:
                        ///   - organizationSelfHostedRunners:
                        ///   - organizationUserBlocking:
                        ///   - packages:
                        ///   - pages:
                        ///   - pullRequests:
                        ///   - repositoryHooks:
                        ///   - repositoryProjects:
                        ///   - secretScanningAlerts:
                        ///   - secrets:
                        ///   - securityEvents:
                        ///   - securityScanningAlert:
                        ///   - singleFile:
                        ///   - statuses:
                        ///   - teamDiscussions:
                        ///   - vulnerabilityAlerts:
                        ///   - workflows:
                        public init(
                            actions: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload? = nil,
                            administration: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload? = nil,
                            checks: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload? = nil,
                            contentReferences: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload? = nil,
                            contents: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload? = nil,
                            deployments: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload? = nil,
                            discussions: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload? = nil,
                            emails: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload? = nil,
                            environments: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload? = nil,
                            issues: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload? = nil,
                            keys: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload? = nil,
                            members: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload? = nil,
                            metadata: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload? = nil,
                            organizationAdministration: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload? = nil,
                            organizationHooks: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload? = nil,
                            organizationPackages: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload? = nil,
                            organizationPlan: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload? = nil,
                            organizationProjects: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload? = nil,
                            organizationSecrets: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload? = nil,
                            organizationSelfHostedRunners: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload? = nil,
                            organizationUserBlocking: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload? = nil,
                            packages: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload? = nil,
                            pages: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload? = nil,
                            pullRequests: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload? = nil,
                            repositoryHooks: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload? = nil,
                            repositoryProjects: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload? = nil,
                            secretScanningAlerts: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload? = nil,
                            secrets: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload? = nil,
                            securityEvents: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload? = nil,
                            securityScanningAlert: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload? = nil,
                            singleFile: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload? = nil,
                            statuses: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload? = nil,
                            teamDiscussions: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload? = nil,
                            vulnerabilityAlerts: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload? = nil,
                            workflows: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload? = nil
                        ) {
                            self.actions = actions
                            self.administration = administration
                            self.checks = checks
                            self.contentReferences = contentReferences
                            self.contents = contents
                            self.deployments = deployments
                            self.discussions = discussions
                            self.emails = emails
                            self.environments = environments
                            self.issues = issues
                            self.keys = keys
                            self.members = members
                            self.metadata = metadata
                            self.organizationAdministration = organizationAdministration
                            self.organizationHooks = organizationHooks
                            self.organizationPackages = organizationPackages
                            self.organizationPlan = organizationPlan
                            self.organizationProjects = organizationProjects
                            self.organizationSecrets = organizationSecrets
                            self.organizationSelfHostedRunners = organizationSelfHostedRunners
                            self.organizationUserBlocking = organizationUserBlocking
                            self.packages = packages
                            self.pages = pages
                            self.pullRequests = pullRequests
                            self.repositoryHooks = repositoryHooks
                            self.repositoryProjects = repositoryProjects
                            self.secretScanningAlerts = secretScanningAlerts
                            self.secrets = secrets
                            self.securityEvents = securityEvents
                            self.securityScanningAlert = securityScanningAlert
                            self.singleFile = singleFile
                            self.statuses = statuses
                            self.teamDiscussions = teamDiscussions
                            self.vulnerabilityAlerts = vulnerabilityAlerts
                            self.workflows = workflows
                        }
                        public enum CodingKeys: String, CodingKey {
                            case actions
                            case administration
                            case checks
                            case contentReferences = "content_references"
                            case contents
                            case deployments
                            case discussions
                            case emails
                            case environments
                            case issues
                            case keys
                            case members
                            case metadata
                            case organizationAdministration = "organization_administration"
                            case organizationHooks = "organization_hooks"
                            case organizationPackages = "organization_packages"
                            case organizationPlan = "organization_plan"
                            case organizationProjects = "organization_projects"
                            case organizationSecrets = "organization_secrets"
                            case organizationSelfHostedRunners = "organization_self_hosted_runners"
                            case organizationUserBlocking = "organization_user_blocking"
                            case packages
                            case pages
                            case pullRequests = "pull_requests"
                            case repositoryHooks = "repository_hooks"
                            case repositoryProjects = "repository_projects"
                            case secretScanningAlerts = "secret_scanning_alerts"
                            case secrets
                            case securityEvents = "security_events"
                            case securityScanningAlert = "security_scanning_alert"
                            case singleFile = "single_file"
                            case statuses
                            case teamDiscussions = "team_discussions"
                            case vulnerabilityAlerts = "vulnerability_alerts"
                            case workflows
                        }
                    }
                    /// The set of permissions for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/permissions`.
                    public var permissions: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload?
                    /// The slug name of the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/slug`.
                    public var slug: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app/updated_at`.
                    public var updatedAt: Swift.String?
                    /// Creates a new `PerformedViaGithubAppPayload`.
                    ///
                    /// - Parameters:
                    ///   - createdAt:
                    ///   - description:
                    ///   - events: The list of events for the GitHub app
                    ///   - externalUrl:
                    ///   - htmlUrl:
                    ///   - id: Unique identifier of the GitHub app
                    ///   - name: The name of the GitHub app
                    ///   - nodeId:
                    ///   - owner:
                    ///   - permissions: The set of permissions for the GitHub app
                    ///   - slug: The slug name of the GitHub app
                    ///   - updatedAt:
                    public init(
                        createdAt: Swift.String? = nil,
                        description: Swift.String? = nil,
                        events: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.EventsPayload? = nil,
                        externalUrl: Swift.String? = nil,
                        htmlUrl: Swift.String,
                        id: Swift.Int? = nil,
                        name: Swift.String,
                        nodeId: Swift.String,
                        owner: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.OwnerPayload? = nil,
                        permissions: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload? = nil,
                        slug: Swift.String? = nil,
                        updatedAt: Swift.String? = nil
                    ) {
                        self.createdAt = createdAt
                        self.description = description
                        self.events = events
                        self.externalUrl = externalUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.name = name
                        self.nodeId = nodeId
                        self.owner = owner
                        self.permissions = permissions
                        self.slug = slug
                        self.updatedAt = updatedAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case createdAt = "created_at"
                        case description
                        case events
                        case externalUrl = "external_url"
                        case htmlUrl = "html_url"
                        case id
                        case name
                        case nodeId = "node_id"
                        case owner
                        case permissions
                        case slug
                        case updatedAt = "updated_at"
                    }
                }
                /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/performed_via_github_app`.
                public var performedViaGithubApp: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/production_environment`.
                public var productionEnvironment: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/ref`.
                public var ref: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/repository_url`.
                public var repositoryUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/sha`.
                public var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/statuses_url`.
                public var statusesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/task`.
                public var task: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/transient_environment`.
                public var transientEnvironment: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/updated_at`.
                public var updatedAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment/url`.
                public var url: Swift.String
                /// Creates a new `DeploymentPayload`.
                ///
                /// - Parameters:
                ///   - createdAt:
                ///   - creator:
                ///   - description:
                ///   - environment:
                ///   - id:
                ///   - nodeId:
                ///   - originalEnvironment:
                ///   - payload:
                ///   - performedViaGithubApp: GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                ///   - productionEnvironment:
                ///   - ref:
                ///   - repositoryUrl:
                ///   - sha:
                ///   - statusesUrl:
                ///   - task:
                ///   - transientEnvironment:
                ///   - updatedAt:
                ///   - url:
                public init(
                    createdAt: Swift.String,
                    creator: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.CreatorPayload? = nil,
                    description: Swift.String? = nil,
                    environment: Swift.String,
                    id: Swift.Int,
                    nodeId: Swift.String,
                    originalEnvironment: Swift.String,
                    payload: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PayloadPayload,
                    performedViaGithubApp: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload.PerformedViaGithubAppPayload? = nil,
                    productionEnvironment: Swift.Bool? = nil,
                    ref: Swift.String,
                    repositoryUrl: Swift.String,
                    sha: Swift.String,
                    statusesUrl: Swift.String,
                    task: Swift.String,
                    transientEnvironment: Swift.Bool? = nil,
                    updatedAt: Swift.String,
                    url: Swift.String
                ) {
                    self.createdAt = createdAt
                    self.creator = creator
                    self.description = description
                    self.environment = environment
                    self.id = id
                    self.nodeId = nodeId
                    self.originalEnvironment = originalEnvironment
                    self.payload = payload
                    self.performedViaGithubApp = performedViaGithubApp
                    self.productionEnvironment = productionEnvironment
                    self.ref = ref
                    self.repositoryUrl = repositoryUrl
                    self.sha = sha
                    self.statusesUrl = statusesUrl
                    self.task = task
                    self.transientEnvironment = transientEnvironment
                    self.updatedAt = updatedAt
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case createdAt = "created_at"
                    case creator
                    case description
                    case environment
                    case id
                    case nodeId = "node_id"
                    case originalEnvironment = "original_environment"
                    case payload
                    case performedViaGithubApp = "performed_via_github_app"
                    case productionEnvironment = "production_environment"
                    case ref
                    case repositoryUrl = "repository_url"
                    case sha
                    case statusesUrl = "statuses_url"
                    case task
                    case transientEnvironment = "transient_environment"
                    case updatedAt = "updated_at"
                    case url
                }
            }
            /// The [deployment](https://docs.github.com/en/rest/reference/deployments#list-deployments).
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/deployment`.
            public var deployment: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload
            /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow`.
            public struct WorkflowPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow/badge_url`.
                public var badgeUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow/created_at`.
                public var createdAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow/html_url`.
                public var htmlUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow/path`.
                public var path: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow/state`.
                public var state: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow/updated_at`.
                public var updatedAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow/url`.
                public var url: Swift.String
                /// Creates a new `WorkflowPayload`.
                ///
                /// - Parameters:
                ///   - badgeUrl:
                ///   - createdAt:
                ///   - htmlUrl:
                ///   - id:
                ///   - name:
                ///   - nodeId:
                ///   - path:
                ///   - state:
                ///   - updatedAt:
                ///   - url:
                public init(
                    badgeUrl: Swift.String,
                    createdAt: Swift.String,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    name: Swift.String,
                    nodeId: Swift.String,
                    path: Swift.String,
                    state: Swift.String,
                    updatedAt: Swift.String,
                    url: Swift.String
                ) {
                    self.badgeUrl = badgeUrl
                    self.createdAt = createdAt
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.name = name
                    self.nodeId = nodeId
                    self.path = path
                    self.state = state
                    self.updatedAt = updatedAt
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case badgeUrl = "badge_url"
                    case createdAt = "created_at"
                    case htmlUrl = "html_url"
                    case id
                    case name
                    case nodeId = "node_id"
                    case path
                    case state
                    case updatedAt = "updated_at"
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow`.
            public var workflow: Components.Schemas.WebhookDeploymentCreated.WorkflowPayload?
            /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run`.
            public struct WorkflowRunPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/actor`.
                public struct ActorPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/actor/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/actor/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/actor/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/actor/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/actor/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/actor/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/actor/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/actor/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/actor/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/actor/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/actor/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/actor/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/actor/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/actor/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/actor/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/actor/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/actor/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/actor/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/actor/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/actor/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/actor/type`.
                    public var _type: Components.Schemas.WebhookDeploymentCreated.WorkflowRunPayload.ActorPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/actor/url`.
                    public var url: Swift.String?
                    /// Creates a new `ActorPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookDeploymentCreated.WorkflowRunPayload.ActorPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/actor`.
                public var actor: Components.Schemas.WebhookDeploymentCreated.WorkflowRunPayload.ActorPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/artifacts_url`.
                public var artifactsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/cancel_url`.
                public var cancelUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/check_suite_id`.
                public var checkSuiteId: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/check_suite_node_id`.
                public var checkSuiteNodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/check_suite_url`.
                public var checkSuiteUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/conclusion`.
                @frozen public enum ConclusionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case success = "success"
                    case failure = "failure"
                    case neutral = "neutral"
                    case cancelled = "cancelled"
                    case timedOut = "timed_out"
                    case actionRequired = "action_required"
                    case stale = "stale"
                    case _empty_ = ""
                }
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/conclusion`.
                public var conclusion: Components.Schemas.WebhookDeploymentCreated.WorkflowRunPayload.ConclusionPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/created_at`.
                public var createdAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/display_title`.
                public var displayTitle: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/event`.
                public var event: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_branch`.
                public var headBranch: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_commit`.
                public var headCommit: OpenAPIRuntime.OpenAPIValueContainer?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository`.
                public struct HeadRepositoryPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/archive_url`.
                    public var archiveUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/assignees_url`.
                    public var assigneesUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/blobs_url`.
                    public var blobsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/branches_url`.
                    public var branchesUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/collaborators_url`.
                    public var collaboratorsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/comments_url`.
                    public var commentsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/commits_url`.
                    public var commitsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/compare_url`.
                    public var compareUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/contents_url`.
                    public var contentsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/contributors_url`.
                    public var contributorsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/deployments_url`.
                    public var deploymentsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/description`.
                    public var description: OpenAPIRuntime.OpenAPIValueContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/downloads_url`.
                    public var downloadsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/fork`.
                    public var fork: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/forks_url`.
                    public var forksUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/full_name`.
                    public var fullName: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/git_commits_url`.
                    public var gitCommitsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/git_refs_url`.
                    public var gitRefsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/git_tags_url`.
                    public var gitTagsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/hooks_url`.
                    public var hooksUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/id`.
                    public var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/issue_comment_url`.
                    public var issueCommentUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/issue_events_url`.
                    public var issueEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/issues_url`.
                    public var issuesUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/keys_url`.
                    public var keysUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/labels_url`.
                    public var labelsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/languages_url`.
                    public var languagesUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/merges_url`.
                    public var mergesUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/milestones_url`.
                    public var milestonesUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/notifications_url`.
                    public var notificationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/owner`.
                    public struct OwnerPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/owner/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/owner/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/owner/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/owner/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/owner/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/owner/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/owner/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/owner/id`.
                        public var id: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/owner/login`.
                        public var login: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/owner/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/owner/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/owner/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/owner/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/owner/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/owner/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/owner/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/owner/type`.
                        public var _type: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/owner/url`.
                        public var url: Swift.String?
                        /// Creates a new `OwnerPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int? = nil,
                            login: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/owner`.
                    public var owner: Components.Schemas.WebhookDeploymentCreated.WorkflowRunPayload.HeadRepositoryPayload.OwnerPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/private`.
                    public var _private: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/pulls_url`.
                    public var pullsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/releases_url`.
                    public var releasesUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/stargazers_url`.
                    public var stargazersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/statuses_url`.
                    public var statusesUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/subscribers_url`.
                    public var subscribersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/subscription_url`.
                    public var subscriptionUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/tags_url`.
                    public var tagsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/teams_url`.
                    public var teamsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/trees_url`.
                    public var treesUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository/url`.
                    public var url: Swift.String?
                    /// Creates a new `HeadRepositoryPayload`.
                    ///
                    /// - Parameters:
                    ///   - archiveUrl:
                    ///   - assigneesUrl:
                    ///   - blobsUrl:
                    ///   - branchesUrl:
                    ///   - collaboratorsUrl:
                    ///   - commentsUrl:
                    ///   - commitsUrl:
                    ///   - compareUrl:
                    ///   - contentsUrl:
                    ///   - contributorsUrl:
                    ///   - deploymentsUrl:
                    ///   - description:
                    ///   - downloadsUrl:
                    ///   - eventsUrl:
                    ///   - fork:
                    ///   - forksUrl:
                    ///   - fullName:
                    ///   - gitCommitsUrl:
                    ///   - gitRefsUrl:
                    ///   - gitTagsUrl:
                    ///   - hooksUrl:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - issueCommentUrl:
                    ///   - issueEventsUrl:
                    ///   - issuesUrl:
                    ///   - keysUrl:
                    ///   - labelsUrl:
                    ///   - languagesUrl:
                    ///   - mergesUrl:
                    ///   - milestonesUrl:
                    ///   - name:
                    ///   - nodeId:
                    ///   - notificationsUrl:
                    ///   - owner:
                    ///   - _private:
                    ///   - pullsUrl:
                    ///   - releasesUrl:
                    ///   - stargazersUrl:
                    ///   - statusesUrl:
                    ///   - subscribersUrl:
                    ///   - subscriptionUrl:
                    ///   - tagsUrl:
                    ///   - teamsUrl:
                    ///   - treesUrl:
                    ///   - url:
                    public init(
                        archiveUrl: Swift.String? = nil,
                        assigneesUrl: Swift.String? = nil,
                        blobsUrl: Swift.String? = nil,
                        branchesUrl: Swift.String? = nil,
                        collaboratorsUrl: Swift.String? = nil,
                        commentsUrl: Swift.String? = nil,
                        commitsUrl: Swift.String? = nil,
                        compareUrl: Swift.String? = nil,
                        contentsUrl: Swift.String? = nil,
                        contributorsUrl: Swift.String? = nil,
                        deploymentsUrl: Swift.String? = nil,
                        description: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                        downloadsUrl: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        fork: Swift.Bool? = nil,
                        forksUrl: Swift.String? = nil,
                        fullName: Swift.String? = nil,
                        gitCommitsUrl: Swift.String? = nil,
                        gitRefsUrl: Swift.String? = nil,
                        gitTagsUrl: Swift.String? = nil,
                        hooksUrl: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int? = nil,
                        issueCommentUrl: Swift.String? = nil,
                        issueEventsUrl: Swift.String? = nil,
                        issuesUrl: Swift.String? = nil,
                        keysUrl: Swift.String? = nil,
                        labelsUrl: Swift.String? = nil,
                        languagesUrl: Swift.String? = nil,
                        mergesUrl: Swift.String? = nil,
                        milestonesUrl: Swift.String? = nil,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        notificationsUrl: Swift.String? = nil,
                        owner: Components.Schemas.WebhookDeploymentCreated.WorkflowRunPayload.HeadRepositoryPayload.OwnerPayload? = nil,
                        _private: Swift.Bool? = nil,
                        pullsUrl: Swift.String? = nil,
                        releasesUrl: Swift.String? = nil,
                        stargazersUrl: Swift.String? = nil,
                        statusesUrl: Swift.String? = nil,
                        subscribersUrl: Swift.String? = nil,
                        subscriptionUrl: Swift.String? = nil,
                        tagsUrl: Swift.String? = nil,
                        teamsUrl: Swift.String? = nil,
                        treesUrl: Swift.String? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.archiveUrl = archiveUrl
                        self.assigneesUrl = assigneesUrl
                        self.blobsUrl = blobsUrl
                        self.branchesUrl = branchesUrl
                        self.collaboratorsUrl = collaboratorsUrl
                        self.commentsUrl = commentsUrl
                        self.commitsUrl = commitsUrl
                        self.compareUrl = compareUrl
                        self.contentsUrl = contentsUrl
                        self.contributorsUrl = contributorsUrl
                        self.deploymentsUrl = deploymentsUrl
                        self.description = description
                        self.downloadsUrl = downloadsUrl
                        self.eventsUrl = eventsUrl
                        self.fork = fork
                        self.forksUrl = forksUrl
                        self.fullName = fullName
                        self.gitCommitsUrl = gitCommitsUrl
                        self.gitRefsUrl = gitRefsUrl
                        self.gitTagsUrl = gitTagsUrl
                        self.hooksUrl = hooksUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.issueCommentUrl = issueCommentUrl
                        self.issueEventsUrl = issueEventsUrl
                        self.issuesUrl = issuesUrl
                        self.keysUrl = keysUrl
                        self.labelsUrl = labelsUrl
                        self.languagesUrl = languagesUrl
                        self.mergesUrl = mergesUrl
                        self.milestonesUrl = milestonesUrl
                        self.name = name
                        self.nodeId = nodeId
                        self.notificationsUrl = notificationsUrl
                        self.owner = owner
                        self._private = _private
                        self.pullsUrl = pullsUrl
                        self.releasesUrl = releasesUrl
                        self.stargazersUrl = stargazersUrl
                        self.statusesUrl = statusesUrl
                        self.subscribersUrl = subscribersUrl
                        self.subscriptionUrl = subscriptionUrl
                        self.tagsUrl = tagsUrl
                        self.teamsUrl = teamsUrl
                        self.treesUrl = treesUrl
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case archiveUrl = "archive_url"
                        case assigneesUrl = "assignees_url"
                        case blobsUrl = "blobs_url"
                        case branchesUrl = "branches_url"
                        case collaboratorsUrl = "collaborators_url"
                        case commentsUrl = "comments_url"
                        case commitsUrl = "commits_url"
                        case compareUrl = "compare_url"
                        case contentsUrl = "contents_url"
                        case contributorsUrl = "contributors_url"
                        case deploymentsUrl = "deployments_url"
                        case description
                        case downloadsUrl = "downloads_url"
                        case eventsUrl = "events_url"
                        case fork
                        case forksUrl = "forks_url"
                        case fullName = "full_name"
                        case gitCommitsUrl = "git_commits_url"
                        case gitRefsUrl = "git_refs_url"
                        case gitTagsUrl = "git_tags_url"
                        case hooksUrl = "hooks_url"
                        case htmlUrl = "html_url"
                        case id
                        case issueCommentUrl = "issue_comment_url"
                        case issueEventsUrl = "issue_events_url"
                        case issuesUrl = "issues_url"
                        case keysUrl = "keys_url"
                        case labelsUrl = "labels_url"
                        case languagesUrl = "languages_url"
                        case mergesUrl = "merges_url"
                        case milestonesUrl = "milestones_url"
                        case name
                        case nodeId = "node_id"
                        case notificationsUrl = "notifications_url"
                        case owner
                        case _private = "private"
                        case pullsUrl = "pulls_url"
                        case releasesUrl = "releases_url"
                        case stargazersUrl = "stargazers_url"
                        case statusesUrl = "statuses_url"
                        case subscribersUrl = "subscribers_url"
                        case subscriptionUrl = "subscription_url"
                        case tagsUrl = "tags_url"
                        case teamsUrl = "teams_url"
                        case treesUrl = "trees_url"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_repository`.
                public var headRepository: Components.Schemas.WebhookDeploymentCreated.WorkflowRunPayload.HeadRepositoryPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/head_sha`.
                public var headSha: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/html_url`.
                public var htmlUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/jobs_url`.
                public var jobsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/logs_url`.
                public var logsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/path`.
                public var path: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/previous_attempt_url`.
                public var previousAttemptUrl: OpenAPIRuntime.OpenAPIValueContainer?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/PullRequestsPayload`.
                public struct PullRequestsPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/PullRequestsPayload/base`.
                    public struct BasePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/PullRequestsPayload/base/ref`.
                        public var ref: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/PullRequestsPayload/base/repo`.
                        public struct RepoPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/PullRequestsPayload/base/repo/id`.
                            public var id: Swift.Int
                            /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/PullRequestsPayload/base/repo/name`.
                            public var name: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/PullRequestsPayload/base/repo/url`.
                            public var url: Swift.String
                            /// Creates a new `RepoPayload`.
                            ///
                            /// - Parameters:
                            ///   - id:
                            ///   - name:
                            ///   - url:
                            public init(
                                id: Swift.Int,
                                name: Swift.String,
                                url: Swift.String
                            ) {
                                self.id = id
                                self.name = name
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case id
                                case name
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/PullRequestsPayload/base/repo`.
                        public var repo: Components.Schemas.WebhookDeploymentCreated.WorkflowRunPayload.PullRequestsPayloadPayload.BasePayload.RepoPayload
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/PullRequestsPayload/base/sha`.
                        public var sha: Swift.String
                        /// Creates a new `BasePayload`.
                        ///
                        /// - Parameters:
                        ///   - ref:
                        ///   - repo:
                        ///   - sha:
                        public init(
                            ref: Swift.String,
                            repo: Components.Schemas.WebhookDeploymentCreated.WorkflowRunPayload.PullRequestsPayloadPayload.BasePayload.RepoPayload,
                            sha: Swift.String
                        ) {
                            self.ref = ref
                            self.repo = repo
                            self.sha = sha
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ref
                            case repo
                            case sha
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/PullRequestsPayload/base`.
                    public var base: Components.Schemas.WebhookDeploymentCreated.WorkflowRunPayload.PullRequestsPayloadPayload.BasePayload
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/PullRequestsPayload/head`.
                    public struct HeadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/PullRequestsPayload/head/ref`.
                        public var ref: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/PullRequestsPayload/head/repo`.
                        public struct RepoPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/PullRequestsPayload/head/repo/id`.
                            public var id: Swift.Int
                            /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/PullRequestsPayload/head/repo/name`.
                            public var name: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/PullRequestsPayload/head/repo/url`.
                            public var url: Swift.String
                            /// Creates a new `RepoPayload`.
                            ///
                            /// - Parameters:
                            ///   - id:
                            ///   - name:
                            ///   - url:
                            public init(
                                id: Swift.Int,
                                name: Swift.String,
                                url: Swift.String
                            ) {
                                self.id = id
                                self.name = name
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case id
                                case name
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/PullRequestsPayload/head/repo`.
                        public var repo: Components.Schemas.WebhookDeploymentCreated.WorkflowRunPayload.PullRequestsPayloadPayload.HeadPayload.RepoPayload
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/PullRequestsPayload/head/sha`.
                        public var sha: Swift.String
                        /// Creates a new `HeadPayload`.
                        ///
                        /// - Parameters:
                        ///   - ref:
                        ///   - repo:
                        ///   - sha:
                        public init(
                            ref: Swift.String,
                            repo: Components.Schemas.WebhookDeploymentCreated.WorkflowRunPayload.PullRequestsPayloadPayload.HeadPayload.RepoPayload,
                            sha: Swift.String
                        ) {
                            self.ref = ref
                            self.repo = repo
                            self.sha = sha
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ref
                            case repo
                            case sha
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/PullRequestsPayload/head`.
                    public var head: Components.Schemas.WebhookDeploymentCreated.WorkflowRunPayload.PullRequestsPayloadPayload.HeadPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/PullRequestsPayload/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/PullRequestsPayload/number`.
                    public var number: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/PullRequestsPayload/url`.
                    public var url: Swift.String
                    /// Creates a new `PullRequestsPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - base:
                    ///   - head:
                    ///   - id:
                    ///   - number:
                    ///   - url:
                    public init(
                        base: Components.Schemas.WebhookDeploymentCreated.WorkflowRunPayload.PullRequestsPayloadPayload.BasePayload,
                        head: Components.Schemas.WebhookDeploymentCreated.WorkflowRunPayload.PullRequestsPayloadPayload.HeadPayload,
                        id: Swift.Int,
                        number: Swift.Int,
                        url: Swift.String
                    ) {
                        self.base = base
                        self.head = head
                        self.id = id
                        self.number = number
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case base
                        case head
                        case id
                        case number
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/pull_requests`.
                public typealias PullRequestsPayload = [Components.Schemas.WebhookDeploymentCreated.WorkflowRunPayload.PullRequestsPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/pull_requests`.
                public var pullRequests: Components.Schemas.WebhookDeploymentCreated.WorkflowRunPayload.PullRequestsPayload
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/ReferencedWorkflowsPayload`.
                public struct ReferencedWorkflowsPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/ReferencedWorkflowsPayload/path`.
                    public var path: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/ReferencedWorkflowsPayload/ref`.
                    public var ref: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/ReferencedWorkflowsPayload/sha`.
                    public var sha: Swift.String
                    /// Creates a new `ReferencedWorkflowsPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - path:
                    ///   - ref:
                    ///   - sha:
                    public init(
                        path: Swift.String,
                        ref: Swift.String? = nil,
                        sha: Swift.String
                    ) {
                        self.path = path
                        self.ref = ref
                        self.sha = sha
                    }
                    public enum CodingKeys: String, CodingKey {
                        case path
                        case ref
                        case sha
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/referenced_workflows`.
                public typealias ReferencedWorkflowsPayload = [Components.Schemas.WebhookDeploymentCreated.WorkflowRunPayload.ReferencedWorkflowsPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/referenced_workflows`.
                public var referencedWorkflows: Components.Schemas.WebhookDeploymentCreated.WorkflowRunPayload.ReferencedWorkflowsPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository`.
                public struct RepositoryPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/archive_url`.
                    public var archiveUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/assignees_url`.
                    public var assigneesUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/blobs_url`.
                    public var blobsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/branches_url`.
                    public var branchesUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/collaborators_url`.
                    public var collaboratorsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/comments_url`.
                    public var commentsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/commits_url`.
                    public var commitsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/compare_url`.
                    public var compareUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/contents_url`.
                    public var contentsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/contributors_url`.
                    public var contributorsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/deployments_url`.
                    public var deploymentsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/description`.
                    public var description: OpenAPIRuntime.OpenAPIValueContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/downloads_url`.
                    public var downloadsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/fork`.
                    public var fork: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/forks_url`.
                    public var forksUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/full_name`.
                    public var fullName: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/git_commits_url`.
                    public var gitCommitsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/git_refs_url`.
                    public var gitRefsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/git_tags_url`.
                    public var gitTagsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/hooks_url`.
                    public var hooksUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/id`.
                    public var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/issue_comment_url`.
                    public var issueCommentUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/issue_events_url`.
                    public var issueEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/issues_url`.
                    public var issuesUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/keys_url`.
                    public var keysUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/labels_url`.
                    public var labelsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/languages_url`.
                    public var languagesUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/merges_url`.
                    public var mergesUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/milestones_url`.
                    public var milestonesUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/notifications_url`.
                    public var notificationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/owner`.
                    public struct OwnerPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/owner/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/owner/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/owner/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/owner/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/owner/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/owner/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/owner/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/owner/id`.
                        public var id: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/owner/login`.
                        public var login: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/owner/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/owner/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/owner/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/owner/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/owner/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/owner/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/owner/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/owner/type`.
                        public var _type: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/owner/url`.
                        public var url: Swift.String?
                        /// Creates a new `OwnerPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int? = nil,
                            login: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/owner`.
                    public var owner: Components.Schemas.WebhookDeploymentCreated.WorkflowRunPayload.RepositoryPayload.OwnerPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/private`.
                    public var _private: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/pulls_url`.
                    public var pullsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/releases_url`.
                    public var releasesUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/stargazers_url`.
                    public var stargazersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/statuses_url`.
                    public var statusesUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/subscribers_url`.
                    public var subscribersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/subscription_url`.
                    public var subscriptionUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/tags_url`.
                    public var tagsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/teams_url`.
                    public var teamsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/trees_url`.
                    public var treesUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository/url`.
                    public var url: Swift.String?
                    /// Creates a new `RepositoryPayload`.
                    ///
                    /// - Parameters:
                    ///   - archiveUrl:
                    ///   - assigneesUrl:
                    ///   - blobsUrl:
                    ///   - branchesUrl:
                    ///   - collaboratorsUrl:
                    ///   - commentsUrl:
                    ///   - commitsUrl:
                    ///   - compareUrl:
                    ///   - contentsUrl:
                    ///   - contributorsUrl:
                    ///   - deploymentsUrl:
                    ///   - description:
                    ///   - downloadsUrl:
                    ///   - eventsUrl:
                    ///   - fork:
                    ///   - forksUrl:
                    ///   - fullName:
                    ///   - gitCommitsUrl:
                    ///   - gitRefsUrl:
                    ///   - gitTagsUrl:
                    ///   - hooksUrl:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - issueCommentUrl:
                    ///   - issueEventsUrl:
                    ///   - issuesUrl:
                    ///   - keysUrl:
                    ///   - labelsUrl:
                    ///   - languagesUrl:
                    ///   - mergesUrl:
                    ///   - milestonesUrl:
                    ///   - name:
                    ///   - nodeId:
                    ///   - notificationsUrl:
                    ///   - owner:
                    ///   - _private:
                    ///   - pullsUrl:
                    ///   - releasesUrl:
                    ///   - stargazersUrl:
                    ///   - statusesUrl:
                    ///   - subscribersUrl:
                    ///   - subscriptionUrl:
                    ///   - tagsUrl:
                    ///   - teamsUrl:
                    ///   - treesUrl:
                    ///   - url:
                    public init(
                        archiveUrl: Swift.String? = nil,
                        assigneesUrl: Swift.String? = nil,
                        blobsUrl: Swift.String? = nil,
                        branchesUrl: Swift.String? = nil,
                        collaboratorsUrl: Swift.String? = nil,
                        commentsUrl: Swift.String? = nil,
                        commitsUrl: Swift.String? = nil,
                        compareUrl: Swift.String? = nil,
                        contentsUrl: Swift.String? = nil,
                        contributorsUrl: Swift.String? = nil,
                        deploymentsUrl: Swift.String? = nil,
                        description: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                        downloadsUrl: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        fork: Swift.Bool? = nil,
                        forksUrl: Swift.String? = nil,
                        fullName: Swift.String? = nil,
                        gitCommitsUrl: Swift.String? = nil,
                        gitRefsUrl: Swift.String? = nil,
                        gitTagsUrl: Swift.String? = nil,
                        hooksUrl: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int? = nil,
                        issueCommentUrl: Swift.String? = nil,
                        issueEventsUrl: Swift.String? = nil,
                        issuesUrl: Swift.String? = nil,
                        keysUrl: Swift.String? = nil,
                        labelsUrl: Swift.String? = nil,
                        languagesUrl: Swift.String? = nil,
                        mergesUrl: Swift.String? = nil,
                        milestonesUrl: Swift.String? = nil,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        notificationsUrl: Swift.String? = nil,
                        owner: Components.Schemas.WebhookDeploymentCreated.WorkflowRunPayload.RepositoryPayload.OwnerPayload? = nil,
                        _private: Swift.Bool? = nil,
                        pullsUrl: Swift.String? = nil,
                        releasesUrl: Swift.String? = nil,
                        stargazersUrl: Swift.String? = nil,
                        statusesUrl: Swift.String? = nil,
                        subscribersUrl: Swift.String? = nil,
                        subscriptionUrl: Swift.String? = nil,
                        tagsUrl: Swift.String? = nil,
                        teamsUrl: Swift.String? = nil,
                        treesUrl: Swift.String? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.archiveUrl = archiveUrl
                        self.assigneesUrl = assigneesUrl
                        self.blobsUrl = blobsUrl
                        self.branchesUrl = branchesUrl
                        self.collaboratorsUrl = collaboratorsUrl
                        self.commentsUrl = commentsUrl
                        self.commitsUrl = commitsUrl
                        self.compareUrl = compareUrl
                        self.contentsUrl = contentsUrl
                        self.contributorsUrl = contributorsUrl
                        self.deploymentsUrl = deploymentsUrl
                        self.description = description
                        self.downloadsUrl = downloadsUrl
                        self.eventsUrl = eventsUrl
                        self.fork = fork
                        self.forksUrl = forksUrl
                        self.fullName = fullName
                        self.gitCommitsUrl = gitCommitsUrl
                        self.gitRefsUrl = gitRefsUrl
                        self.gitTagsUrl = gitTagsUrl
                        self.hooksUrl = hooksUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.issueCommentUrl = issueCommentUrl
                        self.issueEventsUrl = issueEventsUrl
                        self.issuesUrl = issuesUrl
                        self.keysUrl = keysUrl
                        self.labelsUrl = labelsUrl
                        self.languagesUrl = languagesUrl
                        self.mergesUrl = mergesUrl
                        self.milestonesUrl = milestonesUrl
                        self.name = name
                        self.nodeId = nodeId
                        self.notificationsUrl = notificationsUrl
                        self.owner = owner
                        self._private = _private
                        self.pullsUrl = pullsUrl
                        self.releasesUrl = releasesUrl
                        self.stargazersUrl = stargazersUrl
                        self.statusesUrl = statusesUrl
                        self.subscribersUrl = subscribersUrl
                        self.subscriptionUrl = subscriptionUrl
                        self.tagsUrl = tagsUrl
                        self.teamsUrl = teamsUrl
                        self.treesUrl = treesUrl
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case archiveUrl = "archive_url"
                        case assigneesUrl = "assignees_url"
                        case blobsUrl = "blobs_url"
                        case branchesUrl = "branches_url"
                        case collaboratorsUrl = "collaborators_url"
                        case commentsUrl = "comments_url"
                        case commitsUrl = "commits_url"
                        case compareUrl = "compare_url"
                        case contentsUrl = "contents_url"
                        case contributorsUrl = "contributors_url"
                        case deploymentsUrl = "deployments_url"
                        case description
                        case downloadsUrl = "downloads_url"
                        case eventsUrl = "events_url"
                        case fork
                        case forksUrl = "forks_url"
                        case fullName = "full_name"
                        case gitCommitsUrl = "git_commits_url"
                        case gitRefsUrl = "git_refs_url"
                        case gitTagsUrl = "git_tags_url"
                        case hooksUrl = "hooks_url"
                        case htmlUrl = "html_url"
                        case id
                        case issueCommentUrl = "issue_comment_url"
                        case issueEventsUrl = "issue_events_url"
                        case issuesUrl = "issues_url"
                        case keysUrl = "keys_url"
                        case labelsUrl = "labels_url"
                        case languagesUrl = "languages_url"
                        case mergesUrl = "merges_url"
                        case milestonesUrl = "milestones_url"
                        case name
                        case nodeId = "node_id"
                        case notificationsUrl = "notifications_url"
                        case owner
                        case _private = "private"
                        case pullsUrl = "pulls_url"
                        case releasesUrl = "releases_url"
                        case stargazersUrl = "stargazers_url"
                        case statusesUrl = "statuses_url"
                        case subscribersUrl = "subscribers_url"
                        case subscriptionUrl = "subscription_url"
                        case tagsUrl = "tags_url"
                        case teamsUrl = "teams_url"
                        case treesUrl = "trees_url"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/repository`.
                public var repository: Components.Schemas.WebhookDeploymentCreated.WorkflowRunPayload.RepositoryPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/rerun_url`.
                public var rerunUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/run_attempt`.
                public var runAttempt: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/run_number`.
                public var runNumber: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/run_started_at`.
                public var runStartedAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/status`.
                @frozen public enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case requested = "requested"
                    case inProgress = "in_progress"
                    case completed = "completed"
                    case queued = "queued"
                    case waiting = "waiting"
                    case pending = "pending"
                }
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/status`.
                public var status: Components.Schemas.WebhookDeploymentCreated.WorkflowRunPayload.StatusPayload
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/triggering_actor`.
                public struct TriggeringActorPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/triggering_actor/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/triggering_actor/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/triggering_actor/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/triggering_actor/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/triggering_actor/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/triggering_actor/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/triggering_actor/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/triggering_actor/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/triggering_actor/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/triggering_actor/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/triggering_actor/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/triggering_actor/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/triggering_actor/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/triggering_actor/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/triggering_actor/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/triggering_actor/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/triggering_actor/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/triggering_actor/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/triggering_actor/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/triggering_actor/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/triggering_actor/type`.
                    public var _type: Components.Schemas.WebhookDeploymentCreated.WorkflowRunPayload.TriggeringActorPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/triggering_actor/url`.
                    public var url: Swift.String?
                    /// Creates a new `TriggeringActorPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookDeploymentCreated.WorkflowRunPayload.TriggeringActorPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/triggering_actor`.
                public var triggeringActor: Components.Schemas.WebhookDeploymentCreated.WorkflowRunPayload.TriggeringActorPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/updated_at`.
                public var updatedAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/workflow_id`.
                public var workflowId: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run/workflow_url`.
                public var workflowUrl: Swift.String?
                /// Creates a new `WorkflowRunPayload`.
                ///
                /// - Parameters:
                ///   - actor:
                ///   - artifactsUrl:
                ///   - cancelUrl:
                ///   - checkSuiteId:
                ///   - checkSuiteNodeId:
                ///   - checkSuiteUrl:
                ///   - conclusion:
                ///   - createdAt:
                ///   - displayTitle:
                ///   - event:
                ///   - headBranch:
                ///   - headCommit:
                ///   - headRepository:
                ///   - headSha:
                ///   - htmlUrl:
                ///   - id:
                ///   - jobsUrl:
                ///   - logsUrl:
                ///   - name:
                ///   - nodeId:
                ///   - path:
                ///   - previousAttemptUrl:
                ///   - pullRequests:
                ///   - referencedWorkflows:
                ///   - repository:
                ///   - rerunUrl:
                ///   - runAttempt:
                ///   - runNumber:
                ///   - runStartedAt:
                ///   - status:
                ///   - triggeringActor:
                ///   - updatedAt:
                ///   - url:
                ///   - workflowId:
                ///   - workflowUrl:
                public init(
                    actor: Components.Schemas.WebhookDeploymentCreated.WorkflowRunPayload.ActorPayload? = nil,
                    artifactsUrl: Swift.String? = nil,
                    cancelUrl: Swift.String? = nil,
                    checkSuiteId: Swift.Int,
                    checkSuiteNodeId: Swift.String,
                    checkSuiteUrl: Swift.String? = nil,
                    conclusion: Components.Schemas.WebhookDeploymentCreated.WorkflowRunPayload.ConclusionPayload? = nil,
                    createdAt: Swift.String,
                    displayTitle: Swift.String,
                    event: Swift.String,
                    headBranch: Swift.String,
                    headCommit: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                    headRepository: Components.Schemas.WebhookDeploymentCreated.WorkflowRunPayload.HeadRepositoryPayload? = nil,
                    headSha: Swift.String,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    jobsUrl: Swift.String? = nil,
                    logsUrl: Swift.String? = nil,
                    name: Swift.String,
                    nodeId: Swift.String,
                    path: Swift.String,
                    previousAttemptUrl: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                    pullRequests: Components.Schemas.WebhookDeploymentCreated.WorkflowRunPayload.PullRequestsPayload,
                    referencedWorkflows: Components.Schemas.WebhookDeploymentCreated.WorkflowRunPayload.ReferencedWorkflowsPayload? = nil,
                    repository: Components.Schemas.WebhookDeploymentCreated.WorkflowRunPayload.RepositoryPayload? = nil,
                    rerunUrl: Swift.String? = nil,
                    runAttempt: Swift.Int,
                    runNumber: Swift.Int,
                    runStartedAt: Swift.String,
                    status: Components.Schemas.WebhookDeploymentCreated.WorkflowRunPayload.StatusPayload,
                    triggeringActor: Components.Schemas.WebhookDeploymentCreated.WorkflowRunPayload.TriggeringActorPayload? = nil,
                    updatedAt: Swift.String,
                    url: Swift.String,
                    workflowId: Swift.Int,
                    workflowUrl: Swift.String? = nil
                ) {
                    self.actor = actor
                    self.artifactsUrl = artifactsUrl
                    self.cancelUrl = cancelUrl
                    self.checkSuiteId = checkSuiteId
                    self.checkSuiteNodeId = checkSuiteNodeId
                    self.checkSuiteUrl = checkSuiteUrl
                    self.conclusion = conclusion
                    self.createdAt = createdAt
                    self.displayTitle = displayTitle
                    self.event = event
                    self.headBranch = headBranch
                    self.headCommit = headCommit
                    self.headRepository = headRepository
                    self.headSha = headSha
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.jobsUrl = jobsUrl
                    self.logsUrl = logsUrl
                    self.name = name
                    self.nodeId = nodeId
                    self.path = path
                    self.previousAttemptUrl = previousAttemptUrl
                    self.pullRequests = pullRequests
                    self.referencedWorkflows = referencedWorkflows
                    self.repository = repository
                    self.rerunUrl = rerunUrl
                    self.runAttempt = runAttempt
                    self.runNumber = runNumber
                    self.runStartedAt = runStartedAt
                    self.status = status
                    self.triggeringActor = triggeringActor
                    self.updatedAt = updatedAt
                    self.url = url
                    self.workflowId = workflowId
                    self.workflowUrl = workflowUrl
                }
                public enum CodingKeys: String, CodingKey {
                    case actor
                    case artifactsUrl = "artifacts_url"
                    case cancelUrl = "cancel_url"
                    case checkSuiteId = "check_suite_id"
                    case checkSuiteNodeId = "check_suite_node_id"
                    case checkSuiteUrl = "check_suite_url"
                    case conclusion
                    case createdAt = "created_at"
                    case displayTitle = "display_title"
                    case event
                    case headBranch = "head_branch"
                    case headCommit = "head_commit"
                    case headRepository = "head_repository"
                    case headSha = "head_sha"
                    case htmlUrl = "html_url"
                    case id
                    case jobsUrl = "jobs_url"
                    case logsUrl = "logs_url"
                    case name
                    case nodeId = "node_id"
                    case path
                    case previousAttemptUrl = "previous_attempt_url"
                    case pullRequests = "pull_requests"
                    case referencedWorkflows = "referenced_workflows"
                    case repository
                    case rerunUrl = "rerun_url"
                    case runAttempt = "run_attempt"
                    case runNumber = "run_number"
                    case runStartedAt = "run_started_at"
                    case status
                    case triggeringActor = "triggering_actor"
                    case updatedAt = "updated_at"
                    case url
                    case workflowId = "workflow_id"
                    case workflowUrl = "workflow_url"
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-deployment-created/workflow_run`.
            public var workflowRun: Components.Schemas.WebhookDeploymentCreated.WorkflowRunPayload?
            /// Creates a new `WebhookDeploymentCreated`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - deployment: The [deployment](https://docs.github.com/en/rest/reference/deployments#list-deployments).
            ///   - enterprise:
            ///   - installation:
            ///   - organization:
            ///   - repository:
            ///   - sender:
            ///   - workflow:
            ///   - workflowRun:
            public init(
                action: Components.Schemas.WebhookDeploymentCreated.ActionPayload,
                deployment: Components.Schemas.WebhookDeploymentCreated.DeploymentPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser,
                workflow: Components.Schemas.WebhookDeploymentCreated.WorkflowPayload? = nil,
                workflowRun: Components.Schemas.WebhookDeploymentCreated.WorkflowRunPayload? = nil
            ) {
                self.action = action
                self.deployment = deployment
                self.enterprise = enterprise
                self.installation = installation
                self.organization = organization
                self.repository = repository
                self.sender = sender
                self.workflow = workflow
                self.workflowRun = workflowRun
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case deployment
                case enterprise
                case installation
                case organization
                case repository
                case sender
                case workflow
                case workflowRun = "workflow_run"
            }
        }
        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created`.
        public struct WebhookDeploymentStatusCreated: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/action`.
            @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case created = "created"
            }
            /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/action`.
            public var action: Components.Schemas.WebhookDeploymentStatusCreated.ActionPayload
            /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/check_run`.
            public struct CheckRunPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/check_run/completed_at`.
                public var completedAt: Swift.String?
                /// The result of the completed check run. Can be one of `success`, `failure`, `neutral`, `cancelled`, `timed_out`, `action_required` or `stale`. This value will be `null` until the check run has completed.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/check_run/conclusion`.
                @frozen public enum ConclusionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case success = "success"
                    case failure = "failure"
                    case neutral = "neutral"
                    case cancelled = "cancelled"
                    case timedOut = "timed_out"
                    case actionRequired = "action_required"
                    case stale = "stale"
                    case skipped = "skipped"
                    case _empty_ = ""
                }
                /// The result of the completed check run. Can be one of `success`, `failure`, `neutral`, `cancelled`, `timed_out`, `action_required` or `stale`. This value will be `null` until the check run has completed.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/check_run/conclusion`.
                public var conclusion: Components.Schemas.WebhookDeploymentStatusCreated.CheckRunPayload.ConclusionPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/check_run/details_url`.
                public var detailsUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/check_run/external_id`.
                public var externalId: Swift.String
                /// The SHA of the commit that is being checked.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/check_run/head_sha`.
                public var headSha: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/check_run/html_url`.
                public var htmlUrl: Swift.String
                /// The id of the check.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/check_run/id`.
                public var id: Swift.Int
                /// The name of the check run.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/check_run/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/check_run/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/check_run/started_at`.
                public var startedAt: Swift.String
                /// The current status of the check run. Can be `queued`, `in_progress`, or `completed`.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/check_run/status`.
                @frozen public enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case queued = "queued"
                    case inProgress = "in_progress"
                    case completed = "completed"
                    case waiting = "waiting"
                    case pending = "pending"
                }
                /// The current status of the check run. Can be `queued`, `in_progress`, or `completed`.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/check_run/status`.
                public var status: Components.Schemas.WebhookDeploymentStatusCreated.CheckRunPayload.StatusPayload
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/check_run/url`.
                public var url: Swift.String
                /// Creates a new `CheckRunPayload`.
                ///
                /// - Parameters:
                ///   - completedAt:
                ///   - conclusion: The result of the completed check run. Can be one of `success`, `failure`, `neutral`, `cancelled`, `timed_out`, `action_required` or `stale`. This value will be `null` until the check run has completed.
                ///   - detailsUrl:
                ///   - externalId:
                ///   - headSha: The SHA of the commit that is being checked.
                ///   - htmlUrl:
                ///   - id: The id of the check.
                ///   - name: The name of the check run.
                ///   - nodeId:
                ///   - startedAt:
                ///   - status: The current status of the check run. Can be `queued`, `in_progress`, or `completed`.
                ///   - url:
                public init(
                    completedAt: Swift.String? = nil,
                    conclusion: Components.Schemas.WebhookDeploymentStatusCreated.CheckRunPayload.ConclusionPayload? = nil,
                    detailsUrl: Swift.String,
                    externalId: Swift.String,
                    headSha: Swift.String,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    name: Swift.String,
                    nodeId: Swift.String,
                    startedAt: Swift.String,
                    status: Components.Schemas.WebhookDeploymentStatusCreated.CheckRunPayload.StatusPayload,
                    url: Swift.String
                ) {
                    self.completedAt = completedAt
                    self.conclusion = conclusion
                    self.detailsUrl = detailsUrl
                    self.externalId = externalId
                    self.headSha = headSha
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.name = name
                    self.nodeId = nodeId
                    self.startedAt = startedAt
                    self.status = status
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case completedAt = "completed_at"
                    case conclusion
                    case detailsUrl = "details_url"
                    case externalId = "external_id"
                    case headSha = "head_sha"
                    case htmlUrl = "html_url"
                    case id
                    case name
                    case nodeId = "node_id"
                    case startedAt = "started_at"
                    case status
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/check_run`.
            public var checkRun: Components.Schemas.WebhookDeploymentStatusCreated.CheckRunPayload?
            /// The [deployment](https://docs.github.com/en/rest/reference/deployments#list-deployments).
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment`.
            public struct DeploymentPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/created_at`.
                public var createdAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/creator`.
                public struct CreatorPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/creator/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/creator/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/creator/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/creator/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/creator/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/creator/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/creator/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/creator/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/creator/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/creator/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/creator/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/creator/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/creator/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/creator/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/creator/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/creator/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/creator/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/creator/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/creator/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/creator/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/creator/type`.
                    public var _type: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.CreatorPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/creator/url`.
                    public var url: Swift.String?
                    /// Creates a new `CreatorPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.CreatorPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/creator`.
                public var creator: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.CreatorPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/description`.
                public var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/environment`.
                public var environment: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/original_environment`.
                public var originalEnvironment: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/payload`.
                @frozen public enum PayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/payload/case1`.
                    case case1(Swift.String)
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/payload/case2`.
                    case case2(OpenAPIRuntime.OpenAPIObjectContainer)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try value.encode(to: encoder)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/payload`.
                public var payload: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PayloadPayload?
                /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app`.
                public struct PerformedViaGithubAppPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/created_at`.
                    public var createdAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/EventsPayload`.
                    @frozen public enum EventsPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case branchProtectionRule = "branch_protection_rule"
                        case checkRun = "check_run"
                        case checkSuite = "check_suite"
                        case codeScanningAlert = "code_scanning_alert"
                        case commitComment = "commit_comment"
                        case contentReference = "content_reference"
                        case create = "create"
                        case delete = "delete"
                        case deployment = "deployment"
                        case deploymentReview = "deployment_review"
                        case deploymentStatus = "deployment_status"
                        case deployKey = "deploy_key"
                        case discussion = "discussion"
                        case discussionComment = "discussion_comment"
                        case fork = "fork"
                        case gollum = "gollum"
                        case issues = "issues"
                        case issueComment = "issue_comment"
                        case label = "label"
                        case member = "member"
                        case membership = "membership"
                        case milestone = "milestone"
                        case organization = "organization"
                        case orgBlock = "org_block"
                        case pageBuild = "page_build"
                        case project = "project"
                        case projectCard = "project_card"
                        case projectColumn = "project_column"
                        case _public = "public"
                        case pullRequest = "pull_request"
                        case pullRequestReview = "pull_request_review"
                        case pullRequestReviewComment = "pull_request_review_comment"
                        case push = "push"
                        case registryPackage = "registry_package"
                        case release = "release"
                        case repository = "repository"
                        case repositoryDispatch = "repository_dispatch"
                        case secretScanningAlert = "secret_scanning_alert"
                        case star = "star"
                        case status = "status"
                        case team = "team"
                        case teamAdd = "team_add"
                        case watch = "watch"
                        case workflowDispatch = "workflow_dispatch"
                        case workflowRun = "workflow_run"
                        case mergeQueueEntry = "merge_queue_entry"
                        case workflowJob = "workflow_job"
                        case pullRequestReviewThread = "pull_request_review_thread"
                        case secretScanningAlertLocation = "secret_scanning_alert_location"
                        case mergeGroup = "merge_group"
                    }
                    /// The list of events for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/events`.
                    public typealias EventsPayload = [Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.EventsPayloadPayload]
                    /// The list of events for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/events`.
                    public var events: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.EventsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/external_url`.
                    public var externalUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/html_url`.
                    public var htmlUrl: Swift.String
                    /// Unique identifier of the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/id`.
                    public var id: Swift.Int?
                    /// The name of the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/owner`.
                    public struct OwnerPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/owner/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/owner/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/owner/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/owner/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/owner/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/owner/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/owner/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/owner/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/owner/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/owner/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/owner/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/owner/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/owner/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/owner/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/owner/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/owner/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/owner/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/owner/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/owner/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/owner/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/owner/type`.
                        public var _type: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/owner/url`.
                        public var url: Swift.String?
                        /// Creates a new `OwnerPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/owner`.
                    public var owner: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.OwnerPayload?
                    /// The set of permissions for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions`.
                    public struct PermissionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/actions`.
                        @frozen public enum ActionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/actions`.
                        public var actions: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/administration`.
                        @frozen public enum AdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/administration`.
                        public var administration: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/checks`.
                        @frozen public enum ChecksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/checks`.
                        public var checks: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/content_references`.
                        @frozen public enum ContentReferencesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/content_references`.
                        public var contentReferences: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/contents`.
                        @frozen public enum ContentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/contents`.
                        public var contents: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/deployments`.
                        @frozen public enum DeploymentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/deployments`.
                        public var deployments: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/discussions`.
                        @frozen public enum DiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/discussions`.
                        public var discussions: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/emails`.
                        @frozen public enum EmailsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/emails`.
                        public var emails: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/environments`.
                        @frozen public enum EnvironmentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/environments`.
                        public var environments: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/issues`.
                        @frozen public enum IssuesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/issues`.
                        public var issues: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/keys`.
                        @frozen public enum KeysPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/keys`.
                        public var keys: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/members`.
                        @frozen public enum MembersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/members`.
                        public var members: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/metadata`.
                        @frozen public enum MetadataPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/metadata`.
                        public var metadata: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/organization_administration`.
                        @frozen public enum OrganizationAdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/organization_administration`.
                        public var organizationAdministration: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/organization_hooks`.
                        @frozen public enum OrganizationHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/organization_hooks`.
                        public var organizationHooks: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/organization_packages`.
                        @frozen public enum OrganizationPackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/organization_packages`.
                        public var organizationPackages: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/organization_plan`.
                        @frozen public enum OrganizationPlanPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/organization_plan`.
                        public var organizationPlan: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/organization_projects`.
                        @frozen public enum OrganizationProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/organization_projects`.
                        public var organizationProjects: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/organization_secrets`.
                        @frozen public enum OrganizationSecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/organization_secrets`.
                        public var organizationSecrets: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/organization_self_hosted_runners`.
                        @frozen public enum OrganizationSelfHostedRunnersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/organization_self_hosted_runners`.
                        public var organizationSelfHostedRunners: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/organization_user_blocking`.
                        @frozen public enum OrganizationUserBlockingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/organization_user_blocking`.
                        public var organizationUserBlocking: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/packages`.
                        @frozen public enum PackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/packages`.
                        public var packages: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/pages`.
                        @frozen public enum PagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/pages`.
                        public var pages: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/pull_requests`.
                        @frozen public enum PullRequestsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/pull_requests`.
                        public var pullRequests: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/repository_hooks`.
                        @frozen public enum RepositoryHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/repository_hooks`.
                        public var repositoryHooks: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/repository_projects`.
                        @frozen public enum RepositoryProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/repository_projects`.
                        public var repositoryProjects: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/secret_scanning_alerts`.
                        @frozen public enum SecretScanningAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/secret_scanning_alerts`.
                        public var secretScanningAlerts: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/secrets`.
                        @frozen public enum SecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/secrets`.
                        public var secrets: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/security_events`.
                        @frozen public enum SecurityEventsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/security_events`.
                        public var securityEvents: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/security_scanning_alert`.
                        @frozen public enum SecurityScanningAlertPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/security_scanning_alert`.
                        public var securityScanningAlert: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/single_file`.
                        @frozen public enum SingleFilePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/single_file`.
                        public var singleFile: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/statuses`.
                        @frozen public enum StatusesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/statuses`.
                        public var statuses: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/team_discussions`.
                        @frozen public enum TeamDiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/team_discussions`.
                        public var teamDiscussions: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/vulnerability_alerts`.
                        @frozen public enum VulnerabilityAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/vulnerability_alerts`.
                        public var vulnerabilityAlerts: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/workflows`.
                        @frozen public enum WorkflowsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions/workflows`.
                        public var workflows: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload?
                        /// Creates a new `PermissionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - actions:
                        ///   - administration:
                        ///   - checks:
                        ///   - contentReferences:
                        ///   - contents:
                        ///   - deployments:
                        ///   - discussions:
                        ///   - emails:
                        ///   - environments:
                        ///   - issues:
                        ///   - keys:
                        ///   - members:
                        ///   - metadata:
                        ///   - organizationAdministration:
                        ///   - organizationHooks:
                        ///   - organizationPackages:
                        ///   - organizationPlan:
                        ///   - organizationProjects:
                        ///   - organizationSecrets:
                        ///   - organizationSelfHostedRunners:
                        ///   - organizationUserBlocking:
                        ///   - packages:
                        ///   - pages:
                        ///   - pullRequests:
                        ///   - repositoryHooks:
                        ///   - repositoryProjects:
                        ///   - secretScanningAlerts:
                        ///   - secrets:
                        ///   - securityEvents:
                        ///   - securityScanningAlert:
                        ///   - singleFile:
                        ///   - statuses:
                        ///   - teamDiscussions:
                        ///   - vulnerabilityAlerts:
                        ///   - workflows:
                        public init(
                            actions: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload? = nil,
                            administration: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload? = nil,
                            checks: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload? = nil,
                            contentReferences: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload? = nil,
                            contents: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload? = nil,
                            deployments: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload? = nil,
                            discussions: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload? = nil,
                            emails: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload? = nil,
                            environments: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload? = nil,
                            issues: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload? = nil,
                            keys: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload? = nil,
                            members: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload? = nil,
                            metadata: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload? = nil,
                            organizationAdministration: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload? = nil,
                            organizationHooks: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload? = nil,
                            organizationPackages: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload? = nil,
                            organizationPlan: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload? = nil,
                            organizationProjects: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload? = nil,
                            organizationSecrets: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload? = nil,
                            organizationSelfHostedRunners: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload? = nil,
                            organizationUserBlocking: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload? = nil,
                            packages: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload? = nil,
                            pages: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload? = nil,
                            pullRequests: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload? = nil,
                            repositoryHooks: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload? = nil,
                            repositoryProjects: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload? = nil,
                            secretScanningAlerts: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload? = nil,
                            secrets: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload? = nil,
                            securityEvents: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload? = nil,
                            securityScanningAlert: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload? = nil,
                            singleFile: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload? = nil,
                            statuses: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload? = nil,
                            teamDiscussions: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload? = nil,
                            vulnerabilityAlerts: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload? = nil,
                            workflows: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload? = nil
                        ) {
                            self.actions = actions
                            self.administration = administration
                            self.checks = checks
                            self.contentReferences = contentReferences
                            self.contents = contents
                            self.deployments = deployments
                            self.discussions = discussions
                            self.emails = emails
                            self.environments = environments
                            self.issues = issues
                            self.keys = keys
                            self.members = members
                            self.metadata = metadata
                            self.organizationAdministration = organizationAdministration
                            self.organizationHooks = organizationHooks
                            self.organizationPackages = organizationPackages
                            self.organizationPlan = organizationPlan
                            self.organizationProjects = organizationProjects
                            self.organizationSecrets = organizationSecrets
                            self.organizationSelfHostedRunners = organizationSelfHostedRunners
                            self.organizationUserBlocking = organizationUserBlocking
                            self.packages = packages
                            self.pages = pages
                            self.pullRequests = pullRequests
                            self.repositoryHooks = repositoryHooks
                            self.repositoryProjects = repositoryProjects
                            self.secretScanningAlerts = secretScanningAlerts
                            self.secrets = secrets
                            self.securityEvents = securityEvents
                            self.securityScanningAlert = securityScanningAlert
                            self.singleFile = singleFile
                            self.statuses = statuses
                            self.teamDiscussions = teamDiscussions
                            self.vulnerabilityAlerts = vulnerabilityAlerts
                            self.workflows = workflows
                        }
                        public enum CodingKeys: String, CodingKey {
                            case actions
                            case administration
                            case checks
                            case contentReferences = "content_references"
                            case contents
                            case deployments
                            case discussions
                            case emails
                            case environments
                            case issues
                            case keys
                            case members
                            case metadata
                            case organizationAdministration = "organization_administration"
                            case organizationHooks = "organization_hooks"
                            case organizationPackages = "organization_packages"
                            case organizationPlan = "organization_plan"
                            case organizationProjects = "organization_projects"
                            case organizationSecrets = "organization_secrets"
                            case organizationSelfHostedRunners = "organization_self_hosted_runners"
                            case organizationUserBlocking = "organization_user_blocking"
                            case packages
                            case pages
                            case pullRequests = "pull_requests"
                            case repositoryHooks = "repository_hooks"
                            case repositoryProjects = "repository_projects"
                            case secretScanningAlerts = "secret_scanning_alerts"
                            case secrets
                            case securityEvents = "security_events"
                            case securityScanningAlert = "security_scanning_alert"
                            case singleFile = "single_file"
                            case statuses
                            case teamDiscussions = "team_discussions"
                            case vulnerabilityAlerts = "vulnerability_alerts"
                            case workflows
                        }
                    }
                    /// The set of permissions for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/permissions`.
                    public var permissions: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload?
                    /// The slug name of the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/slug`.
                    public var slug: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app/updated_at`.
                    public var updatedAt: Swift.String?
                    /// Creates a new `PerformedViaGithubAppPayload`.
                    ///
                    /// - Parameters:
                    ///   - createdAt:
                    ///   - description:
                    ///   - events: The list of events for the GitHub app
                    ///   - externalUrl:
                    ///   - htmlUrl:
                    ///   - id: Unique identifier of the GitHub app
                    ///   - name: The name of the GitHub app
                    ///   - nodeId:
                    ///   - owner:
                    ///   - permissions: The set of permissions for the GitHub app
                    ///   - slug: The slug name of the GitHub app
                    ///   - updatedAt:
                    public init(
                        createdAt: Swift.String? = nil,
                        description: Swift.String? = nil,
                        events: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.EventsPayload? = nil,
                        externalUrl: Swift.String? = nil,
                        htmlUrl: Swift.String,
                        id: Swift.Int? = nil,
                        name: Swift.String,
                        nodeId: Swift.String,
                        owner: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.OwnerPayload? = nil,
                        permissions: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload.PermissionsPayload? = nil,
                        slug: Swift.String? = nil,
                        updatedAt: Swift.String? = nil
                    ) {
                        self.createdAt = createdAt
                        self.description = description
                        self.events = events
                        self.externalUrl = externalUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.name = name
                        self.nodeId = nodeId
                        self.owner = owner
                        self.permissions = permissions
                        self.slug = slug
                        self.updatedAt = updatedAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case createdAt = "created_at"
                        case description
                        case events
                        case externalUrl = "external_url"
                        case htmlUrl = "html_url"
                        case id
                        case name
                        case nodeId = "node_id"
                        case owner
                        case permissions
                        case slug
                        case updatedAt = "updated_at"
                    }
                }
                /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/performed_via_github_app`.
                public var performedViaGithubApp: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/production_environment`.
                public var productionEnvironment: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/ref`.
                public var ref: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/repository_url`.
                public var repositoryUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/sha`.
                public var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/statuses_url`.
                public var statusesUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/task`.
                public var task: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/transient_environment`.
                public var transientEnvironment: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/updated_at`.
                public var updatedAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment/url`.
                public var url: Swift.String
                /// Creates a new `DeploymentPayload`.
                ///
                /// - Parameters:
                ///   - createdAt:
                ///   - creator:
                ///   - description:
                ///   - environment:
                ///   - id:
                ///   - nodeId:
                ///   - originalEnvironment:
                ///   - payload:
                ///   - performedViaGithubApp: GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                ///   - productionEnvironment:
                ///   - ref:
                ///   - repositoryUrl:
                ///   - sha:
                ///   - statusesUrl:
                ///   - task:
                ///   - transientEnvironment:
                ///   - updatedAt:
                ///   - url:
                public init(
                    createdAt: Swift.String,
                    creator: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.CreatorPayload? = nil,
                    description: Swift.String? = nil,
                    environment: Swift.String,
                    id: Swift.Int,
                    nodeId: Swift.String,
                    originalEnvironment: Swift.String,
                    payload: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PayloadPayload? = nil,
                    performedViaGithubApp: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload.PerformedViaGithubAppPayload? = nil,
                    productionEnvironment: Swift.Bool? = nil,
                    ref: Swift.String,
                    repositoryUrl: Swift.String,
                    sha: Swift.String,
                    statusesUrl: Swift.String,
                    task: Swift.String,
                    transientEnvironment: Swift.Bool? = nil,
                    updatedAt: Swift.String,
                    url: Swift.String
                ) {
                    self.createdAt = createdAt
                    self.creator = creator
                    self.description = description
                    self.environment = environment
                    self.id = id
                    self.nodeId = nodeId
                    self.originalEnvironment = originalEnvironment
                    self.payload = payload
                    self.performedViaGithubApp = performedViaGithubApp
                    self.productionEnvironment = productionEnvironment
                    self.ref = ref
                    self.repositoryUrl = repositoryUrl
                    self.sha = sha
                    self.statusesUrl = statusesUrl
                    self.task = task
                    self.transientEnvironment = transientEnvironment
                    self.updatedAt = updatedAt
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case createdAt = "created_at"
                    case creator
                    case description
                    case environment
                    case id
                    case nodeId = "node_id"
                    case originalEnvironment = "original_environment"
                    case payload
                    case performedViaGithubApp = "performed_via_github_app"
                    case productionEnvironment = "production_environment"
                    case ref
                    case repositoryUrl = "repository_url"
                    case sha
                    case statusesUrl = "statuses_url"
                    case task
                    case transientEnvironment = "transient_environment"
                    case updatedAt = "updated_at"
                    case url
                }
            }
            /// The [deployment](https://docs.github.com/en/rest/reference/deployments#list-deployments).
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment`.
            public var deployment: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload
            /// The [deployment status](https://docs.github.com/en/rest/reference/deployments#list-deployment-statuses).
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status`.
            public struct DeploymentStatusPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/created_at`.
                public var createdAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/creator`.
                public struct CreatorPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/creator/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/creator/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/creator/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/creator/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/creator/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/creator/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/creator/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/creator/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/creator/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/creator/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/creator/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/creator/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/creator/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/creator/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/creator/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/creator/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/creator/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/creator/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/creator/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/creator/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/creator/type`.
                    public var _type: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.CreatorPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/creator/url`.
                    public var url: Swift.String?
                    /// Creates a new `CreatorPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.CreatorPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/creator`.
                public var creator: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.CreatorPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/deployment_url`.
                public var deploymentUrl: Swift.String
                /// The optional human-readable description added to the status.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/description`.
                public var description: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/environment`.
                public var environment: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/environment_url`.
                public var environmentUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/log_url`.
                public var logUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/node_id`.
                public var nodeId: Swift.String
                /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app`.
                public struct PerformedViaGithubAppPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/created_at`.
                    public var createdAt: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/EventsPayload`.
                    @frozen public enum EventsPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case branchProtectionRule = "branch_protection_rule"
                        case checkRun = "check_run"
                        case checkSuite = "check_suite"
                        case codeScanningAlert = "code_scanning_alert"
                        case commitComment = "commit_comment"
                        case contentReference = "content_reference"
                        case create = "create"
                        case delete = "delete"
                        case deployment = "deployment"
                        case deploymentReview = "deployment_review"
                        case deploymentStatus = "deployment_status"
                        case deployKey = "deploy_key"
                        case discussion = "discussion"
                        case discussionComment = "discussion_comment"
                        case fork = "fork"
                        case gollum = "gollum"
                        case issues = "issues"
                        case issueComment = "issue_comment"
                        case label = "label"
                        case member = "member"
                        case membership = "membership"
                        case milestone = "milestone"
                        case organization = "organization"
                        case orgBlock = "org_block"
                        case pageBuild = "page_build"
                        case project = "project"
                        case projectCard = "project_card"
                        case projectColumn = "project_column"
                        case _public = "public"
                        case pullRequest = "pull_request"
                        case pullRequestReview = "pull_request_review"
                        case pullRequestReviewComment = "pull_request_review_comment"
                        case push = "push"
                        case registryPackage = "registry_package"
                        case release = "release"
                        case repository = "repository"
                        case repositoryDispatch = "repository_dispatch"
                        case secretScanningAlert = "secret_scanning_alert"
                        case star = "star"
                        case status = "status"
                        case team = "team"
                        case teamAdd = "team_add"
                        case watch = "watch"
                        case workflowDispatch = "workflow_dispatch"
                        case workflowRun = "workflow_run"
                        case pullRequestReviewThread = "pull_request_review_thread"
                        case mergeQueueEntry = "merge_queue_entry"
                        case workflowJob = "workflow_job"
                        case mergeGroup = "merge_group"
                        case secretScanningAlertLocation = "secret_scanning_alert_location"
                    }
                    /// The list of events for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/events`.
                    public typealias EventsPayload = [Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.EventsPayloadPayload]
                    /// The list of events for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/events`.
                    public var events: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.EventsPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/external_url`.
                    public var externalUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/html_url`.
                    public var htmlUrl: Swift.String
                    /// Unique identifier of the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/id`.
                    public var id: Swift.Int?
                    /// The name of the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/node_id`.
                    public var nodeId: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/owner`.
                    public struct OwnerPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/owner/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/owner/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/owner/email`.
                        public var email: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/owner/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/owner/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/owner/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/owner/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/owner/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/owner/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/owner/id`.
                        public var id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/owner/login`.
                        public var login: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/owner/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/owner/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/owner/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/owner/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/owner/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/owner/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/owner/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/owner/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/owner/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case bot = "Bot"
                            case user = "User"
                            case organization = "Organization"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/owner/type`.
                        public var _type: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/owner/url`.
                        public var url: Swift.String?
                        /// Creates a new `OwnerPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - deleted:
                        ///   - email:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - name:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            email: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int,
                            login: Swift.String,
                            name: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.OwnerPayload._TypePayload? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.deleted = deleted
                            self.email = email
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.name = name
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case deleted
                            case email
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case name
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/owner`.
                    public var owner: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.OwnerPayload?
                    /// The set of permissions for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions`.
                    public struct PermissionsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/actions`.
                        @frozen public enum ActionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/actions`.
                        public var actions: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/administration`.
                        @frozen public enum AdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/administration`.
                        public var administration: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/checks`.
                        @frozen public enum ChecksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/checks`.
                        public var checks: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/content_references`.
                        @frozen public enum ContentReferencesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/content_references`.
                        public var contentReferences: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/contents`.
                        @frozen public enum ContentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/contents`.
                        public var contents: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/deployments`.
                        @frozen public enum DeploymentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/deployments`.
                        public var deployments: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/discussions`.
                        @frozen public enum DiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/discussions`.
                        public var discussions: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/emails`.
                        @frozen public enum EmailsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/emails`.
                        public var emails: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/environments`.
                        @frozen public enum EnvironmentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/environments`.
                        public var environments: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/issues`.
                        @frozen public enum IssuesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/issues`.
                        public var issues: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/keys`.
                        @frozen public enum KeysPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/keys`.
                        public var keys: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/members`.
                        @frozen public enum MembersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/members`.
                        public var members: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/metadata`.
                        @frozen public enum MetadataPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/metadata`.
                        public var metadata: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/organization_administration`.
                        @frozen public enum OrganizationAdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/organization_administration`.
                        public var organizationAdministration: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/organization_hooks`.
                        @frozen public enum OrganizationHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/organization_hooks`.
                        public var organizationHooks: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/organization_packages`.
                        @frozen public enum OrganizationPackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/organization_packages`.
                        public var organizationPackages: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/organization_plan`.
                        @frozen public enum OrganizationPlanPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/organization_plan`.
                        public var organizationPlan: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/organization_projects`.
                        @frozen public enum OrganizationProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/organization_projects`.
                        public var organizationProjects: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/organization_secrets`.
                        @frozen public enum OrganizationSecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/organization_secrets`.
                        public var organizationSecrets: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/organization_self_hosted_runners`.
                        @frozen public enum OrganizationSelfHostedRunnersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/organization_self_hosted_runners`.
                        public var organizationSelfHostedRunners: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/organization_user_blocking`.
                        @frozen public enum OrganizationUserBlockingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/organization_user_blocking`.
                        public var organizationUserBlocking: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/packages`.
                        @frozen public enum PackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/packages`.
                        public var packages: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/pages`.
                        @frozen public enum PagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/pages`.
                        public var pages: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/pull_requests`.
                        @frozen public enum PullRequestsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/pull_requests`.
                        public var pullRequests: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/repository_hooks`.
                        @frozen public enum RepositoryHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/repository_hooks`.
                        public var repositoryHooks: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/repository_projects`.
                        @frozen public enum RepositoryProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/repository_projects`.
                        public var repositoryProjects: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/secret_scanning_alerts`.
                        @frozen public enum SecretScanningAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/secret_scanning_alerts`.
                        public var secretScanningAlerts: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/secrets`.
                        @frozen public enum SecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/secrets`.
                        public var secrets: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/security_events`.
                        @frozen public enum SecurityEventsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/security_events`.
                        public var securityEvents: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/security_scanning_alert`.
                        @frozen public enum SecurityScanningAlertPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/security_scanning_alert`.
                        public var securityScanningAlert: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/single_file`.
                        @frozen public enum SingleFilePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/single_file`.
                        public var singleFile: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/statuses`.
                        @frozen public enum StatusesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/statuses`.
                        public var statuses: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/team_discussions`.
                        @frozen public enum TeamDiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/team_discussions`.
                        public var teamDiscussions: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/vulnerability_alerts`.
                        @frozen public enum VulnerabilityAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/vulnerability_alerts`.
                        public var vulnerabilityAlerts: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/workflows`.
                        @frozen public enum WorkflowsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case read = "read"
                            case write = "write"
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions/workflows`.
                        public var workflows: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload?
                        /// Creates a new `PermissionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - actions:
                        ///   - administration:
                        ///   - checks:
                        ///   - contentReferences:
                        ///   - contents:
                        ///   - deployments:
                        ///   - discussions:
                        ///   - emails:
                        ///   - environments:
                        ///   - issues:
                        ///   - keys:
                        ///   - members:
                        ///   - metadata:
                        ///   - organizationAdministration:
                        ///   - organizationHooks:
                        ///   - organizationPackages:
                        ///   - organizationPlan:
                        ///   - organizationProjects:
                        ///   - organizationSecrets:
                        ///   - organizationSelfHostedRunners:
                        ///   - organizationUserBlocking:
                        ///   - packages:
                        ///   - pages:
                        ///   - pullRequests:
                        ///   - repositoryHooks:
                        ///   - repositoryProjects:
                        ///   - secretScanningAlerts:
                        ///   - secrets:
                        ///   - securityEvents:
                        ///   - securityScanningAlert:
                        ///   - singleFile:
                        ///   - statuses:
                        ///   - teamDiscussions:
                        ///   - vulnerabilityAlerts:
                        ///   - workflows:
                        public init(
                            actions: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.ActionsPayload? = nil,
                            administration: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.AdministrationPayload? = nil,
                            checks: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.ChecksPayload? = nil,
                            contentReferences: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentReferencesPayload? = nil,
                            contents: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.ContentsPayload? = nil,
                            deployments: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.DeploymentsPayload? = nil,
                            discussions: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.DiscussionsPayload? = nil,
                            emails: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.EmailsPayload? = nil,
                            environments: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.EnvironmentsPayload? = nil,
                            issues: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.IssuesPayload? = nil,
                            keys: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.KeysPayload? = nil,
                            members: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.MembersPayload? = nil,
                            metadata: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.MetadataPayload? = nil,
                            organizationAdministration: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationAdministrationPayload? = nil,
                            organizationHooks: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationHooksPayload? = nil,
                            organizationPackages: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPackagesPayload? = nil,
                            organizationPlan: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationPlanPayload? = nil,
                            organizationProjects: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationProjectsPayload? = nil,
                            organizationSecrets: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSecretsPayload? = nil,
                            organizationSelfHostedRunners: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationSelfHostedRunnersPayload? = nil,
                            organizationUserBlocking: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.OrganizationUserBlockingPayload? = nil,
                            packages: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.PackagesPayload? = nil,
                            pages: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.PagesPayload? = nil,
                            pullRequests: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.PullRequestsPayload? = nil,
                            repositoryHooks: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryHooksPayload? = nil,
                            repositoryProjects: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.RepositoryProjectsPayload? = nil,
                            secretScanningAlerts: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretScanningAlertsPayload? = nil,
                            secrets: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.SecretsPayload? = nil,
                            securityEvents: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityEventsPayload? = nil,
                            securityScanningAlert: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.SecurityScanningAlertPayload? = nil,
                            singleFile: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.SingleFilePayload? = nil,
                            statuses: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.StatusesPayload? = nil,
                            teamDiscussions: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.TeamDiscussionsPayload? = nil,
                            vulnerabilityAlerts: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.VulnerabilityAlertsPayload? = nil,
                            workflows: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload.WorkflowsPayload? = nil
                        ) {
                            self.actions = actions
                            self.administration = administration
                            self.checks = checks
                            self.contentReferences = contentReferences
                            self.contents = contents
                            self.deployments = deployments
                            self.discussions = discussions
                            self.emails = emails
                            self.environments = environments
                            self.issues = issues
                            self.keys = keys
                            self.members = members
                            self.metadata = metadata
                            self.organizationAdministration = organizationAdministration
                            self.organizationHooks = organizationHooks
                            self.organizationPackages = organizationPackages
                            self.organizationPlan = organizationPlan
                            self.organizationProjects = organizationProjects
                            self.organizationSecrets = organizationSecrets
                            self.organizationSelfHostedRunners = organizationSelfHostedRunners
                            self.organizationUserBlocking = organizationUserBlocking
                            self.packages = packages
                            self.pages = pages
                            self.pullRequests = pullRequests
                            self.repositoryHooks = repositoryHooks
                            self.repositoryProjects = repositoryProjects
                            self.secretScanningAlerts = secretScanningAlerts
                            self.secrets = secrets
                            self.securityEvents = securityEvents
                            self.securityScanningAlert = securityScanningAlert
                            self.singleFile = singleFile
                            self.statuses = statuses
                            self.teamDiscussions = teamDiscussions
                            self.vulnerabilityAlerts = vulnerabilityAlerts
                            self.workflows = workflows
                        }
                        public enum CodingKeys: String, CodingKey {
                            case actions
                            case administration
                            case checks
                            case contentReferences = "content_references"
                            case contents
                            case deployments
                            case discussions
                            case emails
                            case environments
                            case issues
                            case keys
                            case members
                            case metadata
                            case organizationAdministration = "organization_administration"
                            case organizationHooks = "organization_hooks"
                            case organizationPackages = "organization_packages"
                            case organizationPlan = "organization_plan"
                            case organizationProjects = "organization_projects"
                            case organizationSecrets = "organization_secrets"
                            case organizationSelfHostedRunners = "organization_self_hosted_runners"
                            case organizationUserBlocking = "organization_user_blocking"
                            case packages
                            case pages
                            case pullRequests = "pull_requests"
                            case repositoryHooks = "repository_hooks"
                            case repositoryProjects = "repository_projects"
                            case secretScanningAlerts = "secret_scanning_alerts"
                            case secrets
                            case securityEvents = "security_events"
                            case securityScanningAlert = "security_scanning_alert"
                            case singleFile = "single_file"
                            case statuses
                            case teamDiscussions = "team_discussions"
                            case vulnerabilityAlerts = "vulnerability_alerts"
                            case workflows
                        }
                    }
                    /// The set of permissions for the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/permissions`.
                    public var permissions: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload?
                    /// The slug name of the GitHub app
                    ///
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/slug`.
                    public var slug: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app/updated_at`.
                    public var updatedAt: Swift.String?
                    /// Creates a new `PerformedViaGithubAppPayload`.
                    ///
                    /// - Parameters:
                    ///   - createdAt:
                    ///   - description:
                    ///   - events: The list of events for the GitHub app
                    ///   - externalUrl:
                    ///   - htmlUrl:
                    ///   - id: Unique identifier of the GitHub app
                    ///   - name: The name of the GitHub app
                    ///   - nodeId:
                    ///   - owner:
                    ///   - permissions: The set of permissions for the GitHub app
                    ///   - slug: The slug name of the GitHub app
                    ///   - updatedAt:
                    public init(
                        createdAt: Swift.String? = nil,
                        description: Swift.String? = nil,
                        events: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.EventsPayload? = nil,
                        externalUrl: Swift.String? = nil,
                        htmlUrl: Swift.String,
                        id: Swift.Int? = nil,
                        name: Swift.String,
                        nodeId: Swift.String,
                        owner: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.OwnerPayload? = nil,
                        permissions: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload.PermissionsPayload? = nil,
                        slug: Swift.String? = nil,
                        updatedAt: Swift.String? = nil
                    ) {
                        self.createdAt = createdAt
                        self.description = description
                        self.events = events
                        self.externalUrl = externalUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.name = name
                        self.nodeId = nodeId
                        self.owner = owner
                        self.permissions = permissions
                        self.slug = slug
                        self.updatedAt = updatedAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case createdAt = "created_at"
                        case description
                        case events
                        case externalUrl = "external_url"
                        case htmlUrl = "html_url"
                        case id
                        case name
                        case nodeId = "node_id"
                        case owner
                        case permissions
                        case slug
                        case updatedAt = "updated_at"
                    }
                }
                /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/performed_via_github_app`.
                public var performedViaGithubApp: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/repository_url`.
                public var repositoryUrl: Swift.String
                /// The new state. Can be `pending`, `success`, `failure`, or `error`.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/state`.
                public var state: Swift.String
                /// The optional link added to the status.
                ///
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/target_url`.
                public var targetUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/updated_at`.
                public var updatedAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status/url`.
                public var url: Swift.String
                /// Creates a new `DeploymentStatusPayload`.
                ///
                /// - Parameters:
                ///   - createdAt:
                ///   - creator:
                ///   - deploymentUrl:
                ///   - description: The optional human-readable description added to the status.
                ///   - environment:
                ///   - environmentUrl:
                ///   - id:
                ///   - logUrl:
                ///   - nodeId:
                ///   - performedViaGithubApp: GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
                ///   - repositoryUrl:
                ///   - state: The new state. Can be `pending`, `success`, `failure`, or `error`.
                ///   - targetUrl: The optional link added to the status.
                ///   - updatedAt:
                ///   - url:
                public init(
                    createdAt: Swift.String,
                    creator: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.CreatorPayload? = nil,
                    deploymentUrl: Swift.String,
                    description: Swift.String,
                    environment: Swift.String,
                    environmentUrl: Swift.String? = nil,
                    id: Swift.Int,
                    logUrl: Swift.String? = nil,
                    nodeId: Swift.String,
                    performedViaGithubApp: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload.PerformedViaGithubAppPayload? = nil,
                    repositoryUrl: Swift.String,
                    state: Swift.String,
                    targetUrl: Swift.String,
                    updatedAt: Swift.String,
                    url: Swift.String
                ) {
                    self.createdAt = createdAt
                    self.creator = creator
                    self.deploymentUrl = deploymentUrl
                    self.description = description
                    self.environment = environment
                    self.environmentUrl = environmentUrl
                    self.id = id
                    self.logUrl = logUrl
                    self.nodeId = nodeId
                    self.performedViaGithubApp = performedViaGithubApp
                    self.repositoryUrl = repositoryUrl
                    self.state = state
                    self.targetUrl = targetUrl
                    self.updatedAt = updatedAt
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case createdAt = "created_at"
                    case creator
                    case deploymentUrl = "deployment_url"
                    case description
                    case environment
                    case environmentUrl = "environment_url"
                    case id
                    case logUrl = "log_url"
                    case nodeId = "node_id"
                    case performedViaGithubApp = "performed_via_github_app"
                    case repositoryUrl = "repository_url"
                    case state
                    case targetUrl = "target_url"
                    case updatedAt = "updated_at"
                    case url
                }
            }
            /// The [deployment status](https://docs.github.com/en/rest/reference/deployments#list-deployment-statuses).
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/deployment_status`.
            public var deploymentStatus: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload
            /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/enterprise`.
            public var enterprise: Components.Schemas.Enterprise?
            /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/installation`.
            public var installation: Components.Schemas.SimpleInstallation?
            /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/organization`.
            public var organization: Components.Schemas.OrganizationSimple?
            /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/repository`.
            public var repository: Components.Schemas.Repository
            /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/sender`.
            public var sender: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow`.
            public struct WorkflowPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow/badge_url`.
                public var badgeUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow/created_at`.
                public var createdAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow/html_url`.
                public var htmlUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow/path`.
                public var path: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow/state`.
                public var state: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow/updated_at`.
                public var updatedAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow/url`.
                public var url: Swift.String
                /// Creates a new `WorkflowPayload`.
                ///
                /// - Parameters:
                ///   - badgeUrl:
                ///   - createdAt:
                ///   - htmlUrl:
                ///   - id:
                ///   - name:
                ///   - nodeId:
                ///   - path:
                ///   - state:
                ///   - updatedAt:
                ///   - url:
                public init(
                    badgeUrl: Swift.String,
                    createdAt: Swift.String,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    name: Swift.String,
                    nodeId: Swift.String,
                    path: Swift.String,
                    state: Swift.String,
                    updatedAt: Swift.String,
                    url: Swift.String
                ) {
                    self.badgeUrl = badgeUrl
                    self.createdAt = createdAt
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.name = name
                    self.nodeId = nodeId
                    self.path = path
                    self.state = state
                    self.updatedAt = updatedAt
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case badgeUrl = "badge_url"
                    case createdAt = "created_at"
                    case htmlUrl = "html_url"
                    case id
                    case name
                    case nodeId = "node_id"
                    case path
                    case state
                    case updatedAt = "updated_at"
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow`.
            public var workflow: Components.Schemas.WebhookDeploymentStatusCreated.WorkflowPayload?
            /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run`.
            public struct WorkflowRunPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/actor`.
                public struct ActorPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/actor/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/actor/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/actor/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/actor/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/actor/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/actor/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/actor/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/actor/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/actor/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/actor/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/actor/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/actor/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/actor/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/actor/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/actor/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/actor/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/actor/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/actor/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/actor/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/actor/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/actor/type`.
                    public var _type: Components.Schemas.WebhookDeploymentStatusCreated.WorkflowRunPayload.ActorPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/actor/url`.
                    public var url: Swift.String?
                    /// Creates a new `ActorPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookDeploymentStatusCreated.WorkflowRunPayload.ActorPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/actor`.
                public var actor: Components.Schemas.WebhookDeploymentStatusCreated.WorkflowRunPayload.ActorPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/artifacts_url`.
                public var artifactsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/cancel_url`.
                public var cancelUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/check_suite_id`.
                public var checkSuiteId: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/check_suite_node_id`.
                public var checkSuiteNodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/check_suite_url`.
                public var checkSuiteUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/conclusion`.
                @frozen public enum ConclusionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case success = "success"
                    case failure = "failure"
                    case neutral = "neutral"
                    case cancelled = "cancelled"
                    case timedOut = "timed_out"
                    case actionRequired = "action_required"
                    case stale = "stale"
                    case _empty_ = ""
                    case startupFailure = "startup_failure"
                }
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/conclusion`.
                public var conclusion: Components.Schemas.WebhookDeploymentStatusCreated.WorkflowRunPayload.ConclusionPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/created_at`.
                public var createdAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/display_title`.
                public var displayTitle: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/event`.
                public var event: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_branch`.
                public var headBranch: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_commit`.
                public var headCommit: OpenAPIRuntime.OpenAPIValueContainer?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository`.
                public struct HeadRepositoryPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/archive_url`.
                    public var archiveUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/assignees_url`.
                    public var assigneesUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/blobs_url`.
                    public var blobsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/branches_url`.
                    public var branchesUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/collaborators_url`.
                    public var collaboratorsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/comments_url`.
                    public var commentsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/commits_url`.
                    public var commitsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/compare_url`.
                    public var compareUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/contents_url`.
                    public var contentsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/contributors_url`.
                    public var contributorsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/deployments_url`.
                    public var deploymentsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/description`.
                    public var description: OpenAPIRuntime.OpenAPIValueContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/downloads_url`.
                    public var downloadsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/fork`.
                    public var fork: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/forks_url`.
                    public var forksUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/full_name`.
                    public var fullName: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/git_commits_url`.
                    public var gitCommitsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/git_refs_url`.
                    public var gitRefsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/git_tags_url`.
                    public var gitTagsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/hooks_url`.
                    public var hooksUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/id`.
                    public var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/issue_comment_url`.
                    public var issueCommentUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/issue_events_url`.
                    public var issueEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/issues_url`.
                    public var issuesUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/keys_url`.
                    public var keysUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/labels_url`.
                    public var labelsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/languages_url`.
                    public var languagesUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/merges_url`.
                    public var mergesUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/milestones_url`.
                    public var milestonesUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/notifications_url`.
                    public var notificationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/owner`.
                    public struct OwnerPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/owner/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/owner/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/owner/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/owner/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/owner/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/owner/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/owner/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/owner/id`.
                        public var id: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/owner/login`.
                        public var login: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/owner/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/owner/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/owner/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/owner/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/owner/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/owner/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/owner/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/owner/type`.
                        public var _type: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/owner/url`.
                        public var url: Swift.String?
                        /// Creates a new `OwnerPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int? = nil,
                            login: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/owner`.
                    public var owner: Components.Schemas.WebhookDeploymentStatusCreated.WorkflowRunPayload.HeadRepositoryPayload.OwnerPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/private`.
                    public var _private: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/pulls_url`.
                    public var pullsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/releases_url`.
                    public var releasesUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/stargazers_url`.
                    public var stargazersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/statuses_url`.
                    public var statusesUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/subscribers_url`.
                    public var subscribersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/subscription_url`.
                    public var subscriptionUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/tags_url`.
                    public var tagsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/teams_url`.
                    public var teamsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/trees_url`.
                    public var treesUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository/url`.
                    public var url: Swift.String?
                    /// Creates a new `HeadRepositoryPayload`.
                    ///
                    /// - Parameters:
                    ///   - archiveUrl:
                    ///   - assigneesUrl:
                    ///   - blobsUrl:
                    ///   - branchesUrl:
                    ///   - collaboratorsUrl:
                    ///   - commentsUrl:
                    ///   - commitsUrl:
                    ///   - compareUrl:
                    ///   - contentsUrl:
                    ///   - contributorsUrl:
                    ///   - deploymentsUrl:
                    ///   - description:
                    ///   - downloadsUrl:
                    ///   - eventsUrl:
                    ///   - fork:
                    ///   - forksUrl:
                    ///   - fullName:
                    ///   - gitCommitsUrl:
                    ///   - gitRefsUrl:
                    ///   - gitTagsUrl:
                    ///   - hooksUrl:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - issueCommentUrl:
                    ///   - issueEventsUrl:
                    ///   - issuesUrl:
                    ///   - keysUrl:
                    ///   - labelsUrl:
                    ///   - languagesUrl:
                    ///   - mergesUrl:
                    ///   - milestonesUrl:
                    ///   - name:
                    ///   - nodeId:
                    ///   - notificationsUrl:
                    ///   - owner:
                    ///   - _private:
                    ///   - pullsUrl:
                    ///   - releasesUrl:
                    ///   - stargazersUrl:
                    ///   - statusesUrl:
                    ///   - subscribersUrl:
                    ///   - subscriptionUrl:
                    ///   - tagsUrl:
                    ///   - teamsUrl:
                    ///   - treesUrl:
                    ///   - url:
                    public init(
                        archiveUrl: Swift.String? = nil,
                        assigneesUrl: Swift.String? = nil,
                        blobsUrl: Swift.String? = nil,
                        branchesUrl: Swift.String? = nil,
                        collaboratorsUrl: Swift.String? = nil,
                        commentsUrl: Swift.String? = nil,
                        commitsUrl: Swift.String? = nil,
                        compareUrl: Swift.String? = nil,
                        contentsUrl: Swift.String? = nil,
                        contributorsUrl: Swift.String? = nil,
                        deploymentsUrl: Swift.String? = nil,
                        description: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                        downloadsUrl: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        fork: Swift.Bool? = nil,
                        forksUrl: Swift.String? = nil,
                        fullName: Swift.String? = nil,
                        gitCommitsUrl: Swift.String? = nil,
                        gitRefsUrl: Swift.String? = nil,
                        gitTagsUrl: Swift.String? = nil,
                        hooksUrl: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int? = nil,
                        issueCommentUrl: Swift.String? = nil,
                        issueEventsUrl: Swift.String? = nil,
                        issuesUrl: Swift.String? = nil,
                        keysUrl: Swift.String? = nil,
                        labelsUrl: Swift.String? = nil,
                        languagesUrl: Swift.String? = nil,
                        mergesUrl: Swift.String? = nil,
                        milestonesUrl: Swift.String? = nil,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        notificationsUrl: Swift.String? = nil,
                        owner: Components.Schemas.WebhookDeploymentStatusCreated.WorkflowRunPayload.HeadRepositoryPayload.OwnerPayload? = nil,
                        _private: Swift.Bool? = nil,
                        pullsUrl: Swift.String? = nil,
                        releasesUrl: Swift.String? = nil,
                        stargazersUrl: Swift.String? = nil,
                        statusesUrl: Swift.String? = nil,
                        subscribersUrl: Swift.String? = nil,
                        subscriptionUrl: Swift.String? = nil,
                        tagsUrl: Swift.String? = nil,
                        teamsUrl: Swift.String? = nil,
                        treesUrl: Swift.String? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.archiveUrl = archiveUrl
                        self.assigneesUrl = assigneesUrl
                        self.blobsUrl = blobsUrl
                        self.branchesUrl = branchesUrl
                        self.collaboratorsUrl = collaboratorsUrl
                        self.commentsUrl = commentsUrl
                        self.commitsUrl = commitsUrl
                        self.compareUrl = compareUrl
                        self.contentsUrl = contentsUrl
                        self.contributorsUrl = contributorsUrl
                        self.deploymentsUrl = deploymentsUrl
                        self.description = description
                        self.downloadsUrl = downloadsUrl
                        self.eventsUrl = eventsUrl
                        self.fork = fork
                        self.forksUrl = forksUrl
                        self.fullName = fullName
                        self.gitCommitsUrl = gitCommitsUrl
                        self.gitRefsUrl = gitRefsUrl
                        self.gitTagsUrl = gitTagsUrl
                        self.hooksUrl = hooksUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.issueCommentUrl = issueCommentUrl
                        self.issueEventsUrl = issueEventsUrl
                        self.issuesUrl = issuesUrl
                        self.keysUrl = keysUrl
                        self.labelsUrl = labelsUrl
                        self.languagesUrl = languagesUrl
                        self.mergesUrl = mergesUrl
                        self.milestonesUrl = milestonesUrl
                        self.name = name
                        self.nodeId = nodeId
                        self.notificationsUrl = notificationsUrl
                        self.owner = owner
                        self._private = _private
                        self.pullsUrl = pullsUrl
                        self.releasesUrl = releasesUrl
                        self.stargazersUrl = stargazersUrl
                        self.statusesUrl = statusesUrl
                        self.subscribersUrl = subscribersUrl
                        self.subscriptionUrl = subscriptionUrl
                        self.tagsUrl = tagsUrl
                        self.teamsUrl = teamsUrl
                        self.treesUrl = treesUrl
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case archiveUrl = "archive_url"
                        case assigneesUrl = "assignees_url"
                        case blobsUrl = "blobs_url"
                        case branchesUrl = "branches_url"
                        case collaboratorsUrl = "collaborators_url"
                        case commentsUrl = "comments_url"
                        case commitsUrl = "commits_url"
                        case compareUrl = "compare_url"
                        case contentsUrl = "contents_url"
                        case contributorsUrl = "contributors_url"
                        case deploymentsUrl = "deployments_url"
                        case description
                        case downloadsUrl = "downloads_url"
                        case eventsUrl = "events_url"
                        case fork
                        case forksUrl = "forks_url"
                        case fullName = "full_name"
                        case gitCommitsUrl = "git_commits_url"
                        case gitRefsUrl = "git_refs_url"
                        case gitTagsUrl = "git_tags_url"
                        case hooksUrl = "hooks_url"
                        case htmlUrl = "html_url"
                        case id
                        case issueCommentUrl = "issue_comment_url"
                        case issueEventsUrl = "issue_events_url"
                        case issuesUrl = "issues_url"
                        case keysUrl = "keys_url"
                        case labelsUrl = "labels_url"
                        case languagesUrl = "languages_url"
                        case mergesUrl = "merges_url"
                        case milestonesUrl = "milestones_url"
                        case name
                        case nodeId = "node_id"
                        case notificationsUrl = "notifications_url"
                        case owner
                        case _private = "private"
                        case pullsUrl = "pulls_url"
                        case releasesUrl = "releases_url"
                        case stargazersUrl = "stargazers_url"
                        case statusesUrl = "statuses_url"
                        case subscribersUrl = "subscribers_url"
                        case subscriptionUrl = "subscription_url"
                        case tagsUrl = "tags_url"
                        case teamsUrl = "teams_url"
                        case treesUrl = "trees_url"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_repository`.
                public var headRepository: Components.Schemas.WebhookDeploymentStatusCreated.WorkflowRunPayload.HeadRepositoryPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/head_sha`.
                public var headSha: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/html_url`.
                public var htmlUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/jobs_url`.
                public var jobsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/logs_url`.
                public var logsUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/node_id`.
                public var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/path`.
                public var path: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/previous_attempt_url`.
                public var previousAttemptUrl: OpenAPIRuntime.OpenAPIValueContainer?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/PullRequestsPayload`.
                public struct PullRequestsPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/PullRequestsPayload/base`.
                    public struct BasePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/PullRequestsPayload/base/ref`.
                        public var ref: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/PullRequestsPayload/base/repo`.
                        public struct RepoPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/PullRequestsPayload/base/repo/id`.
                            public var id: Swift.Int
                            /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/PullRequestsPayload/base/repo/name`.
                            public var name: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/PullRequestsPayload/base/repo/url`.
                            public var url: Swift.String
                            /// Creates a new `RepoPayload`.
                            ///
                            /// - Parameters:
                            ///   - id:
                            ///   - name:
                            ///   - url:
                            public init(
                                id: Swift.Int,
                                name: Swift.String,
                                url: Swift.String
                            ) {
                                self.id = id
                                self.name = name
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case id
                                case name
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/PullRequestsPayload/base/repo`.
                        public var repo: Components.Schemas.WebhookDeploymentStatusCreated.WorkflowRunPayload.PullRequestsPayloadPayload.BasePayload.RepoPayload
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/PullRequestsPayload/base/sha`.
                        public var sha: Swift.String
                        /// Creates a new `BasePayload`.
                        ///
                        /// - Parameters:
                        ///   - ref:
                        ///   - repo:
                        ///   - sha:
                        public init(
                            ref: Swift.String,
                            repo: Components.Schemas.WebhookDeploymentStatusCreated.WorkflowRunPayload.PullRequestsPayloadPayload.BasePayload.RepoPayload,
                            sha: Swift.String
                        ) {
                            self.ref = ref
                            self.repo = repo
                            self.sha = sha
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ref
                            case repo
                            case sha
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/PullRequestsPayload/base`.
                    public var base: Components.Schemas.WebhookDeploymentStatusCreated.WorkflowRunPayload.PullRequestsPayloadPayload.BasePayload
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/PullRequestsPayload/head`.
                    public struct HeadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/PullRequestsPayload/head/ref`.
                        public var ref: Swift.String
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/PullRequestsPayload/head/repo`.
                        public struct RepoPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/PullRequestsPayload/head/repo/id`.
                            public var id: Swift.Int
                            /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/PullRequestsPayload/head/repo/name`.
                            public var name: Swift.String
                            /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/PullRequestsPayload/head/repo/url`.
                            public var url: Swift.String
                            /// Creates a new `RepoPayload`.
                            ///
                            /// - Parameters:
                            ///   - id:
                            ///   - name:
                            ///   - url:
                            public init(
                                id: Swift.Int,
                                name: Swift.String,
                                url: Swift.String
                            ) {
                                self.id = id
                                self.name = name
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case id
                                case name
                                case url
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/PullRequestsPayload/head/repo`.
                        public var repo: Components.Schemas.WebhookDeploymentStatusCreated.WorkflowRunPayload.PullRequestsPayloadPayload.HeadPayload.RepoPayload
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/PullRequestsPayload/head/sha`.
                        public var sha: Swift.String
                        /// Creates a new `HeadPayload`.
                        ///
                        /// - Parameters:
                        ///   - ref:
                        ///   - repo:
                        ///   - sha:
                        public init(
                            ref: Swift.String,
                            repo: Components.Schemas.WebhookDeploymentStatusCreated.WorkflowRunPayload.PullRequestsPayloadPayload.HeadPayload.RepoPayload,
                            sha: Swift.String
                        ) {
                            self.ref = ref
                            self.repo = repo
                            self.sha = sha
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ref
                            case repo
                            case sha
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/PullRequestsPayload/head`.
                    public var head: Components.Schemas.WebhookDeploymentStatusCreated.WorkflowRunPayload.PullRequestsPayloadPayload.HeadPayload
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/PullRequestsPayload/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/PullRequestsPayload/number`.
                    public var number: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/PullRequestsPayload/url`.
                    public var url: Swift.String
                    /// Creates a new `PullRequestsPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - base:
                    ///   - head:
                    ///   - id:
                    ///   - number:
                    ///   - url:
                    public init(
                        base: Components.Schemas.WebhookDeploymentStatusCreated.WorkflowRunPayload.PullRequestsPayloadPayload.BasePayload,
                        head: Components.Schemas.WebhookDeploymentStatusCreated.WorkflowRunPayload.PullRequestsPayloadPayload.HeadPayload,
                        id: Swift.Int,
                        number: Swift.Int,
                        url: Swift.String
                    ) {
                        self.base = base
                        self.head = head
                        self.id = id
                        self.number = number
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case base
                        case head
                        case id
                        case number
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/pull_requests`.
                public typealias PullRequestsPayload = [Components.Schemas.WebhookDeploymentStatusCreated.WorkflowRunPayload.PullRequestsPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/pull_requests`.
                public var pullRequests: Components.Schemas.WebhookDeploymentStatusCreated.WorkflowRunPayload.PullRequestsPayload
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/ReferencedWorkflowsPayload`.
                public struct ReferencedWorkflowsPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/ReferencedWorkflowsPayload/path`.
                    public var path: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/ReferencedWorkflowsPayload/ref`.
                    public var ref: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/ReferencedWorkflowsPayload/sha`.
                    public var sha: Swift.String
                    /// Creates a new `ReferencedWorkflowsPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - path:
                    ///   - ref:
                    ///   - sha:
                    public init(
                        path: Swift.String,
                        ref: Swift.String? = nil,
                        sha: Swift.String
                    ) {
                        self.path = path
                        self.ref = ref
                        self.sha = sha
                    }
                    public enum CodingKeys: String, CodingKey {
                        case path
                        case ref
                        case sha
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/referenced_workflows`.
                public typealias ReferencedWorkflowsPayload = [Components.Schemas.WebhookDeploymentStatusCreated.WorkflowRunPayload.ReferencedWorkflowsPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/referenced_workflows`.
                public var referencedWorkflows: Components.Schemas.WebhookDeploymentStatusCreated.WorkflowRunPayload.ReferencedWorkflowsPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository`.
                public struct RepositoryPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/archive_url`.
                    public var archiveUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/assignees_url`.
                    public var assigneesUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/blobs_url`.
                    public var blobsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/branches_url`.
                    public var branchesUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/collaborators_url`.
                    public var collaboratorsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/comments_url`.
                    public var commentsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/commits_url`.
                    public var commitsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/compare_url`.
                    public var compareUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/contents_url`.
                    public var contentsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/contributors_url`.
                    public var contributorsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/deployments_url`.
                    public var deploymentsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/description`.
                    public var description: OpenAPIRuntime.OpenAPIValueContainer?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/downloads_url`.
                    public var downloadsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/fork`.
                    public var fork: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/forks_url`.
                    public var forksUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/full_name`.
                    public var fullName: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/git_commits_url`.
                    public var gitCommitsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/git_refs_url`.
                    public var gitRefsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/git_tags_url`.
                    public var gitTagsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/hooks_url`.
                    public var hooksUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/id`.
                    public var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/issue_comment_url`.
                    public var issueCommentUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/issue_events_url`.
                    public var issueEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/issues_url`.
                    public var issuesUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/keys_url`.
                    public var keysUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/labels_url`.
                    public var labelsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/languages_url`.
                    public var languagesUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/merges_url`.
                    public var mergesUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/milestones_url`.
                    public var milestonesUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/notifications_url`.
                    public var notificationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/owner`.
                    public struct OwnerPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/owner/avatar_url`.
                        public var avatarUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/owner/events_url`.
                        public var eventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/owner/followers_url`.
                        public var followersUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/owner/following_url`.
                        public var followingUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/owner/gists_url`.
                        public var gistsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/owner/gravatar_id`.
                        public var gravatarId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/owner/html_url`.
                        public var htmlUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/owner/id`.
                        public var id: Swift.Int?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/owner/login`.
                        public var login: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/owner/node_id`.
                        public var nodeId: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/owner/organizations_url`.
                        public var organizationsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/owner/received_events_url`.
                        public var receivedEventsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/owner/repos_url`.
                        public var reposUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/owner/site_admin`.
                        public var siteAdmin: Swift.Bool?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/owner/starred_url`.
                        public var starredUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/owner/subscriptions_url`.
                        public var subscriptionsUrl: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/owner/type`.
                        public var _type: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/owner/url`.
                        public var url: Swift.String?
                        /// Creates a new `OwnerPayload`.
                        ///
                        /// - Parameters:
                        ///   - avatarUrl:
                        ///   - eventsUrl:
                        ///   - followersUrl:
                        ///   - followingUrl:
                        ///   - gistsUrl:
                        ///   - gravatarId:
                        ///   - htmlUrl:
                        ///   - id:
                        ///   - login:
                        ///   - nodeId:
                        ///   - organizationsUrl:
                        ///   - receivedEventsUrl:
                        ///   - reposUrl:
                        ///   - siteAdmin:
                        ///   - starredUrl:
                        ///   - subscriptionsUrl:
                        ///   - _type:
                        ///   - url:
                        public init(
                            avatarUrl: Swift.String? = nil,
                            eventsUrl: Swift.String? = nil,
                            followersUrl: Swift.String? = nil,
                            followingUrl: Swift.String? = nil,
                            gistsUrl: Swift.String? = nil,
                            gravatarId: Swift.String? = nil,
                            htmlUrl: Swift.String? = nil,
                            id: Swift.Int? = nil,
                            login: Swift.String? = nil,
                            nodeId: Swift.String? = nil,
                            organizationsUrl: Swift.String? = nil,
                            receivedEventsUrl: Swift.String? = nil,
                            reposUrl: Swift.String? = nil,
                            siteAdmin: Swift.Bool? = nil,
                            starredUrl: Swift.String? = nil,
                            subscriptionsUrl: Swift.String? = nil,
                            _type: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.avatarUrl = avatarUrl
                            self.eventsUrl = eventsUrl
                            self.followersUrl = followersUrl
                            self.followingUrl = followingUrl
                            self.gistsUrl = gistsUrl
                            self.gravatarId = gravatarId
                            self.htmlUrl = htmlUrl
                            self.id = id
                            self.login = login
                            self.nodeId = nodeId
                            self.organizationsUrl = organizationsUrl
                            self.receivedEventsUrl = receivedEventsUrl
                            self.reposUrl = reposUrl
                            self.siteAdmin = siteAdmin
                            self.starredUrl = starredUrl
                            self.subscriptionsUrl = subscriptionsUrl
                            self._type = _type
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case avatarUrl = "avatar_url"
                            case eventsUrl = "events_url"
                            case followersUrl = "followers_url"
                            case followingUrl = "following_url"
                            case gistsUrl = "gists_url"
                            case gravatarId = "gravatar_id"
                            case htmlUrl = "html_url"
                            case id
                            case login
                            case nodeId = "node_id"
                            case organizationsUrl = "organizations_url"
                            case receivedEventsUrl = "received_events_url"
                            case reposUrl = "repos_url"
                            case siteAdmin = "site_admin"
                            case starredUrl = "starred_url"
                            case subscriptionsUrl = "subscriptions_url"
                            case _type = "type"
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/owner`.
                    public var owner: Components.Schemas.WebhookDeploymentStatusCreated.WorkflowRunPayload.RepositoryPayload.OwnerPayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/private`.
                    public var _private: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/pulls_url`.
                    public var pullsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/releases_url`.
                    public var releasesUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/stargazers_url`.
                    public var stargazersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/statuses_url`.
                    public var statusesUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/subscribers_url`.
                    public var subscribersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/subscription_url`.
                    public var subscriptionUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/tags_url`.
                    public var tagsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/teams_url`.
                    public var teamsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/trees_url`.
                    public var treesUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository/url`.
                    public var url: Swift.String?
                    /// Creates a new `RepositoryPayload`.
                    ///
                    /// - Parameters:
                    ///   - archiveUrl:
                    ///   - assigneesUrl:
                    ///   - blobsUrl:
                    ///   - branchesUrl:
                    ///   - collaboratorsUrl:
                    ///   - commentsUrl:
                    ///   - commitsUrl:
                    ///   - compareUrl:
                    ///   - contentsUrl:
                    ///   - contributorsUrl:
                    ///   - deploymentsUrl:
                    ///   - description:
                    ///   - downloadsUrl:
                    ///   - eventsUrl:
                    ///   - fork:
                    ///   - forksUrl:
                    ///   - fullName:
                    ///   - gitCommitsUrl:
                    ///   - gitRefsUrl:
                    ///   - gitTagsUrl:
                    ///   - hooksUrl:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - issueCommentUrl:
                    ///   - issueEventsUrl:
                    ///   - issuesUrl:
                    ///   - keysUrl:
                    ///   - labelsUrl:
                    ///   - languagesUrl:
                    ///   - mergesUrl:
                    ///   - milestonesUrl:
                    ///   - name:
                    ///   - nodeId:
                    ///   - notificationsUrl:
                    ///   - owner:
                    ///   - _private:
                    ///   - pullsUrl:
                    ///   - releasesUrl:
                    ///   - stargazersUrl:
                    ///   - statusesUrl:
                    ///   - subscribersUrl:
                    ///   - subscriptionUrl:
                    ///   - tagsUrl:
                    ///   - teamsUrl:
                    ///   - treesUrl:
                    ///   - url:
                    public init(
                        archiveUrl: Swift.String? = nil,
                        assigneesUrl: Swift.String? = nil,
                        blobsUrl: Swift.String? = nil,
                        branchesUrl: Swift.String? = nil,
                        collaboratorsUrl: Swift.String? = nil,
                        commentsUrl: Swift.String? = nil,
                        commitsUrl: Swift.String? = nil,
                        compareUrl: Swift.String? = nil,
                        contentsUrl: Swift.String? = nil,
                        contributorsUrl: Swift.String? = nil,
                        deploymentsUrl: Swift.String? = nil,
                        description: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                        downloadsUrl: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        fork: Swift.Bool? = nil,
                        forksUrl: Swift.String? = nil,
                        fullName: Swift.String? = nil,
                        gitCommitsUrl: Swift.String? = nil,
                        gitRefsUrl: Swift.String? = nil,
                        gitTagsUrl: Swift.String? = nil,
                        hooksUrl: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int? = nil,
                        issueCommentUrl: Swift.String? = nil,
                        issueEventsUrl: Swift.String? = nil,
                        issuesUrl: Swift.String? = nil,
                        keysUrl: Swift.String? = nil,
                        labelsUrl: Swift.String? = nil,
                        languagesUrl: Swift.String? = nil,
                        mergesUrl: Swift.String? = nil,
                        milestonesUrl: Swift.String? = nil,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        notificationsUrl: Swift.String? = nil,
                        owner: Components.Schemas.WebhookDeploymentStatusCreated.WorkflowRunPayload.RepositoryPayload.OwnerPayload? = nil,
                        _private: Swift.Bool? = nil,
                        pullsUrl: Swift.String? = nil,
                        releasesUrl: Swift.String? = nil,
                        stargazersUrl: Swift.String? = nil,
                        statusesUrl: Swift.String? = nil,
                        subscribersUrl: Swift.String? = nil,
                        subscriptionUrl: Swift.String? = nil,
                        tagsUrl: Swift.String? = nil,
                        teamsUrl: Swift.String? = nil,
                        treesUrl: Swift.String? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.archiveUrl = archiveUrl
                        self.assigneesUrl = assigneesUrl
                        self.blobsUrl = blobsUrl
                        self.branchesUrl = branchesUrl
                        self.collaboratorsUrl = collaboratorsUrl
                        self.commentsUrl = commentsUrl
                        self.commitsUrl = commitsUrl
                        self.compareUrl = compareUrl
                        self.contentsUrl = contentsUrl
                        self.contributorsUrl = contributorsUrl
                        self.deploymentsUrl = deploymentsUrl
                        self.description = description
                        self.downloadsUrl = downloadsUrl
                        self.eventsUrl = eventsUrl
                        self.fork = fork
                        self.forksUrl = forksUrl
                        self.fullName = fullName
                        self.gitCommitsUrl = gitCommitsUrl
                        self.gitRefsUrl = gitRefsUrl
                        self.gitTagsUrl = gitTagsUrl
                        self.hooksUrl = hooksUrl
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.issueCommentUrl = issueCommentUrl
                        self.issueEventsUrl = issueEventsUrl
                        self.issuesUrl = issuesUrl
                        self.keysUrl = keysUrl
                        self.labelsUrl = labelsUrl
                        self.languagesUrl = languagesUrl
                        self.mergesUrl = mergesUrl
                        self.milestonesUrl = milestonesUrl
                        self.name = name
                        self.nodeId = nodeId
                        self.notificationsUrl = notificationsUrl
                        self.owner = owner
                        self._private = _private
                        self.pullsUrl = pullsUrl
                        self.releasesUrl = releasesUrl
                        self.stargazersUrl = stargazersUrl
                        self.statusesUrl = statusesUrl
                        self.subscribersUrl = subscribersUrl
                        self.subscriptionUrl = subscriptionUrl
                        self.tagsUrl = tagsUrl
                        self.teamsUrl = teamsUrl
                        self.treesUrl = treesUrl
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case archiveUrl = "archive_url"
                        case assigneesUrl = "assignees_url"
                        case blobsUrl = "blobs_url"
                        case branchesUrl = "branches_url"
                        case collaboratorsUrl = "collaborators_url"
                        case commentsUrl = "comments_url"
                        case commitsUrl = "commits_url"
                        case compareUrl = "compare_url"
                        case contentsUrl = "contents_url"
                        case contributorsUrl = "contributors_url"
                        case deploymentsUrl = "deployments_url"
                        case description
                        case downloadsUrl = "downloads_url"
                        case eventsUrl = "events_url"
                        case fork
                        case forksUrl = "forks_url"
                        case fullName = "full_name"
                        case gitCommitsUrl = "git_commits_url"
                        case gitRefsUrl = "git_refs_url"
                        case gitTagsUrl = "git_tags_url"
                        case hooksUrl = "hooks_url"
                        case htmlUrl = "html_url"
                        case id
                        case issueCommentUrl = "issue_comment_url"
                        case issueEventsUrl = "issue_events_url"
                        case issuesUrl = "issues_url"
                        case keysUrl = "keys_url"
                        case labelsUrl = "labels_url"
                        case languagesUrl = "languages_url"
                        case mergesUrl = "merges_url"
                        case milestonesUrl = "milestones_url"
                        case name
                        case nodeId = "node_id"
                        case notificationsUrl = "notifications_url"
                        case owner
                        case _private = "private"
                        case pullsUrl = "pulls_url"
                        case releasesUrl = "releases_url"
                        case stargazersUrl = "stargazers_url"
                        case statusesUrl = "statuses_url"
                        case subscribersUrl = "subscribers_url"
                        case subscriptionUrl = "subscription_url"
                        case tagsUrl = "tags_url"
                        case teamsUrl = "teams_url"
                        case treesUrl = "trees_url"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/repository`.
                public var repository: Components.Schemas.WebhookDeploymentStatusCreated.WorkflowRunPayload.RepositoryPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/rerun_url`.
                public var rerunUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/run_attempt`.
                public var runAttempt: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/run_number`.
                public var runNumber: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/run_started_at`.
                public var runStartedAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/status`.
                @frozen public enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case requested = "requested"
                    case inProgress = "in_progress"
                    case completed = "completed"
                    case queued = "queued"
                    case waiting = "waiting"
                    case pending = "pending"
                }
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/status`.
                public var status: Components.Schemas.WebhookDeploymentStatusCreated.WorkflowRunPayload.StatusPayload
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/triggering_actor`.
                public struct TriggeringActorPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/triggering_actor/avatar_url`.
                    public var avatarUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/triggering_actor/deleted`.
                    public var deleted: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/triggering_actor/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/triggering_actor/events_url`.
                    public var eventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/triggering_actor/followers_url`.
                    public var followersUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/triggering_actor/following_url`.
                    public var followingUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/triggering_actor/gists_url`.
                    public var gistsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/triggering_actor/gravatar_id`.
                    public var gravatarId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/triggering_actor/html_url`.
                    public var htmlUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/triggering_actor/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/triggering_actor/login`.
                    public var login: Swift.String
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/triggering_actor/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/triggering_actor/node_id`.
                    public var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/triggering_actor/organizations_url`.
                    public var organizationsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/triggering_actor/received_events_url`.
                    public var receivedEventsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/triggering_actor/repos_url`.
                    public var reposUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/triggering_actor/site_admin`.
                    public var siteAdmin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/triggering_actor/starred_url`.
                    public var starredUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/triggering_actor/subscriptions_url`.
                    public var subscriptionsUrl: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/triggering_actor/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bot = "Bot"
                        case user = "User"
                        case organization = "Organization"
                    }
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/triggering_actor/type`.
                    public var _type: Components.Schemas.WebhookDeploymentStatusCreated.WorkflowRunPayload.TriggeringActorPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/triggering_actor/url`.
                    public var url: Swift.String?
                    /// Creates a new `TriggeringActorPayload`.
                    ///
                    /// - Parameters:
                    ///   - avatarUrl:
                    ///   - deleted:
                    ///   - email:
                    ///   - eventsUrl:
                    ///   - followersUrl:
                    ///   - followingUrl:
                    ///   - gistsUrl:
                    ///   - gravatarId:
                    ///   - htmlUrl:
                    ///   - id:
                    ///   - login:
                    ///   - name:
                    ///   - nodeId:
                    ///   - organizationsUrl:
                    ///   - receivedEventsUrl:
                    ///   - reposUrl:
                    ///   - siteAdmin:
                    ///   - starredUrl:
                    ///   - subscriptionsUrl:
                    ///   - _type:
                    ///   - url:
                    public init(
                        avatarUrl: Swift.String? = nil,
                        deleted: Swift.Bool? = nil,
                        email: Swift.String? = nil,
                        eventsUrl: Swift.String? = nil,
                        followersUrl: Swift.String? = nil,
                        followingUrl: Swift.String? = nil,
                        gistsUrl: Swift.String? = nil,
                        gravatarId: Swift.String? = nil,
                        htmlUrl: Swift.String? = nil,
                        id: Swift.Int,
                        login: Swift.String,
                        name: Swift.String? = nil,
                        nodeId: Swift.String? = nil,
                        organizationsUrl: Swift.String? = nil,
                        receivedEventsUrl: Swift.String? = nil,
                        reposUrl: Swift.String? = nil,
                        siteAdmin: Swift.Bool? = nil,
                        starredUrl: Swift.String? = nil,
                        subscriptionsUrl: Swift.String? = nil,
                        _type: Components.Schemas.WebhookDeploymentStatusCreated.WorkflowRunPayload.TriggeringActorPayload._TypePayload? = nil,
                        url: Swift.String? = nil
                    ) {
                        self.avatarUrl = avatarUrl
                        self.deleted = deleted
                        self.email = email
                        self.eventsUrl = eventsUrl
                        self.followersUrl = followersUrl
                        self.followingUrl = followingUrl
                        self.gistsUrl = gistsUrl
                        self.gravatarId = gravatarId
                        self.htmlUrl = htmlUrl
                        self.id = id
                        self.login = login
                        self.name = name
                        self.nodeId = nodeId
                        self.organizationsUrl = organizationsUrl
                        self.receivedEventsUrl = receivedEventsUrl
                        self.reposUrl = reposUrl
                        self.siteAdmin = siteAdmin
                        self.starredUrl = starredUrl
                        self.subscriptionsUrl = subscriptionsUrl
                        self._type = _type
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case avatarUrl = "avatar_url"
                        case deleted
                        case email
                        case eventsUrl = "events_url"
                        case followersUrl = "followers_url"
                        case followingUrl = "following_url"
                        case gistsUrl = "gists_url"
                        case gravatarId = "gravatar_id"
                        case htmlUrl = "html_url"
                        case id
                        case login
                        case name
                        case nodeId = "node_id"
                        case organizationsUrl = "organizations_url"
                        case receivedEventsUrl = "received_events_url"
                        case reposUrl = "repos_url"
                        case siteAdmin = "site_admin"
                        case starredUrl = "starred_url"
                        case subscriptionsUrl = "subscriptions_url"
                        case _type = "type"
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/triggering_actor`.
                public var triggeringActor: Components.Schemas.WebhookDeploymentStatusCreated.WorkflowRunPayload.TriggeringActorPayload?
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/updated_at`.
                public var updatedAt: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/workflow_id`.
                public var workflowId: Swift.Int
                /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run/workflow_url`.
                public var workflowUrl: Swift.String?
                /// Creates a new `WorkflowRunPayload`.
                ///
                /// - Parameters:
                ///   - actor:
                ///   - artifactsUrl:
                ///   - cancelUrl:
                ///   - checkSuiteId:
                ///   - checkSuiteNodeId:
                ///   - checkSuiteUrl:
                ///   - conclusion:
                ///   - createdAt:
                ///   - displayTitle:
                ///   - event:
                ///   - headBranch:
                ///   - headCommit:
                ///   - headRepository:
                ///   - headSha:
                ///   - htmlUrl:
                ///   - id:
                ///   - jobsUrl:
                ///   - logsUrl:
                ///   - name:
                ///   - nodeId:
                ///   - path:
                ///   - previousAttemptUrl:
                ///   - pullRequests:
                ///   - referencedWorkflows:
                ///   - repository:
                ///   - rerunUrl:
                ///   - runAttempt:
                ///   - runNumber:
                ///   - runStartedAt:
                ///   - status:
                ///   - triggeringActor:
                ///   - updatedAt:
                ///   - url:
                ///   - workflowId:
                ///   - workflowUrl:
                public init(
                    actor: Components.Schemas.WebhookDeploymentStatusCreated.WorkflowRunPayload.ActorPayload? = nil,
                    artifactsUrl: Swift.String? = nil,
                    cancelUrl: Swift.String? = nil,
                    checkSuiteId: Swift.Int,
                    checkSuiteNodeId: Swift.String,
                    checkSuiteUrl: Swift.String? = nil,
                    conclusion: Components.Schemas.WebhookDeploymentStatusCreated.WorkflowRunPayload.ConclusionPayload? = nil,
                    createdAt: Swift.String,
                    displayTitle: Swift.String,
                    event: Swift.String,
                    headBranch: Swift.String,
                    headCommit: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                    headRepository: Components.Schemas.WebhookDeploymentStatusCreated.WorkflowRunPayload.HeadRepositoryPayload? = nil,
                    headSha: Swift.String,
                    htmlUrl: Swift.String,
                    id: Swift.Int,
                    jobsUrl: Swift.String? = nil,
                    logsUrl: Swift.String? = nil,
                    name: Swift.String,
                    nodeId: Swift.String,
                    path: Swift.String,
                    previousAttemptUrl: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                    pullRequests: Components.Schemas.WebhookDeploymentStatusCreated.WorkflowRunPayload.PullRequestsPayload,
                    referencedWorkflows: Components.Schemas.WebhookDeploymentStatusCreated.WorkflowRunPayload.ReferencedWorkflowsPayload? = nil,
                    repository: Components.Schemas.WebhookDeploymentStatusCreated.WorkflowRunPayload.RepositoryPayload? = nil,
                    rerunUrl: Swift.String? = nil,
                    runAttempt: Swift.Int,
                    runNumber: Swift.Int,
                    runStartedAt: Swift.String,
                    status: Components.Schemas.WebhookDeploymentStatusCreated.WorkflowRunPayload.StatusPayload,
                    triggeringActor: Components.Schemas.WebhookDeploymentStatusCreated.WorkflowRunPayload.TriggeringActorPayload? = nil,
                    updatedAt: Swift.String,
                    url: Swift.String,
                    workflowId: Swift.Int,
                    workflowUrl: Swift.String? = nil
                ) {
                    self.actor = actor
                    self.artifactsUrl = artifactsUrl
                    self.cancelUrl = cancelUrl
                    self.checkSuiteId = checkSuiteId
                    self.checkSuiteNodeId = checkSuiteNodeId
                    self.checkSuiteUrl = checkSuiteUrl
                    self.conclusion = conclusion
                    self.createdAt = createdAt
                    self.displayTitle = displayTitle
                    self.event = event
                    self.headBranch = headBranch
                    self.headCommit = headCommit
                    self.headRepository = headRepository
                    self.headSha = headSha
                    self.htmlUrl = htmlUrl
                    self.id = id
                    self.jobsUrl = jobsUrl
                    self.logsUrl = logsUrl
                    self.name = name
                    self.nodeId = nodeId
                    self.path = path
                    self.previousAttemptUrl = previousAttemptUrl
                    self.pullRequests = pullRequests
                    self.referencedWorkflows = referencedWorkflows
                    self.repository = repository
                    self.rerunUrl = rerunUrl
                    self.runAttempt = runAttempt
                    self.runNumber = runNumber
                    self.runStartedAt = runStartedAt
                    self.status = status
                    self.triggeringActor = triggeringActor
                    self.updatedAt = updatedAt
                    self.url = url
                    self.workflowId = workflowId
                    self.workflowUrl = workflowUrl
                }
                public enum CodingKeys: String, CodingKey {
                    case actor
                    case artifactsUrl = "artifacts_url"
                    case cancelUrl = "cancel_url"
                    case checkSuiteId = "check_suite_id"
                    case checkSuiteNodeId = "check_suite_node_id"
                    case checkSuiteUrl = "check_suite_url"
                    case conclusion
                    case createdAt = "created_at"
                    case displayTitle = "display_title"
                    case event
                    case headBranch = "head_branch"
                    case headCommit = "head_commit"
                    case headRepository = "head_repository"
                    case headSha = "head_sha"
                    case htmlUrl = "html_url"
                    case id
                    case jobsUrl = "jobs_url"
                    case logsUrl = "logs_url"
                    case name
                    case nodeId = "node_id"
                    case path
                    case previousAttemptUrl = "previous_attempt_url"
                    case pullRequests = "pull_requests"
                    case referencedWorkflows = "referenced_workflows"
                    case repository
                    case rerunUrl = "rerun_url"
                    case runAttempt = "run_attempt"
                    case runNumber = "run_number"
                    case runStartedAt = "run_started_at"
                    case status
                    case triggeringActor = "triggering_actor"
                    case updatedAt = "updated_at"
                    case url
                    case workflowId = "workflow_id"
                    case workflowUrl = "workflow_url"
                }
            }
            /// - Remark: Generated from `#/components/schemas/webhook-deployment-status-created/workflow_run`.
            public var workflowRun: Components.Schemas.WebhookDeploymentStatusCreated.WorkflowRunPayload?
            /// Creates a new `WebhookDeploymentStatusCreated`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - checkRun:
            ///   - deployment: The [deployment](https://docs.github.com/en/rest/reference/deployments#list-deployments).
            ///   - deploymentStatus: The [deployment status](https://docs.github.com/en/rest/reference/deployments#list-deployment-statuses).
            ///   - enterprise:
            ///   - installation:
            ///   - organization:
            ///   - repository:
            ///   - sender:
            ///   - workflow:
            ///   - workflowRun:
            public init(
                action: Components.Schemas.WebhookDeploymentStatusCreated.ActionPayload,
                checkRun: Components.Schemas.WebhookDeploymentStatusCreated.CheckRunPayload? = nil,
                deployment: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentPayload,
                deploymentStatus: Components.Schemas.WebhookDeploymentStatusCreated.DeploymentStatusPayload,
                enterprise: Components.Schemas.Enterprise? = nil,
                installation: Components.Schemas.SimpleInstallation? = nil,
                organization: Components.Schemas.OrganizationSimple? = nil,
                repository: Components.Schemas.Repository,
                sender: Components.Schemas.SimpleUser,
                workflow: Components.Schemas.WebhookDeploymentStatusCreated.WorkflowPayload? = nil,
                workflowRun: Components.Schemas.WebhookDeploymentStatusCreated.WorkflowRunPayload? = nil
            ) {
                self.action = action
                self.checkRun = checkRun
                self.deployment = deployment
                self.deploymentStatus = deploymentStatus
                self.enterprise = enterprise
                self.installation = installation
                self.organization = organization
                self.repository = repository
                self.sender = sender
                self.workflow = workflow
                self.workflowRun = workflowRun
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case checkRun = "check_run"
                case deployment
                case deploymentStatus = "deployment_status"
                case enterprise
                case installation
                case organization
                case repository
                case sender
                case workflow
                case workflowRun = "workflow_run"
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Deployment created
    ///
    /// - Remark: HTTP `POST /deployment-created`.
    /// - Remark: Generated from `#/paths//deployment-created/post(deployment/created)`.
    public enum DeploymentCreated {
        public static let id: Swift.String = "deployment/created"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/deployment-created/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deployment-created/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/deployment-created/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/deployment-created/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/deployment-created/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/deployment-created/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/deployment-created/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/deployment-created/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.DeploymentCreated.Input.Headers
            /// - Remark: Generated from `#/paths/deployment-created/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deployment-created/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookDeploymentCreated)
            }
            public var body: Operations.DeploymentCreated.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.DeploymentCreated.Input.Headers = .init(),
                body: Operations.DeploymentCreated.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//deployment-created/post(deployment/created)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DeploymentCreated.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//deployment-created/post(deployment/created)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DeploymentCreated.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Deployment status created
    ///
    /// - Remark: HTTP `POST /deployment-status-created`.
    /// - Remark: Generated from `#/paths//deployment-status-created/post(deployment-status/created)`.
    public enum DeploymentStatusCreated {
        public static let id: Swift.String = "deployment-status/created"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/deployment-status-created/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deployment-status-created/POST/header/User-Agent`.
                public var userAgent: Swift.String?
                /// - Remark: Generated from `#/paths/deployment-status-created/POST/header/X-Github-Hook-Id`.
                public var xGithubHookId: Swift.String?
                /// - Remark: Generated from `#/paths/deployment-status-created/POST/header/X-Github-Event`.
                public var xGithubEvent: Swift.String?
                /// - Remark: Generated from `#/paths/deployment-status-created/POST/header/X-Github-Hook-Installation-Target-Id`.
                public var xGithubHookInstallationTargetId: Swift.String?
                /// - Remark: Generated from `#/paths/deployment-status-created/POST/header/X-Github-Hook-Installation-Target-Type`.
                public var xGithubHookInstallationTargetType: Swift.String?
                /// - Remark: Generated from `#/paths/deployment-status-created/POST/header/X-GitHub-Delivery`.
                public var xGitHubDelivery: Swift.String?
                /// - Remark: Generated from `#/paths/deployment-status-created/POST/header/X-Hub-Signature-256`.
                public var xHubSignature256: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - userAgent:
                ///   - xGithubHookId:
                ///   - xGithubEvent:
                ///   - xGithubHookInstallationTargetId:
                ///   - xGithubHookInstallationTargetType:
                ///   - xGitHubDelivery:
                ///   - xHubSignature256:
                public init(
                    userAgent: Swift.String? = nil,
                    xGithubHookId: Swift.String? = nil,
                    xGithubEvent: Swift.String? = nil,
                    xGithubHookInstallationTargetId: Swift.String? = nil,
                    xGithubHookInstallationTargetType: Swift.String? = nil,
                    xGitHubDelivery: Swift.String? = nil,
                    xHubSignature256: Swift.String? = nil
                ) {
                    self.userAgent = userAgent
                    self.xGithubHookId = xGithubHookId
                    self.xGithubEvent = xGithubEvent
                    self.xGithubHookInstallationTargetId = xGithubHookInstallationTargetId
                    self.xGithubHookInstallationTargetType = xGithubHookInstallationTargetType
                    self.xGitHubDelivery = xGitHubDelivery
                    self.xHubSignature256 = xHubSignature256
                }
            }
            public var headers: Operations.DeploymentStatusCreated.Input.Headers
            /// - Remark: Generated from `#/paths/deployment-status-created/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deployment-status-created/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WebhookDeploymentStatusCreated)
            }
            public var body: Operations.DeploymentStatusCreated.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.DeploymentStatusCreated.Input.Headers = .init(),
                body: Operations.DeploymentStatusCreated.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//deployment-status-created/post(deployment-status/created)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DeploymentStatusCreated.Output.Ok)
            /// Return a 200 status to indicate that the data was received successfully
            ///
            /// - Remark: Generated from `#/paths//deployment-status-created/post(deployment-status/created)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DeploymentStatusCreated.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
}
